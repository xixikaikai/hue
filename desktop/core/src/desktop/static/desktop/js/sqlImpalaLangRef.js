// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// NOTE: This is a generated file!
// Run 'node tools/sql-docs/impalaExtractor.js' to generate.


var impalaLangRefTopics = [
{
  id: 'topics/impala_langref.xml',
  title: 'Impala SQL Language Reference',
  weight: 1,
  bodyMatch: ko.observable(),
  open: ko.observable(false),
  titleMatch: ko.observable(),
  body: '<div><p>' + 
    '      Impala uses SQL as its query language. To protect user investment in skills development and query' + 
    '      design, Impala provides a high degree of compatibility with the Hive Query Language (HiveQL):' + 
    '    </p> <ul><li>' + 
    '        Because Impala uses the same metadata store as Hive to record information about table structure and' + 
    '        properties, Impala can access tables defined through the native Impala <span class="sql-docs-inline-code">CREATE TABLE</span> ' + 
    '        command, or tables created using the Hive data definition language (DDL).' + 
    '      </li> <li>' + 
    '        Impala supports data manipulation (DML) statements similar to the DML component of HiveQL.' + 
    '      </li> <li>' + 
    '        Impala provides many <span>built-in functions</span> with the same' + 
    '        names and parameter types as their HiveQL equivalents.' + 
    '      </li> </ul> <p>' + 
    '      Impala supports most of the same <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_langref_sql.xml#langref_sql">statements and' + 
    '      clauses</a> as HiveQL, including, but not limited to <span class="sql-docs-inline-code">JOIN</span> , <span class="sql-docs-inline-code">AGGREGATE</span> ,' + 
    '      <span class="sql-docs-inline-code">DISTINCT</span> , <span class="sql-docs-inline-code">UNION ALL</span> , <span class="sql-docs-inline-code">ORDER BY</span> , <span class="sql-docs-inline-code">LIMIT</span>  and' + 
    '      (uncorrelated) subquery in the <span class="sql-docs-inline-code">FROM</span>  clause. Impala also supports <span class="sql-docs-inline-code">INSERT' + 
    '      INTO</span>  and <span class="sql-docs-inline-code">INSERT OVERWRITE</span> .' + 
    '    </p> <p>' + 
    '      Impala supports data types with the same names and semantics as the equivalent Hive data types:' + 
    '      <span class="sql-docs-inline-code">STRING</span> , <span class="sql-docs-inline-code">TINYINT</span> , <span class="sql-docs-inline-code">SMALLINT</span> , <span class="sql-docs-inline-code">INT</span> ,' + 
    '      <span class="sql-docs-inline-code">BIGINT</span> , <span class="sql-docs-inline-code">FLOAT</span> , <span class="sql-docs-inline-code">DOUBLE</span> , <span class="sql-docs-inline-code">BOOLEAN</span> ,' + 
    '      <span class="sql-docs-inline-code">STRING</span> , <span class="sql-docs-inline-code">TIMESTAMP</span> .' + 
    '    </p> <p>' + 
    '      For full details about Impala SQL syntax and semantics, see' + 
    '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_langref_sql.xml#langref_sql">Impala SQL Statements</a>.' + 
    '    </p> <p>' + 
    '      Most HiveQL <span class="sql-docs-inline-code">SELECT</span>  and <span class="sql-docs-inline-code">INSERT</span>  statements run unmodified with Impala. For' + 
    '      information about Hive syntax not available in Impala, see' + 
    '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_langref_unsupported.xml#langref_hiveql_delta">SQL Differences Between Impala and Hive</a>.' + 
    '    </p> <p>' + 
    '      For a list of the built-in functions available in Impala queries, see' + 
    '      <span>builtins</span>.' + 
    '    </p> </div> ',
  children: []
},
{
  id: 'topics/impala_comments.xml',
  title: 'Comments',
  weight: 1,
  bodyMatch: ko.observable(),
  open: ko.observable(false),
  titleMatch: ko.observable(),
  body: '<div><p>' + 
    '      Impala supports the familiar styles of SQL comments:' + 
    '    </p> <ul><li>' + 
    '        All text from a <span class="sql-docs-inline-code">--</span>  sequence to the end of the line is considered a comment and ignored.' + 
    '        This type of comment can occur on a single line by itself, or after all or part of a statement.' + 
    '      </li> <li>' + 
    '        All text from a <span class="sql-docs-inline-code">/*</span>  sequence to the next <span class="sql-docs-inline-code">*/</span>  sequence is considered a' + 
    '        comment and ignored. This type of comment can stretch over multiple lines. This type of comment can occur' + 
    '        on one or more lines by itself, in the middle of a statement, or before or after a statement.' + 
    '      </li> </ul> <p>' + 
    '      For example:' + 
    '    </p> <div class="sql-docs-code-block">-- This line is a comment about a table.<br/>create table ...;<br/><br/>/*<br/>This is a multi-line comment about a query.<br/>*/<br/>select ...;<br/><br/>select * from t /* This is an embedded comment about a query. */ where ...;<br/><br/>select * from t -- This is a trailing comment within a multi-line command.<br/>where ...;<br/></div></div> ',
  children: []
},
{
  id: 'topics/impala_datatypes.xml',
  title: 'Data Types',
  weight: 1,
  bodyMatch: ko.observable(),
  open: ko.observable(false),
  titleMatch: ko.observable(),
  body: '<div><p>' + 
    '      Impala supports a set of data types that you can use for table columns, expression values, and function' + 
    '      arguments and return values.' + 
    '    </p> <div class="sql-docs-note">' + 
    '      Currently, Impala supports only scalar types, not composite or nested types. Accessing a table containing any' + 
    '      columns with unsupported types causes an error.' + 
    '    </div> <p>' + 
    '      For the notation to write literals of each of these data types, see' + 
    '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_literals.xml#literals">Literals</a>.' + 
    '    </p> <p>' + 
    '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_langref_unsupported.xml#langref_hiveql_delta">SQL Differences Between Impala and Hive</a> for differences between Impala and' + 
    '      Hive data types.' + 
    '    </p> </div> ',
  children: [
  {
    id: 'topics/impala_array.xml',
    title: 'ARRAY Complex Type (Impala 2.3 or higher only)',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      A complex data type that can represent an arbitrary number of ordered elements.' + 
      '      The elements can be scalars or another complex type (<span class="sql-docs-inline-code">ARRAY</span> ,' + 
      '      <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ).' + 
      '    </p> <p id="../Impala/docs/topics/impala_array.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">column_name</span> ARRAY < <span class="sql-docs-variable">type</span> ><br/><br/>type ::= <span class="sql-docs-variable">primitive_type</span> | <span class="sql-docs-variable">complex_type</span> </div><p id="../Impala/docs/topics/impala_array.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p id="../Impala/docs/topics/impala_array.xml_complex_types_combo">' + 
      '        Because complex types are often used in combination,' + 
      '        for example an <span class="sql-docs-inline-code">ARRAY</span>  of <span class="sql-docs-inline-code">STRUCT</span> ' + 
      '        elements, if you are unfamiliar with the Impala complex types,' + 
      '        start with <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a> for' + 
      '        background information and usage examples.' + 
      '      </p> <p>' + 
      '        The elements of the array have no names. You refer to the value of the array item using the' + 
      '        <span class="sql-docs-inline-code">ITEM</span>  pseudocolumn, or its position in the array with the <span class="sql-docs-inline-code">POS</span> ' + 
      '        pseudocolumn. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#item"><h4 id="../Impala/docs/topics/impala_complex_types.xml_pos">ITEM and POS Pseudocolumns</h4> </a> for information about' + 
      '        these pseudocolumns.' + 
      '      </p> <p>' + 
      '      Each row can have a different number of elements (including none) in the array for that row.' + 
      '    </p> <p>' + 
      '        When an array contains items of scalar types, you can use aggregation functions on the array elements without using join notation. For' + 
      '        example, you can find the <span class="sql-docs-inline-code">COUNT()</span> , <span class="sql-docs-inline-code">AVG()</span> , <span class="sql-docs-inline-code">SUM()</span> , and so on of numeric array' + 
      '        elements, or the <span class="sql-docs-inline-code">MAX()</span>  and <span class="sql-docs-inline-code">MIN()</span>  of any scalar array elements by referring to' + 
      '        <span class="sql-docs-inline-code"><span class="sql-docs-variable">table_name</span> .<span class="sql-docs-variable">array_column</span> </span>  in the <span class="sql-docs-inline-code">FROM</span>  clause of the query. When' + 
      '        you need to cross-reference values from the array with scalar values from the same row, such as by including a <span class="sql-docs-inline-code">GROUP' + 
      '        BY</span>  clause to produce a separate aggregated result for each row, then the join clause is required.' + 
      '      </p> <p>' + 
      '        A common usage pattern with complex types is to have an array as the top-level type for the column:' + 
      '        an array of structs, an array of maps, or an array of arrays.' + 
      '        For example, you can model a denormalized table by creating a column that is an <span class="sql-docs-inline-code">ARRAY</span> ' + 
      '        of <span class="sql-docs-inline-code">STRUCT</span>  elements; each item in the array represents a row from a table that would' + 
      '        normally be used in a join query. This kind of data structure lets you essentially denormalize tables by' + 
      '        associating multiple rows from one table with the matching row in another table.' + 
      '      </p> <p>' + 
      '        You typically do not create more than one top-level <span class="sql-docs-inline-code">ARRAY</span>  column, because if there is' + 
      '        some relationship between the elements of multiple arrays, it is convenient to model the data as' + 
      '        an array of another complex type element (either <span class="sql-docs-inline-code">STRUCT</span>  or <span class="sql-docs-inline-code">MAP</span> ).' + 
      '      </p> <p id="../Impala/docs/topics/impala_array.xml_complex_types_describe">' + 
      '        You can pass a multi-part qualified name to <span class="sql-docs-inline-code">DESCRIBE</span> ' + 
      '        to specify an <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ' + 
      '        column and visualize its structure as if it were a table.' + 
      '        For example, if table <span class="sql-docs-inline-code">T1</span>  contains an <span class="sql-docs-inline-code">ARRAY</span>  column' + 
      '        <span class="sql-docs-inline-code">A1</span> , you could issue the statement <span class="sql-docs-inline-code">DESCRIBE t1.a1</span> .' + 
      '        If table <span class="sql-docs-inline-code">T1</span>  contained a <span class="sql-docs-inline-code">STRUCT</span>  column <span class="sql-docs-inline-code">S1</span> ,' + 
      '        and a field <span class="sql-docs-inline-code">F1</span>  within the <span class="sql-docs-inline-code">STRUCT</span>  was a <span class="sql-docs-inline-code">MAP</span> ,' + 
      '        you could issue the statement <span class="sql-docs-inline-code">DESCRIBE t1.s1.f1</span> .' + 
      '        An <span class="sql-docs-inline-code">ARRAY</span>  is shown as a two-column table, with' + 
      '        <span class="sql-docs-inline-code">ITEM</span>  and <span class="sql-docs-inline-code">POS</span>  columns.' + 
      '        A <span class="sql-docs-inline-code">STRUCT</span>  is shown as a table with each field' + 
      '        representing a column in the table.' + 
      '        A <span class="sql-docs-inline-code">MAP</span>  is shown as a two-column table, with' + 
      '        <span class="sql-docs-inline-code">KEY</span>  and <span class="sql-docs-inline-code">VALUE</span>  columns.' + 
      '      </p> <p id="../Impala/docs/topics/impala_array.xml_added_in_230"><b>Added in:</b> Impala 2.3.0</p> <p id="../Impala/docs/topics/impala_array.xml_restrictions_blurb"><b>Restrictions:</b> </p> <ul></ul> <p id="../Impala/docs/topics/impala_array.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p id="../Impala/docs/topics/impala_array.xml_kudu_unsupported_data_type">' + 
      '        Currently, the data types <span class="sql-docs-inline-code">CHAR</span> , <span class="sql-docs-inline-code">VARCHAR</span> ,' + 
      '        <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">MAP</span> , and <span class="sql-docs-inline-code">STRUCT</span>  cannot be used with Kudu tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_array.xml_example_blurb"><b>Examples:</b> </p> <div id="../Impala/docs/topics/impala_array.xml_complex_type_schema_pointer" class="sql-docs-note">' + 
      '      Many of the complex type examples refer to tables' + 
      '      such as <span class="sql-docs-inline-code">CUSTOMER</span>  and <span class="sql-docs-inline-code">REGION</span> ' + 
      '      adapted from the tables used in the TPC-H benchmark.' + 
      '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_sample_schema"><h4>Sample Schema and Data for Experimenting with Impala Complex Types</h4> </a>' + 
      '      for the table definitions.' + 
      '      </div> <p>' + 
      '        The following example shows how to construct a table with various kinds of <span class="sql-docs-inline-code">ARRAY</span>  columns,' + 
      '        both at the top level and nested within other complex types.' + 
      '        Whenever the <span class="sql-docs-inline-code">ARRAY</span>  consists of a scalar value, such as in the <span class="sql-docs-inline-code">PETS</span> ' + 
      '        column or the <span class="sql-docs-inline-code">CHILDREN</span>  field, you can see that future expansion is limited.' + 
      '        For example, you could not easily evolve the schema to record the kind of pet or the child\'s birthday alongside the name.' + 
      '        Therefore, it is more common to use an <span class="sql-docs-inline-code">ARRAY</span>  whose elements are of <span class="sql-docs-inline-code">STRUCT</span>  type,' + 
      '        to associate multiple fields with each array element.' + 
      '      </p> <div class="sql-docs-note">' + 
      '        Practice the <span class="sql-docs-inline-code">CREATE TABLE</span>  and query notation for complex type columns' + 
      '        using empty tables, until you can visualize a complex data structure and construct corresponding SQL statements reliably.' + 
      '      </div> <div class="sql-docs-code-block"></div><p>' + 
      '      The following example shows how to examine the structure of a table containing one or more <span class="sql-docs-inline-code">ARRAY</span>  columns by using the' + 
      '      <span class="sql-docs-inline-code">DESCRIBE</span>  statement. You can visualize each <span class="sql-docs-inline-code">ARRAY</span>  as its own two-column table, with columns' + 
      '      <span class="sql-docs-inline-code">ITEM</span>  and <span class="sql-docs-inline-code">POS</span> .' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      The following example shows queries involving <span class="sql-docs-inline-code">ARRAY</span>  columns containing elements of scalar or complex types. You' + 
      '      <q>unpack</q>  each <span class="sql-docs-inline-code">ARRAY</span>  column by referring to it in a join query, as if it were a separate table with' + 
      '      <span class="sql-docs-inline-code">ITEM</span>  and <span class="sql-docs-inline-code">POS</span>  columns. If the array element is a scalar type, you refer to its value using the' + 
      '      <span class="sql-docs-inline-code">ITEM</span>  pseudocolumn. If the array element is a <span class="sql-docs-inline-code">STRUCT</span> , you refer to the <span class="sql-docs-inline-code">STRUCT</span>  fields' + 
      '      using dot notation and the field names. If the array element is another <span class="sql-docs-inline-code">ARRAY</span>  or a <span class="sql-docs-inline-code">MAP</span> , you use' + 
      '      another level of join to unpack the nested collection elements.' + 
      '    </p> <div class="sql-docs-code-block"></div><p id="../Impala/docs/topics/impala_array.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a>,' + 
      '<a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_struct.xml#struct">STRUCT Complex Type (Impala 2.3 or higher only)</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_map.xml#map">MAP Complex Type (Impala 2.3 or higher only)</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_bigint.xml',
    title: 'BIGINT Data Type',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      An 8-byte integer data type used in <span class="sql-docs-inline-code">CREATE TABLE</span>  and <span class="sql-docs-inline-code">ALTER TABLE</span> ' + 
      '      statements.' + 
      '    </p> <p id="../Impala/docs/topics/impala_bigint.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
      '      In the column definition of a <span class="sql-docs-inline-code">CREATE TABLE</span>  statement:' + 
      '    </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">column_name</span> BIGINT</div><p><b>Range:</b>  -9223372036854775808 .. 9223372036854775807. There is no <span class="sql-docs-inline-code">UNSIGNED</span>  subtype.' + 
      '    </p> <p><b>Conversions:</b>  Impala automatically converts to a floating-point type (<span class="sql-docs-inline-code">FLOAT</span>  or' + 
      '      <span class="sql-docs-inline-code">DOUBLE</span> ) automatically. Use <span class="sql-docs-inline-code">CAST()</span>  to convert to <span class="sql-docs-inline-code">TINYINT</span> ,' + 
      '      <span class="sql-docs-inline-code">SMALLINT</span> , <span class="sql-docs-inline-code">INT</span> , <span class="sql-docs-inline-code">STRING</span> , or <span class="sql-docs-inline-code">TIMESTAMP</span> .' + 
      '      <span id="../Impala/docs/topics/impala_bigint.xml_cast_int_to_timestamp" class="sql-docs-inline-code">' + 
      '          Casting an integer or floating-point value <span class="sql-docs-inline-code">N</span>  to' + 
      '        <span class="sql-docs-inline-code">TIMESTAMP</span>  produces a value that is <span class="sql-docs-inline-code">N</span>  seconds past the start of the epoch' + 
      '        date (January 1, 1970). By default, the result value represents a date and time in the UTC time zone.' + 
      '        If the setting <span class="sql-docs-inline-code">--use_local_tz_for_unix_timestamp_conversions=true</span>  is in effect,' + 
      '        the resulting <span class="sql-docs-inline-code">TIMESTAMP</span>  represents a date and time in the local time zone.' + 
      '        </span> </p> <p id="../Impala/docs/topics/impala_bigint.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">CREATE TABLE t1 (x BIGINT);<br/>SELECT CAST(1000 AS BIGINT);<br/></div><p id="../Impala/docs/topics/impala_bigint.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p><span class="sql-docs-inline-code">BIGINT</span>  is a convenient type to use for column declarations because you can use any kind of' + 
      '      integer values in <span class="sql-docs-inline-code">INSERT</span>  statements and they are promoted to <span class="sql-docs-inline-code">BIGINT</span>  where' + 
      '      necessary. However, <span class="sql-docs-inline-code">BIGINT</span>  also requires the most bytes of any integer type on disk and in' + 
      '      memory, meaning your queries are not as efficient and scalable as possible if you overuse this type.' + 
      '      Therefore, prefer to use the smallest integer type with sufficient range to hold all input values, and' + 
      '      <span class="sql-docs-inline-code">CAST()</span>  when necessary to the appropriate type.' + 
      '    </p> <p>' + 
      '      For a convenient and automated way to check the bounds of the <span class="sql-docs-inline-code">BIGINT</span>  type, call the' + 
      '      functions <span class="sql-docs-inline-code">MIN_BIGINT()</span>  and <span class="sql-docs-inline-code">MAX_BIGINT()</span> .' + 
      '    </p> <p>' + 
      '      If an integer value is too large to be represented as a <span class="sql-docs-inline-code">BIGINT</span> , use a' + 
      '      <span class="sql-docs-inline-code">DECIMAL</span>  instead with sufficient digits of precision.' + 
      '    </p> <p id="../Impala/docs/topics/impala_bigint.xml_null_bad_numeric_cast"><b>NULL considerations:</b>  Casting any non-numeric value to this type produces a <span class="sql-docs-inline-code">NULL</span> ' + 
      '        value.' + 
      '      </p> <p id="../Impala/docs/topics/impala_bigint.xml_partitioning_good"><b>Partitioning:</b>  Prefer to use this type for a partition key column. Impala can process the numeric' + 
      '        type more efficiently than a <span class="sql-docs-inline-code">STRING</span>  representation of the value.' + 
      '      </p> <p id="../Impala/docs/topics/impala_bigint.xml_hbase_ok"><b>HBase considerations:</b>  This data type is fully compatible with HBase tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_bigint.xml_text_bulky"><b>Text table considerations:</b>  Values of this type are potentially larger in text tables than in tables' + 
      '        using Parquet or other binary formats.' + 
      '      </p> <p id="../Impala/docs/topics/impala_bigint.xml_internals_8_bytes"><b>Internal details:</b>  Represented in memory as an 8-byte value.' + 
      '      </p> <p id="../Impala/docs/topics/impala_bigint.xml_added_forever"><b>Added in:</b>  Available in all versions of Impala.' + 
      '      </p> <p id="../Impala/docs/topics/impala_bigint.xml_column_stats_constant"><b>Column statistics considerations:</b>  Because this type has a fixed size, the maximum and average size' + 
      '        fields are always filled in for column statistics, even before you run the <span class="sql-docs-inline-code">COMPUTE STATS</span> ' + 
      '        statement.' + 
      '      </p> <p id="../Impala/docs/topics/impala_bigint.xml_sqoop_blurb"><b>Sqoop considerations:</b> </p> <p id="../Impala/docs/topics/impala_bigint.xml_sqoop_timestamp_caveat"> If you use Sqoop to' + 
      '        convert RDBMS data to Parquet, be careful with interpreting any' + 
      '        resulting values from <span class="sql-docs-inline-code">DATE</span> , <span class="sql-docs-inline-code">DATETIME</span> ,' + 
      '        or <span class="sql-docs-inline-code">TIMESTAMP</span>  columns. The underlying values are' + 
      '        represented as the Parquet <span class="sql-docs-inline-code">INT64</span>  type, which is' + 
      '        represented as <span class="sql-docs-inline-code">BIGINT</span>  in the Impala table. The Parquet' + 
      '        values represent the time in milliseconds, while Impala interprets' + 
      '          <span class="sql-docs-inline-code">BIGINT</span>  as the time in seconds. Therefore, if you have' + 
      '        a <span class="sql-docs-inline-code">BIGINT</span>  column in a Parquet table that was imported' + 
      '        this way from Sqoop, divide the values by 1000 when interpreting as the' + 
      '          <span class="sql-docs-inline-code">TIMESTAMP</span>  type.</p> <p id="../Impala/docs/topics/impala_bigint.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_literals.xml#numeric_literals"><h4>Numeric Literals</h4> </a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tinyint.xml#tinyint">TINYINT Data Type</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_smallint.xml#smallint">SMALLINT Data Type</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_int.xml#int">INT Data Type</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_bigint.xml#bigint">BIGINT Data Type</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_decimal.xml#decimal">DECIMAL Data Type (Impala 1.4 or higher only)</a>,' + 
      '      <span>math functions</span></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_boolean.xml',
    title: 'BOOLEAN Data Type',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      A data type used in <span class="sql-docs-inline-code">CREATE TABLE</span>  and <span class="sql-docs-inline-code">ALTER TABLE</span>  statements, representing a' + 
      '      single true/false choice.' + 
      '    </p> <p id="../Impala/docs/topics/impala_boolean.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
      '      In the column definition of a <span class="sql-docs-inline-code">CREATE TABLE</span>  statement:' + 
      '    </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">column_name</span> BOOLEAN</div><p><b>Range:</b> <span class="sql-docs-inline-code">TRUE</span>  or <span class="sql-docs-inline-code">FALSE</span> . Do not use quotation marks around the' + 
      '      <span class="sql-docs-inline-code">TRUE</span>  and <span class="sql-docs-inline-code">FALSE</span>  literal values. You can write the literal values in' + 
      '      uppercase, lowercase, or mixed case. The values queried from a table are always returned in lowercase,' + 
      '      <span class="sql-docs-inline-code">true</span>  or <span class="sql-docs-inline-code">false</span> .' + 
      '    </p> <p><b>Conversions:</b>  Impala does not automatically convert any other type to <span class="sql-docs-inline-code">BOOLEAN</span> . All' + 
      '      conversions must use an explicit call to the <span class="sql-docs-inline-code">CAST()</span>  function.' + 
      '    </p> <p>' + 
      '      You can use <span class="sql-docs-inline-code">CAST()</span>  to convert' + 
      '' + 
      '      any integer or floating-point type to' + 
      '      <span class="sql-docs-inline-code">BOOLEAN</span> : a value of 0 represents <span class="sql-docs-inline-code">false</span> , and any non-zero value is converted' + 
      '      to <span class="sql-docs-inline-code">true</span> .' + 
      '    </p> <div class="sql-docs-code-block">SELECT CAST(42 AS BOOLEAN) AS nonzero_int, CAST(99.44 AS BOOLEAN) AS nonzero_decimal,<br/>  CAST(000 AS BOOLEAN) AS zero_int, CAST(0.0 AS BOOLEAN) AS zero_decimal;<br/>+-------------+-----------------+----------+--------------+<br/>| nonzero_int | nonzero_decimal | zero_int | zero_decimal |<br/>+-------------+-----------------+----------+--------------+<br/>| true        | true            | false    | false        |<br/>+-------------+-----------------+----------+--------------+<br/></div><p>' + 
      '      When you cast the opposite way, from <span class="sql-docs-inline-code">BOOLEAN</span>  to a numeric type,' + 
      '      the result becomes either 1 or 0:' + 
      '    </p> <div class="sql-docs-code-block">SELECT CAST(true AS INT) AS true_int, CAST(true AS DOUBLE) AS true_double,<br/>  CAST(false AS INT) AS false_int, CAST(false AS DOUBLE) AS false_double;<br/>+----------+-------------+-----------+--------------+<br/>| true_int | true_double | false_int | false_double |<br/>+----------+-------------+-----------+--------------+<br/>| 1        | 1           | 0         | 0            |<br/>+----------+-------------+-----------+--------------+<br/></div><p>' + 
      '      You can cast <span class="sql-docs-inline-code">DECIMAL</span>  values to <span class="sql-docs-inline-code">BOOLEAN</span> , with the same treatment of zero and' + 
      '      non-zero values as the other numeric types. You cannot cast a <span class="sql-docs-inline-code">BOOLEAN</span>  to a' + 
      '      <span class="sql-docs-inline-code">DECIMAL</span> .' + 
      '    </p> <p>' + 
      '      You cannot cast a <span class="sql-docs-inline-code">STRING</span>  value to <span class="sql-docs-inline-code">BOOLEAN</span> , although you can cast a' + 
      '      <span class="sql-docs-inline-code">BOOLEAN</span>  value to <span class="sql-docs-inline-code">STRING</span> , returning <span class="sql-docs-inline-code">\'1\'</span>  for' + 
      '      <span class="sql-docs-inline-code">true</span>  values and <span class="sql-docs-inline-code">\'0\'</span>  for <span class="sql-docs-inline-code">false</span>  values.' + 
      '    </p> <p>' + 
      '      Although you can cast a <span class="sql-docs-inline-code">TIMESTAMP</span>  to a <span class="sql-docs-inline-code">BOOLEAN</span>  or a' + 
      '      <span class="sql-docs-inline-code">BOOLEAN</span>  to a <span class="sql-docs-inline-code">TIMESTAMP</span> , the results are unlikely to be useful. Any non-zero' + 
      '      <span class="sql-docs-inline-code">TIMESTAMP</span>  (that is, any value other than <span class="sql-docs-inline-code">1970-01-01 00:00:00</span> ) becomes' + 
      '      <span class="sql-docs-inline-code">TRUE</span>  when converted to <span class="sql-docs-inline-code">BOOLEAN</span> , while <span class="sql-docs-inline-code">1970-01-01 00:00:00</span> ' + 
      '      becomes <span class="sql-docs-inline-code">FALSE</span> . A value of <span class="sql-docs-inline-code">FALSE</span>  becomes <span class="sql-docs-inline-code">1970-01-01' + 
      '      00:00:00</span>  when converted to <span class="sql-docs-inline-code">BOOLEAN</span> , and <span class="sql-docs-inline-code">TRUE</span>  becomes one second' + 
      '      past this epoch date, that is, <span class="sql-docs-inline-code">1970-01-01 00:00:01</span> .' + 
      '    </p> <p id="../Impala/docs/topics/impala_boolean.xml_null_null_arguments"><b>NULL considerations:</b>  An expression of this type produces a <span class="sql-docs-inline-code">NULL</span>  value if any' + 
      '        argument of the expression is <span class="sql-docs-inline-code">NULL</span> .' + 
      '      </p> <p id="../Impala/docs/topics/impala_boolean.xml_partitioning_blurb"><b>Partitioning:</b> </p> <p>' + 
      '      Do not use a <span class="sql-docs-inline-code">BOOLEAN</span>  column as a partition key. Although you can create such a table,' + 
      '      subsequent operations produce errors:' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > create table truth_table (assertion string) partitioned by (truth boolean);<br/>[localhost:21000] > insert into truth_table values (\'Pigs can fly\',false);<br/>ERROR: AnalysisException: INSERT into table with BOOLEAN partition column (truth) is not supported: partitioning.truth_table<br/></div><p id="../Impala/docs/topics/impala_boolean.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">SELECT 1 < 2;<br/>SELECT 2 = 5;<br/>SELECT 100 < NULL, 100 > NULL;<br/>CREATE TABLE assertions (claim STRING, really BOOLEAN);<br/>INSERT INTO assertions VALUES<br/>  ("1 is less than 2", 1 < 2),<br/>  ("2 is the same as 5", 2 = 5),<br/>  ("Grass is green", true),<br/>  ("The moon is made of green cheese", false);<br/>SELECT claim FROM assertions WHERE really = TRUE;<br/></div><p id="../Impala/docs/topics/impala_boolean.xml_hbase_ok"><b>HBase considerations:</b>  This data type is fully compatible with HBase tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_boolean.xml_parquet_ok"><b>Parquet considerations:</b>  This type is fully compatible with Parquet tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_boolean.xml_text_bulky"><b>Text table considerations:</b>  Values of this type are potentially larger in text tables than in tables' + 
      '        using Parquet or other binary formats.' + 
      '      </p> <p id="../Impala/docs/topics/impala_boolean.xml_column_stats_constant"><b>Column statistics considerations:</b>  Because this type has a fixed size, the maximum and average size' + 
      '        fields are always filled in for column statistics, even before you run the <span class="sql-docs-inline-code">COMPUTE STATS</span> ' + 
      '        statement.' + 
      '      </p> <p id="../Impala/docs/topics/impala_boolean.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p id="../Impala/docs/topics/impala_boolean.xml_kudu_non_pk_data_type">' + 
      '        Currently, the data types <span class="sql-docs-inline-code">BOOLEAN</span> , <span class="sql-docs-inline-code">FLOAT</span> ,' + 
      '        and <span class="sql-docs-inline-code">DOUBLE</span>  cannot be used for primary key columns in Kudu tables.' + 
      '      </p> <p><b>Related information:</b> <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_literals.xml#boolean_literals"><h4>Boolean Literals</h4> </a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_operators.xml#operators">SQL Operators</a>,' + 
      '      <span>conditional functions</span></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_char.xml',
    title: 'CHAR Data Type (Impala 2.0 or higher only)',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      A fixed-length character type, padded with trailing spaces if necessary to achieve the specified length. If' + 
      '      values are longer than the specified length, Impala truncates any trailing characters.' + 
      '    </p> <p id="../Impala/docs/topics/impala_char.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
      '      In the column definition of a <span class="sql-docs-inline-code">CREATE TABLE</span>  statement:' + 
      '    </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">column_name</span> CHAR(<span class="sql-docs-variable">length</span> )</div><p>' + 
      '      The maximum length you can specify is 255.' + 
      '    </p> <p><b>Semantics of trailing spaces:</b> </p> <ul><li>' + 
      '        When you store a <span class="sql-docs-inline-code">CHAR</span>  value shorter than the specified length in a table, queries return' + 
      '        the value padded with trailing spaces if necessary; the resulting value has the same length as specified in' + 
      '        the column definition.' + 
      '      </li> <li>' + 
      '        If you store a <span class="sql-docs-inline-code">CHAR</span>  value containing trailing spaces in a table, those trailing spaces are' + 
      '        not stored in the data file. When the value is retrieved by a query, the result could have a different' + 
      '        number of trailing spaces. That is, the value includes however many spaces are needed to pad it to the' + 
      '        specified length of the column.' + 
      '      </li> <li>' + 
      '        If you compare two <span class="sql-docs-inline-code">CHAR</span>  values that differ only in the number of trailing spaces, those' + 
      '        values are considered identical.' + 
      '      </li> </ul> <p id="../Impala/docs/topics/impala_char.xml_partitioning_bad"><b>Partitioning:</b>  This type can be used for partition key columns. Because of the efficiency advantage' + 
      '        of numeric values over character-based values, if the partition key is a string representation of a number,' + 
      '        prefer to use an integer type with sufficient range (<span class="sql-docs-inline-code">INT</span> , <span class="sql-docs-inline-code">BIGINT</span> , and so' + 
      '        on) where practical.' + 
      '      </p> <p id="../Impala/docs/topics/impala_char.xml_hbase_no"><b>HBase considerations:</b>  This data type cannot be used with HBase tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_char.xml_parquet_blurb"><b>Parquet considerations:</b> </p> <ul><li>' + 
      '        This type can be read from and written to Parquet files.' + 
      '      </li> <li>' + 
      '        There is no requirement for a particular level of Parquet.' + 
      '      </li> <li>' + 
      '        Parquet files generated by Impala and containing this type can be freely interchanged with other components' + 
      '        such as Hive and MapReduce.' + 
      '      </li> <li>' + 
      '        Any trailing spaces, whether implicitly or explicitly specified, are not written to the Parquet data files.' + 
      '      </li> <li>' + 
      '        Parquet data files might contain values that are longer than allowed by the' + 
      '        <span class="sql-docs-inline-code">CHAR(<span class="sql-docs-variable">n</span> )</span>  length limit. Impala ignores any extra trailing characters when' + 
      '        it processes those values during a query.' + 
      '      </li> </ul> <p id="../Impala/docs/topics/impala_char.xml_text_blurb"><b>Text table considerations:</b> </p> <p>' + 
      '      Text data files might contain values that are longer than allowed for a particular' + 
      '      <span class="sql-docs-inline-code">CHAR(<span class="sql-docs-variable">n</span> )</span>  column. Any extra trailing characters are ignored when Impala' + 
      '      processes those values during a query. Text data files can also contain values that are shorter than the' + 
      '      defined length limit, and Impala pads them with trailing spaces up to the specified length. Any text data' + 
      '      files produced by Impala <span class="sql-docs-inline-code">INSERT</span>  statements do not include any trailing blanks for' + 
      '      <span class="sql-docs-inline-code">CHAR</span>  columns.' + 
      '    </p> <p><b>Avro considerations:</b> </p> <p id="../Impala/docs/topics/impala_char.xml_avro_2gb_strings">' + 
      '        The Avro specification allows string values up to 2**64 bytes in length.' + 
      '        Impala queries for Avro tables use 32-bit integers to hold string lengths.' + 
      '        In Impala 2.5 and higher, Impala truncates <span class="sql-docs-inline-code">CHAR</span> ' + 
      '        and <span class="sql-docs-inline-code">VARCHAR</span>  values in Avro tables to (2**31)-1 bytes.' + 
      '        If a query encounters a <span class="sql-docs-inline-code">STRING</span>  value longer than (2**31)-1' + 
      '        bytes in an Avro table, the query fails. In earlier releases,' + 
      '        encountering such long values in an Avro table could cause a crash.' + 
      '      </p> <p id="../Impala/docs/topics/impala_char.xml_compatibility_blurb"><b>Compatibility:</b> </p> <p>' + 
      '      This type is available using Impala 2.0 or higher.' + 
      '    </p> <p>' + 
      '      Some other database systems make the length specification optional. For Impala, the length is required.' + 
      '    </p> <p id="../Impala/docs/topics/impala_char.xml_internals_max_bytes"><b>Internal details:</b>  Represented in memory as a byte array with the same size as the length' + 
      '        specification. Values that are shorter than the specified length are padded on the right with trailing' + 
      '        spaces.' + 
      '      </p> <p id="../Impala/docs/topics/impala_char.xml_added_in_20"><b>Added in:</b> Impala 2.0.0</p> <p id="../Impala/docs/topics/impala_char.xml_column_stats_constant"><b>Column statistics considerations:</b>  Because this type has a fixed size, the maximum and average size' + 
      '        fields are always filled in for column statistics, even before you run the <span class="sql-docs-inline-code">COMPUTE STATS</span> ' + 
      '        statement.' + 
      '      </p> <p id="../Impala/docs/topics/impala_char.xml_udf_blurb_no"><b>UDF considerations:</b>  This type cannot be used for the argument or return type of a user-defined' + 
      '        function (UDF) or user-defined aggregate function (UDA).' + 
      '      </p> <p id="../Impala/docs/topics/impala_char.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      These examples show how trailing spaces are not considered significant when comparing or processing' + 
      '      <span class="sql-docs-inline-code">CHAR</span>  values. <span class="sql-docs-inline-code">CAST()</span>  truncates any longer string to fit within the defined' + 
      '      length. If a <span class="sql-docs-inline-code">CHAR</span>  value is shorter than the specified length, it is padded on the right with' + 
      '      spaces until it matches the specified length. Therefore, <span class="sql-docs-inline-code">LENGTH()</span>  represents the length' + 
      '      including any trailing spaces, and <span class="sql-docs-inline-code">CONCAT()</span>  also treats the column value as if it has' + 
      '      trailing spaces.' + 
      '    </p> <div class="sql-docs-code-block">select cast(\'x\' as char(4)) = cast(\'x   \' as char(4)) as "unpadded equal to padded";<br/>+--------------------------+<br/>| unpadded equal to padded |<br/>+--------------------------+<br/>| true                     |<br/>+--------------------------+<br/><br/>create table char_length(c char(3));<br/>insert into char_length values (cast(\'1\' as char(3))), (cast(\'12\' as char(3))), (cast(\'123\' as char(3))), (cast(\'123456\' as char(3)));<br/>select concat("[",c,"]") as c, length(c) from char_length;<br/>+-------+-----------+<br/>| c     | length(c) |<br/>+-------+-----------+<br/>| [1  ] | 3         |<br/>| [12 ] | 3         |<br/>| [123] | 3         |<br/>| [123] | 3         |<br/>+-------+-----------+<br/></div><p>' + 
      '      This example shows a case where data values are known to have a specific length, where <span class="sql-docs-inline-code">CHAR</span> ' + 
      '      is a logical data type to use.' + 
      '</p> <div class="sql-docs-code-block">create table addresses<br/>  (id bigint,<br/>   street_name string,<br/>   state_abbreviation char(2),<br/>   country_abbreviation char(2));<br/></div><p>' + 
      '      The following example shows how values written by Impala do not physically include the trailing spaces. It' + 
      '      creates a table using text format, with <span class="sql-docs-inline-code">CHAR</span>  values much shorter than the declared length,' + 
      '      and then prints the resulting data file to show that the delimited values are not separated by spaces. The' + 
      '      same behavior applies to binary-format Parquet data files.' + 
      '    </p> <div class="sql-docs-code-block">create table char_in_text (a char(20), b char(30), c char(40))<br/>  row format delimited fields terminated by \',\';<br/><br/>insert into char_in_text values (cast(\'foo\' as char(20)), cast(\'bar\' as char(30)), cast(\'baz\' as char(40))), (cast(\'hello\' as char(20)), cast(\'goodbye\' as char(30)), cast(\'aloha\' as char(40)));<br/><br/>-- Running this Linux command inside impala-shell using the ! shortcut.<br/>!hdfs dfs -cat \'hdfs://127.0.0.1:8020/user/hive/warehouse/impala_doc_testing.db/char_in_text/*.*\';<br/>foo,bar,baz<br/>hello,goodbye,aloha<br/></div><p>' + 
      '      The following example further illustrates the treatment of spaces. It replaces the contents of the previous' + 
      '      table with some values including leading spaces, trailing spaces, or both. Any leading spaces are preserved' + 
      '      within the data file, but trailing spaces are discarded. Then when the values are retrieved by a query, the' + 
      '      leading spaces are retrieved verbatim while any necessary trailing spaces are supplied by Impala.' + 
      '    </p> <div class="sql-docs-code-block">insert overwrite char_in_text values (cast(\'trailing   \' as char(20)), cast(\'   leading and trailing   \' as char(30)), cast(\'   leading\' as char(40)));<br/>!hdfs dfs -cat \'hdfs://127.0.0.1:8020/user/hive/warehouse/impala_doc_testing.db/char_in_text/*.*\';<br/>trailing,   leading and trailing,   leading<br/><br/>select concat(\'[\',a,\']\') as a, concat(\'[\',b,\']\') as b, concat(\'[\',c,\']\') as c from char_in_text;<br/>+------------------------+----------------------------------+--------------------------------------------+<br/>| a                      | b                                | c                                          |<br/>+------------------------+----------------------------------+--------------------------------------------+<br/>| [trailing            ] | [   leading and trailing       ] | [   leading                              ] |<br/>+------------------------+----------------------------------+--------------------------------------------+<br/></div><p id="../Impala/docs/topics/impala_char.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p id="../Impala/docs/topics/impala_char.xml_kudu_unsupported_data_type">' + 
      '        Currently, the data types <span class="sql-docs-inline-code">CHAR</span> , <span class="sql-docs-inline-code">VARCHAR</span> ,' + 
      '        <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">MAP</span> , and <span class="sql-docs-inline-code">STRUCT</span>  cannot be used with Kudu tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_char.xml_restrictions_blurb"><b>Restrictions:</b> </p> <p>' + 
      '      Because the blank-padding behavior requires allocating the maximum length for each value in memory, for' + 
      '      scalability reasons avoid declaring <span class="sql-docs-inline-code">CHAR</span>  columns that are much longer than typical values in' + 
      '      that column.' + 
      '    </p> <p id="../Impala/docs/topics/impala_char.xml_blobs_are_strings">' + 
      '        All data in <span class="sql-docs-inline-code">CHAR</span>  and <span class="sql-docs-inline-code">VARCHAR</span>  columns must be in a character encoding that' + 
      '        is compatible with UTF-8. If you have binary data from another database system (that is, a BLOB type), use' + 
      '        a <span class="sql-docs-inline-code">STRING</span>  column to hold it.' + 
      '      </p> <p>' + 
      '      When an expression compares a <span class="sql-docs-inline-code">CHAR</span>  with a <span class="sql-docs-inline-code">STRING</span>  or' + 
      '      <span class="sql-docs-inline-code">VARCHAR</span> , the <span class="sql-docs-inline-code">CHAR</span>  value is implicitly converted to <span class="sql-docs-inline-code">STRING</span> ' + 
      '      first, with trailing spaces preserved.' + 
      '    </p> <div class="sql-docs-code-block">select cast("foo  " as char(5)) = \'foo\' as "char equal to string";<br/>+----------------------+<br/>| char equal to string |<br/>+----------------------+<br/>| false                |<br/>+----------------------+<br/></div><p>' + 
      '      This behavior differs from other popular database systems. To get the expected result of' + 
      '      <span class="sql-docs-inline-code">TRUE</span> , cast the expressions on both sides to <span class="sql-docs-inline-code">CHAR</span>  values of the appropriate' + 
      '      length:' + 
      '    </p> <div class="sql-docs-code-block">select cast("foo  " as char(5)) = cast(\'foo\' as char(3)) as "char equal to string";<br/>+----------------------+<br/>| char equal to string |<br/>+----------------------+<br/>| true                 |<br/>+----------------------+<br/></div><p>' + 
      '      This behavior is subject to change in future releases.' + 
      '    </p> <p id="../Impala/docs/topics/impala_char.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_string.xml#string">STRING Data Type</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_varchar.xml#varchar">VARCHAR Data Type (Impala 2.0 or higher only)</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_literals.xml#string_literals"><h4>String Literals</h4> </a>,' + 
      '      <span>string functions</span></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_decimal.xml',
    title: 'DECIMAL Data Type (Impala 1.4 or higher only)',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      A numeric data type with fixed scale and precision, used in <span class="sql-docs-inline-code">CREATE TABLE</span>  and <span class="sql-docs-inline-code">ALTER' + 
      '      TABLE</span>  statements. Suitable for financial and other arithmetic calculations where the imprecise' + 
      '      representation and rounding behavior of <span class="sql-docs-inline-code">FLOAT</span>  and <span class="sql-docs-inline-code">DOUBLE</span>  make those types' + 
      '      impractical.' + 
      '    </p> <p id="../Impala/docs/topics/impala_decimal.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
      '      In the column definition of a <span class="sql-docs-inline-code">CREATE TABLE</span>  statement:' + 
      '    </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">column_name</span> DECIMAL[(<span class="sql-docs-variable">precision</span> [,<span class="sql-docs-variable">scale</span> ])]</div><p><span class="sql-docs-inline-code">DECIMAL</span>  with no precision or scale values is equivalent to <span class="sql-docs-inline-code">DECIMAL(9,0)</span> .' + 
      '    </p> <p><b>Precision and Scale:</b> </p> <p><span class="sql-docs-variable">precision</span>  represents the total number of digits that can be represented by the column,' + 
      '      regardless of the location of the decimal point. This value must be between 1 and 38. For example,' + 
      '      representing integer values up to 9999, and floating-point values up to 99.99, both require a precision of 4.' + 
      '      You can also represent corresponding negative values, without any change in the precision. For example, the' + 
      '      range -9999 to 9999 still only requires a precision of 4.' + 
      '    </p> <p><span class="sql-docs-variable">scale</span>  represents the number of fractional digits. This value must be less than or equal to' + 
      '      <span class="sql-docs-variable">precision</span> . A scale of 0 produces integral values, with no fractional part. If precision' + 
      '      and scale are equal, all the digits come after the decimal point, making all the values between 0 and' + 
      '      0.999... or 0 and -0.999...' + 
      '    </p> <p>' + 
      '      When <span class="sql-docs-variable">precision</span>  and <span class="sql-docs-variable">scale</span>  are omitted, a <span class="sql-docs-inline-code">DECIMAL</span>  value' + 
      '      is treated as <span class="sql-docs-inline-code">DECIMAL(9,0)</span> , that is, an integer value ranging from' + 
      '      <span class="sql-docs-inline-code">-999,999,999</span>  to <span class="sql-docs-inline-code">999,999,999</span> . This is the largest <span class="sql-docs-inline-code">DECIMAL</span> ' + 
      '      value that can still be represented in 4 bytes. If precision is specified but scale is omitted, Impala uses a' + 
      '      value of zero for the scale.' + 
      '    </p> <p>' + 
      '      Both <span class="sql-docs-variable">precision</span>  and <span class="sql-docs-variable">scale</span>  must be specified as integer literals, not any' + 
      '      other kind of constant expressions.' + 
      '    </p> <p>' + 
      '      To check the precision or scale for arbitrary values, you can call the' + 
      '      <span>precision() and' + 
      '      scale() built-in functions</span>. For example, you might use these values to figure out how' + 
      '      many characters are required for various fields in a report, or to understand the rounding characteristics of' + 
      '      a formula as applied to a particular <span class="sql-docs-inline-code">DECIMAL</span>  column.' + 
      '    </p> <p><b>Range:</b> </p> <p>' + 
      '      The maximum precision value is 38. Thus, the largest integral value is represented by' + 
      '      <span class="sql-docs-inline-code">DECIMAL(38,0)</span>  (999... with 9 repeated 38 times). The most precise fractional value (between' + 
      '      0 and 1, or 0 and -1) is represented by <span class="sql-docs-inline-code">DECIMAL(38,38)</span> , with 38 digits to the right of the' + 
      '      decimal point. The value closest to 0 would be .0000...1 (37 zeros and the final 1). The value closest to 1' + 
      '      would be .999... (9 repeated 38 times).' + 
      '    </p> <p>' + 
      '      For a given precision and scale, the range of <span class="sql-docs-inline-code">DECIMAL</span>  values is the same in the positive and' + 
      '      negative directions. For example, <span class="sql-docs-inline-code">DECIMAL(4,2)</span>  can represent from -99.99 to 99.99. This is' + 
      '      different from other integral numeric types where the positive and negative bounds differ slightly.' + 
      '    </p> <p>' + 
      '      When you use <span class="sql-docs-inline-code">DECIMAL</span>  values in arithmetic expressions, the precision and scale of the result' + 
      '      value are determined as follows:' + 
      '    </p> <ul><li><p>' + 
      '          For addition and subtraction, the precision and scale are based on the maximum possible result, that is,' + 
      '          if all the digits of the input values were 9s and the absolute values were added together.' + 
      '        </p> <div class="sql-docs-code-block"></div></li> <li><p>' + 
      '          For multiplication, the precision is the sum of the precisions of the input values. The scale is the sum' + 
      '          of the scales of the input values.' + 
      '        </p> </li> <li><p>' + 
      '          For division, Impala sets the precision and scale to values large enough to represent the whole and' + 
      '          fractional parts of the result.' + 
      '        </p> </li> <li><p>' + 
      '          For <span class="sql-docs-inline-code">UNION</span> , the scale is the larger of the scales of the input values, and the precision' + 
      '          is increased if necessary to accommodate any additional fractional digits. If the same input value has' + 
      '          the largest precision and the largest scale, the result value has the same precision and scale. If one' + 
      '          value has a larger precision but smaller scale, the scale of the result value is increased. For example,' + 
      '          <span class="sql-docs-inline-code">DECIMAL(20,2) UNION DECIMAL(8,6)</span>  produces a result of type' + 
      '          <span class="sql-docs-inline-code">DECIMAL(24,6)</span> . The extra 4 fractional digits of scale (6-2) are accommodated by' + 
      '          extending the precision by the same amount (20+4).' + 
      '        </p> </li> <li><p>' + 
      '          To doublecheck, you can always call the <span class="sql-docs-inline-code">PRECISION()</span>  and <span class="sql-docs-inline-code">SCALE()</span> ' + 
      '          functions on the results of an arithmetic expression to see the relevant values, or use a <span class="sql-docs-inline-code">CREATE' + 
      '          TABLE AS SELECT</span>  statement to define a column based on the return type of the expression.' + 
      '        </p> </li> </ul> <p id="../Impala/docs/topics/impala_decimal.xml_compatibility_blurb"><b>Compatibility:</b> </p> <ul><li>' + 
      '        Using the <span class="sql-docs-inline-code">DECIMAL</span>  type is only supported under Impala 1.4 and higher.' + 
      '      </li> <li>' + 
      '        Use the <span class="sql-docs-inline-code">DECIMAL</span>  data type in Impala for applications where you used the' + 
      '        <span class="sql-docs-inline-code">NUMBER</span>  data type in Oracle. The Impala <span class="sql-docs-inline-code">DECIMAL</span>  type does not support the' + 
      '        Oracle idioms of <span class="sql-docs-inline-code">*</span>  for scale or negative values for precision.' + 
      '      </li> </ul> <p><b>Conversions and casting:</b> </p> <p><span id="../Impala/docs/topics/impala_decimal.xml_cast_int_to_timestamp" class="sql-docs-inline-code">' + 
      '          Casting an integer or floating-point value <span class="sql-docs-inline-code">N</span>  to' + 
      '        <span class="sql-docs-inline-code">TIMESTAMP</span>  produces a value that is <span class="sql-docs-inline-code">N</span>  seconds past the start of the epoch' + 
      '        date (January 1, 1970). By default, the result value represents a date and time in the UTC time zone.' + 
      '        If the setting <span class="sql-docs-inline-code">--use_local_tz_for_unix_timestamp_conversions=true</span>  is in effect,' + 
      '        the resulting <span class="sql-docs-inline-code">TIMESTAMP</span>  represents a date and time in the local time zone.' + 
      '        </span> </p> <p>' + 
      '      Impala automatically converts between <span class="sql-docs-inline-code">DECIMAL</span>  and other numeric types where possible. A' + 
      '      <span class="sql-docs-inline-code">DECIMAL</span>  with zero scale is converted to or from the smallest appropriate integral type. A' + 
      '      <span class="sql-docs-inline-code">DECIMAL</span>  with a fractional part is automatically converted to or from the smallest' + 
      '      appropriate floating-point type. If the destination type does not have sufficient precision or scale to hold' + 
      '      all possible values of the source type, Impala raises an error and does not convert the value.' + 
      '    </p> <p>' + 
      '      For example, these statements show how expressions of <span class="sql-docs-inline-code">DECIMAL</span>  and other types are reconciled' + 
      '      to the same type in the context of <span class="sql-docs-inline-code">UNION</span>  queries and <span class="sql-docs-inline-code">INSERT</span>  statements:' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      To avoid potential conversion errors, you can use <span class="sql-docs-inline-code">CAST()</span>  to convert <span class="sql-docs-inline-code">DECIMAL</span> ' + 
      '      values to <span class="sql-docs-inline-code">FLOAT</span> , <span class="sql-docs-inline-code">TINYINT</span> , <span class="sql-docs-inline-code">SMALLINT</span> , <span class="sql-docs-inline-code">INT</span> ,' + 
      '      <span class="sql-docs-inline-code">BIGINT</span> , <span class="sql-docs-inline-code">STRING</span> , <span class="sql-docs-inline-code">TIMESTAMP</span> , or <span class="sql-docs-inline-code">BOOLEAN</span> .' + 
      '      You can use exponential notation in <span class="sql-docs-inline-code">DECIMAL</span>  literals or when casting from' + 
      '      <span class="sql-docs-inline-code">STRING</span> , for example <span class="sql-docs-inline-code">1.0e6</span>  to represent one million.' + 
      '    </p> <p>' + 
      '      If you cast a value with more fractional digits than the scale of the destination type, any extra fractional' + 
      '      digits are truncated (not rounded). Casting a value to a target type with not enough precision produces a' + 
      '      result of <span class="sql-docs-inline-code">NULL</span>  and displays a runtime warning.' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      When you specify integer literals, for example in <span class="sql-docs-inline-code">INSERT ... VALUES</span>  statements or arithmetic' + 
      '      expressions, those numbers are interpreted as the smallest applicable integer type. You must use' + 
      '      <span class="sql-docs-inline-code">CAST()</span>  calls for some combinations of integer literals and <span class="sql-docs-inline-code">DECIMAL</span> ' + 
      '      precision. For example, <span class="sql-docs-inline-code">INT</span>  has a maximum value that is 10 digits long,' + 
      '      <span class="sql-docs-inline-code">TINYINT</span>  has a maximum value that is 3 digits long, and so on. If you specify a value such as' + 
      '      123456 to go into a <span class="sql-docs-inline-code">DECIMAL</span>  column, Impala checks if the column has enough precision to' + 
      '      represent the largest value of that integer type, and raises an error if not. Therefore, use an expression' + 
      '      like <span class="sql-docs-inline-code">CAST(123456 TO DECIMAL(9,0))</span>  for <span class="sql-docs-inline-code">DECIMAL</span>  columns with precision 9 or' + 
      '      less, <span class="sql-docs-inline-code">CAST(50 TO DECIMAL(2,0))</span>  for <span class="sql-docs-inline-code">DECIMAL</span>  columns with precision 2 or' + 
      '      less, and so on. For <span class="sql-docs-inline-code">DECIMAL</span>  columns with precision 10 or greater, Impala automatically' + 
      '      interprets the value as the correct <span class="sql-docs-inline-code">DECIMAL</span>  type; however, because' + 
      '      <span class="sql-docs-inline-code">DECIMAL(10)</span>  requires 8 bytes of storage while <span class="sql-docs-inline-code">DECIMAL(9)</span>  requires only 4' + 
      '      bytes, only use precision of 10 or higher when actually needed.' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      Be aware that in memory and for binary file formats such as Parquet or Avro, <span class="sql-docs-inline-code">DECIMAL(10)</span>  or' + 
      '      higher consumes 8 bytes while <span class="sql-docs-inline-code">DECIMAL(9)</span>  (the default for <span class="sql-docs-inline-code">DECIMAL</span> ) or lower' + 
      '      consumes 4 bytes. Therefore, to conserve space in large tables, use the smallest-precision' + 
      '      <span class="sql-docs-inline-code">DECIMAL</span>  type that is appropriate and <span class="sql-docs-inline-code">CAST()</span>  literal values where necessary,' + 
      '      rather than declaring <span class="sql-docs-inline-code">DECIMAL</span>  columns with high precision for convenience.' + 
      '    </p> <p>' + 
      '      To represent a very large or precise <span class="sql-docs-inline-code">DECIMAL</span>  value as a literal, for example one that' + 
      '      contains more digits than can be represented by a <span class="sql-docs-inline-code">BIGINT</span>  literal, use a quoted string or a' + 
      '      floating-point value for the number, and <span class="sql-docs-inline-code">CAST()</span>  to the desired <span class="sql-docs-inline-code">DECIMAL</span> ' + 
      '      type:' + 
      '    </p> <div class="sql-docs-code-block">insert into decimals_38_5 values (1), (2), (4), (8), (16), (1024), (32768), (65536), (1000000),<br/>  (cast("999999999999999999999999999999" as decimal(38,5))),<br/>  (cast(999999999999999999999999999999. as decimal(38,5)));<br/></div><ul><li><p> The result of the <span class="sql-docs-inline-code">SUM()</span>  aggregate function on' + 
      '            <span class="sql-docs-inline-code">DECIMAL</span>  values is promoted to a precision of 38,' + 
      '          with the same precision as the underlying column. Thus, the result can' + 
      '          represent the largest possible value at that particular precision. </p> </li> <li><p><span class="sql-docs-inline-code">STRING</span>  columns, literals, or expressions can be converted to <span class="sql-docs-inline-code">DECIMAL</span>  as' + 
      '          long as the overall number of digits and digits to the right of the decimal point fit within the' + 
      '          specified precision and scale for the declared <span class="sql-docs-inline-code">DECIMAL</span>  type. By default, a' + 
      '          <span class="sql-docs-inline-code">DECIMAL</span>  value with no specified scale or precision can hold a maximum of 9 digits of an' + 
      '          integer value. If there are more digits in the string value than are allowed by the' + 
      '          <span class="sql-docs-inline-code">DECIMAL</span>  scale and precision, the result is <span class="sql-docs-inline-code">NULL</span> .' + 
      '        </p> <p>' + 
      '          The following examples demonstrate how <span class="sql-docs-inline-code">STRING</span>  values with integer and fractional parts' + 
      '          are represented when converted to <span class="sql-docs-inline-code">DECIMAL</span> . If the scale is 0, the number is treated' + 
      '          as an integer value with a maximum of <span class="sql-docs-variable">precision</span>  digits. If the precision is greater than' + 
      '          0, the scale must be increased to account for the digits both to the left and right of the decimal point.' + 
      '          As the precision increases, output values are printed with additional trailing zeros after the decimal' + 
      '          point if needed. Any trailing zeros after the decimal point in the <span class="sql-docs-inline-code">STRING</span>  value must fit' + 
      '          within the number of digits specified by the precision.' + 
      '        </p> <div class="sql-docs-code-block"></div></li> <li>' + 
      '        Most built-in arithmetic functions such as <span class="sql-docs-inline-code">SIN()</span>  and <span class="sql-docs-inline-code">COS()</span>  continue to' + 
      '        accept only <span class="sql-docs-inline-code">DOUBLE</span>  values because they are so commonly used in scientific context for' + 
      '        calculations of IEEE 954-compliant values. The built-in functions that accept and return' + 
      '        <span class="sql-docs-inline-code">DECIMAL</span>  are:' + 
      '<ul><li><span class="sql-docs-inline-code">ABS()</span> </li> <li><span class="sql-docs-inline-code">CEIL()</span> </li> <li><span class="sql-docs-inline-code">COALESCE()</span> </li> <li><span class="sql-docs-inline-code">FLOOR()</span> </li> <li><span class="sql-docs-inline-code">FNV_HASH()</span> </li> <li><span class="sql-docs-inline-code">GREATEST()</span> </li> <li><span class="sql-docs-inline-code">IF()</span> </li> <li><span class="sql-docs-inline-code">ISNULL()</span> </li> <li><span class="sql-docs-inline-code">LEAST()</span> </li> <li><span class="sql-docs-inline-code">NEGATIVE()</span> </li> <li><span class="sql-docs-inline-code">NULLIF()</span> </li> <li><span class="sql-docs-inline-code">POSITIVE()</span> </li> <li><span class="sql-docs-inline-code">PRECISION()</span> </li> <li><span class="sql-docs-inline-code">ROUND()</span> </li> <li><span class="sql-docs-inline-code">SCALE()</span> </li> <li><span class="sql-docs-inline-code">TRUNCATE()</span> </li> <li><span class="sql-docs-inline-code">ZEROIFNULL()</span> </li> </ul> ' + 
      '        See <span>builtins</span> for details.' + 
      '      </li> <li><p><span class="sql-docs-inline-code">BIGINT</span> , <span class="sql-docs-inline-code">INT</span> , <span class="sql-docs-inline-code">SMALLINT</span> , and <span class="sql-docs-inline-code">TINYINT</span> ' + 
      '          values can all be cast to <span class="sql-docs-inline-code">DECIMAL</span> . The number of digits to the left of the decimal point' + 
      '          in the <span class="sql-docs-inline-code">DECIMAL</span>  type must be sufficient to hold the largest value of the corresponding' + 
      '          integer type. Note that integer literals are treated as the smallest appropriate integer type, meaning' + 
      '          there is sometimes a range of values that require one more digit of <span class="sql-docs-inline-code">DECIMAL</span>  scale than' + 
      '          you might expect. For integer values, the precision of the <span class="sql-docs-inline-code">DECIMAL</span>  type can be zero; if' + 
      '          the precision is greater than zero, remember to increase the scale value by an equivalent amount to hold' + 
      '          the required number of digits to the left of the decimal point.' + 
      '        </p> <p>' + 
      '          The following examples show how different integer types are converted to <span class="sql-docs-inline-code">DECIMAL</span> .' + 
      '        </p> <div class="sql-docs-code-block"></div></li> <li><p>' + 
      '          When a <span class="sql-docs-inline-code">DECIMAL</span>  value is converted to any of the integer types, any fractional part is' + 
      '          truncated (that is, rounded towards zero):' + 
      '        </p> <div class="sql-docs-code-block"></div></li> <li><p>' + 
      '          You cannot directly cast <span class="sql-docs-inline-code">TIMESTAMP</span>  or <span class="sql-docs-inline-code">BOOLEAN</span>  values to or from' + 
      '          <span class="sql-docs-inline-code">DECIMAL</span>  values. You can turn a <span class="sql-docs-inline-code">DECIMAL</span>  value into a time-related' + 
      '          representation using a two-step process, by converting it to an integer value and then using that result' + 
      '          in a call to a date and time function such as <span class="sql-docs-inline-code">from_unixtime()</span> .' + 
      '        </p> <div class="sql-docs-code-block"></div></li> <li><p>' + 
      '          Because values in <span class="sql-docs-inline-code">INSERT</span>  statements are checked rigorously for type compatibility, be' + 
      '          prepared to use <span class="sql-docs-inline-code">CAST()</span>  function calls around literals, column references, or other' + 
      '          expressions that you are inserting into a <span class="sql-docs-inline-code">DECIMAL</span>  column.' + 
      '        </p> </li> </ul> <p id="../Impala/docs/topics/impala_decimal.xml_null_bad_numeric_cast"><b>NULL considerations:</b>  Casting any non-numeric value to this type produces a <span class="sql-docs-inline-code">NULL</span> ' + 
      '        value.' + 
      '      </p> <p><b>DECIMAL differences from integer and floating-point types:</b> </p> <p>' + 
      '      With the <span class="sql-docs-inline-code">DECIMAL</span>  type, you are concerned with the number of overall digits of a number' + 
      '      rather than powers of 2 (as in <span class="sql-docs-inline-code">TINYINT</span> , <span class="sql-docs-inline-code">SMALLINT</span> , and so on). Therefore,' + 
      '      the limits with integral values of <span class="sql-docs-inline-code">DECIMAL</span>  types fall around 99, 999, 9999, and so on rather' + 
      '      than 32767, 65535, 2' + 
      '      <sup>32</sup> ' + 
      '      -1, and so on. For fractional values, you do not need to account for imprecise representation of the' + 
      '      fractional part according to the IEEE-954 standard (as in <span class="sql-docs-inline-code">FLOAT</span>  and' + 
      '      <span class="sql-docs-inline-code">DOUBLE</span> ). Therefore, when you insert a fractional value into a <span class="sql-docs-inline-code">DECIMAL</span> ' + 
      '      column, you can compare, sum, query, <span class="sql-docs-inline-code">GROUP BY</span> , and so on that column and get back the' + 
      '      original values rather than some <q>close but not identical</q>  value.' + 
      '    </p> <p><span class="sql-docs-inline-code">FLOAT</span>  and <span class="sql-docs-inline-code">DOUBLE</span>  can cause problems or unexpected behavior due to inability' + 
      '      to precisely represent certain fractional values, for example dollar and cents values for currency. You might' + 
      '      find output values slightly different than you inserted, equality tests that do not match precisely, or' + 
      '      unexpected values for <span class="sql-docs-inline-code">GROUP BY</span>  columns. <span class="sql-docs-inline-code">DECIMAL</span>  can help reduce unexpected' + 
      '      behavior and rounding errors, at the expense of some performance overhead for assignments and comparisons.' + 
      '    </p> <p><b>Literals and expressions:</b> <ul><li><p>' + 
      '            When you use an integer literal such as <span class="sql-docs-inline-code">1</span>  or <span class="sql-docs-inline-code">999</span>  in a SQL statement,' + 
      '            depending on the context, Impala will treat it as either the smallest appropriate' + 
      '            <span class="sql-docs-inline-code">DECIMAL</span>  type, or the smallest integer type (<span class="sql-docs-inline-code">TINYINT</span> ,' + 
      '            <span class="sql-docs-inline-code">SMALLINT</span> , <span class="sql-docs-inline-code">INT</span> , or <span class="sql-docs-inline-code">BIGINT</span> ). To minimize memory usage,' + 
      '            Impala prefers to treat the literal as the smallest appropriate integer type.' + 
      '          </p> </li> <li><p>' + 
      '            When you use a floating-point literal such as <span class="sql-docs-inline-code">1.1</span>  or <span class="sql-docs-inline-code">999.44</span>  in a SQL' + 
      '            statement, depending on the context, Impala will treat it as either the smallest appropriate' + 
      '            <span class="sql-docs-inline-code">DECIMAL</span>  type, or the smallest floating-point type (<span class="sql-docs-inline-code">FLOAT</span>  or' + 
      '            <span class="sql-docs-inline-code">DOUBLE</span> ). To avoid loss of accuracy, Impala prefers to treat the literal as a' + 
      '            <span class="sql-docs-inline-code">DECIMAL</span> .' + 
      '          </p> </li> </ul> </p> <p><b>Storage considerations:</b> </p> <ul><li>' + 
      '        Only the precision determines the storage size for <span class="sql-docs-inline-code">DECIMAL</span>  values; the scale setting has' + 
      '        no effect on the storage size.' + 
      '      </li> <li>' + 
      '        Text, RCFile, and SequenceFile tables all use ASCII-based formats. In these text-based file formats,' + 
      '        leading zeros are not stored, but trailing zeros are stored. In these tables, each <span class="sql-docs-inline-code">DECIMAL</span> ' + 
      '        value takes up as many bytes as there are digits in the value, plus an extra byte if the decimal point is' + 
      '        present and an extra byte for negative values. Once the values are loaded into memory, they are represented' + 
      '        in 4, 8, or 16 bytes as described in the following list items. The on-disk representation varies depending' + 
      '        on the file format of the table.' + 
      '      </li> <li>' + 
      '        Parquet and Avro tables use binary formats, In these tables, Impala stores each value in as few bytes as' + 
      '        possible' + 
      '' + 
      '        depending on the precision specified for the <span class="sql-docs-inline-code">DECIMAL</span>  column.' + 
      '        <ul><li>' + 
      '            In memory, <span class="sql-docs-inline-code">DECIMAL</span>  values with precision of 9 or less are stored in 4 bytes.' + 
      '          </li> <li>' + 
      '            In memory, <span class="sql-docs-inline-code">DECIMAL</span>  values with precision of 10 through 18 are stored in 8 bytes.' + 
      '          </li> <li>' + 
      '            In memory, <span class="sql-docs-inline-code">DECIMAL</span>  values with precision greater than 18 are stored in 16 bytes.' + 
      '          </li> </ul> </li> </ul> <p id="../Impala/docs/topics/impala_decimal.xml_file_format_blurb"><b>File format considerations:</b> </p> <ul><li>' + 
      '        The <span class="sql-docs-inline-code">DECIMAL</span>  data type can be stored in any of the file formats supported by Impala, as' + 
      '        described in <span>file formats</span>. Impala only writes to tables that use the' + 
      '        Parquet and text formats, so those formats are the focus for file format compatibility.' + 
      '      </li> <li>' + 
      '        Impala can query Avro, RCFile, or SequenceFile tables containing <span class="sql-docs-inline-code">DECIMAL</span>  columns, created' + 
      '        by other Hadoop components.' + 
      '      </li> <li>' + 
      '        You can use <span class="sql-docs-inline-code">DECIMAL</span>  columns in Impala tables that are mapped to HBase tables. Impala can' + 
      '        query and insert into such tables.' + 
      '      </li> <li>' + 
      '        Text, RCFile, and SequenceFile tables all use ASCII-based formats. In these tables, each' + 
      '        <span class="sql-docs-inline-code">DECIMAL</span>  value takes up as many bytes as there are digits in the value, plus an extra byte' + 
      '        if the decimal point is present. The binary format of Parquet or Avro files offers more compact storage for' + 
      '        <span class="sql-docs-inline-code">DECIMAL</span>  columns.' + 
      '      </li> <li>' + 
      '        Parquet and Avro tables use binary formats, In these tables, Impala stores each value in 4, 8, or 16 bytes' + 
      '        depending on the precision specified for the <span class="sql-docs-inline-code">DECIMAL</span>  column.' + 
      '      </li> </ul> <p><b>UDF considerations:</b>  When writing a C++ UDF, use the <span class="sql-docs-inline-code">DecimalVal</span>  data type defined in' + 
      '      <span class="sql-docs-variable">/usr/include/impala_udf/udf.h</span> .' + 
      '    </p> <p id="../Impala/docs/topics/impala_decimal.xml_partitioning_blurb"><b>Partitioning:</b> </p> <p>' + 
      '      You can use a <span class="sql-docs-inline-code">DECIMAL</span>  column as a partition key. Doing so provides a better match between' + 
      '      the partition key values and the HDFS directory names than using a <span class="sql-docs-inline-code">DOUBLE</span>  or' + 
      '      <span class="sql-docs-inline-code">FLOAT</span>  partitioning column:' + 
      '    </p> <p id="../Impala/docs/topics/impala_decimal.xml_schema_evolution_blurb"><b>Schema evolution considerations:</b> </p> <ul><li>' + 
      '        For text-based formats (text, RCFile, and SequenceFile tables), you can issue an <span class="sql-docs-inline-code">ALTER TABLE ...' + 
      '        REPLACE COLUMNS</span>  statement to change the precision and scale of an existing' + 
      '        <span class="sql-docs-inline-code">DECIMAL</span>  column. As long as the values in the column fit within the new precision and' + 
      '        scale, they are returned correctly by a query. Any values that do not fit within the new precision and' + 
      '        scale are returned as <span class="sql-docs-inline-code">NULL</span> , and Impala reports the conversion error. Leading zeros do not' + 
      '        count against the precision value, but trailing zeros after the decimal point do.' + 
      '<div class="sql-docs-code-block"></div></li> <li>' + 
      '        For binary formats (Parquet and Avro tables), although an <span class="sql-docs-inline-code">ALTER TABLE ... REPLACE COLUMNS</span> ' + 
      '        statement that changes the precision or scale of a <span class="sql-docs-inline-code">DECIMAL</span>  column succeeds, any subsequent' + 
      '        attempt to query the changed column results in a fatal error. (The other columns can still be queried' + 
      '        successfully.) This is because the metadata about the columns is stored in the data files themselves, and' + 
      '        <span class="sql-docs-inline-code">ALTER TABLE</span>  does not actually make any updates to the data files. If the metadata in the' + 
      '        data files disagrees with the metadata in the metastore database, Impala cancels the query.' + 
      '      </li> </ul> <p id="../Impala/docs/topics/impala_decimal.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">CREATE TABLE t1 (x DECIMAL, y DECIMAL(5,2), z DECIMAL(25,0));<br/>INSERT INTO t1 VALUES (5, 99.44, 123456), (300, 6.7, 999999999);<br/>SELECT x+y, ROUND(y,1), z/98.6 FROM t1;<br/>SELECT CAST(1000.5 AS DECIMAL);<br/></div><p id="../Impala/docs/topics/impala_decimal.xml_hbase_ok"><b>HBase considerations:</b>  This data type is fully compatible with HBase tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_decimal.xml_parquet_ok"><b>Parquet considerations:</b>  This type is fully compatible with Parquet tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_decimal.xml_text_bulky"><b>Text table considerations:</b>  Values of this type are potentially larger in text tables than in tables' + 
      '        using Parquet or other binary formats.' + 
      '      </p> <p id="../Impala/docs/topics/impala_decimal.xml_column_stats_constant"><b>Column statistics considerations:</b>  Because this type has a fixed size, the maximum and average size' + 
      '        fields are always filled in for column statistics, even before you run the <span class="sql-docs-inline-code">COMPUTE STATS</span> ' + 
      '        statement.' + 
      '      </p> <p id="../Impala/docs/topics/impala_decimal.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p id="../Impala/docs/topics/impala_decimal.xml_kudu_unsupported_data_type">' + 
      '        Currently, the data types <span class="sql-docs-inline-code">CHAR</span> , <span class="sql-docs-inline-code">VARCHAR</span> ,' + 
      '        <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">MAP</span> , and <span class="sql-docs-inline-code">STRUCT</span>  cannot be used with Kudu tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_decimal.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_literals.xml#numeric_literals"><h4>Numeric Literals</h4> </a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tinyint.xml#tinyint">TINYINT Data Type</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_smallint.xml#smallint">SMALLINT Data Type</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_int.xml#int">INT Data Type</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_bigint.xml#bigint">BIGINT Data Type</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_decimal.xml#decimal">DECIMAL Data Type (Impala 1.4 or higher only)</a>,' + 
      '      <span>math functions</span> (especially <span class="sql-docs-inline-code">PRECISION()</span>  and' + 
      '      <span class="sql-docs-inline-code">SCALE()</span> )' + 
      '    </p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_double.xml',
    title: 'DOUBLE Data Type',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      A double precision floating-point data type used in <span class="sql-docs-inline-code">CREATE TABLE</span>  and <span class="sql-docs-inline-code">ALTER' + 
      '      TABLE</span>  statements.' + 
      '    </p> <p id="../Impala/docs/topics/impala_double.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
      '      In the column definition of a <span class="sql-docs-inline-code">CREATE TABLE</span>  statement:' + 
      '    </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">column_name</span> DOUBLE</div><p><b>Range:</b>  4.94065645841246544e-324d .. 1.79769313486231570e+308, positive or negative' + 
      '    </p> <p><b>Precision:</b>  15 to 17 significant digits, depending on usage. The number of significant digits does' + 
      '      not depend on the position of the decimal point.' + 
      '    </p> <p><b>Representation:</b>  The values are stored in 8 bytes, using' + 
      '      <a target="_blank" href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format">IEEE 754 Double Precision Binary Floating Point</a> format.' + 
      '    </p> <p><b>Conversions:</b>  Impala does not automatically convert <span class="sql-docs-inline-code">DOUBLE</span>  to any other type. You can' + 
      '      use <span class="sql-docs-inline-code">CAST()</span>  to convert <span class="sql-docs-inline-code">DOUBLE</span>  values to <span class="sql-docs-inline-code">FLOAT</span> ,' + 
      '      <span class="sql-docs-inline-code">TINYINT</span> , <span class="sql-docs-inline-code">SMALLINT</span> , <span class="sql-docs-inline-code">INT</span> , <span class="sql-docs-inline-code">BIGINT</span> ,' + 
      '      <span class="sql-docs-inline-code">STRING</span> , <span class="sql-docs-inline-code">TIMESTAMP</span> , or <span class="sql-docs-inline-code">BOOLEAN</span> . You can use exponential' + 
      '      notation in <span class="sql-docs-inline-code">DOUBLE</span>  literals or when casting from <span class="sql-docs-inline-code">STRING</span> , for example' + 
      '      <span class="sql-docs-inline-code">1.0e6</span>  to represent one million.' + 
      '      <span id="../Impala/docs/topics/impala_double.xml_cast_int_to_timestamp" class="sql-docs-inline-code">' + 
      '          Casting an integer or floating-point value <span class="sql-docs-inline-code">N</span>  to' + 
      '        <span class="sql-docs-inline-code">TIMESTAMP</span>  produces a value that is <span class="sql-docs-inline-code">N</span>  seconds past the start of the epoch' + 
      '        date (January 1, 1970). By default, the result value represents a date and time in the UTC time zone.' + 
      '        If the setting <span class="sql-docs-inline-code">--use_local_tz_for_unix_timestamp_conversions=true</span>  is in effect,' + 
      '        the resulting <span class="sql-docs-inline-code">TIMESTAMP</span>  represents a date and time in the local time zone.' + 
      '        </span> </p> <p id="../Impala/docs/topics/impala_double.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      The data type <span class="sql-docs-inline-code">REAL</span>  is an alias for <span class="sql-docs-inline-code">DOUBLE</span> .' + 
      '    </p> <p id="../Impala/docs/topics/impala_double.xml_how_impala_handles_nan_values">' + 
      '        Impala does not evaluate NaN (not a number) as equal to any other numeric values,' + 
      '        including other NaN values. For example, the following statement, which evaluates equality' + 
      '        between two NaN values, returns <span class="sql-docs-inline-code">false</span> :' + 
      '      </p> <div class="sql-docs-code-block">SELECT CAST(\'nan\' AS DOUBLE)=CAST(\'nan\' AS DOUBLE);<br/></div><p id="../Impala/docs/topics/impala_double.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">CREATE TABLE t1 (x DOUBLE);<br/>SELECT CAST(1000.5 AS DOUBLE);<br/></div><p id="../Impala/docs/topics/impala_double.xml_partitioning_imprecise"><b>Partitioning:</b>  Because fractional values of this type are not always represented precisely, when this' + 
      '        type is used for a partition key column, the underlying HDFS directories might not be named exactly as you' + 
      '        expect. Prefer to partition on a <span class="sql-docs-inline-code">DECIMAL</span>  column instead.' + 
      '      </p> <p id="../Impala/docs/topics/impala_double.xml_hbase_ok"><b>HBase considerations:</b>  This data type is fully compatible with HBase tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_double.xml_parquet_ok"><b>Parquet considerations:</b>  This type is fully compatible with Parquet tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_double.xml_text_bulky"><b>Text table considerations:</b>  Values of this type are potentially larger in text tables than in tables' + 
      '        using Parquet or other binary formats.' + 
      '      </p> <p id="../Impala/docs/topics/impala_double.xml_internals_8_bytes"><b>Internal details:</b>  Represented in memory as an 8-byte value.' + 
      '      </p> <p id="../Impala/docs/topics/impala_double.xml_column_stats_constant"><b>Column statistics considerations:</b>  Because this type has a fixed size, the maximum and average size' + 
      '        fields are always filled in for column statistics, even before you run the <span class="sql-docs-inline-code">COMPUTE STATS</span> ' + 
      '        statement.' + 
      '      </p> <p id="../Impala/docs/topics/impala_double.xml_restrictions_blurb"><b>Restrictions:</b> </p> <p id="../Impala/docs/topics/impala_double.xml_sum_double">' + 
      '        Due to the way arithmetic on <span class="sql-docs-inline-code">FLOAT</span>  and <span class="sql-docs-inline-code">DOUBLE</span>  columns uses' + 
      '        high-performance hardware instructions, and distributed queries can perform these operations in different' + 
      '        order for each query, results can vary slightly for aggregate function calls such as <span class="sql-docs-inline-code">SUM()</span> ' + 
      '        and <span class="sql-docs-inline-code">AVG()</span>  for <span class="sql-docs-inline-code">FLOAT</span>  and <span class="sql-docs-inline-code">DOUBLE</span>  columns, particularly on' + 
      '        large data sets where millions or billions of values are summed or averaged. For perfect consistency and' + 
      '        repeatability, use the <span class="sql-docs-inline-code">DECIMAL</span>  data type for such operations instead of' + 
      '        <span class="sql-docs-inline-code">FLOAT</span>  or <span class="sql-docs-inline-code">DOUBLE</span> .' + 
      '      </p> <p id="../Impala/docs/topics/impala_double.xml_float_double_decimal_caveat">' + 
      '        The inability to exactly represent certain floating-point values means that' + 
      '        <span class="sql-docs-inline-code">DECIMAL</span>  is sometimes a better choice than <span class="sql-docs-inline-code">DOUBLE</span> ' + 
      '        or <span class="sql-docs-inline-code">FLOAT</span>  when precision is critical, particularly when' + 
      '        transferring data from other database systems that use different representations' + 
      '        or file formats.' + 
      '      </p> <p id="../Impala/docs/topics/impala_double.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p id="../Impala/docs/topics/impala_double.xml_kudu_non_pk_data_type">' + 
      '        Currently, the data types <span class="sql-docs-inline-code">BOOLEAN</span> , <span class="sql-docs-inline-code">FLOAT</span> ,' + 
      '        and <span class="sql-docs-inline-code">DOUBLE</span>  cannot be used for primary key columns in Kudu tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_double.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_literals.xml#numeric_literals"><h4>Numeric Literals</h4> </a>, <span>math functions</span>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_float.xml#float">FLOAT Data Type</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_float.xml',
    title: 'FLOAT Data Type',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      A single precision floating-point data type used in <span class="sql-docs-inline-code">CREATE TABLE</span>  and <span class="sql-docs-inline-code">ALTER' + 
      '      TABLE</span>  statements.' + 
      '    </p> <p id="../Impala/docs/topics/impala_float.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
      '      In the column definition of a <span class="sql-docs-inline-code">CREATE TABLE</span>  statement:' + 
      '    </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">column_name</span> FLOAT</div><p><b>Range:</b>  1.40129846432481707e-45 .. 3.40282346638528860e+38, positive or negative' + 
      '    </p> <p><b>Precision:</b>  6 to 9 significant digits, depending on usage. The number of significant digits does' + 
      '      not depend on the position of the decimal point.' + 
      '    </p> <p><b>Representation:</b>  The values are stored in 4 bytes, using' + 
      '      <a target="_blank" href="https://en.wikipedia.org/wiki/Single-precision_floating-point_format">IEEE 754 Single Precision Binary Floating Point</a> format.' + 
      '    </p> <p><b>Conversions:</b>  Impala automatically converts <span class="sql-docs-inline-code">FLOAT</span>  to more precise' + 
      '      <span class="sql-docs-inline-code">DOUBLE</span>  values, but not the other way around. You can use <span class="sql-docs-inline-code">CAST()</span>  to convert' + 
      '      <span class="sql-docs-inline-code">FLOAT</span>  values to <span class="sql-docs-inline-code">TINYINT</span> , <span class="sql-docs-inline-code">SMALLINT</span> , <span class="sql-docs-inline-code">INT</span> ,' + 
      '      <span class="sql-docs-inline-code">BIGINT</span> , <span class="sql-docs-inline-code">STRING</span> , <span class="sql-docs-inline-code">TIMESTAMP</span> , or <span class="sql-docs-inline-code">BOOLEAN</span> .' + 
      '      You can use exponential notation in <span class="sql-docs-inline-code">FLOAT</span>  literals or when casting from' + 
      '      <span class="sql-docs-inline-code">STRING</span> , for example <span class="sql-docs-inline-code">1.0e6</span>  to represent one million.' + 
      '      <span id="../Impala/docs/topics/impala_float.xml_cast_int_to_timestamp" class="sql-docs-inline-code">' + 
      '          Casting an integer or floating-point value <span class="sql-docs-inline-code">N</span>  to' + 
      '        <span class="sql-docs-inline-code">TIMESTAMP</span>  produces a value that is <span class="sql-docs-inline-code">N</span>  seconds past the start of the epoch' + 
      '        date (January 1, 1970). By default, the result value represents a date and time in the UTC time zone.' + 
      '        If the setting <span class="sql-docs-inline-code">--use_local_tz_for_unix_timestamp_conversions=true</span>  is in effect,' + 
      '        the resulting <span class="sql-docs-inline-code">TIMESTAMP</span>  represents a date and time in the local time zone.' + 
      '        </span> </p> <p id="../Impala/docs/topics/impala_float.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p id="../Impala/docs/topics/impala_float.xml_how_impala_handles_nan_values">' + 
      '        Impala does not evaluate NaN (not a number) as equal to any other numeric values,' + 
      '        including other NaN values. For example, the following statement, which evaluates equality' + 
      '        between two NaN values, returns <span class="sql-docs-inline-code">false</span> :' + 
      '      </p> <div class="sql-docs-code-block">SELECT CAST(\'nan\' AS FLOAT)=CAST(\'nan\' AS FLOAT);<br/></div><p id="../Impala/docs/topics/impala_float.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">CREATE TABLE t1 (x FLOAT);<br/>SELECT CAST(1000.5 AS FLOAT);<br/></div><p id="../Impala/docs/topics/impala_float.xml_partitioning_imprecise"><b>Partitioning:</b>  Because fractional values of this type are not always represented precisely, when this' + 
      '        type is used for a partition key column, the underlying HDFS directories might not be named exactly as you' + 
      '        expect. Prefer to partition on a <span class="sql-docs-inline-code">DECIMAL</span>  column instead.' + 
      '      </p> <p id="../Impala/docs/topics/impala_float.xml_hbase_ok"><b>HBase considerations:</b>  This data type is fully compatible with HBase tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_float.xml_parquet_ok"><b>Parquet considerations:</b>  This type is fully compatible with Parquet tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_float.xml_text_bulky"><b>Text table considerations:</b>  Values of this type are potentially larger in text tables than in tables' + 
      '        using Parquet or other binary formats.' + 
      '      </p> <p id="../Impala/docs/topics/impala_float.xml_internals_4_bytes"><b>Internal details:</b>  Represented in memory as a 4-byte value.' + 
      '      </p> <p id="../Impala/docs/topics/impala_float.xml_column_stats_constant"><b>Column statistics considerations:</b>  Because this type has a fixed size, the maximum and average size' + 
      '        fields are always filled in for column statistics, even before you run the <span class="sql-docs-inline-code">COMPUTE STATS</span> ' + 
      '        statement.' + 
      '      </p> <p id="../Impala/docs/topics/impala_float.xml_restrictions_blurb"><b>Restrictions:</b> </p> <p id="../Impala/docs/topics/impala_float.xml_sum_double">' + 
      '        Due to the way arithmetic on <span class="sql-docs-inline-code">FLOAT</span>  and <span class="sql-docs-inline-code">DOUBLE</span>  columns uses' + 
      '        high-performance hardware instructions, and distributed queries can perform these operations in different' + 
      '        order for each query, results can vary slightly for aggregate function calls such as <span class="sql-docs-inline-code">SUM()</span> ' + 
      '        and <span class="sql-docs-inline-code">AVG()</span>  for <span class="sql-docs-inline-code">FLOAT</span>  and <span class="sql-docs-inline-code">DOUBLE</span>  columns, particularly on' + 
      '        large data sets where millions or billions of values are summed or averaged. For perfect consistency and' + 
      '        repeatability, use the <span class="sql-docs-inline-code">DECIMAL</span>  data type for such operations instead of' + 
      '        <span class="sql-docs-inline-code">FLOAT</span>  or <span class="sql-docs-inline-code">DOUBLE</span> .' + 
      '      </p> <p id="../Impala/docs/topics/impala_float.xml_float_double_decimal_caveat">' + 
      '        The inability to exactly represent certain floating-point values means that' + 
      '        <span class="sql-docs-inline-code">DECIMAL</span>  is sometimes a better choice than <span class="sql-docs-inline-code">DOUBLE</span> ' + 
      '        or <span class="sql-docs-inline-code">FLOAT</span>  when precision is critical, particularly when' + 
      '        transferring data from other database systems that use different representations' + 
      '        or file formats.' + 
      '      </p> <p id="../Impala/docs/topics/impala_float.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p id="../Impala/docs/topics/impala_float.xml_kudu_non_pk_data_type">' + 
      '        Currently, the data types <span class="sql-docs-inline-code">BOOLEAN</span> , <span class="sql-docs-inline-code">FLOAT</span> ,' + 
      '        and <span class="sql-docs-inline-code">DOUBLE</span>  cannot be used for primary key columns in Kudu tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_float.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_literals.xml#numeric_literals"><h4>Numeric Literals</h4> </a>, <span>math functions</span>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_double.xml#double">DOUBLE Data Type</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_int.xml',
    title: 'INT Data Type',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      A 4-byte integer data type used in <span class="sql-docs-inline-code">CREATE TABLE</span>  and <span class="sql-docs-inline-code">ALTER TABLE</span>  statements.' + 
      '    </p> <p id="../Impala/docs/topics/impala_int.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
      '      In the column definition of a <span class="sql-docs-inline-code">CREATE TABLE</span>  statement:' + 
      '    </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">column_name</span> INT</div><p><b>Range:</b>  -2147483648 .. 2147483647. There is no <span class="sql-docs-inline-code">UNSIGNED</span>  subtype.' + 
      '    </p> <p><b>Conversions:</b>  Impala automatically converts to a larger integer type (<span class="sql-docs-inline-code">BIGINT</span> ) or a' + 
      '      floating-point type (<span class="sql-docs-inline-code">FLOAT</span>  or <span class="sql-docs-inline-code">DOUBLE</span> ) automatically. Use' + 
      '      <span class="sql-docs-inline-code">CAST()</span>  to convert to <span class="sql-docs-inline-code">TINYINT</span> , <span class="sql-docs-inline-code">SMALLINT</span> ,' + 
      '      <span class="sql-docs-inline-code">STRING</span> , or <span class="sql-docs-inline-code">TIMESTAMP</span> .' + 
      '      <span id="../Impala/docs/topics/impala_int.xml_cast_int_to_timestamp" class="sql-docs-inline-code">' + 
      '          Casting an integer or floating-point value <span class="sql-docs-inline-code">N</span>  to' + 
      '        <span class="sql-docs-inline-code">TIMESTAMP</span>  produces a value that is <span class="sql-docs-inline-code">N</span>  seconds past the start of the epoch' + 
      '        date (January 1, 1970). By default, the result value represents a date and time in the UTC time zone.' + 
      '        If the setting <span class="sql-docs-inline-code">--use_local_tz_for_unix_timestamp_conversions=true</span>  is in effect,' + 
      '        the resulting <span class="sql-docs-inline-code">TIMESTAMP</span>  represents a date and time in the local time zone.' + 
      '        </span> </p> <p id="../Impala/docs/topics/impala_int.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      The data type <span class="sql-docs-inline-code">INTEGER</span>  is an alias for <span class="sql-docs-inline-code">INT</span> .' + 
      '    </p> <p>' + 
      '      For a convenient and automated way to check the bounds of the <span class="sql-docs-inline-code">INT</span>  type, call the functions' + 
      '      <span class="sql-docs-inline-code">MIN_INT()</span>  and <span class="sql-docs-inline-code">MAX_INT()</span> .' + 
      '    </p> <p>' + 
      '      If an integer value is too large to be represented as a <span class="sql-docs-inline-code">INT</span> , use a <span class="sql-docs-inline-code">BIGINT</span> ' + 
      '      instead.' + 
      '    </p> <p id="../Impala/docs/topics/impala_int.xml_null_bad_numeric_cast"><b>NULL considerations:</b>  Casting any non-numeric value to this type produces a <span class="sql-docs-inline-code">NULL</span> ' + 
      '        value.' + 
      '      </p> <p id="../Impala/docs/topics/impala_int.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">CREATE TABLE t1 (x INT);<br/>SELECT CAST(1000 AS INT);<br/></div><p id="../Impala/docs/topics/impala_int.xml_partitioning_good"><b>Partitioning:</b>  Prefer to use this type for a partition key column. Impala can process the numeric' + 
      '        type more efficiently than a <span class="sql-docs-inline-code">STRING</span>  representation of the value.' + 
      '      </p> <p id="../Impala/docs/topics/impala_int.xml_hbase_ok"><b>HBase considerations:</b>  This data type is fully compatible with HBase tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_int.xml_parquet_blurb"><b>Parquet considerations:</b> </p> <p id="../Impala/docs/topics/impala_int.xml_text_bulky"><b>Text table considerations:</b>  Values of this type are potentially larger in text tables than in tables' + 
      '        using Parquet or other binary formats.' + 
      '      </p> <p id="../Impala/docs/topics/impala_int.xml_internals_4_bytes"><b>Internal details:</b>  Represented in memory as a 4-byte value.' + 
      '      </p> <p id="../Impala/docs/topics/impala_int.xml_added_forever"><b>Added in:</b>  Available in all versions of Impala.' + 
      '      </p> <p id="../Impala/docs/topics/impala_int.xml_column_stats_constant"><b>Column statistics considerations:</b>  Because this type has a fixed size, the maximum and average size' + 
      '        fields are always filled in for column statistics, even before you run the <span class="sql-docs-inline-code">COMPUTE STATS</span> ' + 
      '        statement.' + 
      '      </p> <p id="../Impala/docs/topics/impala_int.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_literals.xml#numeric_literals"><h4>Numeric Literals</h4> </a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tinyint.xml#tinyint">TINYINT Data Type</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_smallint.xml#smallint">SMALLINT Data Type</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_int.xml#int">INT Data Type</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_bigint.xml#bigint">BIGINT Data Type</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_decimal.xml#decimal">DECIMAL Data Type (Impala 1.4 or higher only)</a>,' + 
      '      <span>math functions</span></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_map.xml',
    title: 'MAP Complex Type (Impala 2.3 or higher only)',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '        A complex data type representing an arbitrary set of key-value pairs.' + 
      '        The key part is a scalar type, while the value part can be a scalar or' + 
      '        another complex type (<span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> ,' + 
      '        or <span class="sql-docs-inline-code">MAP</span> ).' + 
      '      </p> <p id="../Impala/docs/topics/impala_map.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">column_name</span> MAP < <span class="sql-docs-variable">primitive_type</span> , <span class="sql-docs-variable">type</span> ><br/><br/>type ::= <span class="sql-docs-variable">primitive_type</span> | <span class="sql-docs-variable">complex_type</span> </div><p id="../Impala/docs/topics/impala_map.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p id="../Impala/docs/topics/impala_map.xml_complex_types_combo">' + 
      '        Because complex types are often used in combination,' + 
      '        for example an <span class="sql-docs-inline-code">ARRAY</span>  of <span class="sql-docs-inline-code">STRUCT</span> ' + 
      '        elements, if you are unfamiliar with the Impala complex types,' + 
      '        start with <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a> for' + 
      '        background information and usage examples.' + 
      '      </p> <p>' + 
      '        The <span class="sql-docs-inline-code">MAP</span>  complex data type represents a set of key-value pairs.' + 
      '        Each element of the map is indexed by a primitive type such as <span class="sql-docs-inline-code">BIGINT</span>  or' + 
      '        <span class="sql-docs-inline-code">STRING</span> , letting you define sequences that are not continuous or categories with arbitrary names.' + 
      '        You might find it convenient for modelling data produced in other languages, such as a' + 
      '        Python dictionary or Java HashMap, where a single scalar value serves as the lookup key.' + 
      '      </p> <p>' + 
      '        In a big data context, the keys in a map column might represent a numeric sequence of events during a' + 
      '        manufacturing process, or <span class="sql-docs-inline-code">TIMESTAMP</span>  values corresponding to sensor observations.' + 
      '        The map itself is inherently unordered, so you choose whether to make the key values significant' + 
      '        (such as a recorded <span class="sql-docs-inline-code">TIMESTAMP</span> ) or synthetic (such as a random global universal ID).' + 
      '      </p> <div class="sql-docs-note">' + 
      '        Behind the scenes, the <span class="sql-docs-inline-code">MAP</span>  type is implemented in a similar way as the' + 
      '        <span class="sql-docs-inline-code">ARRAY</span>  type. Impala does not enforce any uniqueness constraint on the' + 
      '        <span class="sql-docs-inline-code">KEY</span>  values, and the <span class="sql-docs-inline-code">KEY</span>  values are processed by' + 
      '        looping through the elements of the <span class="sql-docs-inline-code">MAP</span>  rather than by a constant-time lookup.' + 
      '        Therefore, this type is primarily for ease of understanding when importing data and' + 
      '        algorithms from non-SQL contexts, rather than optimizing the performance of key lookups.' + 
      '      </div> <p id="../Impala/docs/topics/impala_map.xml_complex_types_describe">' + 
      '        You can pass a multi-part qualified name to <span class="sql-docs-inline-code">DESCRIBE</span> ' + 
      '        to specify an <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ' + 
      '        column and visualize its structure as if it were a table.' + 
      '        For example, if table <span class="sql-docs-inline-code">T1</span>  contains an <span class="sql-docs-inline-code">ARRAY</span>  column' + 
      '        <span class="sql-docs-inline-code">A1</span> , you could issue the statement <span class="sql-docs-inline-code">DESCRIBE t1.a1</span> .' + 
      '        If table <span class="sql-docs-inline-code">T1</span>  contained a <span class="sql-docs-inline-code">STRUCT</span>  column <span class="sql-docs-inline-code">S1</span> ,' + 
      '        and a field <span class="sql-docs-inline-code">F1</span>  within the <span class="sql-docs-inline-code">STRUCT</span>  was a <span class="sql-docs-inline-code">MAP</span> ,' + 
      '        you could issue the statement <span class="sql-docs-inline-code">DESCRIBE t1.s1.f1</span> .' + 
      '        An <span class="sql-docs-inline-code">ARRAY</span>  is shown as a two-column table, with' + 
      '        <span class="sql-docs-inline-code">ITEM</span>  and <span class="sql-docs-inline-code">POS</span>  columns.' + 
      '        A <span class="sql-docs-inline-code">STRUCT</span>  is shown as a table with each field' + 
      '        representing a column in the table.' + 
      '        A <span class="sql-docs-inline-code">MAP</span>  is shown as a two-column table, with' + 
      '        <span class="sql-docs-inline-code">KEY</span>  and <span class="sql-docs-inline-code">VALUE</span>  columns.' + 
      '      </p> <p id="../Impala/docs/topics/impala_map.xml_added_in_230"><b>Added in:</b> Impala 2.3.0</p> <p id="../Impala/docs/topics/impala_map.xml_restrictions_blurb"><b>Restrictions:</b> </p> <ul></ul> <p id="../Impala/docs/topics/impala_map.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p id="../Impala/docs/topics/impala_map.xml_kudu_unsupported_data_type">' + 
      '        Currently, the data types <span class="sql-docs-inline-code">CHAR</span> , <span class="sql-docs-inline-code">VARCHAR</span> ,' + 
      '        <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">MAP</span> , and <span class="sql-docs-inline-code">STRUCT</span>  cannot be used with Kudu tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_map.xml_example_blurb"><b>Examples:</b> </p> <div id="../Impala/docs/topics/impala_map.xml_complex_type_schema_pointer" class="sql-docs-note">' + 
      '      Many of the complex type examples refer to tables' + 
      '      such as <span class="sql-docs-inline-code">CUSTOMER</span>  and <span class="sql-docs-inline-code">REGION</span> ' + 
      '      adapted from the tables used in the TPC-H benchmark.' + 
      '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_sample_schema"><h4>Sample Schema and Data for Experimenting with Impala Complex Types</h4> </a>' + 
      '      for the table definitions.' + 
      '      </div> <p>' + 
      '        The following example shows a table with various kinds of <span class="sql-docs-inline-code">MAP</span>  columns,' + 
      '        both at the top level and nested within other complex types.' + 
      '        Each row represents information about a specific country, with complex type fields' + 
      '        of various levels of nesting to represent different information associated' + 
      '        with the country: factual measurements such as area and population,' + 
      '        notable people in different categories, geographic features such as' + 
      '        cities, points of interest within each city, and mountains with associated facts.' + 
      '        Practice the <span class="sql-docs-inline-code">CREATE TABLE</span>  and query notation for complex type columns' + 
      '        using empty tables, until you can visualize a complex data structure and construct corresponding SQL statements reliably.' + 
      '      </p> <div class="sql-docs-code-block"></div><div class="sql-docs-code-block"></div><p>' + 
      '        The following example shows a table that uses a variety of data types for the <span class="sql-docs-inline-code">MAP</span> <q>key</q>  field. Typically, you use <span class="sql-docs-inline-code">BIGINT</span>  or <span class="sql-docs-inline-code">STRING</span>  to use' + 
      '        numeric or character-based keys without worrying about exceeding any size or length constraints.' + 
      '      </p> <div class="sql-docs-code-block"></div><div class="sql-docs-code-block">CREATE TABLE celebrities (name STRING, birth_year MAP < STRING, SMALLINT >) STORED AS PARQUET;<br/>-- A typical row might represent values with 2 different birth years, such as:<br/>-- ("Joe Movie Star", { "real": 1972, "claimed": 1977 })<br/><br/>CREATE TABLE countries (name STRING, famous_leaders MAP < INT, STRING >) STORED AS PARQUET;<br/>-- A typical row might represent values with different leaders, with key values corresponding to their numeric sequence, such as:<br/>-- ("United States", { 1: "George Washington", 3: "Thomas Jefferson", 16: "Abraham Lincoln" })<br/><br/>CREATE TABLE airlines (name STRING, special_meals MAP < STRING, MAP < STRING, STRING > >) STORED AS PARQUET;<br/>-- A typical row might represent values with multiple kinds of meals, each with several components:<br/>-- ("Elegant Airlines",<br/>--   {<br/>--     "vegetarian": { "breakfast": "pancakes", "snack": "cookies", "dinner": "rice pilaf" },<br/>--     "gluten free": { "breakfast": "oatmeal", "snack": "fruit", "dinner": "chicken" }<br/>--   } )<br/></div><p id="../Impala/docs/topics/impala_map.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a>,' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_array.xml#array">ARRAY Complex Type (Impala 2.3 or higher only)</a>,' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_struct.xml#struct">STRUCT Complex Type (Impala 2.3 or higher only)</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_real.xml',
    title: 'REAL Data Type',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      An alias for the <span class="sql-docs-inline-code">DOUBLE</span>  data type. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_double.xml#double">DOUBLE Data Type</a> for details.' + 
      '    </p> <p id="../Impala/docs/topics/impala_real.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      These examples show how you can use the type names <span class="sql-docs-inline-code">REAL</span>  and <span class="sql-docs-inline-code">DOUBLE</span> ' + 
      '      interchangeably, and behind the scenes Impala treats them always as <span class="sql-docs-inline-code">DOUBLE</span> .' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > create table r1 (x real);<br/>[localhost:21000] > describe r1;<br/>+------+--------+---------+<br/>| name | type   | comment |<br/>+------+--------+---------+<br/>| x    | double |         |<br/>+------+--------+---------+<br/>[localhost:21000] > insert into r1 values (1.5), (cast (2.2 as double));<br/>[localhost:21000] > select cast (1e6 as real);<br/>+---------------------------+<br/>| cast(1000000.0 as double) |<br/>+---------------------------+<br/>| 1000000                   |<br/>+---------------------------+</div></div> ',
    children: []
  },
  {
    id: 'topics/impala_smallint.xml',
    title: 'SMALLINT Data Type',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      A 2-byte integer data type used in <span class="sql-docs-inline-code">CREATE TABLE</span>  and <span class="sql-docs-inline-code">ALTER TABLE</span>  statements.' + 
      '    </p> <p id="../Impala/docs/topics/impala_smallint.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
      '      In the column definition of a <span class="sql-docs-inline-code">CREATE TABLE</span>  statement:' + 
      '    </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">column_name</span> SMALLINT</div><p><b>Range:</b>  -32768 .. 32767. There is no <span class="sql-docs-inline-code">UNSIGNED</span>  subtype.' + 
      '    </p> <p><b>Conversions:</b>  Impala automatically converts to a larger integer type (<span class="sql-docs-inline-code">INT</span>  or' + 
      '      <span class="sql-docs-inline-code">BIGINT</span> ) or a floating-point type (<span class="sql-docs-inline-code">FLOAT</span>  or <span class="sql-docs-inline-code">DOUBLE</span> )' + 
      '      automatically. Use <span class="sql-docs-inline-code">CAST()</span>  to convert to <span class="sql-docs-inline-code">TINYINT</span> , <span class="sql-docs-inline-code">STRING</span> ,' + 
      '      or <span class="sql-docs-inline-code">TIMESTAMP</span> .' + 
      '      <span id="../Impala/docs/topics/impala_smallint.xml_cast_int_to_timestamp" class="sql-docs-inline-code">' + 
      '          Casting an integer or floating-point value <span class="sql-docs-inline-code">N</span>  to' + 
      '        <span class="sql-docs-inline-code">TIMESTAMP</span>  produces a value that is <span class="sql-docs-inline-code">N</span>  seconds past the start of the epoch' + 
      '        date (January 1, 1970). By default, the result value represents a date and time in the UTC time zone.' + 
      '        If the setting <span class="sql-docs-inline-code">--use_local_tz_for_unix_timestamp_conversions=true</span>  is in effect,' + 
      '        the resulting <span class="sql-docs-inline-code">TIMESTAMP</span>  represents a date and time in the local time zone.' + 
      '        </span> </p> <p id="../Impala/docs/topics/impala_smallint.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      For a convenient and automated way to check the bounds of the <span class="sql-docs-inline-code">SMALLINT</span>  type, call the' + 
      '      functions <span class="sql-docs-inline-code">MIN_SMALLINT()</span>  and <span class="sql-docs-inline-code">MAX_SMALLINT()</span> .' + 
      '    </p> <p>' + 
      '      If an integer value is too large to be represented as a <span class="sql-docs-inline-code">SMALLINT</span> , use an' + 
      '      <span class="sql-docs-inline-code">INT</span>  instead.' + 
      '    </p> <p id="../Impala/docs/topics/impala_smallint.xml_null_bad_numeric_cast"><b>NULL considerations:</b>  Casting any non-numeric value to this type produces a <span class="sql-docs-inline-code">NULL</span> ' + 
      '        value.' + 
      '      </p> <p id="../Impala/docs/topics/impala_smallint.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">CREATE TABLE t1 (x SMALLINT);<br/>SELECT CAST(1000 AS SMALLINT);<br/></div><p id="../Impala/docs/topics/impala_smallint.xml_parquet_blurb"><b>Parquet considerations:</b> </p> <p>' + 
      '      Physically, Parquet files represent <span class="sql-docs-inline-code">TINYINT</span>  and <span class="sql-docs-inline-code">SMALLINT</span>  values as 32-bit' + 
      '      integers. Although Impala rejects attempts to insert out-of-range values into such columns, if you create a' + 
      '      new table with the <span class="sql-docs-inline-code">CREATE TABLE ... LIKE PARQUET</span>  syntax, any <span class="sql-docs-inline-code">TINYINT</span>  or' + 
      '      <span class="sql-docs-inline-code">SMALLINT</span>  columns in the original table turn into <span class="sql-docs-inline-code">INT</span>  columns in the new' + 
      '      table.' + 
      '    </p> <p id="../Impala/docs/topics/impala_smallint.xml_partitioning_good"><b>Partitioning:</b>  Prefer to use this type for a partition key column. Impala can process the numeric' + 
      '        type more efficiently than a <span class="sql-docs-inline-code">STRING</span>  representation of the value.' + 
      '      </p> <p id="../Impala/docs/topics/impala_smallint.xml_hbase_ok"><b>HBase considerations:</b>  This data type is fully compatible with HBase tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_smallint.xml_text_bulky"><b>Text table considerations:</b>  Values of this type are potentially larger in text tables than in tables' + 
      '        using Parquet or other binary formats.' + 
      '      </p> <p id="../Impala/docs/topics/impala_smallint.xml_internals_2_bytes"><b>Internal details:</b>  Represented in memory as a 2-byte value.' + 
      '      </p> <p id="../Impala/docs/topics/impala_smallint.xml_added_forever"><b>Added in:</b>  Available in all versions of Impala.' + 
      '      </p> <p id="../Impala/docs/topics/impala_smallint.xml_column_stats_constant"><b>Column statistics considerations:</b>  Because this type has a fixed size, the maximum and average size' + 
      '        fields are always filled in for column statistics, even before you run the <span class="sql-docs-inline-code">COMPUTE STATS</span> ' + 
      '        statement.' + 
      '      </p> <p id="../Impala/docs/topics/impala_smallint.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_literals.xml#numeric_literals"><h4>Numeric Literals</h4> </a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tinyint.xml#tinyint">TINYINT Data Type</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_smallint.xml#smallint">SMALLINT Data Type</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_int.xml#int">INT Data Type</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_bigint.xml#bigint">BIGINT Data Type</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_decimal.xml#decimal">DECIMAL Data Type (Impala 1.4 or higher only)</a>,' + 
      '      <span>math functions</span></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_string.xml',
    title: 'STRING Data Type',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      A data type used in <span class="sql-docs-inline-code">CREATE TABLE</span>  and <span class="sql-docs-inline-code">ALTER' + 
      '        TABLE</span>  statements.' + 
      '    </p> <p id="../Impala/docs/topics/impala_string.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
      '      In the column definition of a <span class="sql-docs-inline-code">CREATE TABLE</span>  and' + 
      '        <span class="sql-docs-inline-code">ALTER TABLE</span>  statements:' + 
      '    </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">column_name</span> STRING</div><p><b>Length:</b> </p> <p><span class="sql-docs-inline-code">' + 
      '      If you need to manipulate string values with precise or' + 
      '        maximum lengths, in Impala 2.0 and higher you can declare columns as' + 
      '            <span class="sql-docs-inline-code">VARCHAR(<span class="sql-docs-variable">max_length</span> )</span>  or' + 
      '            <span class="sql-docs-inline-code">CHAR(<span class="sql-docs-variable">length</span> )</span> , but for best' + 
      '        performance use <span class="sql-docs-inline-code">STRING</span>  where practical.</span> </p> <p>' + 
      '      Take the following considerations for <span class="sql-docs-inline-code">STRING</span> ' + 
      '      lengths:' + 
      '    </p> <ul><li>' + 
      '        The hard limit on the size of a <span class="sql-docs-inline-code">STRING</span>  and the total' + 
      '        size of a row is 2 GB.' + 
      '' + 
      '        <p>' + 
      '          If a query tries to process or create a string' + 
      '          larger than this limit, it will return an error to the user.' + 
      '        </p> </li> <li>' + 
      '        The limit is 1 GB on <span class="sql-docs-inline-code">STRING</span>  when writing to Parquet' + 
      '        files.' + 
      '      </li> <li>' + 
      '        Queries operating on strings with 32 KB or less will work reliably and' + 
      '        will not hit significant performance or memory problems (unless you have' + 
      '        very complex queries, very many columns, etc.)' + 
      '      </li> <li>' + 
      '        Performance and memory consumption may degrade with strings larger' + 
      '        than 32 KB.' + 
      '      </li> <li>' + 
      '        The row size, i.e. the total size of all string and other columns, is' + 
      '        subject to lower limits at various points in query execution that' + 
      '        support spill-to-disk. A few examples for lower row size limits are:' + 
      '' + 
      '        <ul><li>' + 
      '            Rows coming from the right side of any hash join' + 
      '          </li> <li>' + 
      '            Rows coming from either side of a hash join that spills to disk' + 
      '          </li> <li>' + 
      '            Rows being sorted by the <span class="sql-docs-inline-code">SORT</span>  operator without a' + 
      '            limit' + 
      '          </li> <li>' + 
      '            Rows in a grouping aggregation' + 
      '          </li> </ul> <p>' + 
      '          In Impala 2.9 and lower, the default limit of' + 
      '          the row size in the above cases is 8 MB.' + 
      '        </p> <p>' + 
      '          In Impala 2.10 and higher, the max row size is configurable on' + 
      '          a per-query basis with the <span class="sql-docs-inline-code">MAX_ROW_SIZE</span>  query option.' + 
      '          Rows up to <span class="sql-docs-inline-code">MAX_ROW_SIZE</span>  (which defaults to 512 KB)' + 
      '          can always be processed in the above cases. Rows larger than' + 
      '            <span class="sql-docs-inline-code">MAX_ROW_SIZE</span>  are processed on a best-effort basis.' + 
      '          See <span>MAX_ROW_SIZE</span>  for more' + 
      '          details.' + 
      '        </p> </li> </ul> <p><b>Character sets:</b> </p> <p>' + 
      '      For full support in all Impala subsystems, restrict string values to the' + 
      '      ASCII character set. Although some UTF-8 character data can be stored in' + 
      '      Impala and retrieved through queries, UTF-8 strings containing non-ASCII' + 
      '      characters are not guaranteed to work properly in combination with many' + 
      '      SQL aspects, including but not limited to:' + 
      '    </p> <ul><li>' + 
      '        String manipulation functions.' + 
      '      </li> <li>' + 
      '        Comparison operators.' + 
      '      </li> <li>' + 
      '        The <span class="sql-docs-inline-code">ORDER BY</span>  clause.' + 
      '      </li> <li> Values in partition key columns.' + 
      '      </li> </ul> <p>' + 
      '      For any national language aspects such as collation order or' + 
      '      interpreting extended ASCII variants such as ISO-8859-1 or ISO-8859-2' + 
      '      encodings, Impala does not include such metadata with the table' + 
      '      definition. If you need to sort, manipulate, or display data depending on' + 
      '      those national language characteristics of string data, use logic on the' + 
      '      application side.' + 
      '    </p> <p><b>Conversions:</b> </p> <ul><li><p>' + 
      '          Impala does not automatically convert <span class="sql-docs-inline-code">STRING</span>  to any' + 
      '          numeric type. Impala does automatically convert' + 
      '            <span class="sql-docs-inline-code">STRING</span>  to <span class="sql-docs-inline-code">TIMESTAMP</span>  if the value' + 
      '          matches one of the accepted <span class="sql-docs-inline-code">TIMESTAMP</span>  formats; see' + 
      '            <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_timestamp.xml#timestamp">TIMESTAMP Data Type</a> for details.' + 
      '        </p> </li> <li><p>' + 
      '          You can use <span class="sql-docs-inline-code">CAST()</span>  to convert' + 
      '            <span class="sql-docs-inline-code">STRING</span>  values to <span class="sql-docs-inline-code">TINYINT</span> ,' + 
      '            <span class="sql-docs-inline-code">SMALLINT</span> , <span class="sql-docs-inline-code">INT</span> ,' + 
      '            <span class="sql-docs-inline-code">BIGINT</span> , <span class="sql-docs-inline-code">FLOAT</span> ,' + 
      '            <span class="sql-docs-inline-code">DOUBLE</span> , or <span class="sql-docs-inline-code">TIMESTAMP</span> .' + 
      '        </p> </li> <li><p>' + 
      '          You cannot directly cast a <span class="sql-docs-inline-code">STRING</span>  value to' + 
      '            <span class="sql-docs-inline-code">BOOLEAN</span> . You can use a <span class="sql-docs-inline-code">CASE</span> ' + 
      '          expression to evaluate string values such as <span class="sql-docs-inline-code">\'T\'</span> ,' + 
      '            <span class="sql-docs-inline-code">\'true\'</span> , and so on and return Boolean' + 
      '            <span class="sql-docs-inline-code">true</span>  and <span class="sql-docs-inline-code">false</span>  values as' + 
      '          appropriate.' + 
      '        </p> </li> <li><p>' + 
      '          You can cast a <span class="sql-docs-inline-code">BOOLEAN</span>  value to' + 
      '            <span class="sql-docs-inline-code">STRING</span> , returning <span class="sql-docs-inline-code">\'1\'</span>  for' + 
      '            <span class="sql-docs-inline-code">true</span>  values and <span class="sql-docs-inline-code">\'0\'</span>  for' + 
      '            <span class="sql-docs-inline-code">false</span>  values.' + 
      '        </p> </li> </ul> <p id="../Impala/docs/topics/impala_string.xml_partitioning_blurb"><b>Partitioning:</b> </p> <p>' + 
      '      Although it might be convenient to use <span class="sql-docs-inline-code">STRING</span>  columns' + 
      '      for partition keys, even when those columns contain numbers, for' + 
      '      performance and scalability it is much better to use numeric columns as' + 
      '      partition keys whenever practical. Although the underlying HDFS directory' + 
      '      name might be the same in either case, the in-memory storage for the' + 
      '      partition key columns is more compact, and computations are faster, if' + 
      '      partition key columns such as <span class="sql-docs-inline-code">YEAR</span> ,' + 
      '        <span class="sql-docs-inline-code">MONTH</span> , <span class="sql-docs-inline-code">DAY</span>  and so on are declared as' + 
      '        <span class="sql-docs-inline-code">INT</span> , <span class="sql-docs-inline-code">SMALLINT</span> , and so on.' + 
      '    </p> <p id="../Impala/docs/topics/impala_string.xml_zero_length_strings"><b>Zero-length strings:</b>  For purposes of clauses such as <span class="sql-docs-inline-code">DISTINCT</span>  and <span class="sql-docs-inline-code">GROUP' + 
      '        BY</span> , Impala considers zero-length strings (<span class="sql-docs-inline-code">""</span> ), <span class="sql-docs-inline-code">NULL</span> , and space' + 
      '        to all be different values.' + 
      '      </p> <p id="../Impala/docs/topics/impala_string.xml_text_bulky"><b>Text table considerations:</b>  Values of this type are potentially larger in text tables than in tables' + 
      '        using Parquet or other binary formats.' + 
      '      </p> <p><b>Avro considerations:</b> </p> <p id="../Impala/docs/topics/impala_string.xml_avro_2gb_strings">' + 
      '        The Avro specification allows string values up to 2**64 bytes in length.' + 
      '        Impala queries for Avro tables use 32-bit integers to hold string lengths.' + 
      '        In Impala 2.5 and higher, Impala truncates <span class="sql-docs-inline-code">CHAR</span> ' + 
      '        and <span class="sql-docs-inline-code">VARCHAR</span>  values in Avro tables to (2**31)-1 bytes.' + 
      '        If a query encounters a <span class="sql-docs-inline-code">STRING</span>  value longer than (2**31)-1' + 
      '        bytes in an Avro table, the query fails. In earlier releases,' + 
      '        encountering such long values in an Avro table could cause a crash.' + 
      '      </p> <p id="../Impala/docs/topics/impala_string.xml_column_stats_variable"><b>Column statistics considerations:</b>  Because the values of this type have variable size, none of the' + 
      '        column statistics fields are filled in until you run the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement.' + 
      '      </p> <p id="../Impala/docs/topics/impala_string.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      The following examples demonstrate double-quoted and single-quoted' + 
      '      string literals, and required escaping for quotation marks within string' + 
      '      literals:' + 
      '    </p> <div class="sql-docs-code-block">SELECT \'I am a single-quoted string\';<br/>SELECT "I am a double-quoted string";<br/>SELECT \'I\\\'m a single-quoted string with an apostrophe\';<br/>SELECT "I\\\'m a double-quoted string with an apostrophe";<br/>SELECT \'I am a "short" single-quoted string containing quotes\';<br/>SELECT "I am a \\"short\\" double-quoted string containing quotes";<br/></div><p>' + 
      '      The following examples demonstrate calls to string manipulation' + 
      '      functions to concatenate strings, convert numbers to strings, or pull out' + 
      '      substrings:' + 
      '    </p> <div class="sql-docs-code-block">SELECT CONCAT("Once upon a time, there were ", CAST(3 AS STRING), \' little pigs.\');<br/>SELECT SUBSTR("hello world",7,5);<br/></div><p>' + 
      '      The following examples show how to perform operations on' + 
      '        <span class="sql-docs-inline-code">STRING</span>  columns within a table:' + 
      '    </p> <div class="sql-docs-code-block">CREATE TABLE t1 (s1 STRING, s2 STRING);<br/>INSERT INTO t1 VALUES ("hello", \'world\'), (CAST(7 AS STRING), "wonders");<br/>SELECT s1, s2, length(s1) FROM t1 WHERE s2 LIKE \'w%\';<br/></div><p id="../Impala/docs/topics/impala_string.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_literals.xml#string_literals"><h4>String Literals</h4> </a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_char.xml#char">CHAR Data Type (Impala 2.0 or higher only)</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_varchar.xml#varchar">VARCHAR Data Type (Impala 2.0 or higher only)</a>, <span>string functions</span>, <span>datetime functions</span></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_struct.xml',
    title: 'STRUCT Complex Type (Impala 2.3 or higher only)',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      A complex data type, representing multiple fields of a single item. Frequently used as the element type of an <span class="sql-docs-inline-code">ARRAY</span> ' + 
      '      or the <span class="sql-docs-inline-code">VALUE</span>  part of a <span class="sql-docs-inline-code">MAP</span> .' + 
      '    </p> <p id="../Impala/docs/topics/impala_struct.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">column_name</span> STRUCT < <span class="sql-docs-variable">name</span> : <span class="sql-docs-variable">type</span> [COMMENT \'<span class="sql-docs-variable">comment_string</span> \'], ... ><br/><br/>type ::= <span class="sql-docs-variable">primitive_type</span> | <span class="sql-docs-variable">complex_type</span> </div><p>' + 
      '      The names and number of fields within the <span class="sql-docs-inline-code">STRUCT</span>  are fixed. Each field can be a different type. A field within a' + 
      '      <span class="sql-docs-inline-code">STRUCT</span>  can also be another <span class="sql-docs-inline-code">STRUCT</span> , or an <span class="sql-docs-inline-code">ARRAY</span>  or a <span class="sql-docs-inline-code">MAP</span> , allowing' + 
      '      you to create nested data structures with a maximum nesting depth of 100.' + 
      '    </p> <p>' + 
      '      A <span class="sql-docs-inline-code">STRUCT</span>  can be the top-level type for a column, or can itself be an item within an <span class="sql-docs-inline-code">ARRAY</span>  or the' + 
      '      value part of the key-value pair in a <span class="sql-docs-inline-code">MAP</span> .' + 
      '    </p> <p>' + 
      '      When a <span class="sql-docs-inline-code">STRUCT</span>  is used as an <span class="sql-docs-inline-code">ARRAY</span>  element or a <span class="sql-docs-inline-code">MAP</span>  value, you use a join clause to' + 
      '      bring the <span class="sql-docs-inline-code">ARRAY</span>  or <span class="sql-docs-inline-code">MAP</span>  elements into the result set, and then refer to' + 
      '      <span class="sql-docs-inline-code"><span class="sql-docs-variable">array_name</span> .ITEM.<span class="sql-docs-variable">field</span> </span>  or' + 
      '      <span class="sql-docs-inline-code"><span class="sql-docs-variable">map_name</span> .VALUE.<span class="sql-docs-variable">field</span> </span> . In the case of a <span class="sql-docs-inline-code">STRUCT</span>  directly inside' + 
      '      an <span class="sql-docs-inline-code">ARRAY</span>  or <span class="sql-docs-inline-code">MAP</span> , you can omit the <span class="sql-docs-inline-code">.ITEM</span>  and <span class="sql-docs-inline-code">.VALUE</span>  pseudocolumns' + 
      '      and refer directly to <span class="sql-docs-inline-code"><span class="sql-docs-variable">array_name</span> .<span class="sql-docs-variable">field</span> </span>  or' + 
      '      <span class="sql-docs-inline-code"><span class="sql-docs-variable">map_name</span> .<span class="sql-docs-variable">field</span> </span> .' + 
      '    </p> <p id="../Impala/docs/topics/impala_struct.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p id="../Impala/docs/topics/impala_struct.xml_complex_types_combo">' + 
      '        Because complex types are often used in combination,' + 
      '        for example an <span class="sql-docs-inline-code">ARRAY</span>  of <span class="sql-docs-inline-code">STRUCT</span> ' + 
      '        elements, if you are unfamiliar with the Impala complex types,' + 
      '        start with <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a> for' + 
      '        background information and usage examples.' + 
      '      </p> <p>' + 
      '      A <span class="sql-docs-inline-code">STRUCT</span>  is similar conceptually to a table row: it contains a fixed number of named fields, each with a predefined' + 
      '      type. To combine two related tables, while using complex types to minimize repetition, the typical way to represent that data is as an' + 
      '      <span class="sql-docs-inline-code">ARRAY</span>  of <span class="sql-docs-inline-code">STRUCT</span>  elements.' + 
      '    </p> <p>' + 
      '      Because a <span class="sql-docs-inline-code">STRUCT</span>  has a fixed number of named fields, it typically does not make sense to have a' + 
      '      <span class="sql-docs-inline-code">STRUCT</span>  as the type of a table column. In such a case, you could just make each field of the <span class="sql-docs-inline-code">STRUCT</span> ' + 
      '      into a separate column of the table. The <span class="sql-docs-inline-code">STRUCT</span>  type is most useful as an item of an <span class="sql-docs-inline-code">ARRAY</span>  or the' + 
      '      value part of the key-value pair in a <span class="sql-docs-inline-code">MAP</span> . A nested type column with a <span class="sql-docs-inline-code">STRUCT</span>  at the lowest level' + 
      '      lets you associate a variable number of row-like objects with each row of the table.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">STRUCT</span>  type is straightforward to reference within a query. You do not need to include the' + 
      '      <span class="sql-docs-inline-code">STRUCT</span>  column in a join clause or give it a table alias, as is required for the <span class="sql-docs-inline-code">ARRAY</span>  and' + 
      '      <span class="sql-docs-inline-code">MAP</span>  types. You refer to the individual fields using dot notation, such as' + 
      '      <span class="sql-docs-inline-code"><span class="sql-docs-variable">struct_column_name</span> .<span class="sql-docs-variable">field_name</span> </span> , without any pseudocolumn such as' + 
      '      <span class="sql-docs-inline-code">ITEM</span>  or <span class="sql-docs-inline-code">VALUE</span> .' + 
      '    </p> <p id="../Impala/docs/topics/impala_struct.xml_complex_types_describe">' + 
      '        You can pass a multi-part qualified name to <span class="sql-docs-inline-code">DESCRIBE</span> ' + 
      '        to specify an <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ' + 
      '        column and visualize its structure as if it were a table.' + 
      '        For example, if table <span class="sql-docs-inline-code">T1</span>  contains an <span class="sql-docs-inline-code">ARRAY</span>  column' + 
      '        <span class="sql-docs-inline-code">A1</span> , you could issue the statement <span class="sql-docs-inline-code">DESCRIBE t1.a1</span> .' + 
      '        If table <span class="sql-docs-inline-code">T1</span>  contained a <span class="sql-docs-inline-code">STRUCT</span>  column <span class="sql-docs-inline-code">S1</span> ,' + 
      '        and a field <span class="sql-docs-inline-code">F1</span>  within the <span class="sql-docs-inline-code">STRUCT</span>  was a <span class="sql-docs-inline-code">MAP</span> ,' + 
      '        you could issue the statement <span class="sql-docs-inline-code">DESCRIBE t1.s1.f1</span> .' + 
      '        An <span class="sql-docs-inline-code">ARRAY</span>  is shown as a two-column table, with' + 
      '        <span class="sql-docs-inline-code">ITEM</span>  and <span class="sql-docs-inline-code">POS</span>  columns.' + 
      '        A <span class="sql-docs-inline-code">STRUCT</span>  is shown as a table with each field' + 
      '        representing a column in the table.' + 
      '        A <span class="sql-docs-inline-code">MAP</span>  is shown as a two-column table, with' + 
      '        <span class="sql-docs-inline-code">KEY</span>  and <span class="sql-docs-inline-code">VALUE</span>  columns.' + 
      '      </p> <p id="../Impala/docs/topics/impala_struct.xml_internals_blurb"><b>Internal details:</b> </p> <p>' + 
      '      Within the Parquet data file, the values for each <span class="sql-docs-inline-code">STRUCT</span>  field are stored adjacent to each other, so that they can be' + 
      '      encoded and compressed using all the Parquet techniques for storing sets of similar or repeated values. The adjacency applies even' + 
      '      when the <span class="sql-docs-inline-code">STRUCT</span>  values are part of an <span class="sql-docs-inline-code">ARRAY</span>  or <span class="sql-docs-inline-code">MAP</span> . During a query, Impala avoids' + 
      '      unnecessary I/O by reading only the portions of the Parquet data file containing the requested <span class="sql-docs-inline-code">STRUCT</span>  fields.' + 
      '    </p> <p id="../Impala/docs/topics/impala_struct.xml_added_in_230"><b>Added in:</b> Impala 2.3.0</p> <p id="../Impala/docs/topics/impala_struct.xml_restrictions_blurb"><b>Restrictions:</b> </p> <ul></ul> <p id="../Impala/docs/topics/impala_struct.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p id="../Impala/docs/topics/impala_struct.xml_kudu_unsupported_data_type">' + 
      '        Currently, the data types <span class="sql-docs-inline-code">CHAR</span> , <span class="sql-docs-inline-code">VARCHAR</span> ,' + 
      '        <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">MAP</span> , and <span class="sql-docs-inline-code">STRUCT</span>  cannot be used with Kudu tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_struct.xml_example_blurb"><b>Examples:</b> </p> <div id="../Impala/docs/topics/impala_struct.xml_complex_type_schema_pointer" class="sql-docs-note">' + 
      '      Many of the complex type examples refer to tables' + 
      '      such as <span class="sql-docs-inline-code">CUSTOMER</span>  and <span class="sql-docs-inline-code">REGION</span> ' + 
      '      adapted from the tables used in the TPC-H benchmark.' + 
      '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_sample_schema"><h4>Sample Schema and Data for Experimenting with Impala Complex Types</h4> </a>' + 
      '      for the table definitions.' + 
      '      </div> <p>' + 
      '      The following example shows a table with various kinds of <span class="sql-docs-inline-code">STRUCT</span>  columns, both at the top level and nested within' + 
      '      other complex types. Practice the <span class="sql-docs-inline-code">CREATE TABLE</span>  and query notation for complex type columns using empty tables, until' + 
      '      you can visualize a complex data structure and construct corresponding SQL statements reliably.' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      The following example shows how to examine the structure of a table containing one or more <span class="sql-docs-inline-code">STRUCT</span>  columns by using' + 
      '      the <span class="sql-docs-inline-code">DESCRIBE</span>  statement. You can visualize each <span class="sql-docs-inline-code">STRUCT</span>  as its own table, with columns named the same' + 
      '      as each field of the <span class="sql-docs-inline-code">STRUCT</span> . If the <span class="sql-docs-inline-code">STRUCT</span>  is nested inside another complex type, such as' + 
      '      <span class="sql-docs-inline-code">ARRAY</span> , you can extend the qualified name passed to <span class="sql-docs-inline-code">DESCRIBE</span>  until the output shows just the' + 
      '      <span class="sql-docs-inline-code">STRUCT</span>  fields.' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      The top-level column <span class="sql-docs-inline-code">EMPLOYEE_INFO</span>  is a <span class="sql-docs-inline-code">STRUCT</span> . Describing' + 
      '      <span class="sql-docs-inline-code"><span class="sql-docs-variable">table_name</span> .<span class="sql-docs-variable">struct_name</span> </span>  displays the fields of the <span class="sql-docs-inline-code">STRUCT</span>  as if' + 
      '      they were columns of a table:' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      Because <span class="sql-docs-inline-code">PLACES_LIVED</span>  is a <span class="sql-docs-inline-code">STRUCT</span>  inside an <span class="sql-docs-inline-code">ARRAY</span> , the initial' + 
      '      <span class="sql-docs-inline-code">DESCRIBE</span>  shows the structure of the <span class="sql-docs-inline-code">ARRAY</span> :' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      Ask for the details of the <span class="sql-docs-inline-code">ITEM</span>  field of the <span class="sql-docs-inline-code">ARRAY</span>  to see just the layout of the' + 
      '      <span class="sql-docs-inline-code">STRUCT</span> :' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      Likewise, <span class="sql-docs-inline-code">MEMORABLE_MOMENTS</span>  has a <span class="sql-docs-inline-code">STRUCT</span>  inside a <span class="sql-docs-inline-code">MAP</span> , which requires an extra' + 
      '      level of qualified name to see just the <span class="sql-docs-inline-code">STRUCT</span>  part:' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      For a <span class="sql-docs-inline-code">MAP</span> , ask to see the <span class="sql-docs-inline-code">VALUE</span>  field to see the corresponding <span class="sql-docs-inline-code">STRUCT</span>  fields in a' + 
      '      table-like structure:' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      For a <span class="sql-docs-inline-code">STRUCT</span>  inside a <span class="sql-docs-inline-code">STRUCT</span> , we can see the fields of the outer <span class="sql-docs-inline-code">STRUCT</span> :' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      Then we can use a further qualified name to see just the fields of the inner <span class="sql-docs-inline-code">STRUCT</span> :' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      The following example shows how to examine the structure of a table containing one or more <span class="sql-docs-inline-code">STRUCT</span>  columns by using' + 
      '      the <span class="sql-docs-inline-code">DESCRIBE</span>  statement. You can visualize each <span class="sql-docs-inline-code">STRUCT</span>  as its own table, with columns named the same' + 
      '      as each field of the <span class="sql-docs-inline-code">STRUCT</span> . If the <span class="sql-docs-inline-code">STRUCT</span>  is nested inside another complex type, such as' + 
      '      <span class="sql-docs-inline-code">ARRAY</span> , you can extend the qualified name passed to <span class="sql-docs-inline-code">DESCRIBE</span>  until the output shows just the' + 
      '      <span class="sql-docs-inline-code">STRUCT</span>  fields.' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      For example, this table uses a struct that encodes several data values for each phone number associated with a person. Each person can' + 
      '      have a variable-length array of associated phone numbers, and queries can refer to the category field to locate specific home, work,' + 
      '      mobile, and so on kinds of phone numbers.' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      Because structs are naturally suited to composite values where the fields have different data types, you might use them to decompose' + 
      '      things such as addresses:' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      In a big data context, splitting out data fields such as the number part of the address and the street name could let you do analysis' + 
      '      on each field independently. For example, which streets have the largest number range of addresses, what are the statistical' + 
      '      properties of the street names, which areas have a higher proportion of <q>Roads</q> , <q>Courts</q>  or <q>Boulevards</q> , and so on.' + 
      '    </p> <p id="../Impala/docs/topics/impala_struct.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_array.xml#array">ARRAY Complex Type (Impala 2.3 or higher only)</a>,' + 
      '<a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_map.xml#map">MAP Complex Type (Impala 2.3 or higher only)</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_timestamp.xml',
    title: 'TIMESTAMP Data Type',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      A data type used in <span class="sql-docs-inline-code">CREATE TABLE</span>  and <span class="sql-docs-inline-code">ALTER TABLE</span> ' + 
      '      statements, representing a point in time.' + 
      '    </p> <p id="../Impala/docs/topics/impala_timestamp.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
      '      In the column definition of a <span class="sql-docs-inline-code">CREATE TABLE</span>  statement:' + 
      '    </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">column_name</span> TIMESTAMP</div><p><b>Range:</b>  Allowed date values range from 1400-01-01 to 9999-12-31; this range is' + 
      '      different from the Hive <span class="sql-docs-inline-code">TIMESTAMP</span>  type. Internally, the resolution of the' + 
      '      time portion of a <span class="sql-docs-inline-code">TIMESTAMP</span>  value is in nanoseconds.' + 
      '    </p> <p><b>INTERVAL expressions:</b> </p> <p>' + 
      '      You can perform date arithmetic by adding or subtracting a specified number of time units,' + 
      '      using the <span class="sql-docs-inline-code">INTERVAL</span>  keyword and the <span class="sql-docs-inline-code">+</span>  and' + 
      '      <span class="sql-docs-inline-code">-</span>  operators or <span class="sql-docs-inline-code">date_add()</span>  and' + 
      '      <span class="sql-docs-inline-code">date_sub()</span>  functions. You can specify units as <span class="sql-docs-inline-code">YEAR[S]</span> ,' + 
      '      <span class="sql-docs-inline-code">MONTH[S]</span> , <span class="sql-docs-inline-code">WEEK[S]</span> , <span class="sql-docs-inline-code">DAY[S]</span> ,' + 
      '      <span class="sql-docs-inline-code">HOUR[S]</span> , <span class="sql-docs-inline-code">MINUTE[S]</span> , <span class="sql-docs-inline-code">SECOND[S]</span> ,' + 
      '      <span class="sql-docs-inline-code">MILLISECOND[S]</span> , <span class="sql-docs-inline-code">MICROSECOND[S]</span> , and' + 
      '      <span class="sql-docs-inline-code">NANOSECOND[S]</span> . You can only specify one time unit in each interval' + 
      '      expression, for example <span class="sql-docs-inline-code">INTERVAL 3 DAYS</span>  or <span class="sql-docs-inline-code">INTERVAL 25' + 
      '      HOURS</span> , but you can produce any granularity by adding together successive' + 
      '      <span class="sql-docs-inline-code">INTERVAL</span>  values, such as <span class="sql-docs-inline-code"><span class="sql-docs-variable">timestamp_value</span>  +' + 
      '      INTERVAL 3 WEEKS - INTERVAL 1 DAY + INTERVAL 10 MICROSECONDS</span> .' + 
      '    </p> <p>' + 
      '      For example:' + 
      '    </p> <div class="sql-docs-code-block">select now() + interval 1 day;<br/>select date_sub(now(), interval 5 minutes);<br/>insert into auction_details<br/>  select auction_id, auction_start_time, auction_start_time + interval 2 days + interval 12 hours<br/>  from new_auctions;</div><p><b>Time zones:</b> </p> <p>' + 
      '      By default, Impala does not store timestamps using the local timezone, to avoid undesired' + 
      '      results from unexpected time zone issues. Timestamps are stored and interpreted relative' + 
      '      to UTC, both when written to or read from data files, or when converted to or from Unix' + 
      '      time values through functions such as <span class="sql-docs-inline-code">from_unixtime()</span>  or' + 
      '      <span class="sql-docs-inline-code">unix_timestamp()</span> . To convert such a <span class="sql-docs-inline-code">TIMESTAMP</span>  value to' + 
      '      one that represents the date and time in a specific time zone, convert the original value' + 
      '      with the <span class="sql-docs-inline-code">from_utc_timestamp()</span>  function.' + 
      '    </p> <p>' + 
      '      Because Impala does not assume that <span class="sql-docs-inline-code">TIMESTAMP</span>  values are in any' + 
      '      particular time zone, you must be conscious of the time zone aspects of data that you' + 
      '      query, insert, or convert.' + 
      '    </p> <p>' + 
      '      For consistency with Unix system calls, the <span class="sql-docs-inline-code">TIMESTAMP</span>  returned by the' + 
      '      <span class="sql-docs-inline-code">now()</span>  function represents the local time in the system time zone, rather' + 
      '      than in UTC. To store values relative to the current time in a portable way, convert any' + 
      '      <span class="sql-docs-inline-code">now()</span>  return values using the <span class="sql-docs-inline-code">to_utc_timestamp()</span> ' + 
      '      function first. For example, the following example shows that the current time in' + 
      '      California (where this Impala cluster is located) is shortly after 2 PM. If that value was' + 
      '      written to a data file, and shipped off to a distant server to be analyzed alongside other' + 
      '      data from far-flung locations, the dates and times would not match up precisely because of' + 
      '      time zone differences. Therefore, the <span class="sql-docs-inline-code">to_utc_timestamp()</span>  function' + 
      '      converts it using a common reference point, the UTC time zone (descended from the old' + 
      '      Greenwich Mean Time standard). The <span class="sql-docs-inline-code">\'PDT\'</span>  argument indicates that the' + 
      '      original value is from the Pacific time zone with Daylight Saving Time in effect. When' + 
      '      servers in all geographic locations run the same transformation on any local date and time' + 
      '      values (with the appropriate time zone argument), the stored data uses a consistent' + 
      '      representation. Impala queries can use functions such as <span class="sql-docs-inline-code">EXTRACT()</span> ,' + 
      '      <span class="sql-docs-inline-code">MIN()</span> , <span class="sql-docs-inline-code">AVG()</span> , and so on to do time-series analysis on' + 
      '      those timestamps.' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > select now();<br/>+-------------------------------+<br/>| now()                         |<br/>+-------------------------------+<br/>| 2015-04-09 14:07:46.580465000 |<br/>+-------------------------------+<br/>[localhost:21000] > select to_utc_timestamp(now(), \'PDT\');<br/>+--------------------------------+<br/>| to_utc_timestamp(now(), \'pdt\') |<br/>+--------------------------------+<br/>| 2015-04-09 21:08:07.664547000  |<br/>+--------------------------------+<br/></div><p>' + 
      '      The converse function, <span class="sql-docs-inline-code">from_utc_timestamp()</span> , lets you take stored' + 
      '      <span class="sql-docs-inline-code">TIMESTAMP</span>  data or calculated results and convert back to local date and' + 
      '      time for processing on the application side. The following example shows how you might' + 
      '      represent some future date (such as the ending date and time of an auction) in UTC, and' + 
      '      then convert back to local time when convenient for reporting or other processing. The' + 
      '      final query in the example tests whether this arbitrary UTC date and time has passed yet,' + 
      '      by converting it back to the local time zone and comparing it against the current date and' + 
      '      time.' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > select to_utc_timestamp(now() + interval 2 weeks, \'PDT\');<br/>+---------------------------------------------------+<br/>| to_utc_timestamp(now() + interval 2 weeks, \'pdt\') |<br/>+---------------------------------------------------+<br/>| 2015-04-23 21:08:34.152923000                     |<br/>+---------------------------------------------------+<br/>[localhost:21000] > select from_utc_timestamp(\'2015-04-23 21:08:34.152923000\',\'PDT\');<br/>+------------------------------------------------------------+<br/>| from_utc_timestamp(\'2015-04-23 21:08:34.152923000\', \'pdt\') |<br/>+------------------------------------------------------------+<br/>| 2015-04-23 14:08:34.152923000                              |<br/>+------------------------------------------------------------+<br/>[localhost:21000] > select from_utc_timestamp(\'2015-04-23 21:08:34.152923000\',\'PDT\') < now();<br/>+--------------------------------------------------------------------+<br/>| from_utc_timestamp(\'2015-04-23 21:08:34.152923000\', \'pdt\') < now() |<br/>+--------------------------------------------------------------------+<br/>| false                                                              |<br/>+--------------------------------------------------------------------+<br/></div><p>' + 
      '      If you have data files written by Hive, those <span class="sql-docs-inline-code">TIMESTAMP</span>  values represent' + 
      '      the local timezone of the host where the data was written, potentially leading to' + 
      '      inconsistent results when processed by Impala. To avoid compatibility problems or having' + 
      '      to code workarounds, you can specify one or both of these <span class="sql-docs-inline-code">impalad</span> ' + 
      '      startup flags: <span class="sql-docs-inline-code">--use_local_tz_for_unix_timestamp_conversions=true</span> <span class="sql-docs-inline-code">-convert_legacy_hive_parquet_utc_timestamps=true</span> . Although' + 
      '      <span class="sql-docs-inline-code">-convert_legacy_hive_parquet_utc_timestamps</span>  is turned off by default to' + 
      '      avoid performance overhead, where practical turn it on when processing' + 
      '      <span class="sql-docs-inline-code">TIMESTAMP</span>  columns in Parquet files written by Hive, to avoid unexpected' + 
      '      behavior.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">--use_local_tz_for_unix_timestamp_conversions</span>  setting affects' + 
      '      conversions from <span class="sql-docs-inline-code">TIMESTAMP</span>  to <span class="sql-docs-inline-code">BIGINT</span> , or from' + 
      '      <span class="sql-docs-inline-code">BIGINT</span>  to <span class="sql-docs-inline-code">TIMESTAMP</span> . By default, Impala treats all' + 
      '      <span class="sql-docs-inline-code">TIMESTAMP</span>  values as UTC, to simplify analysis of time-series data from' + 
      '      different geographic regions. When you enable the' + 
      '      <span class="sql-docs-inline-code">--use_local_tz_for_unix_timestamp_conversions</span>  setting, these operations' + 
      '      treat the input values as if they are in the local tie zone of the host doing the' + 
      '      processing. See <span>datetime functions</span>' + 
      '      for the list of functions affected by the' + 
      '      <span class="sql-docs-inline-code">--use_local_tz_for_unix_timestamp_conversions</span>  setting.' + 
      '    </p> <p>' + 
      '      The following sequence of examples shows how the interpretation of' + 
      '      <span class="sql-docs-inline-code">TIMESTAMP</span>  values in Parquet tables is affected by the setting of the' + 
      '      <span class="sql-docs-inline-code">-convert_legacy_hive_parquet_utc_timestamps</span>  setting.' + 
      '    </p> <p>' + 
      '      Regardless of the <span class="sql-docs-inline-code">-convert_legacy_hive_parquet_utc_timestamps</span>  setting,' + 
      '      <span class="sql-docs-inline-code">TIMESTAMP</span>  columns in text tables can be written and read interchangeably' + 
      '      by Impala and Hive:' + 
      '    </p> <div class="sql-docs-code-block">Impala DDL and queries for text table:<br/><br/>[localhost:21000] > create table t1 (x timestamp);<br/>[localhost:21000] > insert into t1 values (now()), (now() + interval 1 day);<br/>[localhost:21000] > select x from t1;<br/>+-------------------------------+<br/>| x                             |<br/>+-------------------------------+<br/>| 2015-04-07 15:43:02.892403000 |<br/>| 2015-04-08 15:43:02.892403000 |<br/>+-------------------------------+<br/>[localhost:21000] > select to_utc_timestamp(x, \'PDT\') from t1;<br/>+-------------------------------+<br/>| to_utc_timestamp(x, \'pdt\')    |<br/>+-------------------------------+<br/>| 2015-04-07 22:43:02.892403000 |<br/>| 2015-04-08 22:43:02.892403000 |<br/>+-------------------------------+<br/><br/>Hive query for text table:<br/><br/>hive> select * from t1;<br/>OK<br/>2015-04-07 15:43:02.892403<br/>2015-04-08 15:43:02.892403<br/>Time taken: 1.245 seconds, Fetched: 2 row(s)<br/></div><p>' + 
      '      When the table uses Parquet format, Impala expects any time zone adjustment to be applied' + 
      '      prior to writing, while <span class="sql-docs-inline-code">TIMESTAMP</span>  values written by Hive are adjusted to' + 
      '      be in the UTC time zone. When Hive queries Parquet data files that it wrote, it adjusts' + 
      '      the <span class="sql-docs-inline-code">TIMESTAMP</span>  values back to the local time zone, while Impala does no' + 
      '      conversion. Hive does no time zone conversion when it queries Impala-written Parquet' + 
      '      files.' + 
      '    </p> <div class="sql-docs-code-block">Impala DDL and queries for Parquet table:<br/><br/>[localhost:21000] > create table p1 stored as parquet as select x from t1;<br/>+-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 2 row(s) |<br/>+-------------------+<br/>[localhost:21000] > select x from p1;<br/>+-------------------------------+<br/>| x                             |<br/>+-------------------------------+<br/>| 2015-04-07 15:43:02.892403000 |<br/>| 2015-04-08 15:43:02.892403000 |<br/>+-------------------------------+<br/><br/>Hive DDL and queries for Parquet table:<br/><br/>hive> create table h1 (x timestamp) stored as parquet;<br/>OK<br/>hive> insert into h1 select * from p1;<br/>...<br/>OK<br/>Time taken: 35.573 seconds<br/>hive> select x from p1;<br/>OK<br/>2015-04-07 15:43:02.892403<br/>2015-04-08 15:43:02.892403<br/>Time taken: 0.324 seconds, Fetched: 2 row(s)<br/>hive> select x from h1;<br/>OK<br/>2015-04-07 15:43:02.892403<br/>2015-04-08 15:43:02.892403<br/>Time taken: 0.197 seconds, Fetched: 2 row(s)<br/></div><p>' + 
      '      The discrepancy arises when Impala queries the Hive-created Parquet table. The underlying' + 
      '      values in the <span class="sql-docs-inline-code">TIMESTAMP</span>  column are different from the ones written by' + 
      '      Impala, even though they were copied from one table to another by an <span class="sql-docs-inline-code">INSERT ...' + 
      '      SELECT</span>  statement in Hive. Hive did an implicit conversion from the local time' + 
      '      zone to UTC as it wrote the values to Parquet.' + 
      '    </p> <div class="sql-docs-code-block">Impala query for TIMESTAMP values from Impala-written and Hive-written data:<br/><br/>[localhost:21000] > select * from p1;<br/>+-------------------------------+<br/>| x                             |<br/>+-------------------------------+<br/>| 2015-04-07 15:43:02.892403000 |<br/>| 2015-04-08 15:43:02.892403000 |<br/>+-------------------------------+<br/>Fetched 2 row(s) in 0.29s<br/>[localhost:21000] > select * from h1;<br/>+-------------------------------+<br/>| x                             |<br/>+-------------------------------+<br/>| 2015-04-07 22:43:02.892403000 |<br/>| 2015-04-08 22:43:02.892403000 |<br/>+-------------------------------+<br/>Fetched 2 row(s) in 0.41s<br/><br/>Underlying integer values for Impala-written and Hive-written data:<br/><br/>[localhost:21000] > select cast(x as bigint) from p1;<br/>+-------------------+<br/>| cast(x as bigint) |<br/>+-------------------+<br/>| 1428421382        |<br/>| 1428507782        |<br/>+-------------------+<br/>Fetched 2 row(s) in 0.38s<br/>[localhost:21000] > select cast(x as bigint) from h1;<br/>+-------------------+<br/>| cast(x as bigint) |<br/>+-------------------+<br/>| 1428446582        |<br/>| 1428532982        |<br/>+-------------------+<br/>Fetched 2 row(s) in 0.20s<br/></div><p>' + 
      '      When the <span class="sql-docs-inline-code">-convert_legacy_hive_parquet_utc_timestamps</span>  setting is enabled,' + 
      '      Impala recognizes the Parquet data files written by Hive, and applies the same' + 
      '      UTC-to-local-timezone conversion logic during the query as Hive uses, making the contents' + 
      '      of the Impala-written <span class="sql-docs-inline-code">P1</span>  table and the Hive-written <span class="sql-docs-inline-code">H1</span> ' + 
      '      table appear identical, whether represented as <span class="sql-docs-inline-code">TIMESTAMP</span>  values or the' + 
      '      underlying <span class="sql-docs-inline-code">BIGINT</span>  integers:' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > select x from p1;<br/>+-------------------------------+<br/>| x                             |<br/>+-------------------------------+<br/>| 2015-04-07 15:43:02.892403000 |<br/>| 2015-04-08 15:43:02.892403000 |<br/>+-------------------------------+<br/>Fetched 2 row(s) in 0.37s<br/>[localhost:21000] > select x from h1;<br/>+-------------------------------+<br/>| x                             |<br/>+-------------------------------+<br/>| 2015-04-07 15:43:02.892403000 |<br/>| 2015-04-08 15:43:02.892403000 |<br/>+-------------------------------+<br/>Fetched 2 row(s) in 0.19s<br/>[localhost:21000] > select cast(x as bigint) from p1;<br/>+-------------------+<br/>| cast(x as bigint) |<br/>+-------------------+<br/>| 1428446582        |<br/>| 1428532982        |<br/>+-------------------+<br/>Fetched 2 row(s) in 0.29s<br/>[localhost:21000] > select cast(x as bigint) from h1;<br/>+-------------------+<br/>| cast(x as bigint) |<br/>+-------------------+<br/>| 1428446582        |<br/>| 1428532982        |<br/>+-------------------+<br/>Fetched 2 row(s) in 0.22s<br/></div><p><b>Conversions:</b> </p> <p id="../Impala/docs/topics/impala_timestamp.xml_timestamp_conversions">' + 
      '        Impala automatically converts <span class="sql-docs-inline-code">STRING</span>  literals of the' + 
      '        correct format into <span class="sql-docs-inline-code">TIMESTAMP</span>  values. Timestamp values' + 
      '        are accepted in the format <span class="sql-docs-inline-code">"yyyy-MM-dd HH:mm:ss.SSSSSS"</span> ,' + 
      '        and can consist of just the date, or just the time, with or without the' + 
      '        fractional second portion. For example, you can specify <span class="sql-docs-inline-code">TIMESTAMP</span> ' + 
      '        values such as <span class="sql-docs-inline-code">\'1966-07-30\'</span> , <span class="sql-docs-inline-code">\'08:30:00\'</span> ,' + 
      '        or <span class="sql-docs-inline-code">\'1985-09-25 17:45:30.005\'</span> .' + 
      '      </p> <p><span id="../Impala/docs/topics/impala_timestamp.xml_cast_int_to_timestamp" class="sql-docs-inline-code">' + 
      '          Casting an integer or floating-point value <span class="sql-docs-inline-code">N</span>  to' + 
      '        <span class="sql-docs-inline-code">TIMESTAMP</span>  produces a value that is <span class="sql-docs-inline-code">N</span>  seconds past the start of the epoch' + 
      '        date (January 1, 1970). By default, the result value represents a date and time in the UTC time zone.' + 
      '        If the setting <span class="sql-docs-inline-code">--use_local_tz_for_unix_timestamp_conversions=true</span>  is in effect,' + 
      '        the resulting <span class="sql-docs-inline-code">TIMESTAMP</span>  represents a date and time in the local time zone.' + 
      '        </span> </p> <p>' + 
      '      In Impala 1.3 and higher, the <span class="sql-docs-inline-code">FROM_UNIXTIME()</span>  and' + 
      '      <span class="sql-docs-inline-code">UNIX_TIMESTAMP()</span>  functions allow a wider range of format strings, with' + 
      '      more flexibility in element order, repetition of letter placeholders, and separator' + 
      '      characters. In Impala 2.3 and higher, the' + 
      '      <span class="sql-docs-inline-code">UNIX_TIMESTAMP()</span>  function also allows a numeric timezone offset to be' + 
      '      specified as part of the input string. See' + 
      '      <span>datetime functions</span> for details.' + 
      '    </p> <p id="../Impala/docs/topics/impala_timestamp.xml_y2k38">' + 
      '        In Impala 2.2.0 and higher, built-in functions that accept or return integers representing <span class="sql-docs-inline-code">TIMESTAMP</span>  values' + 
      '        use the <span class="sql-docs-inline-code">BIGINT</span>  type for parameters and return values, rather than <span class="sql-docs-inline-code">INT</span> .' + 
      '        This change lets the date and time functions avoid an overflow error that would otherwise occur' + 
      '        on January 19th, 2038 (known as the' + 
      '        <a target="_blank" href="http://en.wikipedia.org/wiki/Year_2038_problem">Year 2038 problem or Y2K38 problem</a>).' + 
      '        This change affects the <span class="sql-docs-inline-code">from_unixtime()</span>  and <span class="sql-docs-inline-code">unix_timestamp()</span>  functions.' + 
      '        You might need to change application code that interacts with these functions, change the types of' + 
      '        columns that store the return values, or add <span class="sql-docs-inline-code">CAST()</span>  calls to SQL statements that' + 
      '        call these functions.' + 
      '      </p> <p><b>Partitioning:</b> </p> <p>' + 
      '      Although you cannot use a <span class="sql-docs-inline-code">TIMESTAMP</span>  column as a partition key, you can' + 
      '      extract the individual years, months, days, hours, and so on and partition based on those' + 
      '      columns. Because the partition key column values are represented in HDFS directory names,' + 
      '      rather than as fields in the data files themselves, you can also keep the original' + 
      '      <span class="sql-docs-inline-code">TIMESTAMP</span>  values if desired, without duplicating data or wasting storage' + 
      '      space. See <span>partition key columns</span> for more' + 
      '      details on partitioning with date and time values.' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > create table timeline (event string) partitioned by (happened timestamp);<br/>ERROR: AnalysisException: Type \'TIMESTAMP\' is not supported as partition-column type in column: happened<br/></div><p id="../Impala/docs/topics/impala_timestamp.xml_null_bad_timestamp_cast"><b>NULL considerations:</b>  Casting any unrecognized <span class="sql-docs-inline-code">STRING</span>  value to this type produces a' + 
      '        <span class="sql-docs-inline-code">NULL</span>  value.' + 
      '      </p> <p id="../Impala/docs/topics/impala_timestamp.xml_partitioning_worrisome"><b>Partitioning:</b>  Because this type potentially has so many distinct values, it is often not a sensible' + 
      '        choice for a partition key column. For example, events 1 millisecond apart would be stored in different' + 
      '        partitions. Consider using the <span class="sql-docs-inline-code">TRUNC()</span>  function to condense the number of distinct values,' + 
      '        and partition on a new column with the truncated values.' + 
      '      </p> <p id="../Impala/docs/topics/impala_timestamp.xml_hbase_ok"><b>HBase considerations:</b>  This data type is fully compatible with HBase tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_timestamp.xml_parquet_ok"><b>Parquet considerations:</b>  This type is fully compatible with Parquet tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_timestamp.xml_text_bulky"><b>Text table considerations:</b>  Values of this type are potentially larger in text tables than in tables' + 
      '        using Parquet or other binary formats.' + 
      '      </p> <p id="../Impala/docs/topics/impala_timestamp.xml_internals_16_bytes"><b>Internal details:</b>  Represented in memory as a 16-byte value.' + 
      '      </p> <p id="../Impala/docs/topics/impala_timestamp.xml_added_forever"><b>Added in:</b>  Available in all versions of Impala.' + 
      '      </p> <p id="../Impala/docs/topics/impala_timestamp.xml_column_stats_constant"><b>Column statistics considerations:</b>  Because this type has a fixed size, the maximum and average size' + 
      '        fields are always filled in for column statistics, even before you run the <span class="sql-docs-inline-code">COMPUTE STATS</span> ' + 
      '        statement.' + 
      '      </p> <p id="../Impala/docs/topics/impala_timestamp.xml_sqoop_blurb"><b>Sqoop considerations:</b> </p> <p id="../Impala/docs/topics/impala_timestamp.xml_sqoop_timestamp_caveat"> If you use Sqoop to' + 
      '        convert RDBMS data to Parquet, be careful with interpreting any' + 
      '        resulting values from <span class="sql-docs-inline-code">DATE</span> , <span class="sql-docs-inline-code">DATETIME</span> ,' + 
      '        or <span class="sql-docs-inline-code">TIMESTAMP</span>  columns. The underlying values are' + 
      '        represented as the Parquet <span class="sql-docs-inline-code">INT64</span>  type, which is' + 
      '        represented as <span class="sql-docs-inline-code">BIGINT</span>  in the Impala table. The Parquet' + 
      '        values represent the time in milliseconds, while Impala interprets' + 
      '          <span class="sql-docs-inline-code">BIGINT</span>  as the time in seconds. Therefore, if you have' + 
      '        a <span class="sql-docs-inline-code">BIGINT</span>  column in a Parquet table that was imported' + 
      '        this way from Sqoop, divide the values by 1000 when interpreting as the' + 
      '          <span class="sql-docs-inline-code">TIMESTAMP</span>  type.</p> <p id="../Impala/docs/topics/impala_timestamp.xml_restrictions_blurb"><b>Restrictions:</b> </p> <p>' + 
      '      If you cast a <span class="sql-docs-inline-code">STRING</span>  with an unrecognized format to a' + 
      '      <span class="sql-docs-inline-code">TIMESTAMP</span> , the result is <span class="sql-docs-inline-code">NULL</span>  rather than an error. Make' + 
      '      sure to test your data pipeline to be sure any textual date and time values are in a' + 
      '      format that Impala <span class="sql-docs-inline-code">TIMESTAMP</span>  can recognize.' + 
      '    </p> <p id="../Impala/docs/topics/impala_timestamp.xml_avro_no_timestamp">' + 
      '        Currently, Avro tables cannot contain <span class="sql-docs-inline-code">TIMESTAMP</span>  columns. If you need to store date and' + 
      '        time values in Avro tables, as a workaround you can use a <span class="sql-docs-inline-code">STRING</span>  representation of the' + 
      '        values, convert the values to <span class="sql-docs-inline-code">BIGINT</span>  with the <span class="sql-docs-inline-code">UNIX_TIMESTAMP()</span>  function,' + 
      '        or create separate numeric columns for individual date and time fields using the <span class="sql-docs-inline-code">EXTRACT()</span> ' + 
      '        function.' + 
      '      </p> <p id="../Impala/docs/topics/impala_timestamp.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p id="../Impala/docs/topics/impala_timestamp.xml_kudu_timestamp_details">' + 
      '        In Impala 2.9 and higher, you can include <span class="sql-docs-inline-code">TIMESTAMP</span> ' + 
      '        columns in Kudu tables, instead of representing the date and time as a <span class="sql-docs-inline-code">BIGINT</span> ' + 
      '        value. The behavior of <span class="sql-docs-inline-code">TIMESTAMP</span>  for Kudu tables has some special considerations:' + 
      '' + 
      '        <ul><li><p>' + 
      '              Any nanoseconds in the original 96-bit value produced by Impala are not stored, because' + 
      '              Kudu represents date/time columns using 64-bit values. The nanosecond portion of the value' + 
      '              is rounded, not truncated. Therefore, a <span class="sql-docs-inline-code">TIMESTAMP</span>  value' + 
      '              that you store in a Kudu table might not be bit-for-bit identical to the value returned by a query.' + 
      '            </p> </li> <li><p>' + 
      '              The conversion between the Impala 96-bit representation and the Kudu 64-bit representation' + 
      '              introduces some performance overhead when reading or writing <span class="sql-docs-inline-code">TIMESTAMP</span> ' + 
      '              columns. You can minimize the overhead during writes by performing inserts through the' + 
      '              Kudu API. Because the overhead during reads applies to each query, you might continue to' + 
      '              use a <span class="sql-docs-inline-code">BIGINT</span>  column to represent date/time values  in performance-critical' + 
      '              applications.' + 
      '            </p> </li> <li><p>' + 
      '              The Impala <span class="sql-docs-inline-code">TIMESTAMP</span>  type has a narrower range for years than the underlying' + 
      '              Kudu data type. Impala can represent years 1400-9999. If year values outside this range' + 
      '              are written to a Kudu table by a non-Impala client, Impala returns <span class="sql-docs-inline-code">NULL</span> ' + 
      '              by default when reading those <span class="sql-docs-inline-code">TIMESTAMP</span>  values during a query. Or, if the' + 
      '              <span class="sql-docs-inline-code">ABORT_ON_ERROR</span>  query option is enabled, the query fails when it encounters' + 
      '              a value with an out-of-range year.' + 
      '            </p> </li> </ul> </p> <p id="../Impala/docs/topics/impala_timestamp.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      The following examples demonstrate using <span class="sql-docs-inline-code">TIMESTAMP</span>  values with built-in' + 
      '      functions:' + 
      '    </p> <div class="sql-docs-code-block">select cast(\'1966-07-30\' as timestamp);<br/>select cast(\'1985-09-25 17:45:30.005\' as timestamp);<br/>select cast(\'08:30:00\' as timestamp);<br/>select hour(\'1970-01-01 15:30:00\');         -- Succeeds, returns 15.<br/>select hour(\'1970-01-01 15:30\');            -- Returns NULL because seconds field required.<br/>select hour(\'1970-01-01 27:30:00\');         -- Returns NULL because hour value out of range.<br/>select dayofweek(\'2004-06-13\');             -- Returns 1, representing Sunday.<br/>select dayname(\'2004-06-13\');               -- Returns \'Sunday\'.<br/>select date_add(\'2004-06-13\', 365);         -- Returns 2005-06-13 with zeros for hh:mm:ss fields.<br/>select day(\'2004-06-13\');                   -- Returns 13.<br/>select datediff(\'1989-12-31\',\'1984-09-01\'); -- How many days between these 2 dates?<br/>select now();                               -- Returns current date and time in local timezone.<br/></div><p>' + 
      '      The following examples demonstrate using <span class="sql-docs-inline-code">TIMESTAMP</span>  values with' + 
      '      HDFS-backed tables:' + 
      '    </p> <div class="sql-docs-code-block">create table dates_and_times (t timestamp);<br/>insert into dates_and_times values<br/>  (\'1966-07-30\'), (\'1985-09-25 17:45:30.005\'), (\'08:30:00\'), (now());<br/></div><p>' + 
      '      The following examples demonstrate using <span class="sql-docs-inline-code">TIMESTAMP</span>  values with Kudu' + 
      '      tables:' + 
      '    </p> <div class="sql-docs-code-block">create table timestamp_t (x int primary key, s string, t timestamp, b bigint)<br/>  partition by hash (x) partitions 16<br/>  stored as kudu;<br/><br/>-- The default value of now() has microsecond precision, so the final 3 digits<br/>-- representing nanoseconds are all zero.<br/>insert into timestamp_t values (1, cast(now() as string), now(), unix_timestamp(now()));<br/><br/>-- Values with 1-499 nanoseconds are rounded down in the Kudu TIMESTAMP column.<br/>insert into timestamp_t values (2, cast(now() + interval 100 nanoseconds as string), now() + interval 100 nanoseconds, unix_timestamp(now() + interval 100 nanoseconds));<br/>insert into timestamp_t values (3, cast(now() + interval 499 nanoseconds as string), now() + interval 499 nanoseconds, unix_timestamp(now() + interval 499 nanoseconds));<br/><br/>-- Values with 500-999 nanoseconds are rounded up in the Kudu TIMESTAMP column.<br/>insert into timestamp_t values (4, cast(now() + interval 500 nanoseconds as string), now() + interval 500 nanoseconds, unix_timestamp(now() + interval 500 nanoseconds));<br/>insert into timestamp_t values (5, cast(now() + interval 501 nanoseconds as string), now() + interval 501 nanoseconds, unix_timestamp(now() + interval 501 nanoseconds));<br/><br/>-- The string representation shows how underlying Impala TIMESTAMP can have nanosecond precision.<br/>-- The TIMESTAMP column shows how timestamps in a Kudu table are rounded to microsecond precision.<br/>-- The BIGINT column represents seconds past the epoch and so if not affected much by nanoseconds.<br/>select s, t, b from timestamp_t order by t;<br/>+-------------------------------+-------------------------------+------------+<br/>| s                             | t                             | b          |<br/>+-------------------------------+-------------------------------+------------+<br/>| 2017-05-31 15:30:05.107157000 | 2017-05-31 15:30:05.107157000 | 1496244605 |<br/>| 2017-05-31 15:30:28.868151100 | 2017-05-31 15:30:28.868151000 | 1496244628 |<br/>| 2017-05-31 15:34:33.674692499 | 2017-05-31 15:34:33.674692000 | 1496244873 |<br/>| 2017-05-31 15:35:04.769166500 | 2017-05-31 15:35:04.769167000 | 1496244904 |<br/>| 2017-05-31 15:35:33.033082501 | 2017-05-31 15:35:33.033083000 | 1496244933 |<br/>+-------------------------------+-------------------------------+------------+<br/></div><p id="../Impala/docs/topics/impala_timestamp.xml_related_info"><b>Related information:</b> </p> <ul><li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_literals.xml#timestamp_literals"><h4>Timestamp Literals</h4> </a>.' + 
      '      </li> <li>' + 
      '        To convert to or from different date formats, or perform date arithmetic, use the date' + 
      '        and time functions described in' + 
      '        <span>datetime functions</span>. In' + 
      '        particular, the <span class="sql-docs-inline-code">from_unixtime()</span>  function requires a case-sensitive' + 
      '        format string such as <span class="sql-docs-inline-code">"yyyy-MM-dd HH:mm:ss.SSSS"</span> , matching one of the' + 
      '        allowed variations of a <span class="sql-docs-inline-code">TIMESTAMP</span>  value (date plus time, only date,' + 
      '        only time, optional fractional seconds).' + 
      '      </li> <li>' + 
      '        See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_langref_unsupported.xml#langref_hiveql_delta">SQL Differences Between Impala and Hive</a> for' + 
      '        details about differences in <span class="sql-docs-inline-code">TIMESTAMP</span>  handling between Impala and' + 
      '        Hive.' + 
      '      </li> </ul> </div> ',
    children: []
  },
  {
    id: 'topics/impala_tinyint.xml',
    title: 'TINYINT Data Type',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      A 1-byte integer data type used in <span class="sql-docs-inline-code">CREATE TABLE</span>  and <span class="sql-docs-inline-code">ALTER TABLE</span>  statements.' + 
      '    </p> <p id="../Impala/docs/topics/impala_tinyint.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
      '      In the column definition of a <span class="sql-docs-inline-code">CREATE TABLE</span>  statement:' + 
      '    </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">column_name</span> TINYINT</div><p><b>Range:</b>  -128 .. 127. There is no <span class="sql-docs-inline-code">UNSIGNED</span>  subtype.' + 
      '    </p> <p><b>Conversions:</b>  Impala automatically converts to a larger integer type (<span class="sql-docs-inline-code">SMALLINT</span> ,' + 
      '      <span class="sql-docs-inline-code">INT</span> , or <span class="sql-docs-inline-code">BIGINT</span> ) or a floating-point type (<span class="sql-docs-inline-code">FLOAT</span>  or' + 
      '      <span class="sql-docs-inline-code">DOUBLE</span> ) automatically. Use <span class="sql-docs-inline-code">CAST()</span>  to convert to <span class="sql-docs-inline-code">STRING</span>  or' + 
      '      <span class="sql-docs-inline-code">TIMESTAMP</span> .' + 
      '      <span id="../Impala/docs/topics/impala_tinyint.xml_cast_int_to_timestamp" class="sql-docs-inline-code">' + 
      '          Casting an integer or floating-point value <span class="sql-docs-inline-code">N</span>  to' + 
      '        <span class="sql-docs-inline-code">TIMESTAMP</span>  produces a value that is <span class="sql-docs-inline-code">N</span>  seconds past the start of the epoch' + 
      '        date (January 1, 1970). By default, the result value represents a date and time in the UTC time zone.' + 
      '        If the setting <span class="sql-docs-inline-code">--use_local_tz_for_unix_timestamp_conversions=true</span>  is in effect,' + 
      '        the resulting <span class="sql-docs-inline-code">TIMESTAMP</span>  represents a date and time in the local time zone.' + 
      '        </span> </p> <p id="../Impala/docs/topics/impala_tinyint.xml_int_overflow_behavior">' + 
      '        Impala does not return column overflows as <span class="sql-docs-inline-code">NULL</span> , so that customers can distinguish' + 
      '        between <span class="sql-docs-inline-code">NULL</span>  data and overflow conditions similar to how they do so with traditional' + 
      '        database systems. Impala returns the largest or smallest value in the range for the type. For example,' + 
      '        valid values for a <span class="sql-docs-inline-code">tinyint</span>  range from -128 to 127. In Impala, a <span class="sql-docs-inline-code">tinyint</span> ' + 
      '        with a value of -200 returns -128 rather than <span class="sql-docs-inline-code">NULL</span> . A <span class="sql-docs-inline-code">tinyint</span>  with a' + 
      '        value of 200 returns 127.' + 
      '      </p> <p id="../Impala/docs/topics/impala_tinyint.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      For a convenient and automated way to check the bounds of the <span class="sql-docs-inline-code">TINYINT</span>  type, call the' + 
      '      functions <span class="sql-docs-inline-code">MIN_TINYINT()</span>  and <span class="sql-docs-inline-code">MAX_TINYINT()</span> .' + 
      '    </p> <p>' + 
      '      If an integer value is too large to be represented as a <span class="sql-docs-inline-code">TINYINT</span> , use a' + 
      '      <span class="sql-docs-inline-code">SMALLINT</span>  instead.' + 
      '    </p> <p id="../Impala/docs/topics/impala_tinyint.xml_null_bad_numeric_cast"><b>NULL considerations:</b>  Casting any non-numeric value to this type produces a <span class="sql-docs-inline-code">NULL</span> ' + 
      '        value.' + 
      '      </p> <p id="../Impala/docs/topics/impala_tinyint.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">CREATE TABLE t1 (x TINYINT);<br/>SELECT CAST(100 AS TINYINT);<br/></div><p id="../Impala/docs/topics/impala_tinyint.xml_parquet_blurb"><b>Parquet considerations:</b> </p> <p>' + 
      '      Physically, Parquet files represent <span class="sql-docs-inline-code">TINYINT</span>  and <span class="sql-docs-inline-code">SMALLINT</span>  values as 32-bit' + 
      '      integers. Although Impala rejects attempts to insert out-of-range values into such columns, if you create a' + 
      '      new table with the <span class="sql-docs-inline-code">CREATE TABLE ... LIKE PARQUET</span>  syntax, any <span class="sql-docs-inline-code">TINYINT</span>  or' + 
      '      <span class="sql-docs-inline-code">SMALLINT</span>  columns in the original table turn into <span class="sql-docs-inline-code">INT</span>  columns in the new' + 
      '      table.' + 
      '    </p> <p id="../Impala/docs/topics/impala_tinyint.xml_hbase_ok"><b>HBase considerations:</b>  This data type is fully compatible with HBase tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_tinyint.xml_text_bulky"><b>Text table considerations:</b>  Values of this type are potentially larger in text tables than in tables' + 
      '        using Parquet or other binary formats.' + 
      '      </p> <p id="../Impala/docs/topics/impala_tinyint.xml_internals_1_bytes"><b>Internal details:</b>  Represented in memory as a 1-byte value.' + 
      '      </p> <p id="../Impala/docs/topics/impala_tinyint.xml_added_forever"><b>Added in:</b>  Available in all versions of Impala.' + 
      '      </p> <p id="../Impala/docs/topics/impala_tinyint.xml_column_stats_constant"><b>Column statistics considerations:</b>  Because this type has a fixed size, the maximum and average size' + 
      '        fields are always filled in for column statistics, even before you run the <span class="sql-docs-inline-code">COMPUTE STATS</span> ' + 
      '        statement.' + 
      '      </p> <p id="../Impala/docs/topics/impala_tinyint.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_literals.xml#numeric_literals"><h4>Numeric Literals</h4> </a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tinyint.xml#tinyint">TINYINT Data Type</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_smallint.xml#smallint">SMALLINT Data Type</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_int.xml#int">INT Data Type</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_bigint.xml#bigint">BIGINT Data Type</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_decimal.xml#decimal">DECIMAL Data Type (Impala 1.4 or higher only)</a>,' + 
      '      <span>math functions</span></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_varchar.xml',
    title: 'VARCHAR Data Type (Impala 2.0 or higher only)',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      A variable-length character type, truncated during processing if necessary to fit within the specified' + 
      '      length.' + 
      '    </p> <p id="../Impala/docs/topics/impala_varchar.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
      '      In the column definition of a <span class="sql-docs-inline-code">CREATE TABLE</span>  statement:' + 
      '    </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">column_name</span> VARCHAR(<span class="sql-docs-variable">max_length</span> )</div><p>' + 
      '      The maximum length you can specify is 65,535.' + 
      '    </p> <p id="../Impala/docs/topics/impala_varchar.xml_partitioning_bad"><b>Partitioning:</b>  This type can be used for partition key columns. Because of the efficiency advantage' + 
      '        of numeric values over character-based values, if the partition key is a string representation of a number,' + 
      '        prefer to use an integer type with sufficient range (<span class="sql-docs-inline-code">INT</span> , <span class="sql-docs-inline-code">BIGINT</span> , and so' + 
      '        on) where practical.' + 
      '      </p> <p id="../Impala/docs/topics/impala_varchar.xml_hbase_no"><b>HBase considerations:</b>  This data type cannot be used with HBase tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_varchar.xml_parquet_blurb"><b>Parquet considerations:</b> </p> <ul><li>' + 
      '        This type can be read from and written to Parquet files.' + 
      '      </li> <li>' + 
      '        There is no requirement for a particular level of Parquet.' + 
      '      </li> <li>' + 
      '        Parquet files generated by Impala and containing this type can be freely interchanged with other components' + 
      '        such as Hive and MapReduce.' + 
      '      </li> <li>' + 
      '        Parquet data files can contain values that are longer than allowed by the' + 
      '        <span class="sql-docs-inline-code">VARCHAR(<span class="sql-docs-variable">n</span> )</span>  length limit. Impala ignores any extra trailing characters' + 
      '        when it processes those values during a query.' + 
      '      </li> </ul> <p id="../Impala/docs/topics/impala_varchar.xml_text_blurb"><b>Text table considerations:</b> </p> <p>' + 
      '      Text data files can contain values that are longer than allowed by the' + 
      '      <span class="sql-docs-inline-code">VARCHAR(<span class="sql-docs-variable">n</span> )</span>  length limit. Any extra trailing characters are ignored when' + 
      '      Impala processes those values during a query.' + 
      '    </p> <p><b>Avro considerations:</b> </p> <p id="../Impala/docs/topics/impala_varchar.xml_avro_2gb_strings">' + 
      '        The Avro specification allows string values up to 2**64 bytes in length.' + 
      '        Impala queries for Avro tables use 32-bit integers to hold string lengths.' + 
      '        In Impala 2.5 and higher, Impala truncates <span class="sql-docs-inline-code">CHAR</span> ' + 
      '        and <span class="sql-docs-inline-code">VARCHAR</span>  values in Avro tables to (2**31)-1 bytes.' + 
      '        If a query encounters a <span class="sql-docs-inline-code">STRING</span>  value longer than (2**31)-1' + 
      '        bytes in an Avro table, the query fails. In earlier releases,' + 
      '        encountering such long values in an Avro table could cause a crash.' + 
      '      </p> <p id="../Impala/docs/topics/impala_varchar.xml_schema_evolution_blurb"><b>Schema evolution considerations:</b> </p> <p>' + 
      '      You can use <span class="sql-docs-inline-code">ALTER TABLE ... CHANGE</span>  to switch column data types to and from' + 
      '      <span class="sql-docs-inline-code">VARCHAR</span> . You can convert from <span class="sql-docs-inline-code">STRING</span>  to' + 
      '      <span class="sql-docs-inline-code">VARCHAR(<span class="sql-docs-variable">n</span> )</span> , or from <span class="sql-docs-inline-code">VARCHAR(<span class="sql-docs-variable">n</span> )</span>  to' + 
      '      <span class="sql-docs-inline-code">STRING</span> , or from <span class="sql-docs-inline-code">CHAR(<span class="sql-docs-variable">n</span> )</span>  to' + 
      '      <span class="sql-docs-inline-code">VARCHAR(<span class="sql-docs-variable">n</span> )</span> , or from <span class="sql-docs-inline-code">VARCHAR(<span class="sql-docs-variable">n</span> )</span>  to' + 
      '      <span class="sql-docs-inline-code">CHAR(<span class="sql-docs-variable">n</span> )</span> . When switching back and forth between <span class="sql-docs-inline-code">VARCHAR</span> ' + 
      '      and <span class="sql-docs-inline-code">CHAR</span> , you can also change the length value. This schema evolution works the same for' + 
      '      tables using any file format. If a table contains values longer than the maximum length defined for a' + 
      '      <span class="sql-docs-inline-code">VARCHAR</span>  column, Impala does not return an error. Any extra trailing characters are ignored' + 
      '      when Impala processes those values during a query.' + 
      '    </p> <p id="../Impala/docs/topics/impala_varchar.xml_compatibility_blurb"><b>Compatibility:</b> </p> <p>' + 
      '      This type is available in Impala 2.0 or higher.' + 
      '    </p> <p id="../Impala/docs/topics/impala_varchar.xml_internals_min_bytes"><b>Internal details:</b>  Represented in memory as a byte array with the minimum size needed to represent' + 
      '        each value.' + 
      '      </p> <p id="../Impala/docs/topics/impala_varchar.xml_added_in_20"><b>Added in:</b> Impala 2.0.0</p> <p id="../Impala/docs/topics/impala_varchar.xml_column_stats_variable"><b>Column statistics considerations:</b>  Because the values of this type have variable size, none of the' + 
      '        column statistics fields are filled in until you run the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement.' + 
      '      </p> <p id="../Impala/docs/topics/impala_varchar.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p id="../Impala/docs/topics/impala_varchar.xml_kudu_unsupported_data_type">' + 
      '        Currently, the data types <span class="sql-docs-inline-code">CHAR</span> , <span class="sql-docs-inline-code">VARCHAR</span> ,' + 
      '        <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">MAP</span> , and <span class="sql-docs-inline-code">STRUCT</span>  cannot be used with Kudu tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_varchar.xml_restrictions_blurb"><b>Restrictions:</b> </p> <p id="../Impala/docs/topics/impala_varchar.xml_blobs_are_strings">' + 
      '        All data in <span class="sql-docs-inline-code">CHAR</span>  and <span class="sql-docs-inline-code">VARCHAR</span>  columns must be in a character encoding that' + 
      '        is compatible with UTF-8. If you have binary data from another database system (that is, a BLOB type), use' + 
      '        a <span class="sql-docs-inline-code">STRING</span>  column to hold it.' + 
      '      </p> <p id="../Impala/docs/topics/impala_varchar.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      The following examples show how long and short <span class="sql-docs-inline-code">VARCHAR</span>  values are treated. Values longer' + 
      '      than the maximum specified length are truncated by <span class="sql-docs-inline-code">CAST()</span> , or when queried from existing' + 
      '      data files. Values shorter than the maximum specified length are represented as the actual length of the' + 
      '      value, with no extra padding as seen with <span class="sql-docs-inline-code">CHAR</span>  values.' + 
      '    </p> <div class="sql-docs-code-block">create table varchar_1 (s varchar(1));<br/>create table varchar_4 (s varchar(4));<br/>create table varchar_20 (s varchar(20));<br/><br/>insert into varchar_1 values (cast(\'a\' as varchar(1))), (cast(\'b\' as varchar(1))), (cast(\'hello\' as varchar(1))), (cast(\'world\' as varchar(1)));<br/>insert into varchar_4 values (cast(\'a\' as varchar(4))), (cast(\'b\' as varchar(4))), (cast(\'hello\' as varchar(4))), (cast(\'world\' as varchar(4)));<br/>insert into varchar_20 values (cast(\'a\' as varchar(20))), (cast(\'b\' as varchar(20))), (cast(\'hello\' as varchar(20))), (cast(\'world\' as varchar(20)));<br/><br/>select * from varchar_1;<br/>+---+<br/>| s |<br/>+---+<br/>| a |<br/>| b |<br/>| h |<br/>| w |<br/>+---+<br/>select * from varchar_4;<br/>+------+<br/>| s    |<br/>+------+<br/>| a    |<br/>| b    |<br/>| hell |<br/>| worl |<br/>+------+<br/>[localhost:21000] > select * from varchar_20;<br/>+-------+<br/>| s     |<br/>+-------+<br/>| a     |<br/>| b     |<br/>| hello |<br/>| world |<br/>+-------+<br/>select concat(\'[\',s,\']\') as s from varchar_20;<br/>+---------+<br/>| s       |<br/>+---------+<br/>| [a]     |<br/>| [b]     |<br/>| [hello] |<br/>| [world] |<br/>+---------+<br/></div><p>' + 
      '      The following example shows how identical <span class="sql-docs-inline-code">VARCHAR</span>  values compare as equal, even if the' + 
      '      columns are defined with different maximum lengths. Both tables contain <span class="sql-docs-inline-code">\'a\'</span>  and' + 
      '      <span class="sql-docs-inline-code">\'b\'</span>  values. The longer <span class="sql-docs-inline-code">\'hello\'</span>  and <span class="sql-docs-inline-code">\'world\'</span>  values from the' + 
      '      <span class="sql-docs-inline-code">VARCHAR_20</span>  table were truncated when inserted into the <span class="sql-docs-inline-code">VARCHAR_1</span>  table.' + 
      '    </p> <div class="sql-docs-code-block">select s from varchar_1 join varchar_20 using (s);<br/>+-------+<br/>| s     |<br/>+-------+<br/>| a     |<br/>| b     |<br/>+-------+<br/></div><p>' + 
      '      The following examples show how <span class="sql-docs-inline-code">VARCHAR</span>  values are freely interchangeable with' + 
      '      <span class="sql-docs-inline-code">STRING</span>  values in contexts such as comparison operators and built-in functions:' + 
      '    </p> <div class="sql-docs-code-block">select length(cast(\'foo\' as varchar(100))) as length;<br/>+--------+<br/>| length |<br/>+--------+<br/>| 3      |<br/>+--------+<br/>select cast(\'xyz\' as varchar(5)) > cast(\'abc\' as varchar(10)) as greater;<br/>+---------+<br/>| greater |<br/>+---------+<br/>| true    |<br/>+---------+<br/></div><p id="../Impala/docs/topics/impala_varchar.xml_udf_blurb_no"><b>UDF considerations:</b>  This type cannot be used for the argument or return type of a user-defined' + 
      '        function (UDF) or user-defined aggregate function (UDA).' + 
      '      </p> <p id="../Impala/docs/topics/impala_varchar.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_string.xml#string">STRING Data Type</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_char.xml#char">CHAR Data Type (Impala 2.0 or higher only)</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_literals.xml#string_literals"><h4>String Literals</h4> </a>,' + 
      '      <span>string functions</span></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_complex_types.xml',
    title: 'Complex Types (Impala 2.3 or higher only)',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p><span class="sql-docs-variable">Complex types</span>  (also referred to as <span class="sql-docs-variable">nested types</span> ) let you represent multiple data values within a single' + 
      '      row/column position. They differ from the familiar column types such as <span class="sql-docs-inline-code">BIGINT</span>  and <span class="sql-docs-inline-code">STRING</span> , known as' + 
      '      <span class="sql-docs-variable">scalar types</span>  or <span class="sql-docs-variable">primitive types</span> , which represent a single data value within a given row/column position.' + 
      '      Impala supports the complex types <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">MAP</span> , and <span class="sql-docs-inline-code">STRUCT</span>  in Impala 2.3' + 
      '      and higher. The Hive <span class="sql-docs-inline-code">UNION</span>  type is not currently supported.' + 
      '    </p> <p>' + 
      '      Once you understand the basics of complex types, refer to the individual type topics when you need to refresh your memory about syntax' + 
      '      and examples:' + 
      '    </p> <ul><li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_array.xml#array">ARRAY Complex Type (Impala 2.3 or higher only)</a></li> <li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_struct.xml#struct">STRUCT Complex Type (Impala 2.3 or higher only)</a></li> <li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_map.xml#map">MAP Complex Type (Impala 2.3 or higher only)</a></li> </ul> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_benefits"><h4>Benefits of Impala Complex Types</h4> <div><p>' + 
      '        The reasons for using Impala complex types include the following:' + 
      '      </p> <ul><li><p>' + 
      '            You already have data produced by Hive or other non-Impala component that uses the complex type column names. You might need to' + 
      '            convert the underlying data to Parquet to use it with Impala.' + 
      '          </p> </li> <li><p>' + 
      '            Your data model originates with a non-SQL programming language or a NoSQL data management system. For example, if you are' + 
      '            representing Python data expressed as nested lists, dictionaries, and tuples, those data structures correspond closely to Impala' + 
      '            <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">MAP</span> , and <span class="sql-docs-inline-code">STRUCT</span>  types.' + 
      '          </p> </li> <li><p>' + 
      '            Your analytic queries involving multiple tables could benefit from greater locality during join processing. By packing more' + 
      '            related data items within each HDFS data block, complex types let join queries avoid the network overhead of the traditional' + 
      '            Hadoop shuffle or broadcast join techniques.' + 
      '          </p> </li> </ul> <p>' + 
      '        The Impala complex type support produces result sets with all scalar values, and the scalar components of complex types can be used' + 
      '        with all SQL clauses, such as <span class="sql-docs-inline-code">GROUP BY</span> , <span class="sql-docs-inline-code">ORDER BY</span> , all kinds of joins, subqueries, and inline' + 
      '        views. The ability to process complex type data entirely in SQL reduces the need to write application-specific code in Java or other' + 
      '        programming languages to deconstruct the underlying data structures.' + 
      '      </p> </div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_overview"><h4>Overview of Impala Complex Types</h4> <div><p>' + 
      '        The <span class="sql-docs-inline-code">ARRAY</span>  and <span class="sql-docs-inline-code">MAP</span>  types are closely related: they represent collections with arbitrary numbers of' + 
      '        elements, where each element is the same type. In contrast, <span class="sql-docs-inline-code">STRUCT</span>  groups together a fixed number of items into a' + 
      '        single element. The parts of a <span class="sql-docs-inline-code">STRUCT</span>  element (the <span class="sql-docs-variable">fields</span> ) can be of different types, and each field' + 
      '        has a name.' + 
      '      </p> <p>' + 
      '        The elements of an <span class="sql-docs-inline-code">ARRAY</span>  or <span class="sql-docs-inline-code">MAP</span> , or the fields of a <span class="sql-docs-inline-code">STRUCT</span> , can also be other' + 
      '        complex types. You can construct elaborate data structures with up to 100 levels of nesting. For example, you can make an' + 
      '        <span class="sql-docs-inline-code">ARRAY</span>  whose elements are <span class="sql-docs-inline-code">STRUCT</span> s. Within each <span class="sql-docs-inline-code">STRUCT</span> , you can have some fields' + 
      '        that are <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">MAP</span> , or another kind of <span class="sql-docs-inline-code">STRUCT</span> . The Impala documentation uses the' + 
      '        terms complex and nested types interchangeably; for simplicity, it primarily uses the term complex types, to encompass all the' + 
      '        properties of these types.' + 
      '      </p> <p>' + 
      '        When visualizing your data model in familiar SQL terms, you can think of each <span class="sql-docs-inline-code">ARRAY</span>  or <span class="sql-docs-inline-code">MAP</span>  as a' + 
      '        miniature table, and each <span class="sql-docs-inline-code">STRUCT</span>  as a row within such a table. By default, the table represented by an' + 
      '        <span class="sql-docs-inline-code">ARRAY</span>  has two columns, <span class="sql-docs-inline-code">POS</span>  to represent ordering of elements, and <span class="sql-docs-inline-code">ITEM</span> ' + 
      '        representing the value of each element. Likewise, by default, the table represented by a <span class="sql-docs-inline-code">MAP</span>  encodes key-value' + 
      '        pairs, and therefore has two columns, <span class="sql-docs-inline-code">KEY</span>  and <span class="sql-docs-inline-code">VALUE</span> .' + 
      '</p> <p>' + 
      '        The <span class="sql-docs-inline-code">ITEM</span>  and <span class="sql-docs-inline-code">VALUE</span>  names are only required for the very simplest kinds of <span class="sql-docs-inline-code">ARRAY</span> ' + 
      '        and <span class="sql-docs-inline-code">MAP</span>  columns, ones that hold only scalar values. When the elements within the <span class="sql-docs-inline-code">ARRAY</span>  or' + 
      '        <span class="sql-docs-inline-code">MAP</span>  are of type <span class="sql-docs-inline-code">STRUCT</span>  rather than a scalar type, then the result set contains columns with names' + 
      '        corresponding to the <span class="sql-docs-inline-code">STRUCT</span>  fields rather than <span class="sql-docs-inline-code">ITEM</span>  or <span class="sql-docs-inline-code">VALUE</span> .' + 
      '      </p> <p>' + 
      '        You write most queries that process complex type columns using familiar join syntax, even though the data for both sides of the join' + 
      '        resides in a single table. The join notation brings together the scalar values from a row with the values from the complex type' + 
      '        columns for that same row. The final result set contains all scalar values, allowing you to do all the familiar filtering,' + 
      '        aggregation, ordering, and so on for the complex data entirely in SQL or using business intelligence tools that issue SQL queries.' + 
      '</p> <p>' + 
      '        Behind the scenes, Impala ensures that the processing for each row is done efficiently on a single host, without the network traffic' + 
      '        involved in broadcast or shuffle joins. The most common type of join query for tables with complex type columns is <span class="sql-docs-inline-code">INNER' + 
      '        JOIN</span> , which returns results only in those cases where the complex type contains some elements. Therefore, most query' + 
      '        examples in this section use either the <span class="sql-docs-inline-code">INNER JOIN</span>  clause or the equivalent comma notation.' + 
      '      </p> <div class="sql-docs-note"><p>' + 
      '          Although Impala can query complex types that are present in Parquet files, Impala currently cannot create new Parquet files' + 
      '          containing complex types. Therefore, the discussion and examples presume that you are working with existing Parquet data produced' + 
      '          through Hive, Spark, or some other source. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types_ex_hive_etl"><h4>Constructing Parquet Files with Complex Columns Using Hive</h4> </a> for examples of constructing Parquet data' + 
      '          files with complex type columns.' + 
      '        </p> <p>' + 
      '          For learning purposes, you can create empty tables with complex type columns and practice query syntax, even if you do not have' + 
      '          sample data with the required structure.' + 
      '        </p> </div> </div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_design"><h4>Design Considerations for Complex Types</h4> <div><p>' + 
      '        When planning to use Impala complex types, and designing the Impala schema, first learn how this kind of schema differs from' + 
      '        traditional table layouts from the relational database and data warehousing fields. Because you might have already encountered' + 
      '        complex types in a Hadoop context while using Hive for ETL, also learn how to write high-performance analytic queries for complex' + 
      '        type data using Impala SQL syntax.' + 
      '      </p> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_vs_rdbms"><h4>How Complex Types Differ from Traditional Data Warehouse Schemas</h4> <div><p>' + 
      '          Complex types let you associate arbitrary data structures with a particular row. If you are familiar with schema design for' + 
      '          relational database management systems or data warehouses, a schema with complex types has the following differences:' + 
      '        </p> <ul><li><p>' + 
      '              Logically, related values can now be grouped tightly together in the same table.' + 
      '            </p> <p>' + 
      '              In traditional data warehousing, related values were typically arranged in one of two ways:' + 
      '            </p> <ul><li><p>' + 
      '                  Split across multiple normalized tables. Foreign key columns specified which rows from each table were associated with' + 
      '                  each other. This arrangement avoided duplicate data and therefore the data was compact, but join queries could be' + 
      '                  expensive because the related data had to be retrieved from separate locations. (In the case of distributed Hadoop' + 
      '                  queries, the joined tables might even be transmitted between different hosts in a cluster.)' + 
      '                </p> </li> <li><p>' + 
      '                  Flattened into a single denormalized table. Although this layout eliminated some potential performance issues by removing' + 
      '                  the need for join queries, the table typically became larger because values were repeated. The extra data volume could' + 
      '                  cause performance issues in other parts of the workflow, such as longer ETL cycles or more expensive full-table scans' + 
      '                  during queries.' + 
      '                </p> </li> </ul> <p>' + 
      '              Complex types represent a middle ground that addresses these performance and volume concerns. By physically locating related' + 
      '              data within the same data files, complex types increase locality and reduce the expense of join queries. By associating an' + 
      '              arbitrary amount of data with a single row, complex types avoid the need to repeat lengthy values such as strings. Because' + 
      '              Impala knows which complex type values are associated with each row, you can save storage by avoiding artificial foreign key' + 
      '              values that are only used for joins. The flexibility of the <span class="sql-docs-inline-code">STRUCT</span> , <span class="sql-docs-inline-code">ARRAY</span> , and' + 
      '              <span class="sql-docs-inline-code">MAP</span>  types lets you model familiar constructs such as fact and dimension tables from a data warehouse, and' + 
      '              wide tables representing sparse matrixes.' + 
      '            </p> </li> </ul> </div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_physical"><h4>Physical Storage for Complex Types</h4> <div><p>' + 
      '          Physically, the scalar and complex columns in each row are located adjacent to each other in the same Parquet data file, ensuring' + 
      '          that they are processed on the same host rather than being broadcast across the network when cross-referenced within a query. This' + 
      '          co-location simplifies the process of copying, converting, and backing all the columns up at once. Because of the column-oriented' + 
      '          layout of Parquet files, you can still query only the scalar columns of a table without imposing the I/O penalty of reading the' + 
      '          (possibly large) values of the composite columns.' + 
      '        </p> <p>' + 
      '          Within each Parquet data file, the constituent parts of complex type columns are stored in column-oriented format:' + 
      '        </p> <ul><li><p>' + 
      '              Each field of a <span class="sql-docs-inline-code">STRUCT</span>  type is stored like a column, with all the scalar values adjacent to each other and' + 
      '              encoded, compressed, and so on using the Parquet space-saving techniques.' + 
      '            </p> </li> <li><p>' + 
      '              For an <span class="sql-docs-inline-code">ARRAY</span>  containing scalar values, all those values (represented by the <span class="sql-docs-inline-code">ITEM</span> ' + 
      '              pseudocolumn) are stored adjacent to each other.' + 
      '            </p> </li> <li><p>' + 
      '              For a <span class="sql-docs-inline-code">MAP</span> , the values of the <span class="sql-docs-inline-code">KEY</span>  pseudocolumn are stored adjacent to each other. If the' + 
      '              <span class="sql-docs-inline-code">VALUE</span>  pseudocolumn is a scalar type, its values are also stored adjacent to each other.' + 
      '            </p> </li> <li><p>' + 
      '              If an <span class="sql-docs-inline-code">ARRAY</span>  element, <span class="sql-docs-inline-code">STRUCT</span>  field, or <span class="sql-docs-inline-code">MAP</span> <span class="sql-docs-inline-code">VALUE</span>  part is' + 
      '              another complex type, the column-oriented storage applies to the next level down (or the next level after that, and so on for' + 
      '              deeply nested types) where the final elements, fields, or values are of scalar types.' + 
      '            </p> </li> </ul> <p>' + 
      '          The numbers represented by the <span class="sql-docs-inline-code">POS</span>  pseudocolumn of an <span class="sql-docs-inline-code">ARRAY</span>  are not physically stored in the' + 
      '          data files. They are synthesized at query time based on the order of the <span class="sql-docs-inline-code">ARRAY</span>  elements associated with each row.' + 
      '        </p> </div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_file_formats"><h4>File Format Support for Impala Complex Types</h4> <div><p>' + 
      '          Currently, Impala queries support complex type data only in the Parquet file format. See <span>parquet</span>' + 
      '          for details about the performance benefits and physical layout of this file format.' + 
      '        </p> <p>' + 
      '          Because Impala does not parse the data structures containing nested types for unsupported formats such as text, Avro,' + 
      '          SequenceFile, or RCFile, you cannot use data files in these formats with Impala, even if the query does not refer to the nested' + 
      '          type columns. Also, if a table using an unsupported format originally contained nested type columns, and then those columns were' + 
      '          dropped from the table using <span class="sql-docs-inline-code">ALTER TABLE ... DROP COLUMN</span> , any existing data files in the table still contain the' + 
      '          nested type data and Impala queries on that table will generate errors.' + 
      '        </p> <p>' + 
      '            The one exception to the preceding rule is <span class="sql-docs-inline-code">COUNT(*)</span>  queries on RCFile tables that include complex types.' + 
      '            Such queries are allowed in Impala 2.6 and higher.' + 
      '        </p> <p>' + 
      '          You can perform DDL operations for tables involving complex types in' + 
      '          most file formats other than Parquet. You cannot create tables in' + 
      '          Impala with complex types using text files.' + 
      '        </p> <p>' + 
      '          You can have a partitioned table with complex type columns that uses' + 
      '          a non-Parquet format, and use <span class="sql-docs-inline-code">ALTER TABLE</span>  to change' + 
      '          the file format to Parquet for individual partitions. When you put' + 
      '          Parquet data files into those partitions, Impala can execute queries' + 
      '          against that data as long as the query does not involve any of the' + 
      '          non-Parquet partitions.' + 
      '        </p> <p>' + 
      '          If you use the <span class="sql-docs-inline-code">parquet-tools</span>  command to examine the structure of a Parquet data file that includes complex' + 
      '          types, you see that both <span class="sql-docs-inline-code">ARRAY</span>  and <span class="sql-docs-inline-code">MAP</span>  are represented as a <span class="sql-docs-inline-code">Bag</span>  in Parquet' + 
      '          terminology, with all fields marked <span class="sql-docs-inline-code">Optional</span>  because Impala allows any column to be nullable.' + 
      '        </p> <p>' + 
      '          Impala supports either 2-level and 3-level encoding within each Parquet data file. When constructing Parquet data files outside' + 
      '          Impala, use either encoding style but do not mix 2-level and 3-level encoding within the same data file.' + 
      '        </p> </div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_vs_normalization"><h4>Choosing Between Complex Types and Normalized Tables</h4> <div><p>' + 
      '          Choosing between multiple normalized fact and dimension tables, or a single table containing complex types, is an important design' + 
      '          decision.' + 
      '        </p> <ul><li><p>' + 
      '              If you are coming from a traditional database or data warehousing background, you might be familiar with how to split up data' + 
      '              between tables. Your business intelligence tools might already be optimized for dealing with this kind of multi-table scenario' + 
      '              through join queries.' + 
      '            </p> </li> <li><p>' + 
      '              If you are pulling data from Impala into an application written in a programming language that has data structures analogous' + 
      '              to the complex types, such as Python or Java, complex types in Impala could simplify data interchange and improve' + 
      '              understandability and reliability of your program logic.' + 
      '            </p> </li> <li><p>' + 
      '              You might already be faced with existing infrastructure or receive high volumes of data that assume one layout or the other.' + 
      '              For example, complex types are popular with web-oriented applications, for example to keep information about an online user' + 
      '              all in one place for convenient lookup and analysis, or to deal with sparse or constantly evolving data fields.' + 
      '            </p> </li> <li><p>' + 
      '              If some parts of the data change over time while related data remains constant, using multiple normalized tables lets you' + 
      '              replace certain parts of the data without reloading the entire data set. Conversely, if you receive related data all bundled' + 
      '              together, such as in JSON files, using complex types can save the overhead of splitting the related items across multiple' + 
      '              tables.' + 
      '            </p> </li> <li><p>' + 
      '              From a performance perspective:' + 
      '            </p> <ul><li><p>' + 
      '                  In Parquet tables, Impala can skip columns that are not referenced in a query, avoiding the I/O penalty of reading the' + 
      '                  embedded data. When complex types are nested within a column, the data is physically divided at a very granular level; for' + 
      '                  example, a query referring to data nested multiple levels deep in a complex type column does not have to read all the data' + 
      '                  from that column, only the data for the relevant parts of the column type hierarchy.' + 
      '</p> </li> <li><p>' + 
      '                  Complex types avoid the possibility of expensive join queries when data from fact and dimension tables is processed in' + 
      '                  parallel across multiple hosts. All the information for a row containing complex types is typically to be in the same data' + 
      '                  block, and therefore does not need to be transmitted across the network when joining fields that are all part of the same' + 
      '                  row.' + 
      '                </p> </li> <li><p>' + 
      '                  The tradeoff with complex types is that fewer rows fit in each data block. Whether it is better to have more data blocks' + 
      '                  with fewer rows, or fewer data blocks with many rows, depends on the distribution of your data and the characteristics of' + 
      '                  your query workload. If the complex columns are rarely referenced, using them might lower efficiency. If you are seeing' + 
      '                  low parallelism due to a small volume of data (relatively few data blocks) in each table partition, increasing the row' + 
      '                  size by including complex columns might produce more data blocks and thus spread the work more evenly across the cluster.' + 
      '                  See <span>scalability</span> for more on this advanced topic.' + 
      '                </p> </li> </ul> </li> </ul> </div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_hive"><h4>Differences Between Impala and Hive Complex Types</h4> <div><p>' + 
      '          Impala can query Parquet tables containing <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , and <span class="sql-docs-inline-code">MAP</span>  columns' + 
      '          produced by Hive. There are some differences to be aware of between the Impala SQL and HiveQL syntax for complex types, primarily' + 
      '          for queries.' + 
      '        </p> <p>' + 
      '          Impala supports a subset of the syntax that Hive supports for' + 
      '          specifying <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , and' + 
      '            <span class="sql-docs-inline-code">MAP</span>  types in the <span class="sql-docs-inline-code">CREATE TABLE</span> ' + 
      '          statements.' + 
      '        </p> <p>' + 
      '          Because Impala <span class="sql-docs-inline-code">STRUCT</span>  columns include user-specified field names, you use the <span class="sql-docs-inline-code">NAMED_STRUCT()</span> ' + 
      '          constructor in Hive rather than the <span class="sql-docs-inline-code">STRUCT()</span>  constructor when you populate an Impala <span class="sql-docs-inline-code">STRUCT</span> ' + 
      '          column using a Hive <span class="sql-docs-inline-code">INSERT</span>  statement.' + 
      '        </p> <p>' + 
      '          The Hive <span class="sql-docs-inline-code">UNION</span>  type is not currently supported in Impala.' + 
      '        </p> <p>' + 
      '          While Impala usually aims for a high degree of compatibility with HiveQL query syntax, Impala syntax differs from Hive for queries' + 
      '          involving complex types. The differences are intended to provide extra flexibility for queries involving these kinds of tables.' + 
      '        </p> <ul><li>' + 
      '            Impala uses dot notation for referring to element names or elements within complex types, and join notation for' + 
      '            cross-referencing scalar columns with the elements of complex types within the same row, rather than the <span class="sql-docs-inline-code">LATERAL' + 
      '            VIEW</span>  clause and <span class="sql-docs-inline-code">EXPLODE()</span>  function of HiveQL.' + 
      '          </li> <li>' + 
      '            Using join notation lets you use all the kinds of join queries with complex type columns. For example, you can use a' + 
      '            <span class="sql-docs-inline-code">LEFT OUTER JOIN</span> , <span class="sql-docs-inline-code">LEFT ANTI JOIN</span> , or <span class="sql-docs-inline-code">LEFT SEMI JOIN</span>  query to evaluate' + 
      '            different scenarios where the complex columns do or do not contain any elements.' + 
      '          </li> <li>' + 
      '            You can include references to collection types inside subqueries and inline views. For example, you can construct a' + 
      '            <span class="sql-docs-inline-code">FROM</span>  clause where one of the <q>tables</q>  is a subquery against a complex type column, or use a subquery' + 
      '            against a complex type column as the argument to an <span class="sql-docs-inline-code">IN</span>  or <span class="sql-docs-inline-code">EXISTS</span>  clause.' + 
      '          </li> <li>' + 
      '            The Impala pseudocolumn <span class="sql-docs-inline-code">POS</span>  lets you retrieve the position of elements in an array along with the elements' + 
      '            themselves, equivalent to the <span class="sql-docs-inline-code">POSEXPLODE()</span>  function of HiveQL. You do not use index notation to retrieve a' + 
      '            single array element in a query; the join query loops through the array elements and you use <span class="sql-docs-inline-code">WHERE</span>  clauses to' + 
      '            specify which elements to return.' + 
      '          </li> <li><p>' + 
      '              Join clauses involving complex type columns do not require an <span class="sql-docs-inline-code">ON</span>  or <span class="sql-docs-inline-code">USING</span>  clause. Impala' + 
      '              implicitly applies the join key so that the correct array entries or map elements are associated with the correct row from the' + 
      '              table.' + 
      '            </p> </li> <li><p>' + 
      '              Impala does not currently support the <span class="sql-docs-inline-code">UNION</span>  complex type.' + 
      '            </p> </li> </ul> </div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_limits"><h4>Limitations and Restrictions for Complex Types</h4> <div><p>' + 
      '          Complex type columns can only be used in tables or partitions with the Parquet file format.' + 
      '        </p> <p>' + 
      '          Complex type columns cannot be used as partition key columns in a partitioned table.' + 
      '        </p> <p>' + 
      '          When you use complex types with the <span class="sql-docs-inline-code">ORDER BY</span> , <span class="sql-docs-inline-code">GROUP BY</span> , <span class="sql-docs-inline-code">HAVING</span> , or' + 
      '          <span class="sql-docs-inline-code">WHERE</span>  clauses, you cannot refer to the column name by itself. Instead, you refer to the names of the scalar' + 
      '          values within the complex type, such as the <span class="sql-docs-inline-code">ITEM</span> , <span class="sql-docs-inline-code">POS</span> , <span class="sql-docs-inline-code">KEY</span> , or' + 
      '          <span class="sql-docs-inline-code">VALUE</span>  pseudocolumns, or the field names from a <span class="sql-docs-inline-code">STRUCT</span> .' + 
      '        </p> <p>' + 
      '          The maximum depth of nesting for complex types is 100 levels.' + 
      '        </p> <p id="../Impala/docs/topics/impala_complex_types.xml_complex_types_max_length">' + 
      '            The maximum length of the column definition for any complex type, including declarations for any nested types,' + 
      '            is 4000 characters.' + 
      '          </p> <p>' + 
      '          For ideal performance and scalability, use small or medium-sized collections, where all the complex columns contain at most a few' + 
      '          hundred megabytes per row. Remember, all the columns of a row are stored in the same HDFS data block, whose size in Parquet files' + 
      '          typically ranges from 256 MB to 1 GB.' + 
      '        </p> <p>' + 
      '          Including complex type columns in a table introduces some overhead that might make queries that do not reference those columns' + 
      '          somewhat slower than Impala queries against tables without any complex type columns. Expect at most a 2x slowdown compared to' + 
      '          tables that do not have any complex type columns.' + 
      '        </p> <p>' + 
      '          Currently, the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement does not collect any statistics for columns containing complex types.' + 
      '          Impala uses heuristics to construct execution plans involving complex type columns.' + 
      '        </p> <p>' + 
      '          Currently, Impala built-in functions and user-defined functions cannot accept complex types as parameters or produce them as' + 
      '          function return values. (When the complex type values are materialized in an Impala result set, the result set contains the scalar' + 
      '          components of the values, such as the <span class="sql-docs-inline-code">POS</span>  or <span class="sql-docs-inline-code">ITEM</span>  for an <span class="sql-docs-inline-code">ARRAY</span> , the' + 
      '          <span class="sql-docs-inline-code">KEY</span>  or <span class="sql-docs-inline-code">VALUE</span>  for a <span class="sql-docs-inline-code">MAP</span> , or the fields of a <span class="sql-docs-inline-code">STRUCT</span> ; these' + 
      '          scalar data items <i>can</i>  be used with built-in functions and UDFs as usual.)' + 
      '        </p> <p id="../Impala/docs/topics/impala_complex_types.xml_complex_types_read_only">' + 
      '        Impala currently cannot write new data files containing complex type columns.' + 
      '        Therefore, although the <span class="sql-docs-inline-code">SELECT</span>  statement works for queries' + 
      '        involving complex type columns, you cannot use a statement form that writes' + 
      '        data to complex type columns, such as <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  or <span class="sql-docs-inline-code">INSERT ... SELECT</span> .' + 
      '        To create data files containing complex type data, use the Hive <span class="sql-docs-inline-code">INSERT</span>  statement, or another' + 
      '        ETL mechanism such as MapReduce jobs, Spark jobs, Pig, and so on.' + 
      '      </p> <p>' + 
      '          Currently, Impala can query complex type columns only from Parquet tables or Parquet partitions within partitioned tables.' + 
      '          Although you can use complex types in tables with Avro, text, and other file formats as part of your ETL pipeline, for example as' + 
      '          intermediate tables populated through Hive, doing analytics through Impala requires that the data eventually ends up in a Parquet' + 
      '          table. The requirement for Parquet data files means that you can use complex types with Impala tables hosted on other kinds of' + 
      '          file storage systems such as Isilon and Amazon S3, but you cannot use Impala to query complex types from HBase tables. See' + 
      '          <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types_file_formats"><h4>File Format Support for Impala Complex Types</h4> </a> for more details.' + 
      '        </p> </div> </div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_using"><h4>Using Complex Types from SQL</h4> <div><p>' + 
      '        When using complex types through SQL in Impala, you learn the notation for <span class="sql-docs-inline-code">< ></span>  delimiters for the complex' + 
      '        type columns in <span class="sql-docs-inline-code">CREATE TABLE</span>  statements, and how to construct join queries to <q>unpack</q>  the scalar values' + 
      '        nested inside the complex data structures. You might need to condense a traditional RDBMS or data warehouse schema into a smaller' + 
      '        number of Parquet tables, and use Hive, Spark, Pig, or other mechanism outside Impala to populate the tables with data.' + 
      '      </p> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_nested_types_ddl"><h4>Complex Type Syntax for DDL Statements</h4> <div><p>' + 
      '          The definition of <span class="sql-docs-variable">data_type</span> , as seen in the <span class="sql-docs-inline-code">CREATE TABLE</span>  and <span class="sql-docs-inline-code">ALTER TABLE</span> ' + 
      '          statements, now includes complex types in addition to primitive types:' + 
      '        </p> <div class="sql-docs-code-block">primitive_type<br/>| array_type<br/>| map_type<br/>| struct_type<br/></div><p>' + 
      '          Unions are not currently supported.' + 
      '        </p> <p><span class="sql-docs-inline-code">Array</span> , <span class="sql-docs-inline-code">struct</span> , and' + 
      '            <span class="sql-docs-inline-code">map</span>  column type declarations are specified in the' + 
      '            <span class="sql-docs-inline-code">CREATE TABLE</span>  statement. You can also add or change' + 
      '          the type of complex columns through the <span class="sql-docs-inline-code">ALTER TABLE</span> ' + 
      '          statement. </p> <p> Currently, Impala queries allow complex types only in tables that' + 
      '          use the Parquet format. If an Impala query encounters complex types in' + 
      '          a table or partition using another file format, the query returns a' + 
      '          runtime error. </p> <p> You can use <span class="sql-docs-inline-code">ALTER TABLE ... SET FILEFORMAT PARQUET</span> ' + 
      '          to change the file format of an existing table containing complex' + 
      '          types to Parquet, after which Impala can query it. Make sure to load' + 
      '          Parquet files into the table after changing the file format, because' + 
      '          the <span class="sql-docs-inline-code">ALTER TABLE ... SET FILEFORMAT</span>  statement does not' + 
      '          convert existing data to the new file format. </p> <p id="../Impala/docs/topics/impala_complex_types.xml_complex_types_partitioning">' + 
      '        Partitioned tables can contain complex type columns.' + 
      '        All the partition key columns must be scalar types.' + 
      '      </p> <p>' + 
      '          Because use cases for Impala complex types require that you already have Parquet data files produced outside of Impala, you can' + 
      '          use the Impala <span class="sql-docs-inline-code">CREATE TABLE LIKE PARQUET</span>  syntax to produce a table with columns that match the structure of an' + 
      '          existing Parquet file, including complex type columns for nested data structures. Remember to include the <span class="sql-docs-inline-code">STORED AS' + 
      '          PARQUET</span>  clause in this case, because even with <span class="sql-docs-inline-code">CREATE TABLE LIKE PARQUET</span> , the default file format of the' + 
      '          resulting table is still text.' + 
      '        </p> <p>' + 
      '          Because the complex columns are omitted from the result set of an Impala <span class="sql-docs-inline-code">SELECT *</span>  or <span class="sql-docs-inline-code">SELECT' + 
      '          <span class="sql-docs-variable">col_name</span> </span>  query, and because Impala currently does not support writing Parquet files with complex type' + 
      '          columns, you cannot use the <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  syntax to create a table with nested type columns.' + 
      '        </p> <div class="sql-docs-note"><p>' + 
      '            Once you have a table set up with complex type columns, use the <span class="sql-docs-inline-code">DESCRIBE</span>  and <span class="sql-docs-inline-code">SHOW CREATE TABLE</span> ' + 
      '            statements to see the correct notation with <span class="sql-docs-inline-code"><</span>  and <span class="sql-docs-inline-code">></span>  delimiters and comma and colon' + 
      '            separators within the complex type definitions. If you do not have existing data with the same layout as the table, you can' + 
      '            query the empty table to practice with the notation for the <span class="sql-docs-inline-code">SELECT</span>  statement. In the <span class="sql-docs-inline-code">SELECT</span> ' + 
      '            list, you use dot notation and pseudocolumns such as <span class="sql-docs-inline-code">ITEM</span> , <span class="sql-docs-inline-code">KEY</span> , and <span class="sql-docs-inline-code">VALUE</span>  for' + 
      '            referring to items within the complex type columns. In the <span class="sql-docs-inline-code">FROM</span>  clause, you use join notation to construct' + 
      '            table aliases for any referenced <span class="sql-docs-inline-code">ARRAY</span>  and <span class="sql-docs-inline-code">MAP</span>  columns.' + 
      '          </p> </div> <p>' + 
      '          For example, when defining a table that holds contact information, you might represent phone numbers differently depending on the' + 
      '          expected layout and relationships of the data, and how well you can predict those properties in advance.' + 
      '        </p> <p>' + 
      '          Here are different ways that you might represent phone numbers in a traditional relational schema, with equivalent representations' + 
      '          using complex types.' + 
      '        </p> </div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_sql"><h4>SQL Statements that Support Complex Types</h4> <div><p>' + 
      '          The Impala SQL statements that support complex types are currently' + 
      '          <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_table.xml#create_table">CREATE TABLE</a></span> ,' + 
      '          <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_alter_table.xml#alter_table">ALTER TABLE</a></span> ,' + 
      '          <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_describe.xml#describe">DESCRIBE</a></span> ,' + 
      '          <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_load_data.xml#load_data">LOAD DATA</a></span> , and' + 
      '          <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_select.xml#select">SELECT</a></span> . That is, currently Impala can create or alter tables' + 
      '          containing complex type columns, examine the structure of a table containing complex type columns, import existing data files' + 
      '          containing complex type columns into a table, and query Parquet tables containing complex types.' + 
      '        </p> <p id="../Impala/docs/topics/impala_complex_types.xml_complex_types_read_only">' + 
      '        Impala currently cannot write new data files containing complex type columns.' + 
      '        Therefore, although the <span class="sql-docs-inline-code">SELECT</span>  statement works for queries' + 
      '        involving complex type columns, you cannot use a statement form that writes' + 
      '        data to complex type columns, such as <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  or <span class="sql-docs-inline-code">INSERT ... SELECT</span> .' + 
      '        To create data files containing complex type data, use the Hive <span class="sql-docs-inline-code">INSERT</span>  statement, or another' + 
      '        ETL mechanism such as MapReduce jobs, Spark jobs, Pig, and so on.' + 
      '      </p> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_ddl"><h4>DDL Statements and Complex Types</h4> <div><p>' + 
      '            Column specifications for complex or nested types use <span class="sql-docs-inline-code"><</span>  and <span class="sql-docs-inline-code">></span>  delimiters:' + 
      '          </p> <div class="sql-docs-code-block"></div></div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_queries"><h4>Queries and Complex Types</h4> <div><p>' + 
      '            The result set of an Impala query always contains all scalar types; the elements and fields within any complex type queries must' + 
      '            be <q>unpacked</q>  using join queries. A query cannot directly retrieve the entire value for a complex type column. Impala' + 
      '            returns an error in this case. Queries using <span class="sql-docs-inline-code">SELECT *</span>  are allowed for tables with complex types, but the' + 
      '            columns with complex types are skipped.' + 
      '          </p> <p>' + 
      '            The following example shows how referring directly to a complex type column returns an error, while <span class="sql-docs-inline-code">SELECT *</span>  on' + 
      '            the same table succeeds, but only retrieves the scalar columns.' + 
      '          </p> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_type_schema_pointer" class="sql-docs-note">' + 
      '      Many of the complex type examples refer to tables' + 
      '      such as <span class="sql-docs-inline-code">CUSTOMER</span>  and <span class="sql-docs-inline-code">REGION</span> ' + 
      '      adapted from the tables used in the TPC-H benchmark.' + 
      '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_sample_schema"><h4>Sample Schema and Data for Experimenting with Impala Complex Types</h4> </a>' + 
      '      for the table definitions.' + 
      '      </div> <div class="sql-docs-code-block"></div><p>' + 
      '            References to fields within <span class="sql-docs-inline-code">STRUCT</span>  columns use dot notation. If the field name is unambiguous, you can omit' + 
      '            qualifiers such as table name, column name, or even the <span class="sql-docs-inline-code">ITEM</span>  or <span class="sql-docs-inline-code">VALUE</span>  pseudocolumn names for' + 
      '            <span class="sql-docs-inline-code">STRUCT</span>  elements inside an <span class="sql-docs-inline-code">ARRAY</span>  or a <span class="sql-docs-inline-code">MAP</span> .' + 
      '          </p> <div class="sql-docs-code-block">SELECT id, address.city FROM customers WHERE address.zip = 94305;<br/></div><p>' + 
      '            References to elements within <span class="sql-docs-inline-code">ARRAY</span>  columns use the <span class="sql-docs-inline-code">ITEM</span>  pseudocolumn:' + 
      '          </p> <div class="sql-docs-code-block">select r_name, r_nations.item.n_name from region, region.r_nations limit 7;<br/>+--------+----------------+<br/>| r_name | item.n_name    |<br/>+--------+----------------+<br/>| EUROPE | UNITED KINGDOM |<br/>| EUROPE | RUSSIA         |<br/>| EUROPE | ROMANIA        |<br/>| EUROPE | GERMANY        |<br/>| EUROPE | FRANCE         |<br/>| ASIA   | VIETNAM        |<br/>| ASIA   | CHINA          |<br/>+--------+----------------+<br/></div><p>' + 
      '            References to fields within <span class="sql-docs-inline-code">MAP</span>  columns use the <span class="sql-docs-inline-code">KEY</span>  and <span class="sql-docs-inline-code">VALUE</span>  pseudocolumns.' + 
      '            In this example, once the query establishes the alias <span class="sql-docs-inline-code">MAP_FIELD</span>  for a <span class="sql-docs-inline-code">MAP</span>  column with a' + 
      '            <span class="sql-docs-inline-code">STRING</span>  key and an <span class="sql-docs-inline-code">INT</span>  value, the query can refer to <span class="sql-docs-inline-code">MAP_FIELD.KEY</span>  and' + 
      '            <span class="sql-docs-inline-code">MAP_FIELD.VALUE</span> , which have zero, one, or many instances for each row from the containing table.' + 
      '          </p> <div class="sql-docs-code-block"></div><p>' + 
      '            When complex types are nested inside each other, you use a combination of joins, pseudocolumn names, and dot notation to refer' + 
      '            to specific fields at the appropriate level. This is the most frequent form of query syntax for complex columns, because the' + 
      '            typical use case involves two levels of complex types, such as an <span class="sql-docs-inline-code">ARRAY</span>  of <span class="sql-docs-inline-code">STRUCT</span>  elements.' + 
      '          </p> <div class="sql-docs-code-block">SELECT id, phone_numbers.area_code FROM contact_info_many_structs INNER JOIN contact_info_many_structs.phone_numbers phone_numbers LIMIT 3;<br/></div><p>' + 
      '            You can express relationships between <span class="sql-docs-inline-code">ARRAY</span>  and <span class="sql-docs-inline-code">MAP</span>  columns at different levels as joins. You' + 
      '            include comparison operators between fields at the top level and within the nested type columns so that Impala can do the' + 
      '            appropriate join operation.' + 
      '          </p> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_type_schema_pointer" class="sql-docs-note">' + 
      '      Many of the complex type examples refer to tables' + 
      '      such as <span class="sql-docs-inline-code">CUSTOMER</span>  and <span class="sql-docs-inline-code">REGION</span> ' + 
      '      adapted from the tables used in the TPC-H benchmark.' + 
      '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_sample_schema"><h4>Sample Schema and Data for Experimenting with Impala Complex Types</h4> </a>' + 
      '      for the table definitions.' + 
      '      </div> <p>' + 
      '            For example, the following queries work equivalently. They each return customer and order data for customers that have at least' + 
      '            one order.' + 
      '          </p> <div class="sql-docs-code-block">SELECT c.c_name, o.o_orderkey FROM customer c, c.c_orders o LIMIT 5;<br/>+--------------------+------------+<br/>| c_name             | o_orderkey |<br/>+--------------------+------------+<br/>| Customer#000072578 | 558821     |<br/>| Customer#000072578 | 2079810    |<br/>| Customer#000072578 | 5768068    |<br/>| Customer#000072578 | 1805604    |<br/>| Customer#000072578 | 3436389    |<br/>+--------------------+------------+<br/><br/>SELECT c.c_name, o.o_orderkey FROM customer c INNER JOIN c.c_orders o LIMIT 5;<br/>+--------------------+------------+<br/>| c_name             | o_orderkey |<br/>+--------------------+------------+<br/>| Customer#000072578 | 558821     |<br/>| Customer#000072578 | 2079810    |<br/>| Customer#000072578 | 5768068    |<br/>| Customer#000072578 | 1805604    |<br/>| Customer#000072578 | 3436389    |<br/>+--------------------+------------+<br/></div><p>' + 
      '            The following query using an outer join returns customers that have orders, plus customers with no orders (no entries in the' + 
      '            <span class="sql-docs-inline-code">C_ORDERS</span>  array):' + 
      '          </p> <div class="sql-docs-code-block"></div><p>' + 
      '            The following query returns <i>only</i>  customers that have no orders. (With <span class="sql-docs-inline-code">LEFT ANTI JOIN</span>  or <span class="sql-docs-inline-code">LEFT' + 
      '            SEMI JOIN</span> , the query can only refer to columns from the left-hand table, because by definition there is no matching' + 
      '            information in the right-hand table.)' + 
      '          </p> <div class="sql-docs-code-block"></div><p>' + 
      '            You can also perform correlated subqueries to examine the properties of complex type columns for each row in the result set.' + 
      '          </p> <p>' + 
      '            Count the number of orders per customer. Note the correlated reference to the table alias <span class="sql-docs-inline-code">C</span> . The' + 
      '            <span class="sql-docs-inline-code">COUNT(*)</span>  operation applies to all the elements of the <span class="sql-docs-inline-code">C_ORDERS</span>  array for the corresponding' + 
      '            row, avoiding the need for a <span class="sql-docs-inline-code">GROUP BY</span>  clause.' + 
      '          </p> <div class="sql-docs-code-block">select c_name, howmany FROM customer c, (SELECT COUNT(*) howmany FROM c.c_orders) v limit 5;<br/>+--------------------+---------+<br/>| c_name             | howmany |<br/>+--------------------+---------+<br/>| Customer#000030065 | 15      |<br/>| Customer#000065455 | 18      |<br/>| Customer#000113644 | 21      |<br/>| Customer#000111078 | 0       |<br/>| Customer#000024621 | 0       |<br/>+--------------------+---------+<br/></div><p>' + 
      '            Count the number of orders per customer, ignoring any customers that have not placed any orders:' + 
      '          </p> <div class="sql-docs-code-block">SELECT c_name, howmany_orders<br/>FROM<br/>  customer c,<br/>  (SELECT COUNT(*) howmany_orders FROM c.c_orders) subq1<br/>WHERE howmany_orders > 0<br/>LIMIT 5;<br/>+--------------------+----------------+<br/>| c_name             | howmany_orders |<br/>+--------------------+----------------+<br/>| Customer#000072578 | 7              |<br/>| Customer#000046378 | 26             |<br/>| Customer#000069815 | 11             |<br/>| Customer#000079058 | 12             |<br/>| Customer#000092239 | 26             |<br/>+--------------------+----------------+<br/></div><p>' + 
      '            Count the number of line items in each order. The reference to <span class="sql-docs-inline-code">C.C_ORDERS</span>  in the <span class="sql-docs-inline-code">FROM</span>  clause' + 
      '            is needed because the <span class="sql-docs-inline-code">O_ORDERKEY</span>  field is a member of the elements in the <span class="sql-docs-inline-code">C_ORDERS</span>  array. The' + 
      '            subquery labelled <span class="sql-docs-inline-code">SUBQ1</span>  is correlated: it is re-evaluated for the <span class="sql-docs-inline-code">C_ORDERS.O_LINEITEMS</span>  array' + 
      '            from each row of the <span class="sql-docs-inline-code">CUSTOMERS</span>  table.' + 
      '          </p> <div class="sql-docs-code-block">SELECT c_name, o_orderkey, howmany_line_items<br/>FROM<br/>  customer c,<br/>  c.c_orders t2,<br/>  (SELECT COUNT(*) howmany_line_items FROM c.c_orders.o_lineitems) subq1<br/>WHERE howmany_line_items > 0<br/>LIMIT 5;<br/>+--------------------+------------+--------------------+<br/>| c_name             | o_orderkey | howmany_line_items |<br/>+--------------------+------------+--------------------+<br/>| Customer#000020890 | 1884930    | 95                 |<br/>| Customer#000020890 | 4570754    | 95                 |<br/>| Customer#000020890 | 3771072    | 95                 |<br/>| Customer#000020890 | 2555489    | 95                 |<br/>| Customer#000020890 | 919171     | 95                 |<br/>+--------------------+------------+--------------------+<br/></div><p>' + 
      '            Get the number of orders, the average order price, and the maximum items in any order per customer. For this example, the' + 
      '            subqueries labelled <span class="sql-docs-inline-code">SUBQ1</span>  and <span class="sql-docs-inline-code">SUBQ2</span>  are correlated: they are re-evaluated for each row from' + 
      '            the original <span class="sql-docs-inline-code">CUSTOMER</span>  table, and only apply to the complex columns associated with that row.' + 
      '          </p> <div class="sql-docs-code-block">SELECT c_name, howmany, average_price, most_items<br/>FROM<br/>  customer c,<br/>  (SELECT COUNT(*) howmany, AVG(o_totalprice) average_price FROM c.c_orders) subq1,<br/>  (SELECT MAX(l_quantity) most_items FROM c.c_orders.o_lineitems ) subq2<br/>LIMIT 5;<br/>+--------------------+---------+---------------+------------+<br/>| c_name             | howmany | average_price | most_items |<br/>+--------------------+---------+---------------+------------+<br/>| Customer#000030065 | 15      | 128908.34     | 50.00      |<br/>| Customer#000088191 | 0       | NULL          | NULL       |<br/>| Customer#000101555 | 10      | 164250.31     | 50.00      |<br/>| Customer#000022092 | 0       | NULL          | NULL       |<br/>| Customer#000036277 | 27      | 166040.06     | 50.00      |<br/>+--------------------+---------+---------------+------------+<br/></div><p>' + 
      '            For example, these queries show how to access information about the <span class="sql-docs-inline-code">ARRAY</span>  elements within the' + 
      '            <span class="sql-docs-inline-code">CUSTOMER</span>  table from the <q>nested TPC-H</q>  schema, starting with the initial <span class="sql-docs-inline-code">ARRAY</span>  elements' + 
      '            and progressing to examine the <span class="sql-docs-inline-code">STRUCT</span>  fields of the <span class="sql-docs-inline-code">ARRAY</span> , and then the elements nested within' + 
      '            another <span class="sql-docs-inline-code">ARRAY</span>  of <span class="sql-docs-inline-code">STRUCT</span> :' + 
      '          </p> <div class="sql-docs-code-block"></div></div> </div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_pseudocolumns"><h4>Pseudocolumns for ARRAY and MAP Types</h4> <div><p>' + 
      '          Each element in an <span class="sql-docs-inline-code">ARRAY</span>  type has a position, indexed starting from zero, and a value. Each element in a' + 
      '          <span class="sql-docs-inline-code">MAP</span>  type represents a key-value pair. Impala provides pseudocolumns that let you retrieve this metadata as part' + 
      '          of a query, or filter query results by including such things in a <span class="sql-docs-inline-code">WHERE</span>  clause. You refer to the pseudocolumns as' + 
      '          part of qualified column names in queries:' + 
      '        </p> <ul><li><span class="sql-docs-inline-code">ITEM</span> : The value of an array element. If the <span class="sql-docs-inline-code">ARRAY</span>  contains <span class="sql-docs-inline-code">STRUCT</span>  elements,' + 
      '            you can refer to either <span class="sql-docs-inline-code"><span class="sql-docs-variable">array_name</span> .ITEM.<span class="sql-docs-variable">field_name</span> </span>  or use the shorthand' + 
      '            <span class="sql-docs-inline-code"><span class="sql-docs-variable">array_name</span> .<span class="sql-docs-variable">field_name</span> </span> .' + 
      '          </li> <li><span class="sql-docs-inline-code">POS</span> : The position of an element within an array.' + 
      '          </li> <li><span class="sql-docs-inline-code">KEY</span> : The value forming the first part of a key-value pair in a map. It is not necessarily unique.' + 
      '          </li> <li><span class="sql-docs-inline-code">VALUE</span> : The data item forming the second part of a key-value pair in a map. If the <span class="sql-docs-inline-code">VALUE</span>  part' + 
      '            of the <span class="sql-docs-inline-code">MAP</span>  element is a <span class="sql-docs-inline-code">STRUCT</span> , you can refer to either' + 
      '            <span class="sql-docs-inline-code"><span class="sql-docs-variable">map_name</span> .VALUE.<span class="sql-docs-variable">field_name</span> </span>  or use the shorthand' + 
      '            <span class="sql-docs-inline-code"><span class="sql-docs-variable">map_name</span> .<span class="sql-docs-variable">field_name</span> </span> .' + 
      '          </li> </ul> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_item"><h4 id="../Impala/docs/topics/impala_complex_types.xml_pos">ITEM and POS Pseudocolumns</h4> <div><p>' + 
      '            When an <span class="sql-docs-inline-code">ARRAY</span>  column contains <span class="sql-docs-inline-code">STRUCT</span>  elements, you can refer to a field within the' + 
      '            <span class="sql-docs-inline-code">STRUCT</span>  using a qualified name of the form' + 
      '            <span class="sql-docs-inline-code"><span class="sql-docs-variable">array_column</span> .<span class="sql-docs-variable">field_name</span> </span> . If the <span class="sql-docs-inline-code">ARRAY</span>  contains scalar' + 
      '            values, Impala recognizes the special name <span class="sql-docs-inline-code"><span class="sql-docs-variable">array_column</span> .ITEM</span>  to represent the value of each' + 
      '            scalar array element. For example, if a column contained an <span class="sql-docs-inline-code">ARRAY</span>  where each element was a' + 
      '            <span class="sql-docs-inline-code">STRING</span> , you would use <span class="sql-docs-inline-code"><span class="sql-docs-variable">array_name</span> .ITEM</span>  to refer to each scalar value in the' + 
      '            <span class="sql-docs-inline-code">SELECT</span>  list, or the <span class="sql-docs-inline-code">WHERE</span>  or other clauses.' + 
      '          </p> <p>' + 
      '            This example shows a table with two <span class="sql-docs-inline-code">ARRAY</span>  columns whose elements are of the scalar type' + 
      '            <span class="sql-docs-inline-code">STRING</span> . When referring to the values of the array elements in the <span class="sql-docs-inline-code">SELECT</span>  list,' + 
      '            <span class="sql-docs-inline-code">WHERE</span>  clause, or <span class="sql-docs-inline-code">ORDER BY</span>  clause, you use the <span class="sql-docs-inline-code">ITEM</span>  pseudocolumn because' + 
      '            within the array, the individual elements have no defined names.' + 
      '          </p> <div class="sql-docs-code-block"></div><p>' + 
      '            Because an array is inherently an ordered data structure, Impala recognizes the special name' + 
      '            <span class="sql-docs-inline-code"><span class="sql-docs-variable">array_column</span> .POS</span>  to represent the numeric position of each element within the array. The' + 
      '            <span class="sql-docs-inline-code">POS</span>  pseudocolumn lets you filter or reorder the result set based on the sequence of array elements.' + 
      '          </p> <p>' + 
      '            The following example uses a table from a flattened version of the TPC-H schema. The <span class="sql-docs-inline-code">REGION</span>  table only has a' + 
      '            few rows, such as one row for Europe and one for Asia. The row for each region represents all the countries in that region as an' + 
      '            <span class="sql-docs-inline-code">ARRAY</span>  of <span class="sql-docs-inline-code">STRUCT</span>  elements:' + 
      '          </p> <div class="sql-docs-code-block"></div><p>' + 
      '            To find the countries within a specific region, you use a join query. To find out the order of elements in the array, you also' + 
      '            refer to the <span class="sql-docs-inline-code">POS</span>  pseudocolumn in the select list:' + 
      '          </p> <div class="sql-docs-code-block">[localhost:21000] > SELECT r1.r_name, r2.n_name, <b>r2.POS</b> > FROM region r1 INNER JOIN r1.r_nations r2<br/>                  > WHERE r1.r_name = \'ASIA\';<br/>+--------+-----------+-----+<br/>| r_name | n_name    | pos |<br/>+--------+-----------+-----+<br/>| ASIA   | VIETNAM   | 0   |<br/>| ASIA   | CHINA     | 1   |<br/>| ASIA   | JAPAN     | 2   |<br/>| ASIA   | INDONESIA | 3   |<br/>| ASIA   | INDIA     | 4   |<br/>+--------+-----------+-----+<br/></div><p>' + 
      '            Once you know the positions of the elements, you can use that information in subsequent queries, for example to change the' + 
      '            ordering of results from the complex type column or to filter certain elements from the array:' + 
      '          </p> <div class="sql-docs-code-block">[localhost:21000] > SELECT r1.r_name, r2.n_name, r2.POS<br/>                  > FROM region r1 INNER JOIN r1.r_nations r2<br/>                  > WHERE r1.r_name = \'ASIA\'<br/>                  > <b>ORDER BY r2.POS DESC</b> ;<br/>+--------+-----------+-----+<br/>| r_name | n_name    | pos |<br/>+--------+-----------+-----+<br/>| ASIA   | INDIA     | 4   |<br/>| ASIA   | INDONESIA | 3   |<br/>| ASIA   | JAPAN     | 2   |<br/>| ASIA   | CHINA     | 1   |<br/>| ASIA   | VIETNAM   | 0   |<br/>+--------+-----------+-----+<br/>[localhost:21000] > SELECT r1.r_name, r2.n_name, r2.POS<br/>                  > FROM region r1 INNER JOIN r1.r_nations r2<br/>                  > WHERE r1.r_name = \'ASIA\' AND <b>r2.POS BETWEEN 1 and 3</b> ;<br/>+--------+-----------+-----+<br/>| r_name | n_name    | pos |<br/>+--------+-----------+-----+<br/>| ASIA   | CHINA     | 1   |<br/>| ASIA   | JAPAN     | 2   |<br/>| ASIA   | INDONESIA | 3   |<br/>+--------+-----------+-----+<br/></div></div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_key"><h4 id="../Impala/docs/topics/impala_complex_types.xml_value">KEY and VALUE Pseudocolumns</h4> <div><p>' + 
      '            The <span class="sql-docs-inline-code">MAP</span>  data type is suitable for representing sparse or wide data structures, where each row might only have' + 
      '            entries for a small subset of named fields. Because the element names (the map keys) vary depending on the row, a query must be' + 
      '            able to refer to both the key and the value parts of each key-value pair. The <span class="sql-docs-inline-code">KEY</span>  and <span class="sql-docs-inline-code">VALUE</span> ' + 
      '            pseudocolumns let you refer to the parts of the key-value pair independently within the query, as' + 
      '            <span class="sql-docs-inline-code"><span class="sql-docs-variable">map_column</span> .KEY</span>  and <span class="sql-docs-inline-code"><span class="sql-docs-variable">map_column</span> .VALUE</span> .' + 
      '          </p> <p>' + 
      '            The <span class="sql-docs-inline-code">KEY</span>  must always be a scalar type, such as <span class="sql-docs-inline-code">STRING</span> , <span class="sql-docs-inline-code">BIGINT</span> , or' + 
      '            <span class="sql-docs-inline-code">TIMESTAMP</span> . It can be <span class="sql-docs-inline-code">NULL</span> . Values of the <span class="sql-docs-inline-code">KEY</span>  field are not necessarily unique' + 
      '            within the same <span class="sql-docs-inline-code">MAP</span> . You apply any required <span class="sql-docs-inline-code">DISTINCT</span> , <span class="sql-docs-inline-code">GROUP BY</span> , and other' + 
      '            clauses in the query, and loop through the result set to process all the values matching any specified keys.' + 
      '          </p> <p>' + 
      '            The <span class="sql-docs-inline-code">VALUE</span>  can be either a scalar type or another complex type. If the <span class="sql-docs-inline-code">VALUE</span>  is a' + 
      '            <span class="sql-docs-inline-code">STRUCT</span> , you can construct a qualified name' + 
      '            <span class="sql-docs-inline-code"><span class="sql-docs-variable">map_column</span> .VALUE.<span class="sql-docs-variable">struct_field</span> </span>  to refer to the individual fields inside' + 
      '            the value part. If the <span class="sql-docs-inline-code">VALUE</span>  is an <span class="sql-docs-inline-code">ARRAY</span>  or another <span class="sql-docs-inline-code">MAP</span> , you must include' + 
      '            another join condition that establishes a table alias for <span class="sql-docs-inline-code"><span class="sql-docs-variable">map_column</span> .VALUE</span> , and then' + 
      '            construct another qualified name using that alias, for example <span class="sql-docs-inline-code"><span class="sql-docs-variable">table_alias</span> .ITEM</span>  or' + 
      '            <span class="sql-docs-inline-code"><span class="sql-docs-variable">table_alias</span> .KEY</span>  and <span class="sql-docs-inline-code"><span class="sql-docs-variable">table_alias</span> .VALUE</span> </p> <p>' + 
      '            The following example shows different ways to access a <span class="sql-docs-inline-code">MAP</span>  column using the <span class="sql-docs-inline-code">KEY</span>  and' + 
      '            <span class="sql-docs-inline-code">VALUE</span>  pseudocolumns. The <span class="sql-docs-inline-code">DETAILS</span>  column has a <span class="sql-docs-inline-code">STRING</span>  first part with short,' + 
      '            standardized values such as <span class="sql-docs-inline-code">\'Recurring\'</span> , <span class="sql-docs-inline-code">\'Lucid\'</span> , or <span class="sql-docs-inline-code">\'Anxiety\'</span> . This is the' + 
      '            <q>key</q>  that is used to look up particular kinds of elements from the <span class="sql-docs-inline-code">MAP</span> . The second part, also a' + 
      '            <span class="sql-docs-inline-code">STRING</span> , is a longer free-form explanation. Impala gives you the standard pseudocolumn names' + 
      '            <span class="sql-docs-inline-code">KEY</span>  and <span class="sql-docs-inline-code">VALUE</span>  for the two parts, and you apply your own conventions and interpretations to the' + 
      '            underlying values.' + 
      '          </p> <div class="sql-docs-note">' + 
      '            If you find that the single-item nature of the <span class="sql-docs-inline-code">VALUE</span>  makes it difficult to model your data accurately, the' + 
      '            solution is typically to add some nesting to the complex type. For example, to have several sets of key-value pairs, make the' + 
      '            column an <span class="sql-docs-inline-code">ARRAY</span>  whose elements are <span class="sql-docs-inline-code">MAP</span> . To make a set of key-value pairs that holds more' + 
      '            elaborate information, make a <span class="sql-docs-inline-code">MAP</span>  column whose <span class="sql-docs-inline-code">VALUE</span>  part contains an <span class="sql-docs-inline-code">ARRAY</span> ' + 
      '            or a <span class="sql-docs-inline-code">STRUCT</span> .' + 
      '          </div> <div class="sql-docs-code-block">-- What are all the types of dreams that are recorded?<br/>SELECT DISTINCT details.KEY FROM dream_journal, dream_journal.details;<br/><br/>-- How many lucid dreams were recorded?<br/>-- Because there is no GROUP BY, we count the \'Lucid\' keys across all rows.<br/>SELECT <b>COUNT(details.KEY)</b> FROM dream_journal, dream_journal.details<br/>WHERE <b>details.KEY = \'Lucid\'</b> ;<br/><br/>-- Print a report of a subset of dreams, filtering based on both the lookup key<br/>-- and the detailed value.<br/>SELECT dream_id, <b>details.KEY AS "Dream Type"</b> , <b>details.VALUE AS "Dream Summary"</b> FROM dream_journal, dream_journal.details<br/>WHERE<br/>  <b>details.KEY IN (\'Happy\', \'Pleasant\', \'Joyous\')</b> AND <b>details.VALUE LIKE \'%childhood%\'</b> ;<br/></div><p>' + 
      '            The following example shows a more elaborate version of the previous table, where the <span class="sql-docs-inline-code">VALUE</span>  part of the' + 
      '            <span class="sql-docs-inline-code">MAP</span>  entry is a <span class="sql-docs-inline-code">STRUCT</span>  rather than a scalar type. Now instead of referring to the' + 
      '            <span class="sql-docs-inline-code">VALUE</span>  pseudocolumn directly, you use dot notation to refer to the <span class="sql-docs-inline-code">STRUCT</span>  fields inside it.' + 
      '          </p> <div class="sql-docs-code-block">-- Do more elaborate reporting and filtering by examining multiple attributes within the same dream.<br/>SELECT dream_id, <b>details.KEY AS "Dream Type"</b> , <b>details.VALUE.summary AS "Dream Summary"</b> , <b>details.VALUE.duration AS "Duration"</b> FROM better_dream_journal, better_dream_journal.details<br/>WHERE<br/>  <b>details.KEY IN (\'Anxiety\', \'Nightmare\')</b> AND <b>details.VALUE.duration > 60</b> AND <b>details.VALUE.woke_up = TRUE</b> ;<br/><br/>-- Remember that if the ITEM or VALUE contains a STRUCT, you can reference<br/>-- the STRUCT fields directly without the .ITEM or .VALUE qualifier.<br/>SELECT dream_id, <b>details.KEY AS "Dream Type"</b> , <b>details.summary AS "Dream Summary"</b> , <b>details.duration AS "Duration"</b> FROM better_dream_journal, better_dream_journal.details<br/>WHERE<br/>  <b>details.KEY IN (\'Anxiety\', \'Nightmare\')</b> AND <b>details.duration > 60</b> AND <b>details.woke_up = TRUE</b> ;<br/></div></div> </div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_etl"><h4>Loading Data Containing Complex Types</h4> <div><p>' + 
      '          Because the Impala <span class="sql-docs-inline-code">INSERT</span>  statement does not currently support creating new data with complex type columns, or' + 
      '          copying existing complex type values from one table to another, you primarily use Impala to query Parquet tables with complex' + 
      '          types where the data was inserted through Hive, or create tables with complex types where you already have existing Parquet data' + 
      '          files.' + 
      '        </p> <p>' + 
      '          If you have created a Hive table with the Parquet file format and containing complex types, use the same table for Impala queries' + 
      '          with no changes. If you have such a Hive table in some other format, use a Hive <span class="sql-docs-inline-code">CREATE TABLE AS SELECT ... STORED AS' + 
      '          PARQUET</span>  or <span class="sql-docs-inline-code">INSERT ... SELECT</span>  statement to produce an equivalent Parquet table that Impala can query.' + 
      '        </p> <p>' + 
      '          If you have existing Parquet data files containing complex types, located outside of any Impala or Hive table, such as data files' + 
      '          created by Spark jobs, you can use an Impala <span class="sql-docs-inline-code">CREATE TABLE ... STORED AS PARQUET</span>  statement, followed by an Impala' + 
      '          <span class="sql-docs-inline-code">LOAD DATA</span>  statement to move the data files into the table. As an alternative, you can use an Impala' + 
      '          <span class="sql-docs-inline-code">CREATE EXTERNAL TABLE</span>  statement to create a table pointing to the HDFS directory that already contains the data' + 
      '          files.' + 
      '        </p> <p>' + 
      '          Perhaps the simplest way to get started with complex type data is to take a denormalized table containing duplicated values, and' + 
      '          use an <span class="sql-docs-inline-code">INSERT ... SELECT</span>  statement to copy the data into a Parquet table and condense the repeated values into' + 
      '          complex types. With the Hive <span class="sql-docs-inline-code">INSERT</span>  statement, you use the <span class="sql-docs-inline-code">COLLECT_LIST()</span> ,' + 
      '          <span class="sql-docs-inline-code">NAMED_STRUCT()</span> , and <span class="sql-docs-inline-code">MAP()</span>  constructor functions within a <span class="sql-docs-inline-code">GROUP BY</span>  query to' + 
      '          produce the complex type values. <span class="sql-docs-inline-code">COLLECT_LIST()</span>  turns a sequence of values into an <span class="sql-docs-inline-code">ARRAY</span> .' + 
      '          <span class="sql-docs-inline-code">NAMED_STRUCT()</span>  uses the first, third, and so on arguments as the field names for a <span class="sql-docs-inline-code">STRUCT</span> , to' + 
      '          match the field names from the <span class="sql-docs-inline-code">CREATE TABLE</span>  statement.' + 
      '        </p> <div class="sql-docs-note">' + 
      '          Because Hive currently cannot construct individual rows using complex types through the <span class="sql-docs-inline-code">INSERT ... VALUES</span>  syntax,' + 
      '          you prepare the data in flat form in a separate table, then copy it to the table with complex columns using <span class="sql-docs-inline-code">INSERT ...' + 
      '          SELECT</span>  and the complex type constructors. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types_ex_hive_etl"><h4>Constructing Parquet Files with Complex Columns Using Hive</h4> </a> for' + 
      '          examples.' + 
      '        </div> </div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_nesting"><h4>Using Complex Types as Nested Types</h4> <div><p>' + 
      '          The <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , and <span class="sql-docs-inline-code">MAP</span>  types can be the top-level types for <q>nested' + 
      '          type</q>  columns. That is, each of these types can contain other complex or scalar types, with multiple levels of nesting to a' + 
      '          maximum depth of 100. For example, you can have an array of structures, a map containing other maps, a structure containing an' + 
      '          array of other structures, and so on. At the lowest level, there are always scalar types making up the fields of a' + 
      '          <span class="sql-docs-inline-code">STRUCT</span> , elements of an <span class="sql-docs-inline-code">ARRAY</span> , and keys and values of a <span class="sql-docs-inline-code">MAP</span> .' + 
      '        </p> <p>' + 
      '          Schemas involving complex types typically use some level of nesting for the complex type columns.' + 
      '        </p> <p>' + 
      '          For example, to model a relationship like a dimension table and a fact table, you typically use an <span class="sql-docs-inline-code">ARRAY</span>  where' + 
      '          each array element is a <span class="sql-docs-inline-code">STRUCT</span> . The <span class="sql-docs-inline-code">STRUCT</span>  fields represent what would traditionally be columns' + 
      '          in a separate joined table. It makes little sense to use a <span class="sql-docs-inline-code">STRUCT</span>  as the top-level type for a column, because you' + 
      '          could just make the fields of the <span class="sql-docs-inline-code">STRUCT</span>  into regular table columns.' + 
      '        </p> <p>' + 
      '          Perhaps the only use case for a top-level <span class="sql-docs-inline-code">STRUCT</span>  would be to to allow <span class="sql-docs-inline-code">STRUCT</span>  fields with the' + 
      '          same name as columns to coexist in the same table. The following example shows how a table could have a column named' + 
      '          <span class="sql-docs-inline-code">ID</span> , and two separate <span class="sql-docs-inline-code">STRUCT</span>  fields also named <span class="sql-docs-inline-code">ID</span> . Because the' + 
      '          <span class="sql-docs-inline-code">STRUCT</span>  fields are always referenced using qualified names, the identical <span class="sql-docs-inline-code">ID</span>  names do not cause a' + 
      '          conflict.' + 
      '        </p> <div class="sql-docs-code-block"></div><p>' + 
      '          It is common to make the value portion of each key-value pair in a <span class="sql-docs-inline-code">MAP</span>  a <span class="sql-docs-inline-code">STRUCT</span> ,' + 
      '          <span class="sql-docs-inline-code">ARRAY</span>  of <span class="sql-docs-inline-code">STRUCT</span> , or other complex type variation. That way, each key in the <span class="sql-docs-inline-code">MAP</span> ' + 
      '          can be associated with a flexible and extensible data structure. The key values are not predefined ahead of time (other than by' + 
      '          specifying their data type). Therefore, the <span class="sql-docs-inline-code">MAP</span>  can accomodate a rapidly evolving schema, or sparse data' + 
      '          structures where each row contains only a few data values drawn from a large set of possible choices.' + 
      '        </p> <p>' + 
      '          Although you can use an <span class="sql-docs-inline-code">ARRAY</span>  of scalar values as the top-level column in a table, such a simple array is' + 
      '          typically of limited use for analytic queries. The only property of the array elements, aside from the element value, is the' + 
      '          ordering sequence available through the <span class="sql-docs-inline-code">POS</span>  pseudocolumn. To record any additional item about each array element,' + 
      '          such as a <span class="sql-docs-inline-code">TIMESTAMP</span>  or a symbolic name, you use an <span class="sql-docs-inline-code">ARRAY</span>  of <span class="sql-docs-inline-code">STRUCT</span>  rather than' + 
      '          of scalar values.' + 
      '        </p> <p>' + 
      '          If you are considering having multiple <span class="sql-docs-inline-code">ARRAY</span>  or <span class="sql-docs-inline-code">MAP</span>  columns, with related items under the same' + 
      '          position in each <span class="sql-docs-inline-code">ARRAY</span>  or the same key in each <span class="sql-docs-inline-code">MAP</span> , prefer to use a <span class="sql-docs-inline-code">STRUCT</span>  to' + 
      '          group all the related items into a single <span class="sql-docs-inline-code">ARRAY</span>  or <span class="sql-docs-inline-code">MAP</span> . Doing so avoids the additional storage' + 
      '          overhead and potential duplication of key values from having an extra complex type column. Also, because each' + 
      '          <span class="sql-docs-inline-code">ARRAY</span>  or <span class="sql-docs-inline-code">MAP</span>  that you reference in the query <span class="sql-docs-inline-code">SELECT</span>  list requires an additional' + 
      '          join clause, minimizing the number of complex type columns also makes the query easier to read and maintain, relying more on dot' + 
      '          notation to refer to the relevant fields rather than a sequence of join clauses.' + 
      '        </p> <p>' + 
      '          For example, here is a table with several complex type columns all at the top level and containing only scalar types. To retrieve' + 
      '          every data item for the row requires a separate join for each <span class="sql-docs-inline-code">ARRAY</span>  or <span class="sql-docs-inline-code">MAP</span>  column. The fields of' + 
      '          the <span class="sql-docs-inline-code">STRUCT</span>  can be referenced using dot notation, but there is no real advantage to using the' + 
      '          <span class="sql-docs-inline-code">STRUCT</span>  at the top level rather than just making separate columns <span class="sql-docs-inline-code">FIELD1</span>  and' + 
      '          <span class="sql-docs-inline-code">FIELD2</span> .' + 
      '        </p> <div class="sql-docs-code-block"></div><p>' + 
      '          For example, here is a table with columns containing an <span class="sql-docs-inline-code">ARRAY</span>  of <span class="sql-docs-inline-code">STRUCT</span> , a <span class="sql-docs-inline-code">MAP</span> ' + 
      '          where each key value is a <span class="sql-docs-inline-code">STRUCT</span> , and a <span class="sql-docs-inline-code">MAP</span>  where each key value is an <span class="sql-docs-inline-code">ARRAY</span>  of' + 
      '          <span class="sql-docs-inline-code">STRUCT</span> .' + 
      '        </p> <div class="sql-docs-code-block"></div><p>' + 
      '          The <span class="sql-docs-inline-code">DESCRIBE</span>  statement rearranges the <span class="sql-docs-inline-code"><</span>  and <span class="sql-docs-inline-code">></span>  separators and the field' + 
      '          names within each <span class="sql-docs-inline-code">STRUCT</span>  for easy readability:' + 
      '        </p> <div class="sql-docs-code-block"></div><p>' + 
      '          To query the complex type columns, you use join notation to refer to the lowest-level scalar values. If the value is an' + 
      '          <span class="sql-docs-inline-code">ARRAY</span>  element, the fully qualified name includes the <span class="sql-docs-inline-code">ITEM</span>  pseudocolumn. If the value is inside a' + 
      '          <span class="sql-docs-inline-code">MAP</span> , the fully qualified name includes the <span class="sql-docs-inline-code">KEY</span>  or <span class="sql-docs-inline-code">VALUE</span>  pseudocolumn. Each' + 
      '          reference to a different <span class="sql-docs-inline-code">ARRAY</span>  or <span class="sql-docs-inline-code">MAP</span>  (even if nested inside another complex type) requires an' + 
      '          additional join clause.' + 
      '        </p> <div class="sql-docs-code-block"></div><p>' + 
      '          Once you understand the notation to refer to a particular data item in the <span class="sql-docs-inline-code">SELECT</span>  list, you can use the same' + 
      '          qualified name to refer to that data item in other parts of the query, such as the <span class="sql-docs-inline-code">WHERE</span>  clause, <span class="sql-docs-inline-code">ORDER' + 
      '          BY</span>  or <span class="sql-docs-inline-code">GROUP BY</span>  clauses, or calls to built-in functions. For example, you might frequently retrieve the' + 
      '          <span class="sql-docs-inline-code">VALUE</span>  part of each <span class="sql-docs-inline-code">MAP</span>  item in the <span class="sql-docs-inline-code">SELECT</span>  list, while choosing the specific' + 
      '          <span class="sql-docs-inline-code">MAP</span>  items by running comparisons against the <span class="sql-docs-inline-code">KEY</span>  part in the <span class="sql-docs-inline-code">WHERE</span>  clause.' + 
      '        </p> </div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_views"><h4>Accessing Complex Type Data in Flattened Form Using Views</h4> <div><p>' + 
      '          The layout of complex and nested types is largely a physical consideration. The complex type columns reside in the same data files' + 
      '          rather than in separate normalized tables, for your convenience in managing related data sets and performance in querying related' + 
      '          data sets. You can use views to treat tables with complex types as if they were flattened. By putting the join logic and' + 
      '          references to the complex type columns in the view definition, you can query the same tables using existing queries intended for' + 
      '          tables containing only scalar columns. This technique also lets you use tables with complex types with BI tools that are not aware' + 
      '          of the data types and query notation for accessing complex type columns.' + 
      '        </p> <p>' + 
      '          For example, the variation of the TPC-H schema containing complex types has a table <span class="sql-docs-inline-code">REGION</span> . This table has 5' + 
      '          rows, corresponding to 5 regions such as <span class="sql-docs-inline-code">NORTH AMERICA</span>  and <span class="sql-docs-inline-code">AFRICA</span> . Each row has an' + 
      '          <span class="sql-docs-inline-code">ARRAY</span>  column, where each array item is a <span class="sql-docs-inline-code">STRUCT</span>  containing details about a country in that' + 
      '          region.' + 
      '        </p> <div class="sql-docs-code-block"></div><p>' + 
      '          The same data could be represented in traditional denormalized form, as a single table where the information about each region is' + 
      '          repeated over and over, alongside the information about each country. The nested complex types let us avoid the repetition, while' + 
      '          still keeping the data in a single table rather than normalizing across multiple tables.' + 
      '        </p> <p>' + 
      '          To use this table with a JDBC or ODBC application that expected scalar columns, we could create a view that represented the result' + 
      '          set as a set of scalar columns (three columns from the original table, plus three more from the <span class="sql-docs-inline-code">STRUCT</span>  fields of' + 
      '          the array elements). In the following examples, any column with an <span class="sql-docs-inline-code">R_*</span>  prefix is taken unchanged from the' + 
      '          original table, while any column with an <span class="sql-docs-inline-code">N_*</span>  prefix is extracted from the <span class="sql-docs-inline-code">STRUCT</span>  inside the' + 
      '          <span class="sql-docs-inline-code">ARRAY</span> .' + 
      '        </p> <div class="sql-docs-code-block">CREATE VIEW region_view AS<br/>  SELECT<br/>    r_regionkey,<br/>    r_name,<br/>    r_comment,<br/>    array_field.item.n_nationkey AS n_nationkey,<br/>    array_field.item.n_name AS n_name,<br/>    array_field.n_comment AS n_comment<br/>FROM<br/>  region, region.r_nations AS array_field;<br/></div><p>' + 
      '          Then we point the application queries at the view rather than the original table. From the perspective of the view, there are 25' + 
      '          rows in the result set, one for each nation in each region, and queries can refer freely to fields related to the region or the' + 
      '          nation.' + 
      '        </p> <div class="sql-docs-code-block">-- Retrieve info such as the nation name from the original R_NATIONS array elements.<br/>select n_name from region_view where r_name in (\'EUROPE\', \'ASIA\');<br/>+----------------+<br/>| n_name         |<br/>+----------------+<br/>| UNITED KINGDOM |<br/>| RUSSIA         |<br/>| ROMANIA        |<br/>| GERMANY        |<br/>| FRANCE         |<br/>| VIETNAM        |<br/>| CHINA          |<br/>| JAPAN          |<br/>| INDONESIA      |<br/>| INDIA          |<br/>+----------------+<br/><br/>-- UNITED STATES in AMERICA and UNITED KINGDOM in EUROPE.<br/>SELECT DISTINCT r_name FROM region_view WHERE n_name LIKE \'UNITED%\';<br/>+---------+<br/>| r_name  |<br/>+---------+<br/>| AMERICA |<br/>| EUROPE  |<br/>+---------+<br/><br/>-- For conciseness, we only list some view columns in the SELECT list.<br/>-- SELECT * would bring back all the data, unlike SELECT *<br/>-- queries on the original table with complex type columns.<br/>SELECT r_regionkey, r_name, n_nationkey, n_name FROM region_view LIMIT 7;<br/>+-------------+--------+-------------+----------------+<br/>| r_regionkey | r_name | n_nationkey | n_name         |<br/>+-------------+--------+-------------+----------------+<br/>| 3           | EUROPE | 23          | UNITED KINGDOM |<br/>| 3           | EUROPE | 22          | RUSSIA         |<br/>| 3           | EUROPE | 19          | ROMANIA        |<br/>| 3           | EUROPE | 7           | GERMANY        |<br/>| 3           | EUROPE | 6           | FRANCE         |<br/>| 2           | ASIA   | 21          | VIETNAM        |<br/>| 2           | ASIA   | 18          | CHINA          |<br/>+-------------+--------+-------------+----------------+<br/></div></div> </div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_examples"><h4>Tutorials and Examples for Complex Types</h4> <div><p>' + 
      '        The following examples illustrate the query syntax for some common use cases involving complex type columns.' + 
      '      </p> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_sample_schema"><h4>Sample Schema and Data for Experimenting with Impala Complex Types</h4> <div><p>' + 
      '          The tables used for earlier examples of complex type syntax are trivial ones with no actual data. The more substantial examples of' + 
      '          the complex type feature use these tables, adapted from the schema used for TPC-H testing:' + 
      '        </p> <div class="sql-docs-code-block"></div><p>' + 
      '          The volume of data used in the following examples is:' + 
      '        </p> <div class="sql-docs-code-block"></div></div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_types_ex_hive_etl"><h4>Constructing Parquet Files with Complex Columns Using Hive</h4> <div><p>' + 
      '          The following examples demonstrate the Hive syntax to transform flat data (tables with all scalar columns) into Parquet tables' + 
      '          where Impala can query the complex type columns. Each example shows the full sequence of steps, including switching back and forth' + 
      '          between Impala and Hive. Although the source table can use any file format, the destination table must use the Parquet file' + 
      '          format.' + 
      '        </p> <p><b>Create table with <span class="sql-docs-inline-code">ARRAY</span>  in Impala, load data in Hive, query in Impala:</b> </p> <p>' + 
      '          This example shows the cycle of creating the tables and querying the complex data in Impala, and using Hive (either the' + 
      '          <span class="sql-docs-inline-code">hive</span>  shell or <span class="sql-docs-inline-code">beeline</span> ) for the data loading step. The data starts in flattened, denormalized' + 
      '          form in a text table. Hive writes the corresponding Parquet data, including an <span class="sql-docs-inline-code">ARRAY</span>  column. Then Impala can run' + 
      '          analytic queries on the Parquet table, using join notation to unpack the <span class="sql-docs-inline-code">ARRAY</span>  column.' + 
      '        </p> <div class="sql-docs-code-block">/* Initial DDL and loading of flat, denormalized data happens in impala-shell */</div><div class="sql-docs-code-block"></div><div class="sql-docs-code-block"></div><p><b>Create table with <span class="sql-docs-inline-code">STRUCT</span>  and <span class="sql-docs-inline-code">ARRAY</span>  in Impala, load data in Hive, query in Impala:</b> </p> <p>' + 
      '          This example shows the cycle of creating the tables and querying the complex data in Impala, and using Hive (either the' + 
      '          <span class="sql-docs-inline-code">hive</span>  shell or <span class="sql-docs-inline-code">beeline</span> ) for the data loading step. The data starts in flattened, denormalized' + 
      '          form in a text table. Hive writes the corresponding Parquet data, including a <span class="sql-docs-inline-code">STRUCT</span>  column with an' + 
      '          <span class="sql-docs-inline-code">ARRAY</span>  field. Then Impala can run analytic queries on the Parquet table, using join notation to unpack the' + 
      '          <span class="sql-docs-inline-code">ARRAY</span>  field from the <span class="sql-docs-inline-code">STRUCT</span>  column.' + 
      '        </p> <div class="sql-docs-code-block"></div><div class="sql-docs-code-block"></div><div class="sql-docs-code-block"></div></div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_denormalizing"><h4>Flattening Normalized Tables into a Single Table with Complex Types</h4> <div><p>' + 
      '          One common use for complex types is to embed the contents of one table into another. The traditional technique of denormalizing' + 
      '          results in a huge number of rows with some column values repeated over and over. With complex types, you can keep the same number' + 
      '          of rows as in the original normalized table, and put all the associated data from the other table in a single new column.' + 
      '        </p> <p>' + 
      '          In this flattening scenario, you might frequently use a column that is an <span class="sql-docs-inline-code">ARRAY</span>  consisting of' + 
      '          <span class="sql-docs-inline-code">STRUCT</span>  elements, where each field within the <span class="sql-docs-inline-code">STRUCT</span>  corresponds to a column name from the table' + 
      '          that you are combining.' + 
      '        </p> <p>' + 
      '          The following example shows a traditional normalized layout using two tables, and then an equivalent layout using complex types in' + 
      '          a single table.' + 
      '        </p> <div class="sql-docs-code-block"></div></div> </div> <div id="../Impala/docs/topics/impala_complex_types.xml_complex_inference"><h4>Interchanging Complex Type Tables and Data Files with Hive and Other Components</h4> <div><p>' + 
      '          You can produce Parquet data files through several Hadoop components and APIs.' + 
      '        </p> <p>' + 
      '          If you have a Hive-created Parquet table that includes <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ' + 
      '          columns, Impala can query that same table in Impala 2.3 and higher, subject to the usual restriction that all other' + 
      '          columns are of data types supported by Impala, and also that the file type of the table must be Parquet.' + 
      '        </p> <p>' + 
      '          If you have a Parquet data file produced outside of Impala, Impala can automatically deduce the appropriate table structure using' + 
      '          the syntax <span class="sql-docs-inline-code">CREATE TABLE ... LIKE PARQUET \'<span class="sql-docs-variable">hdfs_path_of_parquet_file</span> \'</span> . In Impala 2.3' + 
      '          and higher, this feature works for Parquet files that include <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , or' + 
      '          <span class="sql-docs-inline-code">MAP</span>  types.' + 
      '        </p> <div class="sql-docs-code-block"></div></div> </div> </div> ',
    children: []
  }]},
{
  id: 'topics/impala_literals.xml',
  title: 'Literals',
  weight: 1,
  bodyMatch: ko.observable(),
  open: ko.observable(false),
  titleMatch: ko.observable(),
  body: '<div><p>' + 
    '      Each of the Impala data types has corresponding notation for literal values of that type. You specify literal' + 
    '      values in SQL statements, such as in the <span class="sql-docs-inline-code">SELECT</span>  list or <span class="sql-docs-inline-code">WHERE</span>  clause of a' + 
    '      query, or as an argument to a function call. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_datatypes.xml#datatypes">Data Types</a> for a complete' + 
    '      list of types, ranges, and conversion rules.' + 
    '    </p> </div> <div id="../Impala/docs/topics/impala_literals.xml_numeric_literals"><h4>Numeric Literals</h4> <div><p>' + 
    '        To write literals for the integer types (<span class="sql-docs-inline-code">TINYINT</span> , <span class="sql-docs-inline-code">SMALLINT</span> ,' + 
    '        <span class="sql-docs-inline-code">INT</span> , and <span class="sql-docs-inline-code">BIGINT</span> ), use a sequence of digits with optional leading zeros.' + 
    '      </p> <p>' + 
    '        To write literals for the floating-point types (<span class="sql-docs-inline-code">DECIMAL</span> ,' + 
    '        <span class="sql-docs-inline-code">FLOAT</span> , and <span class="sql-docs-inline-code">DOUBLE</span> ), use a sequence of digits with an optional decimal' + 
    '        point (<span class="sql-docs-inline-code">.</span>  character). To preserve accuracy during arithmetic expressions, Impala interprets' + 
    '        floating-point literals as the <span class="sql-docs-inline-code">DECIMAL</span>  type with the smallest appropriate precision and' + 
    '        scale, until required by the context to convert the result to <span class="sql-docs-inline-code">FLOAT</span>  or' + 
    '        <span class="sql-docs-inline-code">DOUBLE</span> .' + 
    '      </p> <p>' + 
    '        Integer values are promoted to floating-point when necessary, based on the context.' + 
    '      </p> <p>' + 
    '        You can also use exponential notation by including an <span class="sql-docs-inline-code">e</span>  character. For example,' + 
    '        <span class="sql-docs-inline-code">1e6</span>  is 1 times 10 to the power of 6 (1 million). A number in exponential notation is' + 
    '        always interpreted as floating-point.' + 
    '      </p> <p>' + 
    '        When Impala encounters a numeric literal, it considers the type to be the <q>smallest</q>  that can' + 
    '        accurately represent the value. The type is promoted to larger or more accurate types if necessary, based' + 
    '        on subsequent parts of an expression.' + 
    '      </p> <p>' + 
    '        For example, you can see by the types Impala defines for the following table columns' + 
    '        how it interprets the corresponding numeric literals:' + 
    '      </p> <div class="sql-docs-code-block">[localhost:21000] > create table ten as select 10 as x;<br/>+-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 1 row(s) |<br/>+-------------------+<br/>[localhost:21000] > desc ten;<br/>+------+---------+---------+<br/>| name | type    | comment |<br/>+------+---------+---------+<br/>| x    | tinyint |         |<br/>+------+---------+---------+<br/><br/>[localhost:21000] > create table four_k as select 4096 as x;<br/>+-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 1 row(s) |<br/>+-------------------+<br/>[localhost:21000] > desc four_k;<br/>+------+----------+---------+<br/>| name | type     | comment |<br/>+------+----------+---------+<br/>| x    | smallint |         |<br/>+------+----------+---------+<br/><br/>[localhost:21000] > create table one_point_five as select 1.5 as x;<br/>+-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 1 row(s) |<br/>+-------------------+<br/>[localhost:21000] > desc one_point_five;<br/>+------+--------------+---------+<br/>| name | type         | comment |<br/>+------+--------------+---------+<br/>| x    | decimal(2,1) |         |<br/>+------+--------------+---------+<br/><br/>[localhost:21000] > create table one_point_three_three_three as select 1.333 as x;<br/>+-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 1 row(s) |<br/>+-------------------+<br/>[localhost:21000] > desc one_point_three_three_three;<br/>+------+--------------+---------+<br/>| name | type         | comment |<br/>+------+--------------+---------+<br/>| x    | decimal(4,3) |         |<br/>+------+--------------+---------+<br/></div></div> </div> <div id="../Impala/docs/topics/impala_literals.xml_string_literals"><h4>String Literals</h4> <div><p>' + 
    '        String literals are quoted using either single or double quotation marks. You can use either kind of quotes' + 
    '        for string literals, even both kinds for different literals within the same statement.' + 
    '      </p> <p>' + 
    '        Quoted literals are considered to be of type <span class="sql-docs-inline-code">STRING</span> . To use quoted literals in contexts' + 
    '        requiring a <span class="sql-docs-inline-code">CHAR</span>  or <span class="sql-docs-inline-code">VARCHAR</span>  value, <span class="sql-docs-inline-code">CAST()</span>  the literal to' + 
    '        a <span class="sql-docs-inline-code">CHAR</span>  or <span class="sql-docs-inline-code">VARCHAR</span>  of the appropriate length.' + 
    '      </p> <p><b>Escaping special characters:</b> </p> <p>' + 
    '        To encode special characters within a string literal, precede them with the backslash (<span class="sql-docs-inline-code">\\</span> )' + 
    '        escape character:' + 
    '      </p> <ul><li><span class="sql-docs-inline-code">\\t</span>  represents a tab.' + 
    '        </li> <li><span class="sql-docs-inline-code">\\n</span>  represents a newline or linefeed. This might cause extra line breaks in' + 
    '          <span class="sql-docs-inline-code">impala-shell</span>  output.' + 
    '        </li> <li><span class="sql-docs-inline-code">\\r</span>  represents a carriage return. This might cause unusual formatting (making it appear' + 
    '          that some content is overwritten) in <span class="sql-docs-inline-code">impala-shell</span>  output.' + 
    '        </li> <li><span class="sql-docs-inline-code">\\b</span>  represents a backspace. This might cause unusual formatting (making it appear that' + 
    '          some content is overwritten) in <span class="sql-docs-inline-code">impala-shell</span>  output.' + 
    '        </li> <li><span class="sql-docs-inline-code">\\0</span>  represents an ASCII <span class="sql-docs-inline-code">nul</span>  character (not the same as a SQL' + 
    '          <span class="sql-docs-inline-code">NULL</span> ). This might not be visible in <span class="sql-docs-inline-code">impala-shell</span>  output.' + 
    '        </li> <li><span class="sql-docs-inline-code">\\Z</span>  represents a DOS end-of-file character. This might not be visible in' + 
    '          <span class="sql-docs-inline-code">impala-shell</span>  output.' + 
    '        </li> <li><span class="sql-docs-inline-code">\\%</span>  and <span class="sql-docs-inline-code">\\_</span>  can be used to escape wildcard characters within the string' + 
    '          passed to the <span class="sql-docs-inline-code">LIKE</span>  operator.' + 
    '        </li> <li><span class="sql-docs-inline-code">\\</span>  followed by 3 octal digits represents the ASCII code of a single character; for' + 
    '          example, <span class="sql-docs-inline-code">\\101</span>  is ASCII 65, the character <span class="sql-docs-inline-code">A</span> .' + 
    '        </li> <li>' + 
    '          Use two consecutive backslashes (<span class="sql-docs-inline-code">\\</span> ) to prevent the backslash from being interpreted as' + 
    '          an escape character.' + 
    '        </li> <li>' + 
    '          Use the backslash to escape single or double quotation mark characters within a string literal, if the' + 
    '          literal is enclosed by the same type of quotation mark.' + 
    '        </li> <li>' + 
    '          If the character following the <span class="sql-docs-inline-code">\\</span>  does not represent the start of a recognized escape' + 
    '          sequence, the character is passed through unchanged.' + 
    '        </li> </ul> <p><b>Quotes within quotes:</b> </p> <p>' + 
    '        To include a single quotation character within a string value, enclose the literal with either single or' + 
    '        double quotation marks, and optionally escape the single quote as a <span class="sql-docs-inline-code">\\\'</span>  sequence. Earlier' + 
    '        releases required escaping a single quote inside double quotes. Continue using escape sequences in this' + 
    '        case if you also need to run your SQL code on older versions of Impala.' + 
    '      </p> <p>' + 
    '        To include a double quotation character within a string value, enclose the literal with single quotation' + 
    '        marks, no escaping is necessary in this case. Or, enclose the literal with double quotation marks and' + 
    '        escape the double quote as a <span class="sql-docs-inline-code">\\"</span>  sequence.' + 
    '      </p> <div class="sql-docs-code-block">[localhost:21000] > select "What\\\'s happening?" as single_within_double,<br/>                  >        \'I\\\'m not sure.\' as single_within_single,<br/>                  >        "Homer wrote \\"The Iliad\\"." as double_within_double,<br/>                  >        \'Homer also wrote "The Odyssey".\' as double_within_single;<br/>+----------------------+----------------------+--------------------------+---------------------------------+<br/>| single_within_double | single_within_single | double_within_double     | double_within_single            |<br/>+----------------------+----------------------+--------------------------+---------------------------------+<br/>| What\'s happening?    | I\'m not sure.        | Homer wrote "The Iliad". | Homer also wrote "The Odyssey". |<br/>+----------------------+----------------------+--------------------------+---------------------------------+<br/></div><p><b>Field terminator character in CREATE TABLE:</b> </p> <div id="../Impala/docs/topics/impala_literals.xml_thorn" class="sql-docs-note">' + 
    '        The <span class="sql-docs-inline-code">CREATE TABLE</span>  clauses <span class="sql-docs-inline-code">FIELDS TERMINATED BY</span> , <span class="sql-docs-inline-code">ESCAPED' + 
    '        BY</span> , and <span class="sql-docs-inline-code">LINES TERMINATED BY</span>  have special rules for the string literal used for' + 
    '        their argument, because they all require a single character. You can use a regular character surrounded by' + 
    '        single or double quotation marks, an octal sequence such as <span class="sql-docs-inline-code">\'\\054\'</span>  (representing a comma),' + 
    '        or an integer in the range \'-127\'..\'128\' (with quotation marks but no backslash), which is interpreted as a' + 
    '        single-byte ASCII character. Negative values are subtracted from 256; for example, <span class="sql-docs-inline-code">FIELDS' + 
    '        TERMINATED BY \'-2\'</span>  sets the field delimiter to ASCII code 254, the <q>Icelandic Thorn</q> ' + 
    '        character used as a delimiter by some data formats.' + 
    '      </div> <p><b>impala-shell considerations:</b> </p> <p>' + 
    '        When dealing with output that includes non-ASCII or non-printable characters such as linefeeds and' + 
    '        backspaces, use the <span class="sql-docs-inline-code">impala-shell</span>  options to save to a file, turn off pretty printing, or' + 
    '        both rather than relying on how the output appears visually. See' + 
    '        <span>shell options</span> for a list of <span class="sql-docs-inline-code">impala-shell</span> ' + 
    '        options.' + 
    '      </p> </div> </div> <div id="../Impala/docs/topics/impala_literals.xml_boolean_literals"><h4>Boolean Literals</h4> <div><p>' + 
    '        For <span class="sql-docs-inline-code">BOOLEAN</span>  values, the literals are <span class="sql-docs-inline-code">TRUE</span>  and <span class="sql-docs-inline-code">FALSE</span> ,' + 
    '        with no quotation marks and case-insensitive.' + 
    '      </p> <p id="../Impala/docs/topics/impala_literals.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">select true;<br/>select * from t1 where assertion = false;<br/>select case bool_col when true then \'yes\' when false \'no\' else \'null\' end from t1;</div></div> </div> <div id="../Impala/docs/topics/impala_literals.xml_timestamp_literals"><h4>Timestamp Literals</h4> <div><p id="../Impala/docs/topics/impala_literals.xml_timestamp_conversions">' + 
    '        Impala automatically converts <span class="sql-docs-inline-code">STRING</span>  literals of the' + 
    '        correct format into <span class="sql-docs-inline-code">TIMESTAMP</span>  values. Timestamp values' + 
    '        are accepted in the format <span class="sql-docs-inline-code">"yyyy-MM-dd HH:mm:ss.SSSSSS"</span> ,' + 
    '        and can consist of just the date, or just the time, with or without the' + 
    '        fractional second portion. For example, you can specify <span class="sql-docs-inline-code">TIMESTAMP</span> ' + 
    '        values such as <span class="sql-docs-inline-code">\'1966-07-30\'</span> , <span class="sql-docs-inline-code">\'08:30:00\'</span> ,' + 
    '        or <span class="sql-docs-inline-code">\'1985-09-25 17:45:30.005\'</span> .' + 
    '      </p> <p>' + 
    '        You can also use <span class="sql-docs-inline-code">INTERVAL</span>  expressions to add or subtract from timestamp literal values,' + 
    '        such as <span class="sql-docs-inline-code">CAST(\'1966-07-30\' AS TIMESTAMP) + INTERVAL 5 YEARS + INTERVAL 3 DAYS</span> . See' + 
    '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_timestamp.xml#timestamp">TIMESTAMP Data Type</a> for details.' + 
    '      </p> <p>' + 
    '        Depending on your data pipeline, you might receive date and time data as text, in notation that does not' + 
    '        exactly match the format for Impala <span class="sql-docs-inline-code">TIMESTAMP</span>  literals.' + 
    '        See <span>datetime functions</span> for functions that can convert' + 
    '        between a variety of string literals (including different field order, separators, and timezone notation)' + 
    '        and equivalent <span class="sql-docs-inline-code">TIMESTAMP</span>  or numeric values.' + 
    '      </p> </div> </div> <div id="../Impala/docs/topics/impala_literals.xml_null"><h4>NULL</h4> <div><p>' + 
    '        The notion of <span class="sql-docs-inline-code">NULL</span>  values is familiar from all kinds of database systems, but each SQL' + 
    '        dialect can have its own behavior and restrictions on <span class="sql-docs-inline-code">NULL</span>  values. For Big Data' + 
    '        processing, the precise semantics of <span class="sql-docs-inline-code">NULL</span>  values are significant: any misunderstanding' + 
    '        could lead to inaccurate results or misformatted data, that could be time-consuming to correct for large' + 
    '        data sets.' + 
    '      </p> <ul><li><span class="sql-docs-inline-code">NULL</span>  is a different value than an empty string. The empty string is represented by a' + 
    '          string literal with nothing inside, <span class="sql-docs-inline-code">""</span>  or <span class="sql-docs-inline-code">\'\'</span> .' + 
    '        </li> <li>' + 
    '          In a delimited text file, the <span class="sql-docs-inline-code">NULL</span>  value is represented by the special token' + 
    '          <span class="sql-docs-inline-code">\\N</span> .' + 
    '        </li> <li>' + 
    '          When Impala inserts data into a partitioned table, and the value of one of the partitioning columns is' + 
    '          <span class="sql-docs-inline-code">NULL</span>  or the empty string, the data is placed in a special partition that holds only' + 
    '          these two kinds of values. When these values are returned in a query, the result is <span class="sql-docs-inline-code">NULL</span> ' + 
    '          whether the value was originally <span class="sql-docs-inline-code">NULL</span>  or an empty string. This behavior is compatible' + 
    '          with the way Hive treats <span class="sql-docs-inline-code">NULL</span>  values in partitioned tables. Hive does not allow empty' + 
    '          strings as partition keys, and it returns a string value such as' + 
    '          <span class="sql-docs-inline-code">__HIVE_DEFAULT_PARTITION__</span>  instead of <span class="sql-docs-inline-code">NULL</span>  when such values are' + 
    '          returned from a query. For example:' + 
    '<div class="sql-docs-code-block">create table t1 (i int) partitioned by (x int, y string);<br/>-- Select an INT column from another table, with all rows going into a special HDFS subdirectory<br/>-- named __HIVE_DEFAULT_PARTITION__. Depending on whether one or both of the partitioning keys<br/>-- are null, this special directory name occurs at different levels of the physical data directory<br/>-- for the table.<br/>insert into t1 partition(x=NULL, y=NULL) select c1 from some_other_table;<br/>insert into t1 partition(x, y=NULL) select c1, c2 from some_other_table;<br/>insert into t1 partition(x=NULL, y) select c1, c3  from some_other_table;</div></li> <li>' + 
    '          There is no <span class="sql-docs-inline-code">NOT NULL</span>  clause when defining a column to prevent <span class="sql-docs-inline-code">NULL</span> ' + 
    '          values in that column.' + 
    '        </li> <li>' + 
    '          There is no <span class="sql-docs-inline-code">DEFAULT</span>  clause to specify a non-<span class="sql-docs-inline-code">NULL</span>  default value.' + 
    '        </li> <li>' + 
    '          If an <span class="sql-docs-inline-code">INSERT</span>  operation mentions some columns but not others, the unmentioned columns' + 
    '          contain <span class="sql-docs-inline-code">NULL</span>  for all inserted rows.' + 
    '        </li> <li><p id="../Impala/docs/topics/impala_literals.xml_null_sorting_change">' + 
    '        In Impala 1.2.1 and higher, all <span class="sql-docs-inline-code">NULL</span>  values come at the end of the result set for' + 
    '        <span class="sql-docs-inline-code">ORDER BY ... ASC</span>  queries, and at the beginning of the result set for <span class="sql-docs-inline-code">ORDER BY ...' + 
    '        DESC</span>  queries. In effect, <span class="sql-docs-inline-code">NULL</span>  is considered greater than all other values for' + 
    '        sorting purposes. The original Impala behavior always put <span class="sql-docs-inline-code">NULL</span>  values at the end, even for' + 
    '        <span class="sql-docs-inline-code">ORDER BY ... DESC</span>  queries. The new behavior in Impala 1.2.1 makes Impala more compatible' + 
    '        with other popular database systems. In Impala 1.2.1 and higher, you can override or specify the sorting' + 
    '        behavior for <span class="sql-docs-inline-code">NULL</span>  by adding the clause <span class="sql-docs-inline-code">NULLS FIRST</span>  or <span class="sql-docs-inline-code">NULLS' + 
    '        LAST</span>  at the end of the <span class="sql-docs-inline-code">ORDER BY</span>  clause.' + 
    '      </p> <div class="sql-docs-note">' + 
    '            Because the <span class="sql-docs-inline-code">NULLS FIRST</span>  and <span class="sql-docs-inline-code">NULLS LAST</span>  keywords are not currently' + 
    '            available in Hive queries, any views you create using those keywords will not be available through' + 
    '            Hive.' + 
    '          </div> </li> <li>' + 
    '          In all other contexts besides sorting with <span class="sql-docs-inline-code">ORDER BY</span> , comparing a <span class="sql-docs-inline-code">NULL</span> ' + 
    '          to anything else returns <span class="sql-docs-inline-code">NULL</span> , making the comparison meaningless. For example,' + 
    '          <span class="sql-docs-inline-code">10 > NULL</span>  produces <span class="sql-docs-inline-code">NULL</span> , <span class="sql-docs-inline-code">10 < NULL</span>  also produces' + 
    '          <span class="sql-docs-inline-code">NULL</span> , <span class="sql-docs-inline-code">5 BETWEEN 1 AND NULL</span>  produces <span class="sql-docs-inline-code">NULL</span> , and so on.' + 
    '        </li> </ul> <p>' + 
    '        Several built-in functions serve as shorthand for evaluating expressions and returning' + 
    '        <span class="sql-docs-inline-code">NULL</span> , 0, or some other substitution value depending on the expression result:' + 
    '        <span class="sql-docs-inline-code">ifnull()</span> , <span class="sql-docs-inline-code">isnull()</span> , <span class="sql-docs-inline-code">nvl()</span> , <span class="sql-docs-inline-code">nullif()</span> ,' + 
    '        <span class="sql-docs-inline-code">nullifzero()</span> , and <span class="sql-docs-inline-code">zeroifnull()</span> . See' + 
    '        <span>conditional functions</span> for details.' + 
    '      </p> <p id="../Impala/docs/topics/impala_literals.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p>' + 
    '        Columns in Kudu tables have an attribute that specifies whether or not they can contain' + 
    '        <span class="sql-docs-inline-code">NULL</span>  values. A column with a <span class="sql-docs-inline-code">NULL</span>  attribute can contain' + 
    '        nulls. A column with a <span class="sql-docs-inline-code">NOT NULL</span>  attribute cannot contain any nulls, and' + 
    '        an <span class="sql-docs-inline-code">INSERT</span> , <span class="sql-docs-inline-code">UPDATE</span> , or <span class="sql-docs-inline-code">UPSERT</span>  statement' + 
    '        will skip any row that attempts to store a null in a column designated as <span class="sql-docs-inline-code">NOT NULL</span> .' + 
    '        Kudu tables default to the <span class="sql-docs-inline-code">NULL</span>  setting for each column, except columns that' + 
    '        are part of the primary key.' + 
    '      </p> <p>' + 
    '        In addition to columns with the <span class="sql-docs-inline-code">NOT NULL</span>  attribute, Kudu tables also have' + 
    '        restrictions on <span class="sql-docs-inline-code">NULL</span>  values in columns that are part of the primary key for' + 
    '        a table. No column that is part of the primary key in a Kudu table can contain any' + 
    '        <span class="sql-docs-inline-code">NULL</span>  values.' + 
    '      </p> </div> </div> ',
  children: []
},
{
  id: 'topics/impala_operators.xml',
  title: 'SQL Operators',
  weight: 1,
  bodyMatch: ko.observable(),
  open: ko.observable(false),
  titleMatch: ko.observable(),
  body: '<div><p>' + 
    '      SQL operators are a class of comparison functions that are widely used within the <span class="sql-docs-inline-code">WHERE</span>  clauses of' + 
    '      <span class="sql-docs-inline-code">SELECT</span>  statements.' + 
    '    </p> </div> <div id="../Impala/docs/topics/impala_operators.xml_arithmetic_operators"><h4>Arithmetic Operators</h4> <div><p>' + 
    '        The arithmetic operators use expressions with a left-hand argument, the operator, and then (in most cases) a right-hand argument.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">left_hand_arg</span> <span class="sql-docs-variable">binary_operator</span> <span class="sql-docs-variable">right_hand_arg</span> <span class="sql-docs-variable">unary_operator</span> <span class="sql-docs-variable">single_arg</span> </div><ul><li><span class="sql-docs-inline-code">+</span>  and <span class="sql-docs-inline-code">-</span> : Can be used either as unary or binary operators.' + 
    '          <ul><li><p>' + 
    '                With unary notation, such as <span class="sql-docs-inline-code">+5</span> , <span class="sql-docs-inline-code">-2.5</span> , or <span class="sql-docs-inline-code">-<span class="sql-docs-variable">col_name</span> </span> ,' + 
    '                they multiply their single numeric argument by <span class="sql-docs-inline-code">+1</span>  or <span class="sql-docs-inline-code">-1</span> . Therefore, unary' + 
    '                <span class="sql-docs-inline-code">+</span>  returns its argument unchanged, while unary <span class="sql-docs-inline-code">-</span>  flips the sign of its argument. Although' + 
    '                you can double up these operators in expressions such as <span class="sql-docs-inline-code">++5</span>  (always positive) or <span class="sql-docs-inline-code">-+2</span>  or' + 
    '                <span class="sql-docs-inline-code">+-2</span>  (both always negative), you cannot double the unary minus operator because <span class="sql-docs-inline-code">--</span>  is' + 
    '                interpreted as the start of a comment. (You can use a double unary minus operator if you separate the <span class="sql-docs-inline-code">-</span> ' + 
    '                characters, for example with a space or parentheses.)' + 
    '              </p> </li> <li><p>' + 
    '                With binary notation, such as <span class="sql-docs-inline-code">2+2</span> , <span class="sql-docs-inline-code">5-2.5</span> , or <span class="sql-docs-inline-code"><span class="sql-docs-variable">col1</span>  +' + 
    '                <span class="sql-docs-variable">col2</span> </span> , they add or subtract respectively the right-hand argument to (or from) the left-hand' + 
    '                argument. Both arguments must be of numeric types.' + 
    '              </p> </li> </ul> </li> <li><p><span class="sql-docs-inline-code">*</span>  and <span class="sql-docs-inline-code">/</span> : Multiplication and division respectively. Both arguments must be of numeric types.' + 
    '          </p> <p>' + 
    '            When multiplying, the shorter argument is promoted if necessary (such as <span class="sql-docs-inline-code">SMALLINT</span>  to <span class="sql-docs-inline-code">INT</span>  or' + 
    '            <span class="sql-docs-inline-code">BIGINT</span> , or <span class="sql-docs-inline-code">FLOAT</span>  to <span class="sql-docs-inline-code">DOUBLE</span> ), and then the result is promoted again to the' + 
    '            next larger type. Thus, multiplying a <span class="sql-docs-inline-code">TINYINT</span>  and an <span class="sql-docs-inline-code">INT</span>  produces a <span class="sql-docs-inline-code">BIGINT</span> ' + 
    '            result. Multiplying a <span class="sql-docs-inline-code">FLOAT</span>  and a <span class="sql-docs-inline-code">FLOAT</span>  produces a <span class="sql-docs-inline-code">DOUBLE</span>  result. Multiplying' + 
    '            a <span class="sql-docs-inline-code">FLOAT</span>  and a <span class="sql-docs-inline-code">DOUBLE</span>  or a <span class="sql-docs-inline-code">DOUBLE</span>  and a <span class="sql-docs-inline-code">DOUBLE</span>  produces a' + 
    '            <span class="sql-docs-inline-code">DECIMAL(38,17)</span> , because <span class="sql-docs-inline-code">DECIMAL</span>  values can represent much larger and more precise values than' + 
    '            <span class="sql-docs-inline-code">DOUBLE</span> .' + 
    '          </p> <p>' + 
    '            When dividing, Impala always treats the arguments and result as <span class="sql-docs-inline-code">DOUBLE</span>  values to avoid losing precision. If you' + 
    '            need to insert the results of a division operation into a <span class="sql-docs-inline-code">FLOAT</span>  column, use the <span class="sql-docs-inline-code">CAST()</span> ' + 
    '            function to convert the result to the correct type.' + 
    '          </p> </li> <li id="../Impala/docs/topics/impala_operators.xml_div"><p><span class="sql-docs-inline-code">DIV</span> : Integer division. Arguments are not promoted to a floating-point type, and any fractional result' + 
    '            is discarded. For example, <span class="sql-docs-inline-code">13 DIV 7</span>  returns 1, <span class="sql-docs-inline-code">14 DIV 7</span>  returns 2, and' + 
    '            <span class="sql-docs-inline-code">15 DIV 7</span>  returns 2. This operator is the same as the <span class="sql-docs-inline-code">QUOTIENT()</span>  function.' + 
    '          </p> </li> <li><p><span class="sql-docs-inline-code">%</span> : Modulo operator. Returns the remainder of the left-hand argument divided by the right-hand argument. Both' + 
    '            arguments must be of one of the integer types.' + 
    '          </p> </li> <li><p><span class="sql-docs-inline-code">&</span> , <span class="sql-docs-inline-code">|</span> , <span class="sql-docs-inline-code">~</span> , and <span class="sql-docs-inline-code">^</span> : Bitwise operators that return the' + 
    '            logical AND, logical OR, <span class="sql-docs-inline-code">NOT</span> , or logical XOR (exclusive OR) of their argument values. Both arguments must be of' + 
    '            one of the integer types. If the arguments are of different type, the argument with the smaller type is implicitly extended to' + 
    '            match the argument with the longer type.' + 
    '          </p> </li> </ul> <p>' + 
    '        You can chain a sequence of arithmetic expressions, optionally grouping them with parentheses.' + 
    '      </p> <p>' + 
    '        The arithmetic operators generally do not have equivalent calling conventions using functional notation. For example, prior to' + 
    '        Impala 2.2, there is no <span class="sql-docs-inline-code">MOD()</span>  function equivalent to the <span class="sql-docs-inline-code">%</span>  modulo operator.' + 
    '        Conversely, there are some arithmetic functions that do not have a corresponding operator. For example, for exponentiation you use' + 
    '        the <span class="sql-docs-inline-code">POW()</span>  function, but there is no <span class="sql-docs-inline-code">**</span>  exponentiation operator. See' + 
    '        <span>math functions</span> for the arithmetic functions you can use.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_aggregation_explanation">' + 
    '        To access a column with a complex type (<span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> )' + 
    '        in an aggregation function, you unpack the individual elements using join notation in the query,' + 
    '        and then apply the function to the final scalar item, field, key, or value at the bottom of any nested type hierarchy in the column.' + 
    '        See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a> for details about using complex types in Impala.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_aggregation_example">' + 
    'The following example demonstrates calls to several aggregation functions' + 
    'using values from a column containing nested complex types' + 
    '(an <span class="sql-docs-inline-code">ARRAY</span>  of <span class="sql-docs-inline-code">STRUCT</span>  items).' + 
    'The array is unpacked inside the query using join notation.' + 
    'The array elements are referenced using the <span class="sql-docs-inline-code">ITEM</span> ' + 
    'pseudocolumn, and the structure fields inside the array elements' + 
    'are referenced using dot notation.' + 
    'Numeric values such as <span class="sql-docs-inline-code">SUM()</span>  and <span class="sql-docs-inline-code">AVG()</span> ' + 
    'are computed using the numeric <span class="sql-docs-inline-code">R_NATIONKEY</span>  field, and' + 
    'the general-purpose <span class="sql-docs-inline-code">MAX()</span>  and <span class="sql-docs-inline-code">MIN()</span> ' + 
    'values are computed from the string <span class="sql-docs-inline-code">N_NAME</span>  field.' + 
    '<div class="sql-docs-code-block">describe region;<br/>+-------------+-------------------------+---------+<br/>| name        | type                    | comment |<br/>+-------------+-------------------------+---------+<br/>| r_regionkey | smallint                |         |<br/>| r_name      | string                  |         |<br/>| r_comment   | string                  |         |<br/>| r_nations   | array<struct<           |         |<br/>|             |   n_nationkey:smallint, |         |<br/>|             |   n_name:string,        |         |<br/>|             |   n_comment:string      |         |<br/>|             | >>                      |         |<br/>+-------------+-------------------------+---------+<br/><br/>select r_name, r_nations.item.n_nationkey<br/>  from region, region.r_nations as r_nations<br/>order by r_name, r_nations.item.n_nationkey;<br/>+-------------+------------------+<br/>| r_name      | item.n_nationkey |<br/>+-------------+------------------+<br/>| AFRICA      | 0                |<br/>| AFRICA      | 5                |<br/>| AFRICA      | 14               |<br/>| AFRICA      | 15               |<br/>| AFRICA      | 16               |<br/>| AMERICA     | 1                |<br/>| AMERICA     | 2                |<br/>| AMERICA     | 3                |<br/>| AMERICA     | 17               |<br/>| AMERICA     | 24               |<br/>| ASIA        | 8                |<br/>| ASIA        | 9                |<br/>| ASIA        | 12               |<br/>| ASIA        | 18               |<br/>| ASIA        | 21               |<br/>| EUROPE      | 6                |<br/>| EUROPE      | 7                |<br/>| EUROPE      | 19               |<br/>| EUROPE      | 22               |<br/>| EUROPE      | 23               |<br/>| MIDDLE EAST | 4                |<br/>| MIDDLE EAST | 10               |<br/>| MIDDLE EAST | 11               |<br/>| MIDDLE EAST | 13               |<br/>| MIDDLE EAST | 20               |<br/>+-------------+------------------+<br/><br/>select<br/>  r_name,<br/>  count(r_nations.item.n_nationkey) as count,<br/>  sum(r_nations.item.n_nationkey) as sum,<br/>  avg(r_nations.item.n_nationkey) as avg,<br/>  min(r_nations.item.n_name) as minimum,<br/>  max(r_nations.item.n_name) as maximum,<br/>  ndv(r_nations.item.n_nationkey) as distinct_vals<br/>from<br/>  region, region.r_nations as r_nations<br/>group by r_name<br/>order by r_name;<br/>+-------------+-------+-----+------+-----------+----------------+---------------+<br/>| r_name      | count | sum | avg  | minimum   | maximum        | distinct_vals |<br/>+-------------+-------+-----+------+-----------+----------------+---------------+<br/>| AFRICA      | 5     | 50  | 10   | ALGERIA   | MOZAMBIQUE     | 5             |<br/>| AMERICA     | 5     | 47  | 9.4  | ARGENTINA | UNITED STATES  | 5             |<br/>| ASIA        | 5     | 68  | 13.6 | CHINA     | VIETNAM        | 5             |<br/>| EUROPE      | 5     | 77  | 15.4 | FRANCE    | UNITED KINGDOM | 5             |<br/>| MIDDLE EAST | 5     | 58  | 11.6 | EGYPT     | SAUDI ARABIA   | 5             |<br/>+-------------+-------+-----+------+-----------+----------------+---------------+<br/></div></p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_caveat_no_operator">' + 
    '        You cannot refer to a column with a complex data type (<span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ' + 
    '        directly in an operator. You can apply operators only to scalar values that make up a complex type' + 
    '        (the fields of a <span class="sql-docs-inline-code">STRUCT</span> , the items of an <span class="sql-docs-inline-code">ARRAY</span> ,' + 
    '        or the key or value portion of a <span class="sql-docs-inline-code">MAP</span> ) as part of a join query that refers to' + 
    '        the scalar value using the appropriate dot notation or <span class="sql-docs-inline-code">ITEM</span> , <span class="sql-docs-inline-code">KEY</span> , or <span class="sql-docs-inline-code">VALUE</span> ' + 
    '        pseudocolumn names.' + 
    '      </p> <p>' + 
    '        The following example shows how to do an arithmetic operation using a numeric field of a <span class="sql-docs-inline-code">STRUCT</span>  type that is an' + 
    '        item within an <span class="sql-docs-inline-code">ARRAY</span>  column. Once the scalar numeric value <span class="sql-docs-inline-code">R_NATIONKEY</span>  is extracted, it can be' + 
    '        used in an arithmetic expression, such as multiplying by 10:' + 
    '      </p> <div class="sql-docs-code-block">-- The SMALLINT is a field within an array of structs.<br/>describe region;<br/>+-------------+-------------------------+---------+<br/>| name        | type                    | comment |<br/>+-------------+-------------------------+---------+<br/>| r_regionkey | smallint                |         |<br/>| r_name      | string                  |         |<br/>| r_comment   | string                  |         |<br/>| r_nations   | array<struct<           |         |<br/>|             |   n_nationkey:smallint, |         |<br/>|             |   n_name:string,        |         |<br/>|             |   n_comment:string      |         |<br/>|             | >>                      |         |<br/>+-------------+-------------------------+---------+<br/><br/>-- When we refer to the scalar value using dot notation,<br/>-- we can use arithmetic and comparison operators on it<br/>-- like any other number.<br/>select r_name, nation.item.n_name, nation.item.n_nationkey * 10<br/>  from region, region.r_nations as nation<br/>where nation.item.n_nationkey < 5;<br/>+-------------+-------------+------------------------------+<br/>| r_name      | item.n_name | nation.item.n_nationkey * 10 |<br/>+-------------+-------------+------------------------------+<br/>| AMERICA     | CANADA      | 30                           |<br/>| AMERICA     | BRAZIL      | 20                           |<br/>| AMERICA     | ARGENTINA   | 10                           |<br/>| MIDDLE EAST | EGYPT       | 40                           |<br/>| AFRICA      | ALGERIA     | 0                            |<br/>+-------------+-------------+------------------------------+<br/></div></div> </div> <div id="../Impala/docs/topics/impala_operators.xml_between"><h4>BETWEEN Operator</h4> <div><p>' + 
    '        In a <span class="sql-docs-inline-code">WHERE</span>  clause, compares an expression to both a lower and upper bound. The comparison is successful is the' + 
    '        expression is greater than or equal to the lower bound, and less than or equal to the upper bound. If the bound values are switched,' + 
    '        so the lower bound is greater than the upper bound, does not match any values.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">expression</span> BETWEEN <span class="sql-docs-variable">lower_bound</span> AND <span class="sql-docs-variable">upper_bound</span> </div><p><b>Data types:</b>  Typically used with numeric data types. Works with any data type, although not very practical for' + 
    '        <span class="sql-docs-inline-code">BOOLEAN</span>  values. (<span class="sql-docs-inline-code">BETWEEN false AND true</span>  will match all <span class="sql-docs-inline-code">BOOLEAN</span>  values.) Use' + 
    '        <span class="sql-docs-inline-code">CAST()</span>  if necessary to ensure the lower and upper bound values are compatible types. Call string or date/time' + 
    '        functions if necessary to extract or transform the relevant portion to compare, especially if the value can be transformed into a' + 
    '        number.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
    '        Be careful when using short string operands. A longer string that starts with the upper bound value will not be included, because it' + 
    '        is considered greater than the upper bound. For example, <span class="sql-docs-inline-code">BETWEEN \'A\' and \'M\'</span>  would not match the string value' + 
    '        <span class="sql-docs-inline-code">\'Midway\'</span> . Use functions such as <span class="sql-docs-inline-code">upper()</span> , <span class="sql-docs-inline-code">lower()</span> , <span class="sql-docs-inline-code">substr()</span> ,' + 
    '        <span class="sql-docs-inline-code">trim()</span> , and so on if necessary to ensure the comparison works as expected.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_caveat_no_operator">' + 
    '        You cannot refer to a column with a complex data type (<span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ' + 
    '        directly in an operator. You can apply operators only to scalar values that make up a complex type' + 
    '        (the fields of a <span class="sql-docs-inline-code">STRUCT</span> , the items of an <span class="sql-docs-inline-code">ARRAY</span> ,' + 
    '        or the key or value portion of a <span class="sql-docs-inline-code">MAP</span> ) as part of a join query that refers to' + 
    '        the scalar value using the appropriate dot notation or <span class="sql-docs-inline-code">ITEM</span> , <span class="sql-docs-inline-code">KEY</span> , or <span class="sql-docs-inline-code">VALUE</span> ' + 
    '        pseudocolumn names.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">-- Retrieve data for January through June, inclusive.<br/>select c1 from t1 where month <b>between 1 and 6</b> ;<br/><br/>-- Retrieve data for names beginning with \'A\' through \'M\' inclusive.<br/>-- Only test the first letter to ensure all the values starting with \'M\' are matched.<br/>-- Do a case-insensitive comparison to match names with various capitalization conventions.<br/>select last_name from customers where upper(substr(last_name,1,1)) <b>between \'A\' and \'M\'</b> ;<br/><br/>-- Retrieve data for only the first week of each month.<br/>select count(distinct visitor_id)) from web_traffic where dayofmonth(when_viewed) <b>between 1 and 7</b> ;</div><p>' + 
    '        The following example shows how to do a <span class="sql-docs-inline-code">BETWEEN</span>  comparison using a numeric field of a <span class="sql-docs-inline-code">STRUCT</span>  type' + 
    '        that is an item within an <span class="sql-docs-inline-code">ARRAY</span>  column. Once the scalar numeric value <span class="sql-docs-inline-code">R_NATIONKEY</span>  is extracted, it' + 
    '        can be used in a comparison operator:' + 
    '      </p> <div class="sql-docs-code-block">-- The SMALLINT is a field within an array of structs.<br/>describe region;<br/>+-------------+-------------------------+---------+<br/>| name        | type                    | comment |<br/>+-------------+-------------------------+---------+<br/>| r_regionkey | smallint                |         |<br/>| r_name      | string                  |         |<br/>| r_comment   | string                  |         |<br/>| r_nations   | array<struct<           |         |<br/>|             |   n_nationkey:smallint, |         |<br/>|             |   n_name:string,        |         |<br/>|             |   n_comment:string      |         |<br/>|             | >>                      |         |<br/>+-------------+-------------------------+---------+<br/><br/>-- When we refer to the scalar value using dot notation,<br/>-- we can use arithmetic and comparison operators on it<br/>-- like any other number.<br/>select r_name, nation.item.n_name, nation.item.n_nationkey<br/>from region, region.r_nations as nation<br/>where nation.item.n_nationkey between 3 and 5<br/>+-------------+-------------+------------------+<br/>| r_name      | item.n_name | item.n_nationkey |<br/>+-------------+-------------+------------------+<br/>| AMERICA     | CANADA      | 3                |<br/>| MIDDLE EAST | EGYPT       | 4                |<br/>| AFRICA      | ETHIOPIA    | 5                |<br/>+-------------+-------------+------------------+<br/></div></div> </div> <div id="../Impala/docs/topics/impala_operators.xml_comparison_operators"><h4>Comparison Operators</h4> <div><p>' + 
    '        Impala supports the familiar comparison operators for checking equality and sort order for the column data types:' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">left_hand_expression</span> <span class="sql-docs-variable">comparison_operator</span> <span class="sql-docs-variable">right_hand_expression</span> </div><ul><li><span class="sql-docs-inline-code">=</span> , <span class="sql-docs-inline-code">!=</span> , <span class="sql-docs-inline-code"><></span> : apply to all types.' + 
    '        </li> <li><span class="sql-docs-inline-code"><</span> , <span class="sql-docs-inline-code"><=</span> , <span class="sql-docs-inline-code">></span> , <span class="sql-docs-inline-code">>=</span> : apply to all types; for' + 
    '          <span class="sql-docs-inline-code">BOOLEAN</span> , <span class="sql-docs-inline-code">TRUE</span>  is considered greater than <span class="sql-docs-inline-code">FALSE</span> .' + 
    '        </li> </ul> <p><b>Alternatives:</b> </p> <p>' + 
    '        The <span class="sql-docs-inline-code">IN</span>  and <span class="sql-docs-inline-code">BETWEEN</span>  operators provide shorthand notation for expressing combinations of equality,' + 
    '        less than, and greater than comparisons with a single operator.' + 
    '      </p> <p>' + 
    '        Because comparing any value to <span class="sql-docs-inline-code">NULL</span>  produces <span class="sql-docs-inline-code">NULL</span>  rather than <span class="sql-docs-inline-code">TRUE</span>  or' + 
    '        <span class="sql-docs-inline-code">FALSE</span> , use the <span class="sql-docs-inline-code">IS NULL</span>  and <span class="sql-docs-inline-code">IS NOT NULL</span>  operators to check if a value is' + 
    '        <span class="sql-docs-inline-code">NULL</span>  or not.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_caveat_no_operator">' + 
    '        You cannot refer to a column with a complex data type (<span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ' + 
    '        directly in an operator. You can apply operators only to scalar values that make up a complex type' + 
    '        (the fields of a <span class="sql-docs-inline-code">STRUCT</span> , the items of an <span class="sql-docs-inline-code">ARRAY</span> ,' + 
    '        or the key or value portion of a <span class="sql-docs-inline-code">MAP</span> ) as part of a join query that refers to' + 
    '        the scalar value using the appropriate dot notation or <span class="sql-docs-inline-code">ITEM</span> , <span class="sql-docs-inline-code">KEY</span> , or <span class="sql-docs-inline-code">VALUE</span> ' + 
    '        pseudocolumn names.' + 
    '      </p> <p>' + 
    '        The following example shows how to do an arithmetic operation using a numeric field of a <span class="sql-docs-inline-code">STRUCT</span>  type that is an' + 
    '        item within an <span class="sql-docs-inline-code">ARRAY</span>  column. Once the scalar numeric value <span class="sql-docs-inline-code">R_NATIONKEY</span>  is extracted, it can be' + 
    '        used with a comparison operator such as <span class="sql-docs-inline-code"><</span> :' + 
    '      </p> <div class="sql-docs-code-block">-- The SMALLINT is a field within an array of structs.<br/>describe region;<br/>+-------------+-------------------------+---------+<br/>| name        | type                    | comment |<br/>+-------------+-------------------------+---------+<br/>| r_regionkey | smallint                |         |<br/>| r_name      | string                  |         |<br/>| r_comment   | string                  |         |<br/>| r_nations   | array<struct<           |         |<br/>|             |   n_nationkey:smallint, |         |<br/>|             |   n_name:string,        |         |<br/>|             |   n_comment:string      |         |<br/>|             | >>                      |         |<br/>+-------------+-------------------------+---------+<br/><br/>-- When we refer to the scalar value using dot notation,<br/>-- we can use arithmetic and comparison operators on it<br/>-- like any other number.<br/>select r_name, nation.item.n_name, nation.item.n_nationkey<br/>from region, region.r_nations as nation<br/>where nation.item.n_nationkey < 5<br/>+-------------+-------------+------------------+<br/>| r_name      | item.n_name | item.n_nationkey |<br/>+-------------+-------------+------------------+<br/>| AMERICA     | CANADA      | 3                |<br/>| AMERICA     | BRAZIL      | 2                |<br/>| AMERICA     | ARGENTINA   | 1                |<br/>| MIDDLE EAST | EGYPT       | 4                |<br/>| AFRICA      | ALGERIA     | 0                |<br/>+-------------+-------------+------------------+<br/></div></div> </div> <div id="../Impala/docs/topics/impala_operators.xml_exists"><h4>EXISTS Operator</h4> <div><p>' + 
    '        The <span class="sql-docs-inline-code">EXISTS</span>  operator tests whether a subquery returns any results. You typically use it to find values from one' + 
    '        table that have corresponding values in another table.' + 
    '      </p> <p>' + 
    '        The converse, <span class="sql-docs-inline-code">NOT EXISTS</span> , helps to find all the values from one table that do not have any corresponding values in' + 
    '        another table.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">EXISTS (<span class="sql-docs-variable">subquery</span> )<br/>NOT EXISTS (<span class="sql-docs-variable">subquery</span> )<br/></div><p id="../Impala/docs/topics/impala_operators.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
    '        The subquery can refer to a different table than the outer query block, or the same table. For example, you might use' + 
    '        <span class="sql-docs-inline-code">EXISTS</span>  or <span class="sql-docs-inline-code">NOT EXISTS</span>  to check the existence of parent/child relationships between two columns of' + 
    '        the same table.' + 
    '      </p> <p>' + 
    '        You can also use operators and function calls within the subquery to test for other kinds of relationships other than strict' + 
    '        equality. For example, you might use a call to <span class="sql-docs-inline-code">COUNT()</span>  in the subquery to check whether the number of matching' + 
    '        values is higher or lower than some limit. You might call a UDF in the subquery to check whether values in one table matches a' + 
    '        hashed representation of those same values in a different table.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_null_blurb"><b>NULL considerations:</b> </p> <p>' + 
    '        If the subquery returns any value at all (even <span class="sql-docs-inline-code">NULL</span> ), <span class="sql-docs-inline-code">EXISTS</span>  returns <span class="sql-docs-inline-code">TRUE</span>  and' + 
    '        <span class="sql-docs-inline-code">NOT EXISTS</span>  returns false.' + 
    '      </p> <p>' + 
    '        The following example shows how even when the subquery returns only <span class="sql-docs-inline-code">NULL</span>  values, <span class="sql-docs-inline-code">EXISTS</span>  still' + 
    '        returns <span class="sql-docs-inline-code">TRUE</span>  and thus matches all the rows from the table in the outer query block.' + 
    '      </p> <div class="sql-docs-code-block">[localhost:21000] > create table all_nulls (x int);<br/>[localhost:21000] > insert into all_nulls values (null), (null), (null);<br/>[localhost:21000] > select y from t2 where exists (select x from all_nulls);<br/>+---+<br/>| y |<br/>+---+<br/>| 2 |<br/>| 4 |<br/>| 6 |<br/>+---+<br/></div><p>' + 
    '        However, if the table in the subquery is empty and so the subquery returns an empty result set, <span class="sql-docs-inline-code">EXISTS</span>  returns' + 
    '        <span class="sql-docs-inline-code">FALSE</span> :' + 
    '      </p> <div class="sql-docs-code-block">[localhost:21000] > create table empty (x int);<br/>[localhost:21000] > select y from t2 where exists (select x from empty);<br/>[localhost:21000] ><br/></div><p id="../Impala/docs/topics/impala_operators.xml_added_in_20"><b>Added in:</b> Impala 2.0.0</p> <p id="../Impala/docs/topics/impala_operators.xml_restrictions_blurb"><b>Restrictions:</b> </p> <p id="../Impala/docs/topics/impala_operators.xml_subquery_no_limit">' + 
    '        Correlated subqueries used in <span class="sql-docs-inline-code">EXISTS</span>  and <span class="sql-docs-inline-code">IN</span>  operators cannot include a' + 
    '        <span class="sql-docs-inline-code">LIMIT</span>  clause.' + 
    '      </p> <p>' + 
    '        Prior to Impala 2.6,' + 
    '        the <span class="sql-docs-inline-code">NOT EXISTS</span>  operator required a correlated subquery.' + 
    '        In Impala 2.6 and higher, <span class="sql-docs-inline-code">NOT EXISTS</span>  works with' + 
    '        uncorrelated queries also.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_caveat_no_operator">' + 
    '        You cannot refer to a column with a complex data type (<span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ' + 
    '        directly in an operator. You can apply operators only to scalar values that make up a complex type' + 
    '        (the fields of a <span class="sql-docs-inline-code">STRUCT</span> , the items of an <span class="sql-docs-inline-code">ARRAY</span> ,' + 
    '        or the key or value portion of a <span class="sql-docs-inline-code">MAP</span> ) as part of a join query that refers to' + 
    '        the scalar value using the appropriate dot notation or <span class="sql-docs-inline-code">ITEM</span> , <span class="sql-docs-inline-code">KEY</span> , or <span class="sql-docs-inline-code">VALUE</span> ' + 
    '        pseudocolumn names.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
    '        The following examples refer to these simple tables containing small sets of integers or strings:' + 
    '<div class="sql-docs-code-block">[localhost:21000] > create table t1 (x int);<br/>[localhost:21000] > insert into t1 values (1), (2), (3), (4), (5), (6);<br/><br/>[localhost:21000] > create table t2 (y int);<br/>[localhost:21000] > insert into t2 values (2), (4), (6);<br/><br/>[localhost:21000] > create table t3 (z int);<br/>[localhost:21000] > insert into t3 values (1), (3), (5);<br/><br/>[localhost:21000] > create table month_names (m string);<br/>[localhost:21000] > insert into month_names values<br/>                  > (\'January\'), (\'February\'), (\'March\'),<br/>                  > (\'April\'), (\'May\'), (\'June\'), (\'July\'),<br/>                  > (\'August\'), (\'September\'), (\'October\'),<br/>                  > (\'November\'), (\'December\');<br/></div></p> <p>' + 
    '        The following example shows a correlated subquery that finds all the values in one table that exist in another table. For each value' + 
    '        <span class="sql-docs-inline-code">X</span>  from <span class="sql-docs-inline-code">T1</span> , the query checks if the <span class="sql-docs-inline-code">Y</span>  column of <span class="sql-docs-inline-code">T2</span>  contains an' + 
    '        identical value, and the <span class="sql-docs-inline-code">EXISTS</span>  operator returns <span class="sql-docs-inline-code">TRUE</span>  or <span class="sql-docs-inline-code">FALSE</span>  as appropriate in' + 
    '        each case.' + 
    '      </p> <div class="sql-docs-code-block">localhost:21000] > select x from t1 where exists (select y from t2 where t1.x = y);<br/>+---+<br/>| x |<br/>+---+<br/>| 2 |<br/>| 4 |<br/>| 6 |<br/>+---+<br/></div><p>' + 
    '        An uncorrelated query is less interesting in this case. Because the subquery always returns <span class="sql-docs-inline-code">TRUE</span> , all rows from' + 
    '        <span class="sql-docs-inline-code">T1</span>  are returned. If the table contents where changed so that the subquery did not match any rows, none of the rows' + 
    '        from <span class="sql-docs-inline-code">T1</span>  would be returned.' + 
    '      </p> <div class="sql-docs-code-block">[localhost:21000] > select x from t1 where exists (select y from t2 where y > 5);<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 2 |<br/>| 3 |<br/>| 4 |<br/>| 5 |<br/>| 6 |<br/>+---+<br/></div><p>' + 
    '        The following example shows how an uncorrelated subquery can test for the existence of some condition within a table. By using' + 
    '        <span class="sql-docs-inline-code">LIMIT 1</span>  or an aggregate function, the query returns a single result or no result based on whether the subquery' + 
    '        matches any rows. Here, we know that <span class="sql-docs-inline-code">T1</span>  and <span class="sql-docs-inline-code">T2</span>  contain some even numbers, but <span class="sql-docs-inline-code">T3</span> ' + 
    '        does not.' + 
    '      </p> <div class="sql-docs-code-block">[localhost:21000] > select "contains an even number" from t1 where exists (select x from t1 where x % 2 = 0) limit 1;<br/>+---------------------------+<br/>| \'contains an even number\' |<br/>+---------------------------+<br/>| contains an even number   |<br/>+---------------------------+<br/>[localhost:21000] > select "contains an even number" as assertion from t1 where exists (select x from t1 where x % 2 = 0) limit 1;<br/>+-------------------------+<br/>| assertion               |<br/>+-------------------------+<br/>| contains an even number |<br/>+-------------------------+<br/>[localhost:21000] > select "contains an even number" as assertion from t2 where exists (select x from t2 where y % 2 = 0) limit 1;<br/>ERROR: AnalysisException: couldn\'t resolve column reference: \'x\'<br/>[localhost:21000] > select "contains an even number" as assertion from t2 where exists (select y from t2 where y % 2 = 0) limit 1;<br/>+-------------------------+<br/>| assertion               |<br/>+-------------------------+<br/>| contains an even number |<br/>+-------------------------+<br/>[localhost:21000] > select "contains an even number" as assertion from t3 where exists (select z from t3 where z % 2 = 0) limit 1;<br/>[localhost:21000] ><br/></div><p>' + 
    '        The following example finds numbers in one table that are 1 greater than numbers from another table. The <span class="sql-docs-inline-code">EXISTS</span> ' + 
    '        notation is simpler than an equivalent <span class="sql-docs-inline-code">CROSS JOIN</span>  between the tables. (The example then also illustrates how the' + 
    '        same test could be performed using an <span class="sql-docs-inline-code">IN</span>  operator.)' + 
    '      </p> <div class="sql-docs-code-block">[localhost:21000] > select x from t1 where exists (select y from t2 where x = y + 1);<br/>+---+<br/>| x |<br/>+---+<br/>| 3 |<br/>| 5 |<br/>+---+<br/>[localhost:21000] > select x from t1 where x in (select y + 1 from t2);<br/>+---+<br/>| x |<br/>+---+<br/>| 3 |<br/>| 5 |<br/>+---+<br/></div><p>' + 
    '        The following example finds values from one table that do not exist in another table.' + 
    '      </p> <div class="sql-docs-code-block">[localhost:21000] > select x from t1 where not exists (select y from t2 where x = y);<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 3 |<br/>| 5 |<br/>+---+<br/></div><p>' + 
    '        The following example uses the <span class="sql-docs-inline-code">NOT EXISTS</span>  operator to find all the leaf nodes in tree-structured data. This' + 
    '        simplified <q>tree of life</q>  has multiple levels (class, order, family, and so on), with each item pointing upward through a' + 
    '        <span class="sql-docs-inline-code">PARENT</span>  pointer. The example runs an outer query and a subquery on the same table, returning only those items whose' + 
    '        <span class="sql-docs-inline-code">ID</span>  value is <i>not</i>  referenced by the <span class="sql-docs-inline-code">PARENT</span>  of any other item.' + 
    '      </p> <div class="sql-docs-code-block">[localhost:21000] > create table tree (id int, parent int, name string);<br/>[localhost:21000] > insert overwrite tree values<br/>                  > (0, null, "animals"),<br/>                  > (1, 0, "placentals"),<br/>                  > (2, 0, "marsupials"),<br/>                  > (3, 1, "bats"),<br/>                  > (4, 1, "cats"),<br/>                  > (5, 2, "kangaroos"),<br/>                  > (6, 4, "lions"),<br/>                  > (7, 4, "tigers"),<br/>                  > (8, 5, "red kangaroo"),<br/>                  > (9, 2, "wallabies");<br/>[localhost:21000] > select name as "leaf node" from tree one<br/>                  > where not exists (select parent from tree two where one.id = two.parent);<br/>+--------------+<br/>| leaf node    |<br/>+--------------+<br/>| bats         |<br/>| lions        |<br/>| tigers       |<br/>| red kangaroo |<br/>| wallabies    |<br/>+--------------+<br/></div><p id="../Impala/docs/topics/impala_operators.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_subqueries.xml#subqueries">Subqueries in Impala SELECT Statements</a></p> </div> </div> <div id="../Impala/docs/topics/impala_operators.xml_ilike"><h4>ILIKE Operator</h4> <div><p>' + 
    '        A case-insensitive comparison operator for <span class="sql-docs-inline-code">STRING</span>  data, with basic wildcard capability using <span class="sql-docs-inline-code">_</span>  to match a single' + 
    '        character and <span class="sql-docs-inline-code">%</span>  to match multiple characters. The argument expression must match the entire string value.' + 
    '        Typically, it is more efficient to put any <span class="sql-docs-inline-code">%</span>  wildcard match at the end of the string.' + 
    '      </p> <p>' + 
    '        This operator, available in Impala 2.5 and higher, is the equivalent of the <span class="sql-docs-inline-code">LIKE</span>  operator,' + 
    '        but with case-insensitive comparisons.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">string_expression</span> ILIKE <span class="sql-docs-variable">wildcard_expression</span> <span class="sql-docs-variable">string_expression</span> NOT ILIKE <span class="sql-docs-variable">wildcard_expression</span> </div><p id="../Impala/docs/topics/impala_operators.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_caveat_no_operator">' + 
    '        You cannot refer to a column with a complex data type (<span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ' + 
    '        directly in an operator. You can apply operators only to scalar values that make up a complex type' + 
    '        (the fields of a <span class="sql-docs-inline-code">STRUCT</span> , the items of an <span class="sql-docs-inline-code">ARRAY</span> ,' + 
    '        or the key or value portion of a <span class="sql-docs-inline-code">MAP</span> ) as part of a join query that refers to' + 
    '        the scalar value using the appropriate dot notation or <span class="sql-docs-inline-code">ITEM</span> , <span class="sql-docs-inline-code">KEY</span> , or <span class="sql-docs-inline-code">VALUE</span> ' + 
    '        pseudocolumn names.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
    '        In the following examples, strings that are the same except for differences in uppercase' + 
    '        and lowercase match successfully with <span class="sql-docs-inline-code">ILIKE</span> , but do not match' + 
    '        with <span class="sql-docs-inline-code">LIKE</span> :' + 
    '      </p> <div class="sql-docs-code-block">select \'fooBar\' ilike \'FOOBAR\';<br/>+-------------------------+<br/>| \'foobar\' ilike \'foobar\' |<br/>+-------------------------+<br/>| true                    |<br/>+-------------------------+<br/><br/>select \'fooBar\' like \'FOOBAR\';<br/>+------------------------+<br/>| \'foobar\' like \'foobar\' |<br/>+------------------------+<br/>| false                  |<br/>+------------------------+<br/><br/>select \'FOOBAR\' ilike \'f%\';<br/>+---------------------+<br/>| \'foobar\' ilike \'f%\' |<br/>+---------------------+<br/>| true                |<br/>+---------------------+<br/><br/>select \'FOOBAR\' like \'f%\';<br/>+--------------------+<br/>| \'foobar\' like \'f%\' |<br/>+--------------------+<br/>| false              |<br/>+--------------------+<br/><br/>select \'ABCXYZ\' not ilike \'ab_xyz\';<br/>+-----------------------------+<br/>| not \'abcxyz\' ilike \'ab_xyz\' |<br/>+-----------------------------+<br/>| false                       |<br/>+-----------------------------+<br/><br/>select \'ABCXYZ\' not like \'ab_xyz\';<br/>+----------------------------+<br/>| not \'abcxyz\' like \'ab_xyz\' |<br/>+----------------------------+<br/>| true                       |<br/>+----------------------------+<br/></div><p id="../Impala/docs/topics/impala_operators.xml_related_info"><b>Related information:</b> </p> <p>' + 
    '        For case-sensitive comparisons, see <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_operators.xml#like"><h4>LIKE Operator</h4> </a>.' + 
    '        For a more general kind of search operator using regular expressions, see <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_operators.xml#regexp"><h4>REGEXP Operator</h4> </a>' + 
    '        or its case-insensitive counterpart <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_operators.xml#iregexp"><h4>IREGEXP Operator</h4> </a>.' + 
    '      </p> </div> </div> <div id="../Impala/docs/topics/impala_operators.xml_in"><h4>IN Operator</h4> <div><p>' + 
    '        The <span class="sql-docs-inline-code">IN</span>  operator compares an argument value to a set of values, and returns <span class="sql-docs-inline-code">TRUE</span>  if the argument' + 
    '        matches any value in the set. The <span class="sql-docs-inline-code">NOT IN</span>  operator reverses the comparison, and checks if the argument value is not' + 
    '        part of a set of values.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">expression</span> IN (<span class="sql-docs-variable">expression</span> [, <span class="sql-docs-variable">expression</span> ])<br/><span class="sql-docs-variable">expression</span> IN (<span class="sql-docs-variable">subquery</span> )<br/><br/><span class="sql-docs-variable">expression</span> NOT IN (<span class="sql-docs-variable">expression</span> [, <span class="sql-docs-variable">expression</span> ])<br/><span class="sql-docs-variable">expression</span> NOT IN (<span class="sql-docs-variable">subquery</span> )<br/></div><p>' + 
    '        The left-hand expression and the set of comparison values must be of compatible types.' + 
    '      </p> <p>' + 
    '        The left-hand expression must consist only of a single value, not a tuple. Although the left-hand expression is typically a column' + 
    '        name, it could also be some other value. For example, the <span class="sql-docs-inline-code">WHERE</span>  clauses <span class="sql-docs-inline-code">WHERE id IN (5)</span>  and' + 
    '        <span class="sql-docs-inline-code">WHERE 5 IN (id)</span>  produce the same results.' + 
    '      </p> <p>' + 
    '        The set of values to check against can be specified as constants, function calls, column names, or other expressions in the query' + 
    '        text. The maximum number of expressions in the <span class="sql-docs-inline-code">IN</span>  list is 9999. (The maximum number of elements of' + 
    '        a single expression is 10,000 items, and the <span class="sql-docs-inline-code">IN</span>  operator itself counts as one.)' + 
    '      </p> <p>' + 
    '        In Impala 2.0 and higher, the set of values can also be generated by a subquery. <span class="sql-docs-inline-code">IN</span>  can evaluate an unlimited' + 
    '        number of results using a subquery.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
    '        Any expression using the <span class="sql-docs-inline-code">IN</span>  operator could be rewritten as a series of equality tests connected with' + 
    '        <span class="sql-docs-inline-code">OR</span> , but the <span class="sql-docs-inline-code">IN</span>  syntax is often clearer, more concise, and easier for Impala to optimize. For' + 
    '        example, with partitioned tables, queries frequently use <span class="sql-docs-inline-code">IN</span>  clauses to filter data by comparing the partition key' + 
    '        columns to specific values.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_null_blurb"><b>NULL considerations:</b> </p> <p>' + 
    '        If there really is a matching non-null value, <span class="sql-docs-inline-code">IN</span>  returns <span class="sql-docs-inline-code">TRUE</span> :' + 
    '      </p> <div class="sql-docs-code-block">[localhost:21000] > select 1 in (1,null,2,3);<br/>+----------------------+<br/>| 1 in (1, null, 2, 3) |<br/>+----------------------+<br/>| true                 |<br/>+----------------------+<br/>[localhost:21000] > select 1 not in (1,null,2,3);<br/>+--------------------------+<br/>| 1 not in (1, null, 2, 3) |<br/>+--------------------------+<br/>| false                    |<br/>+--------------------------+<br/></div><p>' + 
    '        If the searched value is not found in the comparison values, and the comparison values include <span class="sql-docs-inline-code">NULL</span> , the result is' + 
    '        <span class="sql-docs-inline-code">NULL</span> :' + 
    '      </p> <div class="sql-docs-code-block">[localhost:21000] > select 5 in (1,null,2,3);<br/>+----------------------+<br/>| 5 in (1, null, 2, 3) |<br/>+----------------------+<br/>| NULL                 |<br/>+----------------------+<br/>[localhost:21000] > select 5 not in (1,null,2,3);<br/>+--------------------------+<br/>| 5 not in (1, null, 2, 3) |<br/>+--------------------------+<br/>| NULL                     |<br/>+--------------------------+<br/>[localhost:21000] > select 1 in (null);<br/>+-------------+<br/>| 1 in (null) |<br/>+-------------+<br/>| NULL        |<br/>+-------------+<br/>[localhost:21000] > select 1 not in (null);<br/>+-----------------+<br/>| 1 not in (null) |<br/>+-----------------+<br/>| NULL            |<br/>+-----------------+<br/></div><p>' + 
    '        If the left-hand argument is <span class="sql-docs-inline-code">NULL</span> , <span class="sql-docs-inline-code">IN</span>  always returns <span class="sql-docs-inline-code">NULL</span> . This rule applies even' + 
    '        if the comparison values include <span class="sql-docs-inline-code">NULL</span> .' + 
    '      </p> <div class="sql-docs-code-block">[localhost:21000] > select null in (1,2,3);<br/>+-------------------+<br/>| null in (1, 2, 3) |<br/>+-------------------+<br/>| NULL              |<br/>+-------------------+<br/>[localhost:21000] > select null not in (1,2,3);<br/>+-----------------------+<br/>| null not in (1, 2, 3) |<br/>+-----------------------+<br/>| NULL                  |<br/>+-----------------------+<br/>[localhost:21000] > select null in (null);<br/>+----------------+<br/>| null in (null) |<br/>+----------------+<br/>| NULL           |<br/>+----------------+<br/>[localhost:21000] > select null not in (null);<br/>+--------------------+<br/>| null not in (null) |<br/>+--------------------+<br/>| NULL               |<br/>+--------------------+<br/></div><p id="../Impala/docs/topics/impala_operators.xml_enhanced_in_20"><b>Added in:</b>  Available in earlier Impala releases, but new capabilities were added in' + 
    '        Impala 2.0.0</p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_caveat_no_operator">' + 
    '        You cannot refer to a column with a complex data type (<span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ' + 
    '        directly in an operator. You can apply operators only to scalar values that make up a complex type' + 
    '        (the fields of a <span class="sql-docs-inline-code">STRUCT</span> , the items of an <span class="sql-docs-inline-code">ARRAY</span> ,' + 
    '        or the key or value portion of a <span class="sql-docs-inline-code">MAP</span> ) as part of a join query that refers to' + 
    '        the scalar value using the appropriate dot notation or <span class="sql-docs-inline-code">ITEM</span> , <span class="sql-docs-inline-code">KEY</span> , or <span class="sql-docs-inline-code">VALUE</span> ' + 
    '        pseudocolumn names.' + 
    '      </p> <p>' + 
    '        The following example shows how to do an arithmetic operation using a numeric field of a <span class="sql-docs-inline-code">STRUCT</span>  type that is an' + 
    '        item within an <span class="sql-docs-inline-code">ARRAY</span>  column. Once the scalar numeric value <span class="sql-docs-inline-code">R_NATIONKEY</span>  is extracted, it can be' + 
    '        used in an arithmetic expression, such as multiplying by 10:' + 
    '      </p> <div class="sql-docs-code-block">-- The SMALLINT is a field within an array of structs.<br/>describe region;<br/>+-------------+-------------------------+---------+<br/>| name        | type                    | comment |<br/>+-------------+-------------------------+---------+<br/>| r_regionkey | smallint                |         |<br/>| r_name      | string                  |         |<br/>| r_comment   | string                  |         |<br/>| r_nations   | array<struct<           |         |<br/>|             |   n_nationkey:smallint, |         |<br/>|             |   n_name:string,        |         |<br/>|             |   n_comment:string      |         |<br/>|             | >>                      |         |<br/>+-------------+-------------------------+---------+<br/><br/>-- When we refer to the scalar value using dot notation,<br/>-- we can use arithmetic and comparison operators on it<br/>-- like any other number.<br/>select r_name, nation.item.n_name, nation.item.n_nationkey<br/>from region, region.r_nations as nation<br/>where nation.item.n_nationkey in (1,3,5)<br/>+---------+-------------+------------------+<br/>| r_name  | item.n_name | item.n_nationkey |<br/>+---------+-------------+------------------+<br/>| AMERICA | CANADA      | 3                |<br/>| AMERICA | ARGENTINA   | 1                |<br/>| AFRICA  | ETHIOPIA    | 5                |<br/>+---------+-------------+------------------+<br/></div><p id="../Impala/docs/topics/impala_operators.xml_restrictions_blurb"><b>Restrictions:</b> </p> <p id="../Impala/docs/topics/impala_operators.xml_subquery_no_limit">' + 
    '        Correlated subqueries used in <span class="sql-docs-inline-code">EXISTS</span>  and <span class="sql-docs-inline-code">IN</span>  operators cannot include a' + 
    '        <span class="sql-docs-inline-code">LIMIT</span>  clause.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">-- Using IN is concise and self-documenting.<br/>SELECT * FROM t1 WHERE c1 IN (1,2,10);<br/>-- Equivalent to series of = comparisons ORed together.<br/>SELECT * FROM t1 WHERE c1 = 1 OR c1 = 2 OR c1 = 10;<br/><br/>SELECT c1 AS "starts with vowel" FROM t2 WHERE upper(substr(c1,1,1)) IN (\'A\',\'E\',\'I\',\'O\',\'U\');<br/><br/>SELECT COUNT(DISTINCT(visitor_id)) FROM web_traffic WHERE month IN (\'January\',\'June\',\'July\');</div><p id="../Impala/docs/topics/impala_operators.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_subqueries.xml#subqueries">Subqueries in Impala SELECT Statements</a></p> </div> </div> <div id="../Impala/docs/topics/impala_operators.xml_iregexp"><h4>IREGEXP Operator</h4> <div><p>' + 
    '        Tests whether a value matches a regular expression, using case-insensitive string comparisons.' + 
    '        Uses the POSIX regular expression syntax where <span class="sql-docs-inline-code">^</span>  and' + 
    '        <span class="sql-docs-inline-code">$</span>  match the beginning and end of the string, <span class="sql-docs-inline-code">.</span>  represents any single character, <span class="sql-docs-inline-code">*</span> ' + 
    '        represents a sequence of zero or more items, <span class="sql-docs-inline-code">+</span>  represents a sequence of one or more items, <span class="sql-docs-inline-code">?</span> ' + 
    '        produces a non-greedy match, and so on.' + 
    '      </p> <p>' + 
    '        This operator, available in Impala 2.5 and higher, is the equivalent of the <span class="sql-docs-inline-code">REGEXP</span>  operator,' + 
    '        but with case-insensitive comparisons.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">string_expression</span> IREGEXP <span class="sql-docs-variable">regular_expression</span> </div><p id="../Impala/docs/topics/impala_operators.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
    '        The <span class="sql-docs-inline-code">|</span>  symbol is the alternation operator, typically used within <span class="sql-docs-inline-code">()</span>  to match different sequences.' + 
    '        The <span class="sql-docs-inline-code">()</span>  groups do not allow backreferences. To retrieve the part of a value matched within a <span class="sql-docs-inline-code">()</span> ' + 
    '        section, use the <span class="sql-docs-inline-code"><span>regexp_extract()</span></span> ' + 
    '        built-in function. (Currently, there is not any case-insensitive equivalent for the <span class="sql-docs-inline-code">regexp_extract()</span>  function.)' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_regexp_matching">' + 
    '        In Impala 1.3.1 and higher, the <span class="sql-docs-inline-code">REGEXP</span>  and <span class="sql-docs-inline-code">RLIKE</span>  operators now match a' + 
    '        regular expression string that occurs anywhere inside the target string, the same as if the regular' + 
    '        expression was enclosed on each side by <span class="sql-docs-inline-code">.*</span> . See' + 
    '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_operators.xml#regexp"><h4>REGEXP Operator</h4> </a> for examples. Previously, these operators only' + 
    '        succeeded when the regular expression matched the entire target string. This change improves compatibility' + 
    '        with the regular expression support for popular database systems. There is no change to the behavior of the' + 
    '        <span class="sql-docs-inline-code">regexp_extract()</span>  and <span class="sql-docs-inline-code">regexp_replace()</span>  built-in functions.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_regexp_re2">' + 
    '        In Impala 2.0 and later, the Impala regular expression syntax conforms to the POSIX Extended Regular' + 
    '        Expression syntax used by the Google RE2 library. For details, see' + 
    '        <a target="_blank" href="https://code.google.com/p/re2/">the RE2 documentation</a>. It' + 
    '        has most idioms familiar from regular expressions in Perl, Python, and so on, including' + 
    '        <span class="sql-docs-inline-code">.*?</span>  for non-greedy matches.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_regexp_re2_warning">' + 
    '        In Impala 2.0 and later, a change in the underlying regular expression library could cause changes in the' + 
    '        way regular expressions are interpreted by this function. Test any queries that use regular expressions and' + 
    '        adjust the expression patterns if necessary. See' + 
    '        <span>incompatible changes 200</span> for details.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_caveat_no_operator">' + 
    '        You cannot refer to a column with a complex data type (<span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ' + 
    '        directly in an operator. You can apply operators only to scalar values that make up a complex type' + 
    '        (the fields of a <span class="sql-docs-inline-code">STRUCT</span> , the items of an <span class="sql-docs-inline-code">ARRAY</span> ,' + 
    '        or the key or value portion of a <span class="sql-docs-inline-code">MAP</span> ) as part of a join query that refers to' + 
    '        the scalar value using the appropriate dot notation or <span class="sql-docs-inline-code">ITEM</span> , <span class="sql-docs-inline-code">KEY</span> , or <span class="sql-docs-inline-code">VALUE</span> ' + 
    '        pseudocolumn names.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
    '        The following examples demonstrate the syntax for the <span class="sql-docs-inline-code">IREGEXP</span>  operator.' + 
    '      </p> <div class="sql-docs-code-block">select \'abcABCaabbcc\' iregexp \'^[a-c]+$\';<br/>+---------------------------------+<br/>| \'abcabcaabbcc\' iregexp \'[a-c]+\' |<br/>+---------------------------------+<br/>| true                            |<br/>+---------------------------------+<br/></div><p id="../Impala/docs/topics/impala_operators.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_operators.xml#regexp"><h4>REGEXP Operator</h4> </a></p> </div> </div> <div id="../Impala/docs/topics/impala_operators.xml_is_distinct_from"><h4 id="../Impala/docs/topics/impala_operators.xml_is_distinct">IS DISTINCT FROM Operator</h4> <div><p>' + 
    '        The <span class="sql-docs-inline-code">IS DISTINCT FROM</span>  operator, and its converse the <span class="sql-docs-inline-code">IS NOT DISTINCT FROM</span>  operator, test whether or' + 
    '        not values are identical. <span class="sql-docs-inline-code">IS NOT DISTINCT FROM</span>  is similar to the <span class="sql-docs-inline-code">=</span>  operator, and <span class="sql-docs-inline-code">IS' + 
    '        DISTINCT FROM</span>  is similar to the <span class="sql-docs-inline-code">!=</span>  operator, except that <span class="sql-docs-inline-code">NULL</span>  values are treated as' + 
    '        identical. Therefore, <span class="sql-docs-inline-code">IS NOT DISTINCT FROM</span>  returns <span class="sql-docs-inline-code">true</span>  rather than <span class="sql-docs-inline-code">NULL</span> , and' + 
    '        <span class="sql-docs-inline-code">IS DISTINCT FROM</span>  returns <span class="sql-docs-inline-code">false</span>  rather than <span class="sql-docs-inline-code">NULL</span> , when comparing two' + 
    '        <span class="sql-docs-inline-code">NULL</span>  values. If one of the values being compared is <span class="sql-docs-inline-code">NULL</span>  and the other is not, <span class="sql-docs-inline-code">IS DISTINCT' + 
    '        FROM</span>  returns <span class="sql-docs-inline-code">true</span>  and <span class="sql-docs-inline-code">IS NOT DISTINCT FROM</span>  returns <span class="sql-docs-inline-code">false</span> , again instead' + 
    '        of returning <span class="sql-docs-inline-code">NULL</span>  in both cases.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">expression1</span> IS DISTINCT FROM <span class="sql-docs-variable">expression2</span> <span class="sql-docs-variable">expression1</span> IS NOT DISTINCT FROM <span class="sql-docs-variable">expression2</span> <span class="sql-docs-variable">expression1</span> <=> <span class="sql-docs-variable">expression2</span> </div><p>' + 
    '        The operator <span class="sql-docs-inline-code"><=></span>  is an alias for <span class="sql-docs-inline-code">IS NOT DISTINCT FROM</span> .' + 
    '        It is typically used as a <span class="sql-docs-inline-code">NULL</span> -safe equality operator in join queries.' + 
    '        That is, <span class="sql-docs-inline-code">A <=> B</span>  is true if <span class="sql-docs-inline-code">A</span>  equals <span class="sql-docs-inline-code">B</span> ' + 
    '        or if both <span class="sql-docs-inline-code">A</span>  and <span class="sql-docs-inline-code">B</span>  are <span class="sql-docs-inline-code">NULL</span> .' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
    '        This operator provides concise notation for comparing two values and always producing a <span class="sql-docs-inline-code">true</span>  or' + 
    '        <span class="sql-docs-inline-code">false</span>  result, without treating <span class="sql-docs-inline-code">NULL</span>  as a special case. Otherwise, to unambiguously distinguish' + 
    '        between two values requires a compound expression involving <span class="sql-docs-inline-code">IS [NOT] NULL</span>  tests of both operands in addition to the' + 
    '        <span class="sql-docs-inline-code">=</span>  or <span class="sql-docs-inline-code">!=</span>  operator.' + 
    '      </p> <p>' + 
    '        The <span class="sql-docs-inline-code"><=></span>  operator, used like an equality operator in a join query,' + 
    '        is more efficient than the equivalent clause: <span class="sql-docs-inline-code">A = B OR (A IS NULL AND B IS NULL)</span> .' + 
    '        The <span class="sql-docs-inline-code"><=></span>  operator can use a hash join, while the <span class="sql-docs-inline-code">OR</span>  expression' + 
    '        cannot.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
    '        The following examples show how <span class="sql-docs-inline-code">IS DISTINCT FROM</span>  gives output similar to' + 
    '        the <span class="sql-docs-inline-code">!=</span>  operator, and <span class="sql-docs-inline-code">IS NOT DISTINCT FROM</span>  gives output' + 
    '        similar to the <span class="sql-docs-inline-code">=</span>  operator. The exception is when the expression involves' + 
    '        a <span class="sql-docs-inline-code">NULL</span>  value on one side or both sides, where <span class="sql-docs-inline-code">!=</span>  and' + 
    '        <span class="sql-docs-inline-code">=</span>  return <span class="sql-docs-inline-code">NULL</span>  but the <span class="sql-docs-inline-code">IS [NOT] DISTINCT FROM</span> ' + 
    '        operators still return <span class="sql-docs-inline-code">true</span>  or <span class="sql-docs-inline-code">false</span> .' + 
    '      </p> <div class="sql-docs-code-block">select 1 is distinct from 0, 1 != 0;<br/>+----------------------+--------+<br/>| 1 is distinct from 0 | 1 != 0 |<br/>+----------------------+--------+<br/>| true                 | true   |<br/>+----------------------+--------+<br/><br/>select 1 is distinct from 1, 1 != 1;<br/>+----------------------+--------+<br/>| 1 is distinct from 1 | 1 != 1 |<br/>+----------------------+--------+<br/>| false                | false  |<br/>+----------------------+--------+<br/><br/>select 1 is distinct from null, 1 != null;<br/>+-------------------------+-----------+<br/>| 1 is distinct from null | 1 != null |<br/>+-------------------------+-----------+<br/>| true                    | NULL      |<br/>+-------------------------+-----------+<br/><br/>select null is distinct from null, null != null;<br/>+----------------------------+--------------+<br/>| null is distinct from null | null != null |<br/>+----------------------------+--------------+<br/>| false                      | NULL         |<br/>+----------------------------+--------------+<br/><br/>select 1 is not distinct from 0, 1 = 0;<br/>+--------------------------+-------+<br/>| 1 is not distinct from 0 | 1 = 0 |<br/>+--------------------------+-------+<br/>| false                    | false |<br/>+--------------------------+-------+<br/><br/>select 1 is not distinct from 1, 1 = 1;<br/>+--------------------------+-------+<br/>| 1 is not distinct from 1 | 1 = 1 |<br/>+--------------------------+-------+<br/>| true                     | true  |<br/>+--------------------------+-------+<br/><br/>select 1 is not distinct from null, 1 = null;<br/>+-----------------------------+----------+<br/>| 1 is not distinct from null | 1 = null |<br/>+-----------------------------+----------+<br/>| false                       | NULL     |<br/>+-----------------------------+----------+<br/><br/>select null is not distinct from null, null = null;<br/>+--------------------------------+-------------+<br/>| null is not distinct from null | null = null |<br/>+--------------------------------+-------------+<br/>| true                           | NULL        |<br/>+--------------------------------+-------------+<br/></div><p>' + 
    '        The following example shows how <span class="sql-docs-inline-code">IS DISTINCT FROM</span>  considers' + 
    '        <span class="sql-docs-inline-code">CHAR</span>  values to be the same (not distinct from each other)' + 
    '        if they only differ in the number of trailing spaces. Therefore, sometimes' + 
    '        the result of an <span class="sql-docs-inline-code">IS [NOT] DISTINCT FROM</span>  operator differs' + 
    '        depending on whether the values are <span class="sql-docs-inline-code">STRING</span> /<span class="sql-docs-inline-code">VARCHAR</span> ' + 
    '        or <span class="sql-docs-inline-code">CHAR</span> .' + 
    '      </p> <div class="sql-docs-code-block">select<br/>  \'x\' is distinct from \'x \' as string_with_trailing_spaces,<br/>  cast(\'x\' as char(5)) is distinct from cast(\'x \' as char(5)) as char_with_trailing_spaces;<br/>+-----------------------------+---------------------------+<br/>| string_with_trailing_spaces | char_with_trailing_spaces |<br/>+-----------------------------+---------------------------+<br/>| true                        | false                     |<br/>+-----------------------------+---------------------------+<br/></div></div> </div> <div id="../Impala/docs/topics/impala_operators.xml_is_null"><h4>IS NULL Operator</h4> <div><p>' + 
    '' + 
    '        The <span class="sql-docs-inline-code">IS NULL</span>  operator, and its converse the <span class="sql-docs-inline-code">IS NOT NULL</span>  operator, test whether a specified value is' + 
    '        <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_literals.xml#null">NULL</a></span> . Because using <span class="sql-docs-inline-code">NULL</span>  with any of the other' + 
    '        comparison operators such as <span class="sql-docs-inline-code">=</span>  or <span class="sql-docs-inline-code">!=</span>  also returns <span class="sql-docs-inline-code">NULL</span>  rather than' + 
    '        <span class="sql-docs-inline-code">TRUE</span>  or <span class="sql-docs-inline-code">FALSE</span> , you use a special-purpose comparison operator to check for this special condition.' + 
    '      </p> <p>' + 
    '        In Impala 2.11 and higher, you can use' + 
    '        the operators <span class="sql-docs-inline-code">IS UNKNOWN</span>  and' + 
    '        <span class="sql-docs-inline-code">IS NOT UNKNOWN</span>  as synonyms for' + 
    '        <span class="sql-docs-inline-code">IS NULL</span>  and <span class="sql-docs-inline-code">IS NOT NULL</span> ,' + 
    '        respectively.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">expression</span> IS NULL<br/><span class="sql-docs-variable">expression</span> IS NOT NULL<br/><br/><span class="sql-docs-inline-code"><span class="sql-docs-variable">expression</span> IS UNKNOWN</span> <span class="sql-docs-inline-code"><span class="sql-docs-variable">expression</span> IS NOT UNKNOWN</span> </div><p id="../Impala/docs/topics/impala_operators.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
    '        In many cases, <span class="sql-docs-inline-code">NULL</span>  values indicate some incorrect or incomplete processing during data ingestion or conversion.' + 
    '        You might check whether any values in a column are <span class="sql-docs-inline-code">NULL</span> , and if so take some followup action to fill them in.' + 
    '      </p> <p>' + 
    '        With sparse data, often represented in <q>wide</q>  tables, it is common for most values to be <span class="sql-docs-inline-code">NULL</span>  with only an' + 
    '        occasional non-<span class="sql-docs-inline-code">NULL</span>  value. In those cases, you can use the <span class="sql-docs-inline-code">IS NOT NULL</span>  operator to identify the' + 
    '        rows containing any data at all for a particular column, regardless of the actual value.' + 
    '      </p> <p>' + 
    '        With a well-designed database schema, effective use of <span class="sql-docs-inline-code">NULL</span>  values and <span class="sql-docs-inline-code">IS NULL</span>  and <span class="sql-docs-inline-code">IS NOT' + 
    '        NULL</span>  operators can save having to design custom logic around special values such as 0, -1, <span class="sql-docs-inline-code">\'N/A\'</span> , empty' + 
    '        string, and so on. <span class="sql-docs-inline-code">NULL</span>  lets you distinguish between a value that is known to be 0, false, or empty, and a truly' + 
    '        unknown value.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p>' + 
    '        The <span class="sql-docs-inline-code">IS [NOT] UNKNOWN</span>  operator, as with the <span class="sql-docs-inline-code">IS [NOT] NULL</span> ' + 
    '        operator, is not applicable to complex type columns (<span class="sql-docs-inline-code">STRUCT</span> ,' + 
    '        <span class="sql-docs-inline-code">ARRAY</span> , or <span class="sql-docs-inline-code">MAP</span> ). Using a complex type column with this' + 
    '        operator causes a query error.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">-- If this value is non-zero, something is wrong.<br/>select count(*) from employees where employee_id is null;<br/><br/>-- With data from disparate sources, some fields might be blank.<br/>-- Not necessarily an error condition.<br/>select count(*) from census where household_income is null;<br/><br/>-- Sometimes we expect fields to be null, and followup action<br/>-- is needed when they are not.<br/>select count(*) from web_traffic where weird_http_code is not null;</div></div> </div> <div id="../Impala/docs/topics/impala_operators.xml_is_true"><h4>IS TRUE Operator</h4> <div><p>' + 
    '        This variation of the <span class="sql-docs-inline-code">IS</span>  operator tests for truth' + 
    '        or falsity, with right-hand arguments <span class="sql-docs-inline-code">[NOT] TRUE</span> ,' + 
    '        <span class="sql-docs-inline-code">[NOT] FALSE</span> , and <span class="sql-docs-inline-code">[NOT] UNKNOWN</span> .' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">expression</span> IS TRUE<br/><span class="sql-docs-variable">expression</span> IS NOT TRUE<br/><br/><span class="sql-docs-variable">expression</span> IS FALSE<br/><span class="sql-docs-variable">expression</span> IS NOT FALSE<br/><br/></div><p id="../Impala/docs/topics/impala_operators.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
    '        This <span class="sql-docs-inline-code">IS TRUE</span>  and <span class="sql-docs-inline-code">IS FALSE</span>  forms are' + 
    '        similar to doing equality comparisons with the Boolean values' + 
    '        <span class="sql-docs-inline-code">TRUE</span>  and <span class="sql-docs-inline-code">FALSE</span> , except that' + 
    '        <span class="sql-docs-inline-code">IS TRUE</span>  and <span class="sql-docs-inline-code">IS FALSE</span> ' + 
    '        always return either <span class="sql-docs-inline-code">TRUE</span>  or <span class="sql-docs-inline-code">FALSE</span> ,' + 
    '        even if the left-hand side expression returns <span class="sql-docs-inline-code">NULL</span> </p> <p>' + 
    '        These operators let you simplify Boolean comparisons that must also' + 
    '        check for <span class="sql-docs-inline-code">NULL</span> , for example' + 
    '        <span class="sql-docs-inline-code">X != 10 AND X IS NOT NULL</span>  is equivalent to' + 
    '        <span class="sql-docs-inline-code">(X != 10) IS TRUE</span> .' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_boolean_functions_vs_expressions">' + 
    '        In Impala 2.11 and higher, you can use' + 
    '        the operators <span class="sql-docs-inline-code">IS [NOT] TRUE</span>  and' + 
    '        <span class="sql-docs-inline-code">IS [NOT] FALSE</span>  as equivalents for the built-in' + 
    '        functions <span class="sql-docs-inline-code">istrue()</span> , <span class="sql-docs-inline-code">isnottrue()</span> ,' + 
    '        <span class="sql-docs-inline-code">isfalse()</span> , and <span class="sql-docs-inline-code">isnotfalse()</span> .' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p>' + 
    '        The <span class="sql-docs-inline-code">IS [NOT] TRUE</span>  and <span class="sql-docs-inline-code">IS [NOT] FALSE</span>  operators are not' + 
    '        applicable to complex type columns (<span class="sql-docs-inline-code">STRUCT</span> , <span class="sql-docs-inline-code">ARRAY</span> , or' + 
    '        <span class="sql-docs-inline-code">MAP</span> ). Using a complex type column with these operators causes a query error.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_added_in_2110"><b>Added in:</b> Impala 2.11.0</p> <p id="../Impala/docs/topics/impala_operators.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">select assertion, b, b is true, b is false, b is unknown<br/>  from boolean_test;<br/>+-------------+-------+-----------+------------+-----------+<br/>| assertion   | b     | istrue(b) | isfalse(b) | b is null |<br/>+-------------+-------+-----------+------------+-----------+<br/>| 2 + 2 = 4   | true  | true      | false      | false     |<br/>| 2 + 2 = 5   | false | false     | true       | false     |<br/>| 1 = null    | NULL  | false     | false      | true      |<br/>| null = null | NULL  | false     | false      | true      |<br/>+-------------+-------+-----------+------------+-----------+<br/></div></div> </div> <div id="../Impala/docs/topics/impala_operators.xml_like"><h4>LIKE Operator</h4> <div><p>' + 
    '        A comparison operator for <span class="sql-docs-inline-code">STRING</span>  data, with basic wildcard capability using the underscore' + 
    '        (<span class="sql-docs-inline-code">_</span> ) to match a single character and the percent sign (<span class="sql-docs-inline-code">%</span> ) to match multiple' + 
    '        characters. The argument expression must match the entire string value.' + 
    '        Typically, it is more efficient to put any <span class="sql-docs-inline-code">%</span>  wildcard match at the end of the string.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">string_expression</span> LIKE <span class="sql-docs-variable">wildcard_expression</span> <span class="sql-docs-variable">string_expression</span> NOT LIKE <span class="sql-docs-variable">wildcard_expression</span> </div><p id="../Impala/docs/topics/impala_operators.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_caveat_no_operator">' + 
    '        You cannot refer to a column with a complex data type (<span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ' + 
    '        directly in an operator. You can apply operators only to scalar values that make up a complex type' + 
    '        (the fields of a <span class="sql-docs-inline-code">STRUCT</span> , the items of an <span class="sql-docs-inline-code">ARRAY</span> ,' + 
    '        or the key or value portion of a <span class="sql-docs-inline-code">MAP</span> ) as part of a join query that refers to' + 
    '        the scalar value using the appropriate dot notation or <span class="sql-docs-inline-code">ITEM</span> , <span class="sql-docs-inline-code">KEY</span> , or <span class="sql-docs-inline-code">VALUE</span> ' + 
    '        pseudocolumn names.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">select distinct c_last_name from customer where c_last_name like \'Mc%\' or c_last_name like \'Mac%\';<br/>select count(c_last_name) from customer where c_last_name like \'M%\';<br/>select c_email_address from customer where c_email_address like \'%.edu\';<br/><br/>-- We can find 4-letter names beginning with \'M\' by calling functions...<br/>select distinct c_last_name from customer where length(c_last_name) = 4 and substr(c_last_name,1,1) = \'M\';<br/>-- ...or in a more readable way by matching M followed by exactly 3 characters.<br/>select distinct c_last_name from customer where c_last_name like \'M___\';</div><p>' + 
    '        For case-insensitive comparisons, see <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_operators.xml#ilike"><h4>ILIKE Operator</h4> </a>.' + 
    '        For a more general kind of search operator using regular expressions, see <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_operators.xml#regexp"><h4>REGEXP Operator</h4> </a>' + 
    '        or its case-insensitive counterpart <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_operators.xml#iregexp"><h4>IREGEXP Operator</h4> </a>.' + 
    '      </p> </div> </div> <div id="../Impala/docs/topics/impala_operators.xml_logical_operators"><h4>Logical Operators</h4> <div><p>' + 
    '        Logical operators return a <span class="sql-docs-inline-code">BOOLEAN</span>  value, based on a binary or unary logical operation between arguments that are' + 
    '        also Booleans. Typically, the argument expressions use <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_operators.xml#comparison_operators">comparison' + 
    '        operators</a>.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">boolean_expression</span> <span class="sql-docs-variable">binary_logical_operator</span> <span class="sql-docs-variable">boolean_expression</span> <span class="sql-docs-variable">unary_logical_operator</span> <span class="sql-docs-variable">boolean_expression</span> </div><p>' + 
    '        The Impala logical operators are:' + 
    '      </p> <ul><li><span class="sql-docs-inline-code">AND</span> : A binary operator that returns <span class="sql-docs-inline-code">true</span>  if its left-hand and right-hand arguments both evaluate' + 
    '          to <span class="sql-docs-inline-code">true</span> , <span class="sql-docs-inline-code">NULL</span>  if either argument is <span class="sql-docs-inline-code">NULL</span> , and <span class="sql-docs-inline-code">false</span>  otherwise.' + 
    '        </li> <li><span class="sql-docs-inline-code">OR</span> : A binary operator that returns <span class="sql-docs-inline-code">true</span>  if either of its left-hand and right-hand arguments' + 
    '          evaluate to <span class="sql-docs-inline-code">true</span> , <span class="sql-docs-inline-code">NULL</span>  if one argument is <span class="sql-docs-inline-code">NULL</span>  and the other is either' + 
    '          <span class="sql-docs-inline-code">NULL</span>  or <span class="sql-docs-inline-code">false</span> , and <span class="sql-docs-inline-code">false</span>  otherwise.' + 
    '        </li> <li><span class="sql-docs-inline-code">NOT</span> : A unary operator that flips the state of a Boolean expression from <span class="sql-docs-inline-code">true</span>  to' + 
    '          <span class="sql-docs-inline-code">false</span> , or <span class="sql-docs-inline-code">false</span>  to <span class="sql-docs-inline-code">true</span> . If the argument expression is <span class="sql-docs-inline-code">NULL</span> ,' + 
    '          the result remains <span class="sql-docs-inline-code">NULL</span> . (When <span class="sql-docs-inline-code">NOT</span>  is used this way as a unary logical operator, it works' + 
    '          differently than the <span class="sql-docs-inline-code">IS NOT NULL</span>  comparison operator, which returns <span class="sql-docs-inline-code">true</span>  when applied to a' + 
    '          <span class="sql-docs-inline-code">NULL</span> .)' + 
    '        </li> </ul> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_caveat_no_operator">' + 
    '        You cannot refer to a column with a complex data type (<span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ' + 
    '        directly in an operator. You can apply operators only to scalar values that make up a complex type' + 
    '        (the fields of a <span class="sql-docs-inline-code">STRUCT</span> , the items of an <span class="sql-docs-inline-code">ARRAY</span> ,' + 
    '        or the key or value portion of a <span class="sql-docs-inline-code">MAP</span> ) as part of a join query that refers to' + 
    '        the scalar value using the appropriate dot notation or <span class="sql-docs-inline-code">ITEM</span> , <span class="sql-docs-inline-code">KEY</span> , or <span class="sql-docs-inline-code">VALUE</span> ' + 
    '        pseudocolumn names.' + 
    '      </p> <p>' + 
    '        The following example shows how to do an arithmetic operation using a numeric field of a <span class="sql-docs-inline-code">STRUCT</span>  type that is an' + 
    '        item within an <span class="sql-docs-inline-code">ARRAY</span>  column. Once the scalar numeric value <span class="sql-docs-inline-code">R_NATIONKEY</span>  is extracted, it can be' + 
    '        used in an arithmetic expression, such as multiplying by 10:' + 
    '      </p> <div class="sql-docs-code-block">-- The SMALLINT is a field within an array of structs.<br/>describe region;<br/>+-------------+-------------------------+---------+<br/>| name        | type                    | comment |<br/>+-------------+-------------------------+---------+<br/>| r_regionkey | smallint                |         |<br/>| r_name      | string                  |         |<br/>| r_comment   | string                  |         |<br/>| r_nations   | array<struct<           |         |<br/>|             |   n_nationkey:smallint, |         |<br/>|             |   n_name:string,        |         |<br/>|             |   n_comment:string      |         |<br/>|             | >>                      |         |<br/>+-------------+-------------------------+---------+<br/><br/>-- When we refer to the scalar value using dot notation,<br/>-- we can use arithmetic and comparison operators on it<br/>-- like any other number.<br/>select r_name, nation.item.n_name, nation.item.n_nationkey<br/>  from region, region.r_nations as nation<br/>where<br/>  nation.item.n_nationkey between 3 and 5<br/>  or nation.item.n_nationkey < 15;<br/>+-------------+----------------+------------------+<br/>| r_name      | item.n_name    | item.n_nationkey |<br/>+-------------+----------------+------------------+<br/>| EUROPE      | UNITED KINGDOM | 23               |<br/>| EUROPE      | RUSSIA         | 22               |<br/>| EUROPE      | ROMANIA        | 19               |<br/>| ASIA        | VIETNAM        | 21               |<br/>| ASIA        | CHINA          | 18               |<br/>| AMERICA     | UNITED STATES  | 24               |<br/>| AMERICA     | PERU           | 17               |<br/>| AMERICA     | CANADA         | 3                |<br/>| MIDDLE EAST | SAUDI ARABIA   | 20               |<br/>| MIDDLE EAST | EGYPT          | 4                |<br/>| AFRICA      | MOZAMBIQUE     | 16               |<br/>| AFRICA      | ETHIOPIA       | 5                |<br/>+-------------+----------------+------------------+<br/></div><p id="../Impala/docs/topics/impala_operators.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
    '        These examples demonstrate the <span class="sql-docs-inline-code">AND</span>  operator:' + 
    '      </p> <div class="sql-docs-code-block">[localhost:21000] > select true and true;<br/>+---------------+<br/>| true and true |<br/>+---------------+<br/>| true          |<br/>+---------------+<br/>[localhost:21000] > select true and false;<br/>+----------------+<br/>| true and false |<br/>+----------------+<br/>| false          |<br/>+----------------+<br/>[localhost:21000] > select false and false;<br/>+-----------------+<br/>| false and false |<br/>+-----------------+<br/>| false           |<br/>+-----------------+<br/>[localhost:21000] > select true and null;<br/>+---------------+<br/>| true and null |<br/>+---------------+<br/>| NULL          |<br/>+---------------+<br/>[localhost:21000] > select (10 > 2) and (6 != 9);<br/>+-----------------------+<br/>| (10 > 2) and (6 != 9) |<br/>+-----------------------+<br/>| true                  |<br/>+-----------------------+<br/></div><p>' + 
    '        These examples demonstrate the <span class="sql-docs-inline-code">OR</span>  operator:' + 
    '      </p> <div class="sql-docs-code-block">[localhost:21000] > select true or true;<br/>+--------------+<br/>| true or true |<br/>+--------------+<br/>| true         |<br/>+--------------+<br/>[localhost:21000] > select true or false;<br/>+---------------+<br/>| true or false |<br/>+---------------+<br/>| true          |<br/>+---------------+<br/>[localhost:21000] > select false or false;<br/>+----------------+<br/>| false or false |<br/>+----------------+<br/>| false          |<br/>+----------------+<br/>[localhost:21000] > select true or null;<br/>+--------------+<br/>| true or null |<br/>+--------------+<br/>| true         |<br/>+--------------+<br/>[localhost:21000] > select null or true;<br/>+--------------+<br/>| null or true |<br/>+--------------+<br/>| true         |<br/>+--------------+<br/>[localhost:21000] > select false or null;<br/>+---------------+<br/>| false or null |<br/>+---------------+<br/>| NULL          |<br/>+---------------+<br/>[localhost:21000] > select (1 = 1) or (\'hello\' = \'world\');<br/>+--------------------------------+<br/>| (1 = 1) or (\'hello\' = \'world\') |<br/>+--------------------------------+<br/>| true                           |<br/>+--------------------------------+<br/>[localhost:21000] > select (2 + 2 != 4) or (-1 > 0);<br/>+--------------------------+<br/>| (2 + 2 != 4) or (-1 > 0) |<br/>+--------------------------+<br/>| false                    |<br/>+--------------------------+<br/></div><p>' + 
    '        These examples demonstrate the <span class="sql-docs-inline-code">NOT</span>  operator:' + 
    '      </p> <div class="sql-docs-code-block">[localhost:21000] > select not true;<br/>+----------+<br/>| not true |<br/>+----------+<br/>| false    |<br/>+----------+<br/>[localhost:21000] > select not false;<br/>+-----------+<br/>| not false |<br/>+-----------+<br/>| true      |<br/>+-----------+<br/>[localhost:21000] > select not null;<br/>+----------+<br/>| not null |<br/>+----------+<br/>| NULL     |<br/>+----------+<br/>[localhost:21000] > select not (1=1);<br/>+-------------+<br/>| not (1 = 1) |<br/>+-------------+<br/>| false       |<br/>+-------------+<br/></div></div> </div> <div id="../Impala/docs/topics/impala_operators.xml_regexp"><h4>REGEXP Operator</h4> <div><p>' + 
    '        Tests whether a value matches a regular expression. Uses the POSIX regular expression syntax where <span class="sql-docs-inline-code">^</span>  and' + 
    '        <span class="sql-docs-inline-code">$</span>  match the beginning and end of the string, <span class="sql-docs-inline-code">.</span>  represents any single character, <span class="sql-docs-inline-code">*</span> ' + 
    '        represents a sequence of zero or more items, <span class="sql-docs-inline-code">+</span>  represents a sequence of one or more items, <span class="sql-docs-inline-code">?</span> ' + 
    '        produces a non-greedy match, and so on.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">string_expression</span> REGEXP <span class="sql-docs-variable">regular_expression</span> </div><p id="../Impala/docs/topics/impala_operators.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
    '        The <span class="sql-docs-inline-code">RLIKE</span>  operator is a synonym for <span class="sql-docs-inline-code">REGEXP</span> .' + 
    '      </p> <p>' + 
    '        The <span class="sql-docs-inline-code">|</span>  symbol is the alternation operator, typically used within <span class="sql-docs-inline-code">()</span>  to match different sequences.' + 
    '        The <span class="sql-docs-inline-code">()</span>  groups do not allow backreferences. To retrieve the part of a value matched within a <span class="sql-docs-inline-code">()</span> ' + 
    '        section, use the <span class="sql-docs-inline-code"><span>regexp_extract()</span></span> ' + 
    '        built-in function.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_regexp_matching">' + 
    '        In Impala 1.3.1 and higher, the <span class="sql-docs-inline-code">REGEXP</span>  and <span class="sql-docs-inline-code">RLIKE</span>  operators now match a' + 
    '        regular expression string that occurs anywhere inside the target string, the same as if the regular' + 
    '        expression was enclosed on each side by <span class="sql-docs-inline-code">.*</span> . See' + 
    '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_operators.xml#regexp"><h4>REGEXP Operator</h4> </a> for examples. Previously, these operators only' + 
    '        succeeded when the regular expression matched the entire target string. This change improves compatibility' + 
    '        with the regular expression support for popular database systems. There is no change to the behavior of the' + 
    '        <span class="sql-docs-inline-code">regexp_extract()</span>  and <span class="sql-docs-inline-code">regexp_replace()</span>  built-in functions.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_regexp_re2">' + 
    '        In Impala 2.0 and later, the Impala regular expression syntax conforms to the POSIX Extended Regular' + 
    '        Expression syntax used by the Google RE2 library. For details, see' + 
    '        <a target="_blank" href="https://code.google.com/p/re2/">the RE2 documentation</a>. It' + 
    '        has most idioms familiar from regular expressions in Perl, Python, and so on, including' + 
    '        <span class="sql-docs-inline-code">.*?</span>  for non-greedy matches.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_regexp_re2_warning">' + 
    '        In Impala 2.0 and later, a change in the underlying regular expression library could cause changes in the' + 
    '        way regular expressions are interpreted by this function. Test any queries that use regular expressions and' + 
    '        adjust the expression patterns if necessary. See' + 
    '        <span>incompatible changes 200</span> for details.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p id="../Impala/docs/topics/impala_operators.xml_complex_types_caveat_no_operator">' + 
    '        You cannot refer to a column with a complex data type (<span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ' + 
    '        directly in an operator. You can apply operators only to scalar values that make up a complex type' + 
    '        (the fields of a <span class="sql-docs-inline-code">STRUCT</span> , the items of an <span class="sql-docs-inline-code">ARRAY</span> ,' + 
    '        or the key or value portion of a <span class="sql-docs-inline-code">MAP</span> ) as part of a join query that refers to' + 
    '        the scalar value using the appropriate dot notation or <span class="sql-docs-inline-code">ITEM</span> , <span class="sql-docs-inline-code">KEY</span> , or <span class="sql-docs-inline-code">VALUE</span> ' + 
    '        pseudocolumn names.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
    '        The following examples demonstrate the identical syntax for the <span class="sql-docs-inline-code">REGEXP</span>  and <span class="sql-docs-inline-code">RLIKE</span>  operators.' + 
    '      </p> <div id="../Impala/docs/topics/impala_operators.xml_regexp_rlike_examples" class="sql-docs-code-block">-- Find all customers whose first name starts with \'J\', followed by 0 or more of any character.<br/>select c_first_name, c_last_name from customer where c_first_name regexp \'^J.*\';<br/>select c_first_name, c_last_name from customer where c_first_name rlike \'^J.*\';<br/><br/>-- Find \'Macdonald\', where the first \'a\' is optional and the \'D\' can be upper- or lowercase.<br/>-- The ^...$ are required, to match the start and end of the value.<br/>select c_first_name, c_last_name from customer where c_last_name regexp \'^Ma?c[Dd]onald$\';<br/>select c_first_name, c_last_name from customer where c_last_name rlike \'^Ma?c[Dd]onald$\';<br/><br/>-- Match multiple character sequences, either \'Mac\' or \'Mc\'.<br/>select c_first_name, c_last_name from customer where c_last_name regexp \'^(Mac|Mc)donald$\';<br/>select c_first_name, c_last_name from customer where c_last_name rlike \'^(Mac|Mc)donald$\';<br/><br/>-- Find names starting with \'S\', then one or more vowels, then \'r\', then any other characters.<br/>-- Matches \'Searcy\', \'Sorenson\', \'Sauer\'.<br/>select c_first_name, c_last_name from customer where c_last_name regexp \'^S[aeiou]+r.*$\';<br/>select c_first_name, c_last_name from customer where c_last_name rlike \'^S[aeiou]+r.*$\';<br/><br/>-- Find names that end with 2 or more vowels: letters from the set a,e,i,o,u.<br/>select c_first_name, c_last_name from customer where c_last_name regexp \'.*[aeiou]{2,}$\';<br/>select c_first_name, c_last_name from customer where c_last_name rlike \'.*[aeiou]{2,}$\';<br/><br/>-- You can use letter ranges in the [] blocks, for example to find names starting with A, B, or C.<br/>select c_first_name, c_last_name from customer where c_last_name regexp \'^[A-C].*\';<br/>select c_first_name, c_last_name from customer where c_last_name rlike \'^[A-C].*\';<br/><br/>-- If you are not sure about case, leading/trailing spaces, and so on, you can process the<br/>-- column using string functions first.<br/>select c_first_name, c_last_name from customer where lower(trim(c_last_name)) regexp \'^de.*\';<br/>select c_first_name, c_last_name from customer where lower(trim(c_last_name)) rlike \'^de.*\';<br/></div><p id="../Impala/docs/topics/impala_operators.xml_related_info"><b>Related information:</b> </p> <p>' + 
    '        For regular expression matching with case-insensitive comparisons, see <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_operators.xml#iregexp"><h4>IREGEXP Operator</h4> </a>.' + 
    '      </p> </div> </div> <div id="../Impala/docs/topics/impala_operators.xml_rlike"><h4>RLIKE Operator</h4> <div><p>' + 
    '        Synonym for the <span class="sql-docs-inline-code">REGEXP</span>  operator. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_operators.xml#regexp"><h4>REGEXP Operator</h4> </a> for details.' + 
    '      </p> <p id="../Impala/docs/topics/impala_operators.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
    '        The following examples demonstrate the identical syntax for the <span class="sql-docs-inline-code">REGEXP</span>  and <span class="sql-docs-inline-code">RLIKE</span>  operators.' + 
    '      </p> <div id="../Impala/docs/topics/impala_operators.xml_regexp_rlike_examples" class="sql-docs-code-block">-- Find all customers whose first name starts with \'J\', followed by 0 or more of any character.<br/>select c_first_name, c_last_name from customer where c_first_name regexp \'^J.*\';<br/>select c_first_name, c_last_name from customer where c_first_name rlike \'^J.*\';<br/><br/>-- Find \'Macdonald\', where the first \'a\' is optional and the \'D\' can be upper- or lowercase.<br/>-- The ^...$ are required, to match the start and end of the value.<br/>select c_first_name, c_last_name from customer where c_last_name regexp \'^Ma?c[Dd]onald$\';<br/>select c_first_name, c_last_name from customer where c_last_name rlike \'^Ma?c[Dd]onald$\';<br/><br/>-- Match multiple character sequences, either \'Mac\' or \'Mc\'.<br/>select c_first_name, c_last_name from customer where c_last_name regexp \'^(Mac|Mc)donald$\';<br/>select c_first_name, c_last_name from customer where c_last_name rlike \'^(Mac|Mc)donald$\';<br/><br/>-- Find names starting with \'S\', then one or more vowels, then \'r\', then any other characters.<br/>-- Matches \'Searcy\', \'Sorenson\', \'Sauer\'.<br/>select c_first_name, c_last_name from customer where c_last_name regexp \'^S[aeiou]+r.*$\';<br/>select c_first_name, c_last_name from customer where c_last_name rlike \'^S[aeiou]+r.*$\';<br/><br/>-- Find names that end with 2 or more vowels: letters from the set a,e,i,o,u.<br/>select c_first_name, c_last_name from customer where c_last_name regexp \'.*[aeiou]{2,}$\';<br/>select c_first_name, c_last_name from customer where c_last_name rlike \'.*[aeiou]{2,}$\';<br/><br/>-- You can use letter ranges in the [] blocks, for example to find names starting with A, B, or C.<br/>select c_first_name, c_last_name from customer where c_last_name regexp \'^[A-C].*\';<br/>select c_first_name, c_last_name from customer where c_last_name rlike \'^[A-C].*\';<br/><br/>-- If you are not sure about case, leading/trailing spaces, and so on, you can process the<br/>-- column using string functions first.<br/>select c_first_name, c_last_name from customer where lower(trim(c_last_name)) regexp \'^de.*\';<br/>select c_first_name, c_last_name from customer where lower(trim(c_last_name)) rlike \'^de.*\';<br/></div></div> </div> ',
  children: []
},
{
  id: 'topics/impala_schema_objects.xml',
  title: 'Impala Schema Objects and Object Names',
  weight: 1,
  bodyMatch: ko.observable(),
  open: ko.observable(false),
  titleMatch: ko.observable(),
  body: '<div><p>' + 
    '      With Impala, you work with schema objects that are familiar to database users: primarily databases, tables, views,' + 
    '      and functions. The SQL syntax to work with these objects is explained in' + 
    '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_langref_sql.xml#langref_sql">Impala SQL Statements</a>. This section explains the conceptual knowledge you need to' + 
    '      work with these objects and the various ways to specify their names.' + 
    '    </p> <p>' + 
    '      Within a table, partitions can also be considered a kind of object. Partitioning is an important subject for' + 
    '      Impala, with its own documentation section covering use cases and performance considerations. See' + 
    '      <span>partitioning</span> for details.' + 
    '    </p> <p>' + 
    '      Impala does not have a counterpart of the <q>tablespace</q>  notion from some database systems. By default,' + 
    '      all the data files for a database, table, or partition are located within nested folders within the HDFS file' + 
    '      system. You can also specify a particular HDFS location for a given Impala table or partition. The raw data' + 
    '      for these objects is represented as a collection of data files, providing the flexibility to load data by' + 
    '      simply moving files into the expected HDFS location.' + 
    '    </p> <p>' + 
    '      Information about the schema objects is held in the' + 
    '      <span>metastore</span> database. This database is shared between' + 
    '      Impala and Hive, allowing each to create, drop, and query each other\'s databases, tables, and so on. When' + 
    '      Impala makes a change to schema objects through a <span class="sql-docs-inline-code">CREATE</span> , <span class="sql-docs-inline-code">ALTER</span> ,' + 
    '      <span class="sql-docs-inline-code">DROP</span> , <span class="sql-docs-inline-code">INSERT</span> , or <span class="sql-docs-inline-code">LOAD DATA</span>  statement, it broadcasts those' + 
    '      changes to all nodes in the cluster through the <span>catalog' + 
    '      service</span>. When you make such changes through Hive or directly through manipulating HDFS files, you use' + 
    '      the <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_refresh.xml#refresh">REFRESH</a> or' + 
    '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_invalidate_metadata.xml#invalidate_metadata">INVALIDATE METADATA</a> statements on the' + 
    '      Impala side to recognize the newly loaded data, new tables, and so on.' + 
    '    </p> </div> ',
  children: [
  {
    id: 'topics/impala_aliases.xml',
    title: 'Overview of Impala Aliases',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      When you write the names of tables, columns, or column expressions in a query, you can assign an alias at the' + 
      '      same time. Then you can specify the alias rather than the original name when making other references to the' + 
      '      table or column in the same statement. You typically specify aliases that are shorter, easier to remember, or' + 
      '      both than the original names. The aliases are printed in the query header, making them useful for' + 
      '      self-documenting output.' + 
      '    </p> <p>' + 
      '      To set up an alias, add the <span class="sql-docs-inline-code">AS <span class="sql-docs-variable">alias</span> </span>  clause immediately after any table,' + 
      '      column, or expression name in the <span class="sql-docs-inline-code">SELECT</span>  list or <span class="sql-docs-inline-code">FROM</span>  list of a query. The' + 
      '      <span class="sql-docs-inline-code">AS</span>  keyword is optional; you can also specify the alias immediately after the original name.' + 
      '    </p> <div class="sql-docs-code-block">-- Make the column headers of the result set easier to understand.<br/>SELECT c1 AS name, c2 AS address, c3 AS phone FROM table_with_terse_columns;<br/>SELECT SUM(ss_xyz_dollars_net) AS total_sales FROM table_with_cryptic_columns;<br/>-- The alias can be a quoted string for extra readability.<br/>SELECT c1 AS "Employee ID", c2 AS "Date of hire" FROM t1;<br/>-- The AS keyword is optional.<br/>SELECT c1 "Employee ID", c2 "Date of hire" FROM t1;<br/><br/>-- The table aliases assigned in the FROM clause can be used both earlier<br/>-- in the query (the SELECT list) and later (the WHERE clause).<br/>SELECT one.name, two.address, three.phone<br/>  FROM census one, building_directory two, phonebook three<br/>WHERE one.id = two.id and two.id = three.id;<br/><br/>-- The aliases c1 and c2 let the query handle columns with the same names from 2 joined tables.<br/>-- The aliases t1 and t2 let the query abbreviate references to long or cryptically named tables.<br/>SELECT t1.column_n AS c1, t2.column_n AS c2 FROM long_name_table AS t1, very_long_name_table2 AS t2<br/>  WHERE c1 = c2;<br/>SELECT t1.column_n c1, t2.column_n c2 FROM table1 t1, table2 t2<br/>  WHERE c1 = c2;<br/></div><p>' + 
      '      To use an alias name that matches one of the Impala reserved keywords (listed in' + 
      '      <span>reserved words</span>), surround the identifier with either single or' + 
      '      double quotation marks, or <span class="sql-docs-inline-code">``</span>  characters (backticks).' + 
      '    </p> <p><span id="../Impala/docs/topics/impala_aliases.xml_aliases_vs_identifiers" class="sql-docs-inline-code"> Aliases follow the same rules as identifiers when it comes to case' + 
      '        insensitivity. Aliases can be longer than identifiers (up to the maximum length of a Java string) and can' + 
      '        include additional characters such as spaces and dashes when they are quoted using backtick characters.' + 
      '        </span> </p> <p id="../Impala/docs/topics/impala_aliases.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p>' + 
      '      Queries involving the complex types (<span class="sql-docs-inline-code">ARRAY</span> ,' + 
      '      <span class="sql-docs-inline-code">STRUCT</span> , and <span class="sql-docs-inline-code">MAP</span> ), typically make' + 
      '      extensive use of table aliases. These queries involve join clauses' + 
      '      where the complex type column is treated as a joined table.' + 
      '      To construct two-part or three-part qualified names for the' + 
      '      complex column elements in the <span class="sql-docs-inline-code">FROM</span>  list,' + 
      '      sometimes it is syntactically required to construct a table' + 
      '      alias for the complex column where it is referenced in the join clause.' + 
      '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a> for details and examples.' + 
      '    </p> <p><b>Alternatives:</b> </p> <p id="../Impala/docs/topics/impala_aliases.xml_views_vs_identifiers">' + 
      '        Another way to define different names for the same tables or columns is to create views. See' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_views.xml#views">Overview of Impala Views</a> for details.' + 
      '      </p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_databases.xml',
    title: 'Overview of Impala Databases',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      In Impala, a database is a logical container for a group of tables. Each database defines a separate' + 
      '      namespace. Within a database, you can refer to the tables inside it using their unqualified names. Different' + 
      '      databases can contain tables with identical names.' + 
      '    </p> <p>' + 
      '      Creating a database is a lightweight operation. There are minimal database-specific properties to configure,' + 
      '      only <span class="sql-docs-inline-code">LOCATION</span>  and <span class="sql-docs-inline-code">COMMENT</span> .  There is no <span class="sql-docs-inline-code">ALTER DATABASE</span>  statement.' + 
      '    </p> <p>' + 
      '      Typically, you create a separate database for each project or application, to avoid naming conflicts between' + 
      '      tables and to make clear which tables are related to each other. The <span class="sql-docs-inline-code">USE</span>  statement lets' + 
      '      you switch between databases. Unqualified references to tables, views, and functions refer to objects' + 
      '      within the current database. You can also refer to objects in other databases by using qualified names' + 
      '      of the form <span class="sql-docs-inline-code"><span class="sql-docs-variable">dbname</span> .<span class="sql-docs-variable">object_name</span> </span> .' + 
      '    </p> <p>' + 
      '      Each database is physically represented by a directory in HDFS. When you do not specify a <span class="sql-docs-inline-code">LOCATION</span> ' + 
      '      attribute, the directory is located in the Impala data directory with the associated tables managed by Impala.' + 
      '      When you do specify a <span class="sql-docs-inline-code">LOCATION</span>  attribute, any read and write operations for tables in that' + 
      '      database are relative to the specified HDFS directory.' + 
      '    </p> <p>' + 
      '      There is a special database, named <span class="sql-docs-inline-code">default</span> , where you begin when you connect to Impala.' + 
      '      Tables created in <span class="sql-docs-inline-code">default</span>  are physically located one level higher in HDFS than all the' + 
      '      user-created databases.' + 
      '    </p> <p id="../Impala/docs/topics/impala_databases.xml_builtins_db">' + 
      '        Impala includes another predefined database, <span class="sql-docs-inline-code">_impala_builtins</span> , that serves as the location' + 
      '        for the <span>built-in functions</span>. To see the built-in' + 
      '        functions, use a statement like the following:' + 
      '<div class="sql-docs-code-block">show functions in _impala_builtins;<br/>show functions in _impala_builtins like \'*<span class="sql-docs-variable">substring</span> *\';<br/></div></p> <p><b>Related statements:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_database.xml#create_database">CREATE DATABASE Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_database.xml#drop_database">DROP DATABASE Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_use.xml#use">USE Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_databases"><h4>SHOW DATABASES</h4> </a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_functions_overview.xml',
    title: 'Overview of Impala Functions',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Functions let you apply arithmetic, string, or other computations and transformations to Impala data. You' + 
      '      typically use them in <span class="sql-docs-inline-code">SELECT</span>  lists and <span class="sql-docs-inline-code">WHERE</span>  clauses to filter and format' + 
      '      query results so that the result set is exactly what you want, with no further processing needed on the' + 
      '      application side.' + 
      '    </p> <p>' + 
      '      Scalar functions return a single result for each input row. See <span>builtins</span>.' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > select name, population from country where continent = \'North America\' order by population desc limit 4;<br/>[localhost:21000] > select upper(name), population from country where continent = \'North America\' order by population desc limit 4;<br/>+-------------+------------+<br/>| upper(name) | population |<br/>+-------------+------------+<br/>| USA         | 320000000  |<br/>| MEXICO      | 122000000  |<br/>| CANADA      | 25000000   |<br/>| GUATEMALA   | 16000000   |<br/>+-------------+------------+<br/></div><p>' + 
      '      Aggregate functions combine the results from multiple rows:' + 
      '      either a single result for the entire table, or a separate result for each group of rows.' + 
      '      Aggregate functions are frequently used in combination with <span class="sql-docs-inline-code">GROUP BY</span> ' + 
      '      and <span class="sql-docs-inline-code">HAVING</span>  clauses in the <span class="sql-docs-inline-code">SELECT</span>  statement.' + 
      '      See <span>aggregate functions</span>.' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > select continent, <b>sum(population)</b> as howmany from country <b>group by continent</b> order by howmany desc;<br/>+---------------+------------+<br/>| continent     | howmany    |<br/>+---------------+------------+<br/>| Asia          | 4298723000 |<br/>| Africa        | 1110635000 |<br/>| Europe        | 742452000  |<br/>| North America | 565265000  |<br/>| South America | 406740000  |<br/>| Oceania       | 38304000   |<br/>+---------------+------------+<br/></div><p>' + 
      '      User-defined functions (UDFs) let you code your own logic.  They can be either scalar or aggregate functions.' + 
      '      UDFs let you implement important business or scientific logic using high-performance code for Impala to automatically parallelize.' + 
      '      You can also use UDFs to implement convenience functions to simplify reporting or porting SQL from other database systems.' + 
      '      See <span>udfs</span>.' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > select <b>rot13(\'Hello world!\')</b> as \'Weak obfuscation\';<br/>+------------------+<br/>| weak obfuscation |<br/>+------------------+<br/>| Uryyb jbeyq!     |<br/>+------------------+<br/>[localhost:21000] > select <b>likelihood_of_new_subatomic_particle(sensor1, sensor2, sensor3)</b> as probability<br/>                  > from experimental_results group by experiment;<br/></div><p>' + 
      '      Each function is associated with a specific database. For example, if you issue a <span class="sql-docs-inline-code">USE somedb</span> ' + 
      '      statement followed by <span class="sql-docs-inline-code">CREATE FUNCTION somefunc</span> , the new function is created in the' + 
      '      <span class="sql-docs-inline-code">somedb</span>  database, and you could refer to it through the fully qualified name' + 
      '      <span class="sql-docs-inline-code">somedb.somefunc</span> . You could then issue another <span class="sql-docs-inline-code">USE</span>  statement' + 
      '      and create a function with the same name in a different database.' + 
      '    </p> <p>' + 
      '      Impala built-in functions are associated with a special database named <span class="sql-docs-inline-code">_impala_builtins</span> ,' + 
      '      which lets you refer to them from any database without qualifying the name.' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > show databases;<br/>+-------------------------+<br/>| name                    |<br/>+-------------------------+<br/>| <b>_impala_builtins</b> |<br/>| analytic_functions      |<br/>| avro_testing            |<br/>| data_file_size          |<br/>...<br/>[localhost:21000] > show functions in _impala_builtins like \'*subs*\';<br/>+-------------+-----------------------------------+<br/>| return type | signature                         |<br/>+-------------+-----------------------------------+<br/>| STRING      | substr(STRING, BIGINT)            |<br/>| STRING      | substr(STRING, BIGINT, BIGINT)    |<br/>| STRING      | substring(STRING, BIGINT)         |<br/>| STRING      | substring(STRING, BIGINT, BIGINT) |<br/>+-------------+-----------------------------------+<br/></div><p><b>Related statements:</b> <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_function.xml#create_function">CREATE FUNCTION Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_function.xml#drop_function">DROP FUNCTION Statement</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_identifiers.xml',
    title: 'Overview of Impala Identifiers',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Identifiers are the names of databases, tables, or columns that you specify in a SQL statement. The rules for' + 
      '      identifiers govern what names you can give to things you create, the notation for referring to names' + 
      '      containing unusual characters, and other aspects such as case sensitivity.' + 
      '    </p> <ul><li><p>' + 
      '        The minimum length of an identifier is 1 character.' + 
      '        </p> </li> <li><p>' + 
      '        The maximum length of an identifier is currently 128 characters, enforced by the metastore database.' + 
      '        </p> </li> <li><p>' + 
      '        An identifier must start with an alphabetic character. The remainder can contain any combination of' + 
      '        alphanumeric characters and underscores. Quoting the identifier with backticks has no effect on the allowed' + 
      '        characters in the name.' + 
      '        </p> </li> <li><p>' + 
      '        An identifier can contain only ASCII characters.' + 
      '        </p> </li> <li><p>' + 
      '        To use an identifier name that matches one of the Impala reserved keywords (listed in' + 
      '        <span>reserved words</span>), surround the identifier with <span class="sql-docs-inline-code">``</span> ' + 
      '        characters (backticks). Quote the reserved word even if it is part of a fully qualified name.' + 
      '        The following example shows how a reserved word can be used as a column name if it is quoted' + 
      '        with backticks in the <span class="sql-docs-inline-code">CREATE TABLE</span>  statement, and how the column name' + 
      '        must also be quoted with backticks in a query:' + 
      '        </p> <div class="sql-docs-code-block">[localhost:21000] > create table reserved (`data` string);<br/><br/>[localhost:21000] > select data from reserved;<br/>ERROR: AnalysisException: Syntax error in line 1:<br/>select data from reserved<br/>       ^<br/>Encountered: DATA<br/>Expected: ALL, CASE, CAST, DISTINCT, EXISTS, FALSE, IF, INTERVAL, NOT, NULL, STRAIGHT_JOIN, TRUE, IDENTIFIER<br/>CAUSED BY: Exception: Syntax error<br/><br/>[localhost:21000] > select reserved.data from reserved;<br/>ERROR: AnalysisException: Syntax error in line 1:<br/>select reserved.data from reserved<br/>                ^<br/>Encountered: DATA<br/>Expected: IDENTIFIER<br/>CAUSED BY: Exception: Syntax error<br/><br/>[localhost:21000] > select reserved.`data` from reserved;<br/><br/>[localhost:21000] ><br/></div><div class="sql-docs-note">' + 
      '          Because the list of reserved words grows over time as new SQL syntax is added,' + 
      '          consider adopting coding conventions (especially for any automated scripts' + 
      '          or in packaged applications) to always quote all identifiers with backticks.' + 
      '          Quoting all identifiers protects your SQL from compatibility issues if' + 
      '          new reserved words are added in later releases.' + 
      '        </div> </li> <li><p>' + 
      '        Impala identifiers are always case-insensitive. That is, tables named <span class="sql-docs-inline-code">t1</span>  and' + 
      '        <span class="sql-docs-inline-code">T1</span>  always refer to the same table, regardless of quote characters. Internally, Impala' + 
      '        always folds all specified table and column names to lowercase. This is why the column headers in query' + 
      '        output are always displayed in lowercase.' + 
      '        </p> </li> </ul> <p>' + 
      '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_aliases.xml#aliases">Overview of Impala Aliases</a> for how to define shorter or easier-to-remember aliases if the' + 
      '      original names are long or cryptic identifiers.' + 
      '      <span id="../Impala/docs/topics/impala_identifiers.xml_aliases_vs_identifiers" class="sql-docs-inline-code"> Aliases follow the same rules as identifiers when it comes to case' + 
      '        insensitivity. Aliases can be longer than identifiers (up to the maximum length of a Java string) and can' + 
      '        include additional characters such as spaces and dashes when they are quoted using backtick characters.' + 
      '        </span> </p> <p id="../Impala/docs/topics/impala_identifiers.xml_views_vs_identifiers">' + 
      '        Another way to define different names for the same tables or columns is to create views. See' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_views.xml#views">Overview of Impala Views</a> for details.' + 
      '      </p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_tables.xml',
    title: 'Overview of Impala Tables',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Tables are the primary containers for data in Impala. They have the familiar row and column layout similar to' + 
      '      other database systems, plus some features such as partitioning often associated with higher-end data' + 
      '      warehouse systems.' + 
      '    </p> <p>' + 
      '      Logically, each table has a structure based on the definition of its columns, partitions, and other' + 
      '      properties.' + 
      '    </p> <p>' + 
      '      Physically, each table that uses HDFS storage is associated with a directory in HDFS. The table data consists of all the data files' + 
      '      underneath that directory:' + 
      '    </p> <ul><li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#internal_tables">Internal tables</a> are managed by Impala, and use directories' + 
      '        inside the designated Impala work area.' + 
      '      </li> <li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#external_tables">External tables</a> use arbitrary HDFS directories, where' + 
      '        the data files are typically shared between different Hadoop components.' + 
      '      </li> <li>' + 
      '        Large-scale data is usually handled by partitioned tables, where the data files are divided among different' + 
      '        HDFS subdirectories.' + 
      '      </li> </ul> <p>' + 
      '      Impala tables can also represent data that is stored in HBase, or in the Amazon S3 filesystem (Impala 2.2 or higher),' + 
      '      or on Isilon storage devices (Impala 2.2.3 or higher).  See <span>impala hbase</span>,' + 
      '      <span>s3</span>, and <span>impala isilon</span>' + 
      '      for details about those special kinds of tables.' + 
      '    </p> <p id="../Impala/docs/topics/impala_tables.xml_ignore_file_extensions">' + 
      '        Impala queries ignore files with extensions commonly used for temporary work files by Hadoop tools. Any' + 
      '        files with extensions <span class="sql-docs-inline-code">.tmp</span>  or <span class="sql-docs-inline-code">.copying</span>  are not considered part of the' + 
      '        Impala table. The suffix matching is case-insensitive, so for example Impala ignores both' + 
      '        <span class="sql-docs-inline-code">.copying</span>  and <span class="sql-docs-inline-code">.COPYING</span>  suffixes.' + 
      '      </p> <p><b>Related statements:</b> <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_table.xml#create_table">CREATE TABLE Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_table.xml#drop_table">DROP TABLE Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_alter_table.xml#alter_table">ALTER TABLE Statement</a><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_insert.xml#insert">INSERT Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_load_data.xml#load_data">LOAD DATA Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_select.xml#select">SELECT Statement</a></p> </div> <div id="../Impala/docs/topics/impala_tables.xml_internal_tables"><h4>Internal Tables</h4> <div><p>' + 
      '        The default kind of table produced by the <span class="sql-docs-inline-code">CREATE TABLE</span>  statement is known as an internal' + 
      '        table. (Its counterpart is the external table, produced by the <span class="sql-docs-inline-code">CREATE EXTERNAL TABLE</span> ' + 
      '        syntax.)' + 
      '      </p> <ul><li><p>' + 
      '            Impala creates a directory in HDFS to hold the data files.' + 
      '          </p> </li> <li><p>' + 
      '            You can create data in internal tables by issuing <span class="sql-docs-inline-code">INSERT</span>  or <span class="sql-docs-inline-code">LOAD DATA</span> ' + 
      '            statements.' + 
      '          </p> </li> <li><p>' + 
      '            If you add or replace data using HDFS operations, issue the <span class="sql-docs-inline-code">REFRESH</span>  command in' + 
      '            <span class="sql-docs-inline-code">impala-shell</span>  so that Impala recognizes the changes in data files, block locations,' + 
      '            and so on.' + 
      '          </p> </li> <li><p>' + 
      '            When you issue a <span class="sql-docs-inline-code">DROP TABLE</span>  statement, Impala physically removes all the data files' + 
      '            from the directory.' + 
      '          </p> </li> <li><p id="../Impala/docs/topics/impala_tables.xml_check_internal_external_table">' + 
      '        To see whether a table is internal or external, and its associated HDFS location, issue the statement' + 
      '        <span class="sql-docs-inline-code">DESCRIBE FORMATTED <span class="sql-docs-variable">table_name</span> </span> . The <span class="sql-docs-inline-code">Table Type</span>  field' + 
      '        displays <span class="sql-docs-inline-code">MANAGED_TABLE</span>  for internal tables and <span class="sql-docs-inline-code">EXTERNAL_TABLE</span>  for' + 
      '        external tables. The <span class="sql-docs-inline-code">Location</span>  field displays the path of the table directory as an HDFS' + 
      '        URI.' + 
      '      </p> </li> <li><p>' + 
      '            When you issue an <span class="sql-docs-inline-code">ALTER TABLE</span>  statement to rename an internal table, all data files' + 
      '            are moved into the new HDFS directory for the table. The files are moved even if they were formerly in' + 
      '            a directory outside the Impala data directory, for example in an internal table with a' + 
      '            <span class="sql-docs-inline-code">LOCATION</span>  attribute pointing to an outside HDFS directory.' + 
      '          </p> </li> </ul> <p id="../Impala/docs/topics/impala_tables.xml_example_blurb"><b>Examples:</b> </p> <p id="../Impala/docs/topics/impala_tables.xml_switch_internal_external_table">' + 
      '        You can switch a table from internal to external, or from external to internal, by using the <span class="sql-docs-inline-code">ALTER' + 
      '        TABLE</span>  statement:' + 
      '<div class="sql-docs-code-block">-- Switch a table from internal to external.<br/>ALTER TABLE <span class="sql-docs-variable">table_name</span> SET TBLPROPERTIES(\'EXTERNAL\'=\'TRUE\');<br/><br/>-- Switch a table from external to internal.<br/>ALTER TABLE <span class="sql-docs-variable">table_name</span> SET TBLPROPERTIES(\'EXTERNAL\'=\'FALSE\');<br/></div></p> <p id="../Impala/docs/topics/impala_tables.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#external_tables"><h4>External Tables</h4> </a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_table.xml#create_table">CREATE TABLE Statement</a>,' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_table.xml#drop_table">DROP TABLE Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_alter_table.xml#alter_table">ALTER TABLE Statement</a>,' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_describe.xml#describe">DESCRIBE Statement</a></p> </div> </div> <div id="../Impala/docs/topics/impala_tables.xml_external_tables"><h4>External Tables</h4> <div><p>' + 
      '        The syntax <span class="sql-docs-inline-code">CREATE EXTERNAL TABLE</span>  sets up an Impala table that points at existing data' + 
      '        files, potentially in HDFS locations outside the normal Impala data directories.. This operation saves the' + 
      '        expense of importing the data into a new table when you already have the data files in a known location in' + 
      '        HDFS, in the desired file format.' + 
      '      </p> <ul><li><p>' + 
      '            You can use Impala to query the data in this table.' + 
      '          </p> </li> <li><p>' + 
      '            You can create data in external tables by issuing <span class="sql-docs-inline-code">INSERT</span>  or <span class="sql-docs-inline-code">LOAD DATA</span> ' + 
      '            statements.' + 
      '          </p> </li> <li><p>' + 
      '            If you add or replace data using HDFS operations, issue the <span class="sql-docs-inline-code">REFRESH</span>  command in' + 
      '            <span class="sql-docs-inline-code">impala-shell</span>  so that Impala recognizes the changes in data files, block locations,' + 
      '            and so on.' + 
      '          </p> </li> <li><p>' + 
      '            When you issue a <span class="sql-docs-inline-code">DROP TABLE</span>  statement in Impala, that removes the connection that' + 
      '            Impala has with the associated data files, but does not physically remove the underlying data. You can' + 
      '            continue to use the data files with other Hadoop components and HDFS operations.' + 
      '          </p> </li> <li><p id="../Impala/docs/topics/impala_tables.xml_check_internal_external_table">' + 
      '        To see whether a table is internal or external, and its associated HDFS location, issue the statement' + 
      '        <span class="sql-docs-inline-code">DESCRIBE FORMATTED <span class="sql-docs-variable">table_name</span> </span> . The <span class="sql-docs-inline-code">Table Type</span>  field' + 
      '        displays <span class="sql-docs-inline-code">MANAGED_TABLE</span>  for internal tables and <span class="sql-docs-inline-code">EXTERNAL_TABLE</span>  for' + 
      '        external tables. The <span class="sql-docs-inline-code">Location</span>  field displays the path of the table directory as an HDFS' + 
      '        URI.' + 
      '      </p> </li> <li><p>' + 
      '            When you issue an <span class="sql-docs-inline-code">ALTER TABLE</span>  statement to rename an external table, all data files' + 
      '            are left in their original locations.' + 
      '          </p> </li> <li><p>' + 
      '            You can point multiple external tables at the same HDFS directory by using the same' + 
      '            <span class="sql-docs-inline-code">LOCATION</span>  attribute for each one. The tables could have different column definitions,' + 
      '            as long as the number and types of columns are compatible with the schema evolution considerations for' + 
      '            the underlying file type. For example, for text data files, one table might define a certain column as' + 
      '            a <span class="sql-docs-inline-code">STRING</span>  while another defines the same column as a <span class="sql-docs-inline-code">BIGINT</span> .' + 
      '          </p> </li> </ul> <p id="../Impala/docs/topics/impala_tables.xml_example_blurb"><b>Examples:</b> </p> <p id="../Impala/docs/topics/impala_tables.xml_switch_internal_external_table">' + 
      '        You can switch a table from internal to external, or from external to internal, by using the <span class="sql-docs-inline-code">ALTER' + 
      '        TABLE</span>  statement:' + 
      '<div class="sql-docs-code-block">-- Switch a table from internal to external.<br/>ALTER TABLE <span class="sql-docs-variable">table_name</span> SET TBLPROPERTIES(\'EXTERNAL\'=\'TRUE\');<br/><br/>-- Switch a table from external to internal.<br/>ALTER TABLE <span class="sql-docs-variable">table_name</span> SET TBLPROPERTIES(\'EXTERNAL\'=\'FALSE\');<br/></div></p> <p id="../Impala/docs/topics/impala_tables.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#internal_tables"><h4>Internal Tables</h4> </a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_table.xml#create_table">CREATE TABLE Statement</a>,' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_table.xml#drop_table">DROP TABLE Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_alter_table.xml#alter_table">ALTER TABLE Statement</a>,' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_describe.xml#describe">DESCRIBE Statement</a></p> </div> </div> <div id="../Impala/docs/topics/impala_tables.xml_table_file_formats"><h4>File Formats</h4> <div><p>' + 
      '        Each table has an associated file format, which determines how Impala interprets the' + 
      '        associated data files. See <span>file formats</span> for details.' + 
      '      </p> <p>' + 
      '        You set the file format during the <span class="sql-docs-inline-code">CREATE TABLE</span>  statement,' + 
      '        or change it later using the <span class="sql-docs-inline-code">ALTER TABLE</span>  statement.' + 
      '        Partitioned tables can have a different file format for individual partitions,' + 
      '        allowing you to change the file format used in your ETL process for new data' + 
      '        without going back and reconverting all the existing data in the same table.' + 
      '      </p> <p>' + 
      '        Any <span class="sql-docs-inline-code">INSERT</span>  statements produce new data files with the current file format of the table.' + 
      '        For existing data files, changing the file format of the table does not automatically do any data conversion.' + 
      '        You must use <span class="sql-docs-inline-code">TRUNCATE TABLE</span>  or <span class="sql-docs-inline-code">INSERT OVERWRITE</span>  to remove any previous data' + 
      '        files that use the old file format.' + 
      '        Then you use the <span class="sql-docs-inline-code">LOAD DATA</span>  statement, <span class="sql-docs-inline-code">INSERT ... SELECT</span> , or other mechanism' + 
      '        to put data files of the correct format into the table.' + 
      '      </p> <p>' + 
      '        The default file format, text, is the most flexible and easy to produce when you are just getting started with' + 
      '        Impala. The Parquet file format offers the highest query performance and uses compression to reduce storage' + 
      '        requirements; therefore, where practical, use Parquet for Impala tables with substantial amounts of data.' + 
      '        <span class="sql-docs-inline-code">Also, the complex types (<span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , and <span class="sql-docs-inline-code">MAP</span> )' + 
      '        available in Impala 2.3 and higher are currently only supported with the Parquet file type.</span> ' + 
      '        Based on your existing ETL workflow, you might use other file formats such as Avro, possibly doing a final' + 
      '        conversion step to Parquet to take advantage of its performance for analytic queries.' + 
      '      </p> </div> </div> <div id="../Impala/docs/topics/impala_tables.xml_kudu_tables"><h4>Kudu Tables</h4> <div><p>' + 
      '        Tables stored in Apache Kudu are treated specially, because Kudu manages its data independently of HDFS files.' + 
      '        Some information about the table is stored in the metastore database for use by Impala. Other table metadata is' + 
      '        managed internally by Kudu.' + 
      '      </p> <p>' + 
      '        When you create a Kudu table through Impala, it is assigned an internal Kudu table name of the form' + 
      '        <span class="sql-docs-inline-code">impala::<span class="sql-docs-variable">db_name</span> .<span class="sql-docs-variable">table_name</span> </span> . You can see the Kudu-assigned name' + 
      '        in the output of <span class="sql-docs-inline-code">DESCRIBE FORMATTED</span> , in the <span class="sql-docs-inline-code">kudu.table_name</span>  field of the table properties.' + 
      '        The Kudu-assigned name remains the same even if you use <span class="sql-docs-inline-code">ALTER TABLE</span>  to rename the Impala table' + 
      '        or move it to a different Impala database. If you issue the statement' + 
      '        <span class="sql-docs-inline-code">ALTER TABLE <span class="sql-docs-variable">impala_name</span>  SET TBLPROPERTIES(\'kudu.table_name\' = \'<span class="sql-docs-variable">different_kudu_table_name</span> \')</span> ,' + 
      '        the effect is different depending on whether the Impala table was created with a regular <span class="sql-docs-inline-code">CREATE TABLE</span> ' + 
      '        statement (that is, if it is an internal or managed table), or if it was created with a' + 
      '        <span class="sql-docs-inline-code">CREATE EXTERNAL TABLE</span>  statement (and therefore is an external table). Changing the <span class="sql-docs-inline-code">kudu.table_name</span> ' + 
      '        property of an internal table physically renames the underlying Kudu table to match the new name.' + 
      '        Changing the <span class="sql-docs-inline-code">kudu.table_name</span>  property of an external table switches which underlying Kudu table' + 
      '        the Impala table refers to; the underlying Kudu table must already exist.' + 
      '      </p> <p>' + 
      '        The following example shows what happens with both internal and external Kudu tables as the <span class="sql-docs-inline-code">kudu.table_name</span> ' + 
      '        property is changed. In practice, external tables are typically used to access underlying Kudu tables that were created' + 
      '        outside of Impala, that is, through the Kudu API.' + 
      '      </p> <div class="sql-docs-code-block">-- This is an internal table that we will create and then rename.<br/>create table old_name (id bigint primary key, s string)<br/>  partition by hash(id) partitions 2 stored as kudu;<br/><br/>-- Initially, the name OLD_NAME is the same on the Impala and Kudu sides.<br/>describe formatted old_name;<br/>...<br/>| Location:          | hdfs://host.example.com:8020/path/user.db/old_name<br/>| Table Type:        | MANAGED_TABLE         | NULL<br/>| Table Parameters:  | NULL                  | NULL<br/>|                    | DO_NOT_UPDATE_STATS   | true<br/>|                    | kudu.master_addresses | vd0342.example.com<br/>|                    | kudu.table_name       | impala::user.old_name<br/><br/>-- ALTER TABLE RENAME TO changes the Impala name but not the underlying Kudu name.<br/>alter table old_name rename to new_name;<br/><br/>describe formatted new_name;<br/>| Location:          | hdfs://host.example.com:8020/path/user.db/new_name<br/>| Table Type:        | MANAGED_TABLE         | NULL<br/>| Table Parameters:  | NULL                  | NULL<br/>|                    | DO_NOT_UPDATE_STATS   | true<br/>|                    | kudu.master_addresses | vd0342.example.com<br/>|                    | kudu.table_name       | impala::user.old_name<br/><br/>-- Setting TBLPROPERTIES changes the underlying Kudu name.<br/>alter table new_name<br/>  set tblproperties(\'kudu.table_name\' = \'impala::user.new_name\');<br/><br/>describe formatted new_name;<br/>| Location:          | hdfs://host.example.com:8020/path/user.db/new_name<br/>| Table Type:        | MANAGED_TABLE         | NULL<br/>| Table Parameters:  | NULL                  | NULL<br/>|                    | DO_NOT_UPDATE_STATS   | true<br/>|                    | kudu.master_addresses | vd0342.example.com<br/>|                    | kudu.table_name       | impala::user.new_name<br/><br/>-- Put some data in the table to demonstrate how external tables can map to<br/>-- different underlying Kudu tables.<br/>insert into new_name values (0, \'zero\'), (1, \'one\'), (2, \'two\');<br/><br/>-- This external table points to the same underlying Kudu table, NEW_NAME,<br/>-- as we created above. No need to declare columns or other table aspects.<br/>create external table kudu_table_alias stored as kudu<br/>  tblproperties(\'kudu.table_name\' = \'impala::user.new_name\');<br/><br/>-- The external table can fetch data from the NEW_NAME table that already<br/>-- existed and already had data.<br/>select * from kudu_table_alias limit 100;<br/>+----+------+<br/>| id | s    |<br/>+----+------+<br/>| 1  | one  |<br/>| 0  | zero |<br/>| 2  | two  |<br/>+----+------+<br/><br/>-- We cannot re-point the external table at a different underlying Kudu table<br/>-- unless that other underlying Kudu table already exists.<br/>alter table kudu_table_alias<br/>  set tblproperties(\'kudu.table_name\' = \'impala::user.yet_another_name\');<br/>ERROR:<br/>TableLoadingException: Error opening Kudu table \'impala::user.yet_another_name\',<br/>  Kudu error: The table does not exist: table_name: "impala::user.yet_another_name"<br/><br/>-- Once the underlying Kudu table exists, we can re-point the external table to it.<br/>create table yet_another_name (id bigint primary key, x int, y int, s string)<br/>  partition by hash(id) partitions 2 stored as kudu;<br/><br/>alter table kudu_table_alias<br/>  set tblproperties(\'kudu.table_name\' = \'impala::user.yet_another_name\');<br/><br/>-- Now no data is returned because this other table is empty.<br/>select * from kudu_table_alias limit 100;<br/><br/>-- The Impala table automatically recognizes the table schema of the new table,<br/>-- for example the extra X and Y columns not present in the original table.<br/>describe kudu_table_alias;<br/>+------+--------+---------+-------------+----------+...<br/>| name | type   | comment | primary_key | nullable |...<br/>+------+--------+---------+-------------+----------+...<br/>| id   | bigint |         | true        | false    |...<br/>| x    | int    |         | false       | true     |...<br/>| y    | int    |         | false       | true     |...<br/>| s    | string |         | false       | true     |...<br/>+------+--------+---------+-------------+----------+...<br/></div><p>' + 
      '        The <span class="sql-docs-inline-code">SHOW TABLE STATS</span>  output for a Kudu table shows Kudu-specific details about the layout of the table.' + 
      '        Instead of information about the number and sizes of files, the information is divided by the Kudu tablets.' + 
      '        For each tablet, the output includes the fields' + 
      '        <span class="sql-docs-inline-code"># Rows</span>  (although this number is not currently computed), <span class="sql-docs-inline-code">Start Key</span> , <span class="sql-docs-inline-code">Stop Key</span> , <span class="sql-docs-inline-code">Leader Replica</span> , and <span class="sql-docs-inline-code"># Replicas</span> .' + 
      '        The output of <span class="sql-docs-inline-code">SHOW COLUMN STATS</span> , illustrating the distribution of values within each column, is the same for Kudu tables' + 
      '        as for HDFS-backed tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_tables.xml_kudu_internal_external_tables">' + 
      '        The distinction between internal and external tables has some special' + 
      '        details for Kudu tables. Tables created entirely through Impala are' + 
      '        internal tables. The table name as represented within Kudu includes' + 
      '        notation such as an <span class="sql-docs-inline-code">impala::</span>  prefix and the Impala' + 
      '        database name. External Kudu tables are those created by a non-Impala' + 
      '        mechanism, such as a user application calling the Kudu APIs. For' + 
      '        these tables, the <span class="sql-docs-inline-code">CREATE EXTERNAL TABLE</span>  syntax lets' + 
      '        you establish a mapping from Impala to the existing Kudu table:' + 
      '<div class="sql-docs-code-block">CREATE EXTERNAL TABLE impala_name STORED AS KUDU<br/>  TBLPROPERTIES(\'kudu.table_name\' = \'original_kudu_name\');<br/></div>' + 
      '        External Kudu tables differ in one important way from other external' + 
      '        tables: adding or dropping a column or range partition changes the' + 
      '        data in the underlying Kudu table, in contrast to an HDFS-backed' + 
      '        external table where existing data files are left untouched.' + 
      '      </p> </div> </div> ',
    children: []
  },
  {
    id: 'topics/impala_views.xml',
    title: 'Overview of Impala Views',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Views are lightweight logical constructs that act as aliases for queries. You can specify a view name in a' + 
      '      query (a <span class="sql-docs-inline-code">SELECT</span>  statement or the <span class="sql-docs-inline-code">SELECT</span>  portion of an' + 
      '      <span class="sql-docs-inline-code">INSERT</span>  statement) where you would usually specify a table name.' + 
      '    </p> <p>' + 
      '      A view lets you:' + 
      '    </p> <ul><li>' + 
      '        Issue complicated queries with compact and simple syntax:' + 
      '<div class="sql-docs-code-block">-- Take a complicated reporting query, plug it into a CREATE VIEW statement...<br/>create view v1 as select c1, c2, avg(c3) from t1 group by c3 order by c1 desc limit 10;<br/>-- ... and now you can produce the report with 1 line of code.<br/>select * from v1;</div></li> <li>' + 
      '        Reduce maintenance, by avoiding the duplication of complicated queries across multiple applications in' + 
      '        multiple languages:' + 
      '<div class="sql-docs-code-block">create view v2 as select t1.c1, t1.c2, t2.c3 from t1 join t2 on (t1.id = t2.id);<br/>-- This simple query is safer to embed in reporting applications than the longer query above.<br/>-- The view definition can remain stable even if the structure of the underlying tables changes.<br/>select c1, c2, c3 from v2;</div></li> <li>' + 
      '        Build a new, more refined query on top of the original query by adding new clauses, select-list' + 
      '        expressions, function calls, and so on:' + 
      '<div class="sql-docs-code-block">create view average_price_by_category as select category, avg(price) as avg_price from products group by category;<br/>create view expensive_categories as select category, avg_price from average_price_by_category order by avg_price desc limit 10000;<br/>create view top_10_expensive_categories as select category, avg_price from expensive_categories limit 10;</div>' + 
      '        This technique lets you build up several more or less granular variations of the same query, and switch' + 
      '        between them when appropriate.' + 
      '</li> <li>' + 
      '        Set up aliases with intuitive names for tables, columns, result sets from joins, and so on:' + 
      '<div class="sql-docs-code-block">-- The original tables might have cryptic names inherited from a legacy system.<br/>create view action_items as select rrptsk as assignee, treq as due_date, dmisc as notes from vxy_t1_br;<br/>-- You can leave original names for compatibility, build new applications using more intuitive ones.<br/>select assignee, due_date, notes from action_items;</div></li> <li>' + 
      '        Swap tables with others that use different file formats, partitioning schemes, and so on without any' + 
      '        downtime for data copying or conversion:' + 
      '<div class="sql-docs-code-block">create table slow (x int, s string) stored as textfile;<br/>create view report as select s from slow where x between 20 and 30;<br/>-- Query is kind of slow due to inefficient table definition, but it works.<br/>select * from report;<br/><br/>create table fast (s string) partitioned by (x int) stored as parquet;<br/>-- ...Copy data from SLOW to FAST. Queries against REPORT view continue to work...<br/><br/>-- After changing the view definition, queries will be faster due to partitioning,<br/>-- binary format, and compression in the new table.<br/>alter view report as select s from fast where x between 20 and 30;<br/>select * from report;</div></li> <li>' + 
      '        Avoid coding lengthy subqueries and repeating the same subquery text in many other queries.' + 
      '      </li> <li>' + 
      '        Set up fine-grained security where a user can query some columns from a table but not other columns.' + 
      '        Because Impala 2.3 and higher support column-level authorization, this technique is no longer' + 
      '        required. If you formerly implemented column-level security through views, see' + 
      '         for details about the column-level authorization feature.' + 
      '      </li> </ul> <p>' + 
      '      The SQL statements that configure views are <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_view.xml#create_view">CREATE VIEW Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_alter_view.xml#alter_view">ALTER VIEW Statement</a>, and <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_view.xml#drop_view">DROP VIEW Statement</a>. You can' + 
      '      specify view names when querying data (<a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_select.xml#select">SELECT Statement</a>) and copying data from one' + 
      '      table to another (<a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_insert.xml#insert">INSERT Statement</a>). The <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_with.xml#with">WITH</a>' + 
      '      clause creates an inline view, that only exists for the duration of a single query.' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > create view trivial as select * from customer;<br/>[localhost:21000] > create view some_columns as select c_first_name, c_last_name, c_login from customer;<br/>[localhost:21000] > select * from some_columns limit 5;<br/>Query finished, fetching results ...<br/>+--------------+-------------+---------+<br/>| c_first_name | c_last_name | c_login |<br/>+--------------+-------------+---------+<br/>| Javier       | Lewis       |         |<br/>| Amy          | Moses       |         |<br/>| Latisha      | Hamilton    |         |<br/>| Michael      | White       |         |<br/>| Robert       | Moran       |         |<br/>+--------------+-------------+---------+<br/>[localhost:21000] > create view ordered_results as select * from some_columns order by c_last_name desc, c_first_name desc limit 1000;<br/>[localhost:21000] > select * from ordered_results limit 5;<br/>Query: select * from ordered_results limit 5<br/>Query finished, fetching results ...<br/>+--------------+-------------+---------+<br/>| c_first_name | c_last_name | c_login |<br/>+--------------+-------------+---------+<br/>| Thomas       | Zuniga      |         |<br/>| Sarah        | Zuniga      |         |<br/>| Norma        | Zuniga      |         |<br/>| Lloyd        | Zuniga      |         |<br/>| Lisa         | Zuniga      |         |<br/>+--------------+-------------+---------+<br/>Returned 5 row(s) in 0.48s</div><p>' + 
      '      The previous example uses descending order for <span class="sql-docs-inline-code">ORDERED_RESULTS</span>  because in the sample TPCD-H' + 
      '      data, there are some rows with empty strings for both <span class="sql-docs-inline-code">C_FIRST_NAME</span>  and' + 
      '      <span class="sql-docs-inline-code">C_LAST_NAME</span> , making the lowest-ordered names unuseful in a sample query.' + 
      '    </p> <div class="sql-docs-code-block">create view visitors_by_day as select day, count(distinct visitors) as howmany from web_traffic group by day;<br/>create view top_10_days as select day, howmany from visitors_by_day order by howmany limit 10;<br/>select * from top_10_days;</div><p id="../Impala/docs/topics/impala_views.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p id="../Impala/docs/topics/impala_views.xml_describe_formatted_view">' + 
      '        To see the definition of a view, issue a <span class="sql-docs-inline-code">DESCRIBE FORMATTED</span>  statement, which shows the' + 
      '        query from the original <span class="sql-docs-inline-code">CREATE VIEW</span>  statement:' + 
      '<div class="sql-docs-code-block">[localhost:21000] > create view v1 as select * from t1;<br/>[localhost:21000] > describe formatted v1;<br/>Query finished, fetching results ...<br/>+------------------------------+------------------------------+------------+<br/>| name                         | type                         | comment    |<br/>+------------------------------+------------------------------+------------+<br/>| # col_name                   | data_type                    | comment    |<br/>|                              | NULL                         | NULL       |<br/>| x                            | int                          | None       |<br/>| y                            | int                          | None       |<br/>| s                            | string                       | None       |<br/>|                              | NULL                         | NULL       |<br/>| # Detailed Table Information | NULL                         | NULL       |<br/>| Database:                    | views                        | NULL       |<br/>| Owner:                       | doc_demo                     | NULL       |<br/>| CreateTime:                  | Mon Jul 08 15:56:27 EDT 2013 | NULL       |<br/>| LastAccessTime:              | UNKNOWN                      | NULL       |<br/>| Protect Mode:                | None                         | NULL       |<br/>| Retention:                   | 0                            | NULL       |<br/><b>| Table Type:                  | VIRTUAL_VIEW                 | NULL       |</b> | Table Parameters:            | NULL                         | NULL       |<br/>|                              | transient_lastDdlTime        | 1373313387 |<br/>|                              | NULL                         | NULL       |<br/>| # Storage Information        | NULL                         | NULL       |<br/>| SerDe Library:               | null                         | NULL       |<br/>| InputFormat:                 | null                         | NULL       |<br/>| OutputFormat:                | null                         | NULL       |<br/>| Compressed:                  | No                           | NULL       |<br/>| Num Buckets:                 | 0                            | NULL       |<br/>| Bucket Columns:              | []                           | NULL       |<br/>| Sort Columns:                | []                           | NULL       |<br/>|                              | NULL                         | NULL       |<br/>| # View Information           | NULL                         | NULL       |<br/><b>| View Original Text:          | SELECT * FROM t1             | NULL       |<br/>| View Expanded Text:          | SELECT * FROM t1             | NULL       |</b> +------------------------------+------------------------------+------------+<br/></div></p> <p id="../Impala/docs/topics/impala_views.xml_create_table_like_view">' + 
      '        Prior to Impala 1.4.0, it was not possible to use the <span class="sql-docs-inline-code">CREATE TABLE LIKE' + 
      '        <span class="sql-docs-variable">view_name</span> </span>  syntax. In Impala 1.4.0 and higher, you can create a table with the' + 
      '        same column definitions as a view using the <span class="sql-docs-inline-code">CREATE TABLE LIKE</span>  technique. Although' + 
      '        <span class="sql-docs-inline-code">CREATE TABLE LIKE</span>  normally inherits the file format of the original table, a view has no' + 
      '        underlying file format, so <span class="sql-docs-inline-code">CREATE TABLE LIKE <span class="sql-docs-variable">view_name</span> </span>  produces a text' + 
      '        table by default. To specify a different file format, include a <span class="sql-docs-inline-code">STORED AS' + 
      '        <span class="sql-docs-variable">file_format</span> </span>  clause at the end of the <span class="sql-docs-inline-code">CREATE TABLE LIKE</span> ' + 
      '        statement.' + 
      '      </p> <p id="../Impala/docs/topics/impala_views.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p id="../Impala/docs/topics/impala_views.xml_complex_types_views">' + 
      '        For tables containing complex type columns (<span class="sql-docs-inline-code">ARRAY</span> ,' + 
      '        <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ), you typically use' + 
      '        join queries to refer to the complex values. You can use views to' + 
      '        hide the join notation, making such tables seem like traditional denormalized' + 
      '        tables, and making those tables queryable by business intelligence tools' + 
      '        that do not have built-in support for those complex types.' + 
      '        See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types_views"><h4>Accessing Complex Type Data in Flattened Form Using Views</h4> </a> for details.' + 
      '      </p> <p id="../Impala/docs/topics/impala_views.xml_straight_join_nested_queries">' + 
      '        The <span class="sql-docs-inline-code">STRAIGHT_JOIN</span>  hint affects the join order of table references in the query' + 
      '        block containing the hint. It does not affect the join order of nested queries, such as views,' + 
      '        inline views, or <span class="sql-docs-inline-code">WHERE</span> -clause subqueries. To use this hint for performance' + 
      '        tuning of complex queries, apply the hint to all query blocks that need a fixed join order.' + 
      '      </p> <p id="../Impala/docs/topics/impala_views.xml_restrictions_blurb"><b>Restrictions:</b> </p> <ul><li><p>' + 
      '          You cannot insert into an Impala view. (In some database systems, this operation is allowed and inserts' + 
      '          rows into the base table.) You can use a view name on the right-hand side of an <span class="sql-docs-inline-code">INSERT</span> ' + 
      '          statement, in the <span class="sql-docs-inline-code">SELECT</span>  part.' + 
      '        </p> </li> <li><p id="../Impala/docs/topics/impala_views.xml_partitions_and_views">' + 
      '        If a view applies to a partitioned table, any partition pruning considers the clauses on both' + 
      '        the original query and any additional <span class="sql-docs-inline-code">WHERE</span>  predicates in the query that refers to the view.' + 
      '        Prior to Impala 1.4, only the <span class="sql-docs-inline-code">WHERE</span>  clauses on the original query from the' + 
      '        <span class="sql-docs-inline-code">CREATE VIEW</span>  statement were used for partition pruning.' + 
      '      </p> </li> <li><p id="../Impala/docs/topics/impala_views.xml_order_by_view_restriction">' + 
      '        An <span class="sql-docs-inline-code">ORDER BY</span>  clause without an additional <span class="sql-docs-inline-code">LIMIT</span>  clause is ignored in any' + 
      '        view definition. If you need to sort the entire result set from a view, use an <span class="sql-docs-inline-code">ORDER BY</span> ' + 
      '        clause in the <span class="sql-docs-inline-code">SELECT</span>  statement that queries the view. You can still make a simple <q>top' + 
      '        10</q>  report by combining the <span class="sql-docs-inline-code">ORDER BY</span>  and <span class="sql-docs-inline-code">LIMIT</span>  clauses in the same' + 
      '        view definition:' + 
      '<div class="sql-docs-code-block">[localhost:21000] > create table unsorted (x bigint);<br/>[localhost:21000] > insert into unsorted values (1), (9), (3), (7), (5), (8), (4), (6), (2);<br/>[localhost:21000] > create view sorted_view as select x from unsorted order by x;<br/>[localhost:21000] > select x from sorted_view; -- ORDER BY clause in view has no effect.<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 9 |<br/>| 3 |<br/>| 7 |<br/>| 5 |<br/>| 8 |<br/>| 4 |<br/>| 6 |<br/>| 2 |<br/>+---+<br/>[localhost:21000] > select x from sorted_view order by x; -- View query requires ORDER BY at outermost level.<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 2 |<br/>| 3 |<br/>| 4 |<br/>| 5 |<br/>| 6 |<br/>| 7 |<br/>| 8 |<br/>| 9 |<br/>+---+<br/>[localhost:21000] > create view top_3_view as select x from unsorted order by x limit 3;<br/>[localhost:21000] > select x from top_3_view; -- ORDER BY and LIMIT together in view definition are preserved.<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 2 |<br/>| 3 |<br/>+---+<br/></div></p> </li> <li><p id="../Impala/docs/topics/impala_views.xml_tablesample_caveat">' + 
      '        The <span class="sql-docs-inline-code">TABLESAMPLE</span>  clause of the <span class="sql-docs-inline-code">SELECT</span> ' + 
      '        statement does not apply to a table reference derived from a view, a subquery,' + 
      '        or anything other than a real base table. This clause only works for tables' + 
      '        backed by HDFS or HDFS-like data files, therefore it does not apply to Kudu or' + 
      '        HBase tables.' + 
      '      </p> </li> </ul> <p><b>Related statements:</b> <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_view.xml#create_view">CREATE VIEW Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_alter_view.xml#alter_view">ALTER VIEW Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_view.xml#drop_view">DROP VIEW Statement</a></p> </div> ',
    children: []
  }]},
{
  id: 'topics/impala_langref_sql.xml',
  title: 'Impala SQL Statements',
  weight: 1,
  bodyMatch: ko.observable(),
  open: ko.observable(false),
  titleMatch: ko.observable(),
  body: '<div><p>' + 
    '      The Impala SQL dialect supports a range of standard elements, plus some extensions for Big Data use cases' + 
    '      related to data loading and data warehousing.' + 
    '    </p> <div class="sql-docs-note"><p>' + 
    '        In the <span class="sql-docs-inline-code">impala-shell</span>  interpreter, a semicolon at the end of each statement is required.' + 
    '        Since the semicolon is not actually part of the SQL syntax, we do not include it in the syntax definition' + 
    '        of each statement, but we do show it in examples intended to be run in <span class="sql-docs-inline-code">impala-shell</span> .' + 
    '      </p> </div> <p>' + 
    '      The following sections show the major SQL statements that you work with in Impala:' + 
    '    </p> </div> ',
  children: [
  {
    id: 'topics/impala_ddl.xml',
    title: 'DDL Statements',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      DDL refers to <q>Data Definition Language</q> , a subset of SQL statements that change the structure of the' + 
      '      database schema in some way, typically by creating, deleting, or modifying schema objects such as databases,' + 
      '      tables, and views. Most Impala DDL statements start with the keywords <span class="sql-docs-inline-code">CREATE</span> ,' + 
      '      <span class="sql-docs-inline-code">DROP</span> , or <span class="sql-docs-inline-code">ALTER</span> .' + 
      '    </p> <p>' + 
      '      The Impala DDL statements are:' + 
      '    </p> <ul><li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_alter_table.xml#alter_table">ALTER TABLE Statement</a></li> <li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_alter_view.xml#alter_view">ALTER VIEW Statement</a></li> <li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_compute_stats.xml#compute_stats">COMPUTE STATS Statement</a></li> <li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_database.xml#create_database">CREATE DATABASE Statement</a></li> <li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_function.xml#create_function">CREATE FUNCTION Statement</a></li> <li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_role.xml#create_role">CREATE ROLE Statement (Impala 2.0 or higher only)</a></li> <li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_table.xml#create_table">CREATE TABLE Statement</a></li> <li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_view.xml#create_view">CREATE VIEW Statement</a></li> <li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_database.xml#drop_database">DROP DATABASE Statement</a></li> <li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_function.xml#drop_function">DROP FUNCTION Statement</a></li> <li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_role.xml#drop_role">DROP ROLE Statement (Impala 2.0 or higher only)</a></li> <li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_table.xml#drop_table">DROP TABLE Statement</a></li> <li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_view.xml#drop_view">DROP VIEW Statement</a></li> <li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_grant.xml#grant">GRANT Statement (Impala 2.0 or higher only)</a></li> <li><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_revoke.xml#revoke">REVOKE Statement (Impala 2.0 or higher only)</a></li> </ul> <p>' + 
      '      After Impala executes a DDL command, information about available tables, columns, views, partitions, and so' + 
      '      on is automatically synchronized between all the Impala nodes in a cluster. (Prior to Impala 1.2, you had to' + 
      '      issue a <span class="sql-docs-inline-code">REFRESH</span>  or <span class="sql-docs-inline-code">INVALIDATE METADATA</span>  statement manually on the other' + 
      '      nodes to make them aware of the changes.)' + 
      '    </p> <p>' + 
      '      If the timing of metadata updates is significant, for example if you use round-robin scheduling where each' + 
      '      query could be issued through a different Impala node, you can enable the' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_sync_ddl.xml#sync_ddl">SYNC_DDL</a> query option to make the DDL statement wait until' + 
      '      all nodes have been notified about the metadata changes.' + 
      '    </p> <p>' + 
      '      See <span>s3</span> for details about how Impala DDL statements interact with' + 
      '      tables and partitions stored in the Amazon S3 filesystem.' + 
      '    </p> <p>' + 
      '      Although the <span class="sql-docs-inline-code">INSERT</span>  statement is officially classified as a DML (data manipulation language)' + 
      '      statement, it also involves metadata changes that must be broadcast to all Impala nodes, and so is also' + 
      '      affected by the <span class="sql-docs-inline-code">SYNC_DDL</span>  query option.' + 
      '    </p> <p>' + 
      '      Because the <span class="sql-docs-inline-code">SYNC_DDL</span>  query option makes each DDL operation take longer than normal, you' + 
      '      might only enable it before the last DDL operation in a sequence. For example, if you are running a script' + 
      '      that issues multiple of DDL operations to set up an entire new schema, add several new partitions, and so on,' + 
      '      you might minimize the performance overhead by enabling the query option only before the last' + 
      '      <span class="sql-docs-inline-code">CREATE</span> , <span class="sql-docs-inline-code">DROP</span> , <span class="sql-docs-inline-code">ALTER</span> , or <span class="sql-docs-inline-code">INSERT</span>  statement.' + 
      '      The script only finishes when all the relevant metadata changes are recognized by all the Impala nodes, so' + 
      '      you could connect to any node and issue queries through it.' + 
      '    </p> <p>' + 
      '      The classification of DDL, DML, and other statements is not necessarily the same between Impala and Hive.' + 
      '      Impala organizes these statements in a way intended to be familiar to people familiar with relational' + 
      '      databases or data warehouse products. Statements that modify the metastore database, such as <span class="sql-docs-inline-code">COMPUTE' + 
      '      STATS</span> , are classified as DDL. Statements that only query the metastore database, such as' + 
      '      <span class="sql-docs-inline-code">SHOW</span>  or <span class="sql-docs-inline-code">DESCRIBE</span> , are put into a separate category of utility statements.' + 
      '    </p> <div class="sql-docs-note">' + 
      '      The query types shown in the Impala debug web user interface might not match exactly the categories listed' + 
      '      here. For example, currently the <span class="sql-docs-inline-code">USE</span>  statement is shown as DDL in the debug web UI. The' + 
      '      query types shown in the debug web UI are subject to change, for improved consistency.' + 
      '    </div> <p id="../Impala/docs/topics/impala_ddl.xml_related_info"><b>Related information:</b> </p> <p>' + 
      '      The other major classifications of SQL statements are data manipulation language (see' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_dml.xml#dml">DML Statements</a>) and queries (see <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_select.xml#select">SELECT Statement</a>).' + 
      '    </p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_dml.xml',
    title: 'DML Statements',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      DML refers to <q>Data Manipulation Language</q> , a subset of SQL statements that modify the data stored in' + 
      '      tables. Because Impala focuses on query performance and leverages the append-only nature of HDFS storage,' + 
      '      currently Impala only supports a small set of DML statements:' + 
      '    </p> <ul><li>. Works for Kudu tables only.' + 
      '      </li> <li>.' + 
      '      </li> <li>. Does not apply for HBase or Kudu tables.' + 
      '      </li> <li>. Works for Kudu tables only.' + 
      '      </li> <li>. Works for Kudu tables only.' + 
      '      </li> </ul> <p><span class="sql-docs-inline-code">INSERT</span>  in Impala is primarily optimized for inserting large volumes of data in a single' + 
      '      statement, to make effective use of the multi-megabyte HDFS blocks. This is the way in Impala to create new' + 
      '      data files. If you intend to insert one or a few rows at a time, such as using the <span class="sql-docs-inline-code">INSERT ...' + 
      '      VALUES</span>  syntax, that technique is much more efficient for Impala tables stored in HBase. See' + 
      '      <span>impala hbase</span> for details.' + 
      '    </p> <p><span class="sql-docs-inline-code">LOAD DATA</span>  moves existing data files into the directory for an Impala table, making them' + 
      '      immediately available for Impala queries. This is one way in Impala to work with data files produced by other' + 
      '      Hadoop components. (<span class="sql-docs-inline-code">CREATE EXTERNAL TABLE</span>  is the other alternative; with external tables,' + 
      '      you can query existing data files, while the files remain in their original location.)' + 
      '    </p> <p>' + 
      '      In Impala 2.8 and higher, Impala does support the <span class="sql-docs-inline-code">UPDATE</span> , <span class="sql-docs-inline-code">DELETE</span> ,' + 
      '      and <span class="sql-docs-inline-code">UPSERT</span>  statements for Kudu tables.' + 
      '      For HDFS or S3 tables, to simulate the effects of an <span class="sql-docs-inline-code">UPDATE</span>  or <span class="sql-docs-inline-code">DELETE</span>  statement' + 
      '      in other database systems, typically you use <span class="sql-docs-inline-code">INSERT</span>  or <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  to copy data' + 
      '      from one table to another, filtering out or changing the appropriate rows during the copy operation.' + 
      '    </p> <p>' + 
      '      You can also achieve a result similar to <span class="sql-docs-inline-code">UPDATE</span>  by using Impala tables stored in HBase.' + 
      '      When you insert a row into an HBase table, and the table' + 
      '      already contains a row with the same value for the key column, the older row is hidden, effectively the same' + 
      '      as a single-row <span class="sql-docs-inline-code">UPDATE</span> .' + 
      '    </p> <p>' + 
      '      Impala can perform DML operations for tables or partitions stored in the Amazon S3 filesystem' + 
      '      with Impala 2.6 and higher. See <span>s3</span> for details.' + 
      '    </p> <p id="../Impala/docs/topics/impala_dml.xml_related_info"><b>Related information:</b> </p> <p>' + 
      '      The other major classifications of SQL statements are data definition language (see' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_ddl.xml#ddl">DDL Statements</a>) and queries (see <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_select.xml#select">SELECT Statement</a>).' + 
      '    </p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_alter_table.xml',
    title: 'ALTER TABLE Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      The <span class="sql-docs-inline-code">ALTER TABLE</span>  statement changes the structure or properties of an existing Impala table.' + 
      '    </p> <p>' + 
      '      In Impala, this is primarily a logical operation that updates the table metadata in the metastore database that Impala' + 
      '      shares with Hive. Most <span class="sql-docs-inline-code">ALTER TABLE</span>  operations do not actually rewrite, move, and so on the actual data' + 
      '      files. (The <span class="sql-docs-inline-code">RENAME TO</span>  clause is the one exception; it can cause HDFS files to be moved to different paths.)' + 
      '      When you do an <span class="sql-docs-inline-code">ALTER TABLE</span>  operation, you typically need to perform corresponding physical filesystem operations,' + 
      '      such as rewriting the data files to include extra fields, or converting them to a different file format.' + 
      '    </p> <p id="../Impala/docs/topics/impala_alter_table.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">ALTER TABLE [<span class="sql-docs-variable">old_db_name</span> .]<span class="sql-docs-variable">old_table_name</span> RENAME TO [<span class="sql-docs-variable">new_db_name</span> .]<span class="sql-docs-variable">new_table_name</span> ALTER TABLE <span class="sql-docs-variable">name</span> ADD COLUMNS (<span class="sql-docs-variable">col_spec</span> [, <span class="sql-docs-variable">col_spec</span> ...])<br/>ALTER TABLE <span class="sql-docs-variable">name</span> DROP [COLUMN] <span class="sql-docs-variable">column_name</span> ALTER TABLE <span class="sql-docs-variable">name</span> CHANGE <span class="sql-docs-variable">column_name</span> <span class="sql-docs-variable">col_spec</span> ALTER TABLE <span class="sql-docs-variable">name</span> REPLACE COLUMNS (<span class="sql-docs-variable">col_spec</span> [, <span class="sql-docs-variable">col_spec</span> ...])<br/><br/><span class="sql-docs-inline-code">-- Kudu tables only.<br/>ALTER TABLE <span class="sql-docs-variable">name</span> ALTER [COLUMN] <span class="sql-docs-variable">column_name</span> { SET <span class="sql-docs-variable">kudu_storage_attr</span> <span class="sql-docs-variable">attr_value</span> | DROP DEFAULT }<br/><br/>kudu_storage_attr ::= { DEFAULT | BLOCK_SIZE | ENCODING | COMPRESSION }</span> <span class="sql-docs-inline-code">-- Non-Kudu tables only.<br/>ALTER TABLE <span class="sql-docs-variable">name</span> ALTER [COLUMN] <span class="sql-docs-variable">column_name</span> SET COMMENT \'<span class="sql-docs-variable">comment_text</span> \'</span> ALTER TABLE <span class="sql-docs-variable">name</span> ADD [IF NOT EXISTS] PARTITION (<span class="sql-docs-variable">partition_spec</span> )<br/>  <span class="sql-docs-inline-code">[<span class="sql-docs-variable">location_spec</span> ]</span> <span class="sql-docs-inline-code">[<span class="sql-docs-variable">cache_spec</span> ]</span> <span class="sql-docs-inline-code">ALTER TABLE <span class="sql-docs-variable">name</span> ADD [IF NOT EXISTS] RANGE PARTITION <span class="sql-docs-variable">kudu_partition_spec</span> </span> ALTER TABLE <span class="sql-docs-variable">name</span> DROP [IF EXISTS] PARTITION (<span class="sql-docs-variable">partition_spec</span> )<br/>  <span class="sql-docs-inline-code">[PURGE]</span> <span class="sql-docs-inline-code">ALTER TABLE <span class="sql-docs-variable">name</span> DROP [IF EXISTS] RANGE PARTITION <span class="sql-docs-variable">kudu_partition_spec</span> </span> <span class="sql-docs-inline-code">ALTER TABLE <span class="sql-docs-variable">name</span> RECOVER PARTITIONS</span> ALTER TABLE <span class="sql-docs-variable">name</span> [PARTITION (<span class="sql-docs-variable">partition_spec</span> )]<br/>  SET { FILEFORMAT <span class="sql-docs-variable">file_format</span> | ROW FORMAT <span class="sql-docs-variable">row_format</span> | LOCATION \'<span class="sql-docs-variable">hdfs_path_of_directory</span> \'<br/>  | TBLPROPERTIES (<span class="sql-docs-variable">table_properties</span> )<br/>  | SERDEPROPERTIES (<span class="sql-docs-variable">serde_properties</span> ) }<br/><br/><span class="sql-docs-inline-code">ALTER TABLE <span class="sql-docs-variable">name</span> <span class="sql-docs-variable">colname</span> (\'<span class="sql-docs-variable">statsKey</span> \'=\'<span class="sql-docs-variable">val</span> , ...)<br/><br/>statsKey ::= numDVs | numNulls | avgSize | maxSize</span> <span class="sql-docs-inline-code">ALTER TABLE <span class="sql-docs-variable">name</span> [PARTITION (<span class="sql-docs-variable">partition_spec</span> )] SET { CACHED IN \'<span class="sql-docs-variable">pool_name</span> \' <span class="sql-docs-inline-code">[WITH REPLICATION = <span class="sql-docs-variable">integer</span> ]</span> | UNCACHED }</span> <span class="sql-docs-variable">new_name</span> ::= [<span class="sql-docs-variable">new_database</span> .]<span class="sql-docs-variable">new_table_name</span> <span class="sql-docs-variable">col_spec</span> ::= <span class="sql-docs-variable">col_name</span> <span class="sql-docs-variable">type_name</span> <span class="sql-docs-inline-code">COMMENT \'<span class="sql-docs-variable">column-comment</span> \' [<span class="sql-docs-variable">kudu_attributes</span> ]</span> <span class="sql-docs-inline-code"><span class="sql-docs-variable">kudu_attributes</span> ::= { [NOT] NULL | ENCODING <span class="sql-docs-variable">codec</span> | COMPRESSION <span class="sql-docs-variable">algorithm</span> |<br/>  DEFAULT <span class="sql-docs-variable">constant</span> | BLOCK_SIZE <span class="sql-docs-variable">number</span> }</span> <span class="sql-docs-variable">partition_spec</span> ::= <span class="sql-docs-variable">simple_partition_spec</span> | <span class="sql-docs-inline-code"><span class="sql-docs-variable">complex_partition_spec</span> </span> <span class="sql-docs-variable">simple_partition_spec</span> ::= <span class="sql-docs-variable">partition_col</span> =<span class="sql-docs-variable">constant_value</span> <span class="sql-docs-inline-code"><span class="sql-docs-variable">complex_partition_spec</span> ::= <span class="sql-docs-variable">comparison_expression_on_partition_col</span> </span> <span class="sql-docs-inline-code"><span class="sql-docs-variable">kudu_partition_spec</span> ::= <span class="sql-docs-variable">constant</span> <span class="sql-docs-variable">range_operator</span> VALUES <span class="sql-docs-variable">range_operator</span> <span class="sql-docs-variable">constant</span> | VALUE = <span class="sql-docs-variable">constant</span> </span> <span class="sql-docs-inline-code">cache_spec ::= CACHED IN \'<span class="sql-docs-variable">pool_name</span> \' [WITH REPLICATION = <span class="sql-docs-variable">integer</span> ] | UNCACHED</span> <span class="sql-docs-inline-code">location_spec ::= LOCATION \'<span class="sql-docs-variable">hdfs_path_of_directory</span> \'</span> <span class="sql-docs-variable">table_properties</span> ::= \'<span class="sql-docs-variable">name</span> \'=\'<span class="sql-docs-variable">value</span> \'[, \'<span class="sql-docs-variable">name</span> \'=\'<span class="sql-docs-variable">value</span> \' ...]<br/><br/><span class="sql-docs-variable">serde_properties</span> ::= \'<span class="sql-docs-variable">name</span> \'=\'<span class="sql-docs-variable">value</span> \'[, \'<span class="sql-docs-variable">name</span> \'=\'<span class="sql-docs-variable">value</span> \' ...]<br/><br/><span class="sql-docs-variable">file_format</span> ::= { PARQUET | TEXTFILE | RCFILE | SEQUENCEFILE | AVRO }<br/><br/><span class="sql-docs-variable">row_format</span> ::= DELIMITED<br/>  [FIELDS TERMINATED BY \'<span class="sql-docs-variable">char</span> \' [ESCAPED BY \'<span class="sql-docs-variable">char</span> \']]<br/>  [LINES TERMINATED BY \'<span class="sql-docs-variable">char</span> \']</div><p id="../Impala/docs/topics/impala_alter_table.xml_ddl_blurb"><b>Statement type:</b>  DDL' + 
      '      </p> <p id="../Impala/docs/topics/impala_alter_table.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p>' + 
      '      In Impala 2.3 and higher, the <span class="sql-docs-inline-code">ALTER TABLE</span>  statement can' + 
      '      change the metadata for tables containing complex types (<span class="sql-docs-inline-code">ARRAY</span> ,' + 
      '      <span class="sql-docs-inline-code">STRUCT</span> , and <span class="sql-docs-inline-code">MAP</span> ).' + 
      '      For example, you can use an <span class="sql-docs-inline-code">ADD COLUMNS</span> , <span class="sql-docs-inline-code">DROP COLUMN</span> , or <span class="sql-docs-inline-code">CHANGE</span> ' + 
      '      clause to modify the table layout for complex type columns.' + 
      '      Although Impala queries only work for complex type columns in Parquet tables, the complex type support in the' + 
      '      <span class="sql-docs-inline-code">ALTER TABLE</span>  statement applies to all file formats.' + 
      '      For example, you can use Impala to update metadata for a staging table in a non-Parquet file format where the' + 
      '      data is populated by Hive. Or you can use <span class="sql-docs-inline-code">ALTER TABLE SET FILEFORMAT</span>  to change the format' + 
      '      of an existing table to Parquet so that Impala can query it. Remember that changing the file format for a table does' + 
      '      not convert the data files within the table; you must prepare any Parquet data files containing complex types' + 
      '      outside Impala, and bring them into the table using <span class="sql-docs-inline-code">LOAD DATA</span>  or updating the table\'s' + 
      '      <span class="sql-docs-inline-code">LOCATION</span>  property.' + 
      '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a> for details about using complex types.' + 
      '    </p> <p id="../Impala/docs/topics/impala_alter_table.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      Whenever you specify partitions in an <span class="sql-docs-inline-code">ALTER TABLE</span>  statement, through the <span class="sql-docs-inline-code">PARTITION' + 
      '      (<span class="sql-docs-variable">partition_spec</span> )</span>  clause, you must include all the partitioning columns in the' + 
      '      specification.' + 
      '    </p> <p>' + 
      '      Most of the <span class="sql-docs-inline-code">ALTER TABLE</span>  operations work the same for internal tables (managed by Impala) as' + 
      '      for external tables (with data files located in arbitrary locations). The exception is renaming a table; for' + 
      '      an external table, the underlying data directory is not renamed or moved.' + 
      '    </p> <p><b>Dropping or altering multiple partitions:</b> </p> <p>' + 
      '      In Impala 2.8 and higher,' + 
      '      the expression for the partition clause with a <span class="sql-docs-inline-code">DROP</span>  or <span class="sql-docs-inline-code">SET</span> ' + 
      '      operation can include comparison operators such as <span class="sql-docs-inline-code"><</span> , <span class="sql-docs-inline-code">IN</span> ,' + 
      '      or <span class="sql-docs-inline-code">BETWEEN</span> , and Boolean operators such as <span class="sql-docs-inline-code">AND</span> ' + 
      '      and <span class="sql-docs-inline-code">OR</span> .' + 
      '    </p> <p>' + 
      '      For example, you might drop a group of partitions corresponding to a particular date' + 
      '      range after the data <q>ages out</q> :' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      For tables with multiple partition keys columns, you can specify multiple' + 
      '      conditions separated by commas, and the operation only applies to the partitions' + 
      '      that match all the conditions (similar to using an <span class="sql-docs-inline-code">AND</span>  clause):' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      This technique can also be used to change the file format of groups of partitions,' + 
      '      as part of an ETL pipeline that periodically consolidates and rewrites the underlying' + 
      '      data files in a different file format:' + 
      '    </p> <div class="sql-docs-code-block"></div><div class="sql-docs-note"><p>' + 
      '        The extended syntax involving comparison operators and multiple partitions' + 
      '        applies to the <span class="sql-docs-inline-code">SET FILEFORMAT</span> , <span class="sql-docs-inline-code">SET TBLPROPERTIES</span> ,' + 
      '        <span class="sql-docs-inline-code">SET SERDEPROPERTIES</span> , and <span class="sql-docs-inline-code">SET [UN]CACHED</span>  clauses.' + 
      '        You can also use this syntax with the <span class="sql-docs-inline-code">PARTITION</span>  clause' + 
      '        in the <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  statement, and with the' + 
      '        <span class="sql-docs-inline-code">PARTITION</span>  clause of the <span class="sql-docs-inline-code">SHOW FILES</span>  statement.' + 
      '        Some forms of <span class="sql-docs-inline-code">ALTER TABLE</span>  still only apply to one partition' + 
      '        at a time: the <span class="sql-docs-inline-code">SET LOCATION</span>  and <span class="sql-docs-inline-code">ADD PARTITION</span> ' + 
      '        clauses. The <span class="sql-docs-inline-code">PARTITION</span>  clauses in the <span class="sql-docs-inline-code">LOAD DATA</span> ' + 
      '        and <span class="sql-docs-inline-code">INSERT</span>  statements also only apply to one partition at a time.' + 
      '      </p> <p>' + 
      '        A DDL statement that applies to multiple partitions is considered successful' + 
      '        (resulting in no changes) even if no partitions match the conditions.' + 
      '        The results are the same as if the <span class="sql-docs-inline-code">IF EXISTS</span>  clause was specified.' + 
      '      </p> <p>' + 
      '        The performance and scalability of this technique is similar to' + 
      '        issuing a sequence of single-partition <span class="sql-docs-inline-code">ALTER TABLE</span> ' + 
      '        statements in quick succession. To minimize bottlenecks due to' + 
      '        communication with the metastore database, or causing other' + 
      '        DDL operations on the same table to wait, test the effects of' + 
      '        performing <span class="sql-docs-inline-code">ALTER TABLE</span>  statements that affect' + 
      '        large numbers of partitions.' + 
      '      </p> </div> <p id="../Impala/docs/topics/impala_alter_table.xml_s3_blurb"><b>Amazon S3 considerations:</b> </p> <p>' + 
      '      You can specify an <span class="sql-docs-inline-code">s3a://</span>  prefix on the <span class="sql-docs-inline-code">LOCATION</span>  attribute of a table or partition' + 
      '      to make Impala query data from the Amazon S3 filesystem. In Impala 2.6 and higher, Impala automatically' + 
      '      handles creating or removing the associated folders when you issue <span class="sql-docs-inline-code">ALTER TABLE</span>  statements' + 
      '      with the <span class="sql-docs-inline-code">ADD PARTITION</span>  or <span class="sql-docs-inline-code">DROP PARTITION</span>  clauses.' + 
      '    </p> <p id="../Impala/docs/topics/impala_alter_table.xml_s3_ddl">' + 
      '        In Impala 2.6 and higher, Impala DDL statements such as' + 
      '        <span class="sql-docs-inline-code">CREATE DATABASE</span> , <span class="sql-docs-inline-code">CREATE TABLE</span> , <span class="sql-docs-inline-code">DROP DATABASE CASCADE</span> ,' + 
      '        <span class="sql-docs-inline-code">DROP TABLE</span> , and <span class="sql-docs-inline-code">ALTER TABLE [ADD|DROP] PARTITION</span>  can create or remove folders' + 
      '        as needed in the Amazon S3 system. Prior to Impala 2.6, you had to create folders yourself and point' + 
      '        Impala database, tables, or partitions at them, and manually remove folders when no longer needed.' + 
      '        See <span>s3</span> for details about reading and writing S3 data with Impala.' + 
      '      </p> <p><b>HDFS caching (CACHED IN clause):</b> </p> <p>' + 
      '      If you specify the <span class="sql-docs-inline-code">CACHED IN</span>  clause, any existing or future data files in the table' + 
      '      directory or the partition subdirectories are designated to be loaded into memory with the HDFS caching' + 
      '      mechanism. See <span>hdfs caching</span> for details about using the HDFS' + 
      '      caching feature.' + 
      '    </p> <p id="../Impala/docs/topics/impala_alter_table.xml_impala_cache_replication_factor">' + 
      '        In Impala 2.2 and higher, the optional <span class="sql-docs-inline-code">WITH REPLICATION</span>  clause' + 
      '        for <span class="sql-docs-inline-code">CREATE TABLE</span>  and <span class="sql-docs-inline-code">ALTER TABLE</span>  lets you specify' + 
      '        a <span class="sql-docs-variable">replication factor</span> , the number of hosts on which to cache the same data blocks.' + 
      '        When Impala processes a cached data block, where the cache replication factor is greater than 1, Impala randomly' + 
      '        selects a host that has a cached copy of that data block. This optimization avoids excessive CPU' + 
      '        usage on a single host when the same cached data block is processed multiple times.' + 
      '        Where practical, specify a value greater than or equal to the HDFS block replication factor.' + 
      '      </p> <p id="../Impala/docs/topics/impala_alter_table.xml_sync_ddl_blurb">' + 
      '        If you connect to different Impala nodes within an <span class="sql-docs-inline-code">impala-shell</span>  session for' + 
      '        load-balancing purposes, you can enable the <span class="sql-docs-inline-code">SYNC_DDL</span>  query option to make each DDL' + 
      '        statement wait before returning, until the new or changed metadata has been received by all the Impala' + 
      '        nodes. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_sync_ddl.xml#sync_ddl">SYNC_DDL Query Option</a> for details.' + 
      '      </p> <p>' + 
      '      The following sections show examples of the use cases for various <span class="sql-docs-inline-code">ALTER TABLE</span>  clauses.' + 
      '    </p> <p><b>To rename a table (RENAME TO clause):</b> </p> <p>' + 
      '      The <span class="sql-docs-inline-code">RENAME TO</span>  clause lets you change the name of an existing table, and optionally which' + 
      '      database it is located in.' + 
      '    </p> <p>' + 
      '      For internal tables, this operation physically renames the directory within HDFS that contains the data files;' + 
      '      the original directory name no longer exists. By qualifying the table names with database names, you can use' + 
      '      this technique to move an internal table (and its associated data directory) from one database to another.' + 
      '      For example:' + 
      '    </p> <div class="sql-docs-code-block">create database d1;<br/>create database d2;<br/>create database d3;<br/>use d1;<br/>create table mobile (x int);<br/>use d2;<br/>-- Move table from another database to the current one.<br/>alter table d1.mobile rename to mobile;<br/>use d1;<br/>-- Move table from one database to another.<br/>alter table d2.mobile rename to d3.mobile;</div><p>' + 
      '      For external tables,' + 
      '    </p> <p><b>To change the physical location where Impala looks for data files associated with a table or' + 
      '      partition:</b> </p> <div class="sql-docs-code-block">ALTER TABLE <span class="sql-docs-variable">table_name</span> [PARTITION (<span class="sql-docs-variable">partition_spec</span> )] SET LOCATION \'<span class="sql-docs-variable">hdfs_path_of_directory</span> \';</div><p>' + 
      '      The path you specify is the full HDFS path where the data files reside, or will be created. Impala does not' + 
      '      create any additional subdirectory named after the table. Impala does not move any data files to this new' + 
      '      location or change any data files that might already exist in that directory.' + 
      '    </p> <p>' + 
      '      To set the location for a single partition, include the <span class="sql-docs-inline-code">PARTITION</span>  clause. Specify all the' + 
      '      same partitioning columns for the table, with a constant value for each, to precisely identify the single' + 
      '      partition affected by the statement:' + 
      '    </p> <div class="sql-docs-code-block">create table p1 (s string) partitioned by (month int, day int);<br/>-- Each ADD PARTITION clause creates a subdirectory in HDFS.<br/>alter table p1 add partition (month=1, day=1);<br/>alter table p1 add partition (month=1, day=2);<br/>alter table p1 add partition (month=2, day=1);<br/>alter table p1 add partition (month=2, day=2);<br/>-- Redirect queries, INSERT, and LOAD DATA for one partition<br/>-- to a specific different directory.<br/>alter table p1 partition (month=1, day=1) set location \'/usr/external_data/new_years_day\';<br/></div><div id="../Impala/docs/topics/impala_alter_table.xml_add_partition_set_location" class="sql-docs-note">' + 
      '        If you are creating a partition for the first time and specifying its location, for maximum efficiency, use' + 
      '        a single <span class="sql-docs-inline-code">ALTER TABLE</span>  statement including both the <span class="sql-docs-inline-code">ADD PARTITION</span>  and' + 
      '        <span class="sql-docs-inline-code">LOCATION</span>  clauses, rather than separate statements with <span class="sql-docs-inline-code">ADD PARTITION</span>  and' + 
      '        <span class="sql-docs-inline-code">SET LOCATION</span>  clauses.' + 
      '      </div> <p><b>To automatically detect new partition directories added through Hive or HDFS operations:</b> </p> <p>' + 
      '      In Impala 2.3 and higher, the <span class="sql-docs-inline-code">RECOVER PARTITIONS</span>  clause scans' + 
      '      a partitioned table to detect if any new partition directories were added outside of Impala,' + 
      '      such as by Hive <span class="sql-docs-inline-code">ALTER TABLE</span>  statements or by <span class="sql-docs-inline-code">hdfs dfs</span> ' + 
      '      or <span class="sql-docs-inline-code">hadoop fs</span>  commands. The <span class="sql-docs-inline-code">RECOVER PARTITIONS</span>  clause' + 
      '      automatically recognizes any data files present in these new directories, the same as' + 
      '      the <span class="sql-docs-inline-code">REFRESH</span>  statement does.' + 
      '    </p> <p>' + 
      '      For example, here is a sequence of examples showing how you might create a partitioned table in Impala,' + 
      '      create new partitions through Hive, copy data files into the new partitions with the <span class="sql-docs-inline-code">hdfs</span> ' + 
      '      command, and have Impala recognize the new partitions and new data:' + 
      '    </p> <p>' + 
      '      In Impala, create the table, and a single partition for demonstration purposes:' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      In Hive, create some new partitions. In a real use case, you might create the' + 
      '      partitions and populate them with data as the final stages of an ETL pipeline.' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      For demonstration purposes, manually copy data (a single row) into these' + 
      '      new partitions, using manual HDFS operations:' + 
      '    </p> <div class="sql-docs-code-block"></div><div class="sql-docs-code-block"></div><p>' + 
      '      In Impala, initially the partitions and data are not visible.' + 
      '      Running <span class="sql-docs-inline-code">ALTER TABLE</span>  with the <span class="sql-docs-inline-code">RECOVER PARTITIONS</span> ' + 
      '      clause scans the table data directory to find any new partition directories, and' + 
      '      the data files inside them:' + 
      '    </p> <div class="sql-docs-code-block"></div><p><b>To change the key-value pairs of the TBLPROPERTIES and SERDEPROPERTIES fields:</b> </p> <div class="sql-docs-code-block">ALTER TABLE <span class="sql-docs-variable">table_name</span> SET TBLPROPERTIES (\'<span class="sql-docs-variable">key1</span> \'=\'<span class="sql-docs-variable">value1</span> \', \'<span class="sql-docs-variable">key2</span> \'=\'<span class="sql-docs-variable">value2</span> \'[, ...]);<br/>ALTER TABLE <span class="sql-docs-variable">table_name</span> SET SERDEPROPERTIES (\'<span class="sql-docs-variable">key1</span> \'=\'<span class="sql-docs-variable">value1</span> \', \'<span class="sql-docs-variable">key2</span> \'=\'<span class="sql-docs-variable">value2</span> \'[, ...]);</div><p>' + 
      '      The <span class="sql-docs-inline-code">TBLPROPERTIES</span>  clause is primarily a way to associate arbitrary user-specified data items' + 
      '      with a particular table.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">SERDEPROPERTIES</span>  clause sets up metadata defining how tables are read or written, needed' + 
      '      in some cases by Hive but not used extensively by Impala. You would use this clause primarily to change the' + 
      '      delimiter in an existing text table or partition, by setting the <span class="sql-docs-inline-code">\'serialization.format\'</span>  and' + 
      '      <span class="sql-docs-inline-code">\'field.delim\'</span>  property values to the new delimiter character:' + 
      '    </p> <div class="sql-docs-code-block">-- This table begins life as pipe-separated text format.<br/>create table change_to_csv (s1 string, s2 string) row format delimited fields terminated by \'|\';<br/>-- Then we change it to a CSV table.<br/>alter table change_to_csv set SERDEPROPERTIES (\'serialization.format\'=\',\', \'field.delim\'=\',\');<br/>insert overwrite change_to_csv values (\'stop\',\'go\'), (\'yes\',\'no\');<br/>!hdfs dfs -cat \'hdfs://<span class="sql-docs-variable">hostname</span> :8020/<span class="sql-docs-variable">data_directory</span> /<span class="sql-docs-variable">dbname</span> .db/change_to_csv/<span class="sql-docs-variable">data_file</span> \';<br/>stop,go<br/>yes,no</div><p>' + 
      '      Use the <span class="sql-docs-inline-code">DESCRIBE FORMATTED</span>  statement to see the current values of these properties for an' + 
      '      existing table. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_table.xml#create_table">CREATE TABLE Statement</a> for more details about these clauses.' + 
      '      See <span>perf table stats manual</span> for an example of using table properties to' + 
      '      fine-tune the performance-related table statistics.' + 
      '    </p> <p><b>To manually set or update table or column statistics:</b> </p> <p>' + 
      '      Although for most tables the <span class="sql-docs-inline-code">COMPUTE STATS</span>  or <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span> ' + 
      '      statement is all you need to keep table and column statistics up to date for a table,' + 
      '      sometimes for a very large table or one that is updated frequently, the length of time to recompute' + 
      '      all the statistics might make it impractical to run those statements as often as needed.' + 
      '      As a workaround, you can use the <span class="sql-docs-inline-code">ALTER TABLE</span>  statement to set table statistics' + 
      '      at the level of the entire table or a single partition, or column statistics at the level of' + 
      '      the entire table.' + 
      '    </p> <p>' + 
      '      You can set the <span class="sql-docs-inline-code">numrows</span>  value for table statistics by changing the' + 
      '      <span class="sql-docs-inline-code">TBLPROPERTIES</span>  setting for a table or partition.' + 
      '      For example:' + 
      '<div id="../Impala/docs/topics/impala_alter_table.xml_set_numrows_example" class="sql-docs-code-block">create table analysis_data stored as parquet as select * from raw_data;<br/>Inserted 1000000000 rows in 181.98s<br/>compute stats analysis_data;<br/>insert into analysis_data select * from smaller_table_we_forgot_before;<br/>Inserted 1000000 rows in 15.32s<br/>-- Now there are 1001000000 rows. We can update this single data point in the stats.<br/>alter table analysis_data set tblproperties(\'numRows\'=\'1001000000\', \'STATS_GENERATED_VIA_STATS_TASK\'=\'true\');</div><div id="../Impala/docs/topics/impala_alter_table.xml_set_numrows_partitioned_example" class="sql-docs-code-block">-- If the table originally contained 1 million rows, and we add another partition with 30 thousand rows,<br/>-- change the numRows property for the partition and the overall table.<br/>alter table partitioned_data partition(year=2009, month=4) set tblproperties (\'numRows\'=\'30000\', \'STATS_GENERATED_VIA_STATS_TASK\'=\'true\');<br/>alter table partitioned_data set tblproperties (\'numRows\'=\'1030000\', \'STATS_GENERATED_VIA_STATS_TASK\'=\'true\');</div>' + 
      '      See <span>perf table stats manual</span> for details.' + 
      '    </p> <p>' + 
      '      In Impala 2.6 and higher, you can use the <span class="sql-docs-inline-code">SET COLUMN STATS</span>  clause' + 
      '      to set a specific stats value for a particular column.' + 
      '    </p> <p id="../Impala/docs/topics/impala_alter_table.xml_set_column_stats_example">' + 
      '        You specify a case-insensitive symbolic name for the kind of statistics:' + 
      '        <span class="sql-docs-inline-code">numDVs</span> , <span class="sql-docs-inline-code">numNulls</span> , <span class="sql-docs-inline-code">avgSize</span> , <span class="sql-docs-inline-code">maxSize</span> .' + 
      '        The key names and values are both quoted. This operation applies to an entire table,' + 
      '        not a specific partition. For example:' + 
      '<div class="sql-docs-code-block">create table t1 (x int, s string);<br/>insert into t1 values (1, \'one\'), (2, \'two\'), (2, \'deux\');<br/>show column stats t1;<br/>+--------+--------+------------------+--------+----------+----------+<br/>| Column | Type   | #Distinct Values | #Nulls | Max Size | Avg Size |<br/>+--------+--------+------------------+--------+----------+----------+<br/>| x      | INT    | -1               | -1     | 4        | 4        |<br/>| s      | STRING | -1               | -1     | -1       | -1       |<br/>+--------+--------+------------------+--------+----------+----------+<br/>alter table t1 set column stats x (\'numDVs\'=\'2\',\'numNulls\'=\'0\');<br/>alter table t1 set column stats s (\'numdvs\'=\'3\',\'maxsize\'=\'4\');<br/>show column stats t1;<br/>+--------+--------+------------------+--------+----------+----------+<br/>| Column | Type   | #Distinct Values | #Nulls | Max Size | Avg Size |<br/>+--------+--------+------------------+--------+----------+----------+<br/>| x      | INT    | 2                | 0      | 4        | 4        |<br/>| s      | STRING | 3                | -1     | 4        | -1       |<br/>+--------+--------+------------------+--------+----------+----------+<br/></div></p> <p><b>To reorganize columns for a table:</b> </p> <div class="sql-docs-code-block">ALTER TABLE <span class="sql-docs-variable">table_name</span> ADD COLUMNS (<span class="sql-docs-variable">column_defs</span> );<br/>ALTER TABLE <span class="sql-docs-variable">table_name</span> REPLACE COLUMNS (<span class="sql-docs-variable">column_defs</span> );<br/>ALTER TABLE <span class="sql-docs-variable">table_name</span> CHANGE <span class="sql-docs-variable">column_name</span> <span class="sql-docs-variable">new_name</span> <span class="sql-docs-variable">new_type</span> ;<br/>ALTER TABLE <span class="sql-docs-variable">table_name</span> DROP <span class="sql-docs-variable">column_name</span> ;</div><p>' + 
      '      The <span class="sql-docs-variable">column_spec</span>  is the same as in the <span class="sql-docs-inline-code">CREATE TABLE</span>  statement: the column' + 
      '      name, then its data type, then an optional comment. You can add multiple columns at a time. The parentheses' + 
      '      are required whether you add a single column or multiple columns. When you replace columns, all the original' + 
      '      column definitions are discarded. You might use this technique if you receive a new set of data files with' + 
      '      different data types or columns in a different order. (The data files are retained, so if the new columns are' + 
      '      incompatible with the old ones, use <span class="sql-docs-inline-code">INSERT OVERWRITE</span>  or <span class="sql-docs-inline-code">LOAD DATA OVERWRITE</span> ' + 
      '      to replace all the data before issuing any further queries.)' + 
      '    </p> <p>' + 
      '      For example, here is how you might add columns to an existing table.' + 
      '      The first <span class="sql-docs-inline-code">ALTER TABLE</span>  adds two new columns, and the second' + 
      '      <span class="sql-docs-inline-code">ALTER TABLE</span>  adds one new column.' + 
      '      A single Impala query reads both the old and new data files, containing different numbers of columns.' + 
      '      For any columns not present in a particular data file, all the column values are' + 
      '      considered to be <span class="sql-docs-inline-code">NULL</span> .' + 
      '    </p> <div class="sql-docs-code-block">create table t1 (x int);<br/>insert into t1 values (1), (2);<br/><br/>alter table t1 add columns (s string, t timestamp);<br/>insert into t1 values (3, \'three\', now());<br/><br/>alter table t1 add columns (b boolean);<br/>insert into t1 values (4, \'four\', now(), true);<br/><br/>select * from t1 order by x;<br/>+---+-------+-------------------------------+------+<br/>| x | s     | t                             | b    |<br/>+---+-------+-------------------------------+------+<br/>| 1 | NULL  | NULL                          | NULL |<br/>| 2 | NULL  | NULL                          | NULL |<br/>| 3 | three | 2016-05-11 11:19:45.054457000 | NULL |<br/>| 4 | four  | 2016-05-11 11:20:20.260733000 | true |<br/>+---+-------+-------------------------------+------+<br/></div><p>' + 
      '      You might use the <span class="sql-docs-inline-code">CHANGE</span>  clause to rename a single column, or to treat an existing column as' + 
      '      a different type than before, such as to switch between treating a column as <span class="sql-docs-inline-code">STRING</span>  and' + 
      '      <span class="sql-docs-inline-code">TIMESTAMP</span> , or between <span class="sql-docs-inline-code">INT</span>  and <span class="sql-docs-inline-code">BIGINT</span> . You can only drop a' + 
      '      single column at a time; to drop multiple columns, issue multiple <span class="sql-docs-inline-code">ALTER TABLE</span>  statements, or' + 
      '      define the new set of columns with a single <span class="sql-docs-inline-code">ALTER TABLE ... REPLACE COLUMNS</span>  statement.' + 
      '    </p> <p>' + 
      '      The following examples show some safe operations to drop or change columns. Dropping the final column' + 
      '      in a table lets Impala ignore the data causing any disruption to existing data files. Changing the type' + 
      '      of a column works if existing data values can be safely converted to the new type. The type conversion' + 
      '      rules depend on the file format of the underlying table. For example, in a text table, the same value' + 
      '      can be interpreted as a <span class="sql-docs-inline-code">STRING</span>  or a numeric value, while in a binary format such as' + 
      '      Parquet, the rules are stricter and type conversions only work between certain sizes of integers.' + 
      '    </p> <div class="sql-docs-code-block">create table optional_columns (x int, y int, z int, a1 int, a2 int);<br/>insert into optional_columns values (1,2,3,0,0), (2,3,4,100,100);<br/><br/>-- When the last column in the table is dropped, Impala ignores the<br/>-- values that are no longer needed. (Dropping A1 but leaving A2<br/>-- would cause problems, as we will see in a subsequent example.)<br/>alter table optional_columns drop column a2;<br/>alter table optional_columns drop column a1;<br/><br/>select * from optional_columns;<br/>+---+---+---+<br/>| x | y | z |<br/>+---+---+---+<br/>| 1 | 2 | 3 |<br/>| 2 | 3 | 4 |<br/>+---+---+---+<br/></div><div class="sql-docs-code-block">create table int_to_string (s string, x int);<br/>insert into int_to_string values (\'one\', 1), (\'two\', 2);<br/><br/>-- What was an INT column will now be interpreted as STRING.<br/>-- This technique works for text tables but not other file formats.<br/>-- The second X represents the new name of the column, which we keep the same.<br/>alter table int_to_string change x x string;<br/><br/>-- Once the type is changed, we can insert non-integer values into the X column<br/>-- and treat that column as a string, for example by uppercasing or concatenating.<br/>insert into int_to_string values (\'three\', \'trois\');<br/>select s, upper(x) from int_to_string;<br/>+-------+----------+<br/>| s     | upper(x) |<br/>+-------+----------+<br/>| one   | 1        |<br/>| two   | 2        |<br/>| three | TROIS    |<br/>+-------+----------+<br/></div><p>' + 
      '      Remember that Impala does not actually do any conversion for the underlying data files as a result of' + 
      '      <span class="sql-docs-inline-code">ALTER TABLE</span>  statements. If you use <span class="sql-docs-inline-code">ALTER TABLE</span>  to create a table' + 
      '      layout that does not agree with the contents of the underlying files, you must replace the files' + 
      '      yourself, such as using <span class="sql-docs-inline-code">LOAD DATA</span>  to load a new set of data files, or' + 
      '      <span class="sql-docs-inline-code">INSERT OVERWRITE</span>  to copy from another table and replace the original data.' + 
      '    </p> <p>' + 
      '      The following example shows what happens if you delete the middle column from a Parquet table containing three columns.' + 
      '      The underlying data files still contain three columns of data. Because the columns are interpreted based on their positions in' + 
      '      the data file instead of the specific column names, a <span class="sql-docs-inline-code">SELECT *</span>  query now reads the first and second' + 
      '      columns from the data file, potentially leading to unexpected results or conversion errors.' + 
      '      For this reason, if you expect to someday drop a column, declare it as the last column in the table, where its data' + 
      '      can be ignored by queries after the column is dropped. Or, re-run your ETL process and create new data files' + 
      '      if you drop or change the type of a column in a way that causes problems with existing data files.' + 
      '    </p> <div class="sql-docs-code-block">-- Parquet table showing how dropping a column can produce unexpected results.<br/>create table p1 (s1 string, s2 string, s3 string) stored as parquet;<br/><br/>insert into p1 values (\'one\', \'un\', \'uno\'), (\'two\', \'deux\', \'dos\'),<br/>  (\'three\', \'trois\', \'tres\');<br/>select * from p1;<br/>+-------+-------+------+<br/>| s1    | s2    | s3   |<br/>+-------+-------+------+<br/>| one   | un    | uno  |<br/>| two   | deux  | dos  |<br/>| three | trois | tres |<br/>+-------+-------+------+<br/><br/>alter table p1 drop column s2;<br/>-- The S3 column contains unexpected results.<br/>-- Because S2 and S3 have compatible types, the query reads<br/>-- values from the dropped S2, because the existing data files<br/>-- still contain those values as the second column.<br/>select * from p1;<br/>+-------+-------+<br/>| s1    | s3    |<br/>+-------+-------+<br/>| one   | un    |<br/>| two   | deux  |<br/>| three | trois |<br/>+-------+-------+<br/></div><div class="sql-docs-code-block">-- Parquet table showing how dropping a column can produce conversion errors.<br/>create table p2 (s1 string, x int, s3 string) stored as parquet;<br/><br/>insert into p2 values (\'one\', 1, \'uno\'), (\'two\', 2, \'dos\'), (\'three\', 3, \'tres\');<br/>select * from p2;<br/>+-------+---+------+<br/>| s1    | x | s3   |<br/>+-------+---+------+<br/>| one   | 1 | uno  |<br/>| two   | 2 | dos  |<br/>| three | 3 | tres |<br/>+-------+---+------+<br/><br/>alter table p2 drop column x;<br/>select * from p2;<br/>WARNINGS:<br/>File \'<span class="sql-docs-variable">hdfs_filename</span> \' has an incompatible Parquet schema for column \'add_columns.p2.s3\'.<br/>Column type: STRING, Parquet schema:<br/>optional int32 x [i:1 d:1 r:0]<br/><br/>File \'<span class="sql-docs-variable">hdfs_filename</span> \' has an incompatible Parquet schema for column \'add_columns.p2.s3\'.<br/>Column type: STRING, Parquet schema:<br/>optional int32 x [i:1 d:1 r:0]<br/></div><p>' + 
      '      In Impala 2.6 and higher, if an Avro table is created without column definitions in the' + 
      '      <span class="sql-docs-inline-code">CREATE TABLE</span>  statement, and columns are later' + 
      '      added through <span class="sql-docs-inline-code">ALTER TABLE</span> , the resulting' + 
      '      table is now queryable. Missing values from the newly added' + 
      '      columns now default to <span class="sql-docs-inline-code">NULL</span> .' + 
      '    </p> <p><b>To change the file format that Impala expects data to be in, for a table or partition:</b> </p> <p>' + 
      '      Use an <span class="sql-docs-inline-code">ALTER TABLE ... SET FILEFORMAT</span>  clause. You can include an optional <span class="sql-docs-inline-code">PARTITION' + 
      '      (<span class="sql-docs-variable">col1</span> =<span class="sql-docs-variable">val1</span> , <span class="sql-docs-variable">col2</span> =<span class="sql-docs-variable">val2</span> ,' + 
      '      ...</span>  clause so that the file format is changed for a specific partition rather than the entire table.' + 
      '    </p> <p>' + 
      '      Because this operation only changes the table metadata, you must do any conversion of existing data using' + 
      '      regular Hadoop techniques outside of Impala. Any new data created by the Impala <span class="sql-docs-inline-code">INSERT</span> ' + 
      '      statement will be in the new format. You cannot specify the delimiter for Text files; the data files must be' + 
      '      comma-delimited.' + 
      '</p> <p>' + 
      '      To set the file format for a single partition, include the <span class="sql-docs-inline-code">PARTITION</span>  clause. Specify all the' + 
      '      same partitioning columns for the table, with a constant value for each, to precisely identify the single' + 
      '      partition affected by the statement:' + 
      '    </p> <div class="sql-docs-code-block">create table p1 (s string) partitioned by (month int, day int);<br/>-- Each ADD PARTITION clause creates a subdirectory in HDFS.<br/>alter table p1 add partition (month=1, day=1);<br/>alter table p1 add partition (month=1, day=2);<br/>alter table p1 add partition (month=2, day=1);<br/>alter table p1 add partition (month=2, day=2);<br/>-- Queries and INSERT statements will read and write files<br/>-- in this format for this specific partition.<br/>alter table p1 partition (month=2, day=2) set fileformat parquet;<br/></div><p><b>To change the row format with different delimiter characters:</b> </p> <p> Use the <span class="sql-docs-inline-code">SET ROW FORMAT DELIMITED</span>  clause to ingest data' + 
      '      files that use a different delimiter character or a different line end' + 
      '      character. When specifying delimiter and line end characters with the' + 
      '        <span class="sql-docs-inline-code">FIELDS TERMINATED BY</span> , <span class="sql-docs-inline-code">ESCAPED BY</span> , and' + 
      '        <span class="sql-docs-inline-code">LINES TERMINATED BY</span>  clauses, you can use the following:<ul><li>A regular ASCII character surrounded by single or double quotation' + 
      '          marks.</li> <li>An octal sequence,  such as <span class="sql-docs-inline-code">\'\\054\'</span>  representing a' + 
      '          comma or <span class="sql-docs-inline-code">\'\\0\'</span>  for ASCII null (hex 00).</li> <li>Special characters, such as:<ul><li><span class="sql-docs-inline-code">\'\\t\'</span>  for tab</li> <li><span class="sql-docs-inline-code">\'\\n\'</span>  for newline or linefeed</li> <li><span class="sql-docs-inline-code">\'\\r\'</span>  for carriage return</li> </ul> </li> <li>An integer in the range \'-127\'..\'128\' (with quotation marks but no' + 
      '            backslash)<p>Negative values are subtracted from 256. For example,' + 
      '              <span class="sql-docs-inline-code">FIELDS TERMINATED BY \'-2\'</span>  sets the field' + 
      '            delimiter to ASCII code 254.</p> </li> </ul> </p> <p>For more examples of text tables, see <span>txtfile</span>. </p> <p> For the <span class="sql-docs-inline-code">ESCAPED BY</span>  clause, choose an escape character' + 
      '      that is not used anywhere else in the file. The character following the' + 
      '      escape character is taken literally as part of a field value. </p> <p>Surrounding field values with quotation marks does not help Impala to' + 
      '      parse fields with embedded delimiter characters as the quotation marks are' + 
      '      considered to be part of the column value. </p> <p>If you want to use <span class="sql-docs-inline-code">\\</span>  as the escape character, specify' + 
      '      the clause in <span class="sql-docs-inline-code">impala-shell</span>  as <span class="sql-docs-inline-code">ESCAPED BY' + 
      '        \'\\\'</span> . </p> <p><b>To add or drop partitions for a table</b> , the table must already be partitioned (that is, created with a' + 
      '      <span class="sql-docs-inline-code">PARTITIONED BY</span>  clause). The partition is a physical directory in HDFS, with a name that' + 
      '      encodes a particular column value (the <b>partition key</b> ). The Impala <span class="sql-docs-inline-code">INSERT</span>  statement' + 
      '      already creates the partition if necessary, so the <span class="sql-docs-inline-code">ALTER TABLE ... ADD PARTITION</span>  is' + 
      '      primarily useful for importing data by moving or copying existing data files into the HDFS directory' + 
      '      corresponding to a partition. (You can use the <span class="sql-docs-inline-code">LOAD DATA</span>  statement to move files into the' + 
      '      partition directory, or <span class="sql-docs-inline-code">ALTER TABLE ... PARTITION (...) SET LOCATION</span>  to point a partition at' + 
      '      a directory that already contains data files.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">DROP PARTITION</span>  clause is used to remove the HDFS directory and associated data files for' + 
      '      a particular set of partition key values; for example, if you always analyze the last 3 months worth of data,' + 
      '      at the beginning of each month you might drop the oldest partition that is no longer needed. Removing' + 
      '      partitions reduces the amount of metadata associated with the table and the complexity of calculating the' + 
      '      optimal query plan, which can simplify and speed up queries on partitioned tables, particularly join queries.' + 
      '      Here is an example showing the <span class="sql-docs-inline-code">ADD PARTITION</span>  and <span class="sql-docs-inline-code">DROP PARTITION</span>  clauses.' + 
      '    </p> <p>' + 
      '      To avoid errors while adding or dropping partitions whose existence is not certain,' + 
      '      add the optional <span class="sql-docs-inline-code">IF [NOT] EXISTS</span>  clause between the <span class="sql-docs-inline-code">ADD</span>  or' + 
      '      <span class="sql-docs-inline-code">DROP</span>  keyword and the <span class="sql-docs-inline-code">PARTITION</span>  keyword. That is, the entire' + 
      '      clause becomes <span class="sql-docs-inline-code">ADD IF NOT EXISTS PARTITION</span>  or <span class="sql-docs-inline-code">DROP IF EXISTS PARTITION</span> .' + 
      '      The following example shows how partitions can be created automatically through <span class="sql-docs-inline-code">INSERT</span> ' + 
      '      statements, or manually through <span class="sql-docs-inline-code">ALTER TABLE</span>  statements. The <span class="sql-docs-inline-code">IF [NOT] EXISTS</span> ' + 
      '      clauses let the <span class="sql-docs-inline-code">ALTER TABLE</span>  statements succeed even if a new requested partition already' + 
      '      exists, or a partition to be dropped does not exist.' + 
      '    </p> <p>' + 
      'Inserting 2 year values creates 2 partitions:' + 
      '</p> <div class="sql-docs-code-block">create table partition_t (s string) partitioned by (y int);<br/>insert into partition_t (s,y) values (\'two thousand\',2000), (\'nineteen ninety\',1990);<br/>show partitions partition_t;<br/>+-------+-------+--------+------+--------------+-------------------+--------+-------------------+<br/>| y     | #Rows | #Files | Size | Bytes Cached | Cache Replication | Format | Incremental stats |<br/>+-------+-------+--------+------+--------------+-------------------+--------+-------+<br/>| 1990  | -1    | 1      | 16B  | NOT CACHED   | NOT CACHED        | TEXT   | false |<br/>| 2000  | -1    | 1      | 13B  | NOT CACHED   | NOT CACHED        | TEXT   | false |<br/>| Total | -1    | 2      | 29B  | 0B           |                   |        |       |<br/>+-------+-------+--------+------+--------------+-------------------+--------+-------+<br/></div><p>' + 
      'Without the <span class="sql-docs-inline-code">IF NOT EXISTS</span>  clause, an attempt to add a new partition might fail:' + 
      '</p> <div class="sql-docs-code-block">alter table partition_t add partition (y=2000);<br/>ERROR: AnalysisException: Partition spec already exists: (y=2000).<br/></div><p>' + 
      'The <span class="sql-docs-inline-code">IF NOT EXISTS</span>  clause makes the statement succeed whether or not there was already a' + 
      'partition with the specified key value:' + 
      '</p> <div class="sql-docs-code-block">alter table partition_t add if not exists partition (y=2000);<br/>alter table partition_t add if not exists partition (y=2010);<br/>show partitions partition_t;<br/>+-------+-------+--------+------+--------------+-------------------+--------+-------------------+<br/>| y     | #Rows | #Files | Size | Bytes Cached | Cache Replication | Format | Incremental stats |<br/>+-------+-------+--------+------+--------------+-------------------+--------+-------+<br/>| 1990  | -1    | 1      | 16B  | NOT CACHED   | NOT CACHED        | TEXT   | false |<br/>| 2000  | -1    | 1      | 13B  | NOT CACHED   | NOT CACHED        | TEXT   | false |<br/>| 2010  | -1    | 0      | 0B   | NOT CACHED   | NOT CACHED        | TEXT   | false |<br/>| Total | -1    | 2      | 29B  | 0B           |                   |        |       |<br/>+-------+-------+--------+------+--------------+-------------------+--------+-------+<br/></div><p>' + 
      'Likewise, the <span class="sql-docs-inline-code">IF EXISTS</span>  clause lets <span class="sql-docs-inline-code">DROP PARTITION</span>  succeed whether or not the partition is already' + 
      'in the table:' + 
      '</p> <div class="sql-docs-code-block">alter table partition_t drop if exists partition (y=2000);<br/>alter table partition_t drop if exists partition (y=1950);<br/>show partitions partition_t;<br/>+-------+-------+--------+------+--------------+-------------------+--------+-------------------+<br/>| y     | #Rows | #Files | Size | Bytes Cached | Cache Replication | Format | Incremental stats |<br/>+-------+-------+--------+------+--------------+-------------------+--------+-------+<br/>| 1990  | -1    | 1      | 16B  | NOT CACHED   | NOT CACHED        | TEXT   | false |<br/>| 2010  | -1    | 0      | 0B   | NOT CACHED   | NOT CACHED        | TEXT   | false |<br/>| Total | -1    | 1      | 16B  | 0B           |                   |        |       |<br/>+-------+-------+--------+------+--------------+-------------------+--------+-------+<br/></div><p> The optional <span class="sql-docs-inline-code">PURGE</span>  keyword, available in' + 
      '      Impala 2.3 and higher, is used with the <span class="sql-docs-inline-code">DROP' + 
      '        PARTITION</span>  clause to remove associated HDFS data files' + 
      '      immediately rather than going through the HDFS trashcan mechanism. Use' + 
      '      this keyword when dropping a partition if it is crucial to remove the data' + 
      '      as quickly as possible to free up space, or if there is a problem with the' + 
      '      trashcan, such as the trash cannot being configured or being in a' + 
      '      different HDFS encryption zone than the data files. </p> <div class="sql-docs-code-block">-- Create an empty table and define the partitioning scheme.<br/>create table part_t (x int) partitioned by (month int);<br/>-- Create an empty partition into which you could copy data files from some other source.<br/>alter table part_t add partition (month=1);<br/>-- After changing the underlying data, issue a REFRESH statement to make the data visible in Impala.<br/>refresh part_t;<br/>-- Later, do the same for the next month.<br/>alter table part_t add partition (month=2);<br/><br/>-- Now you no longer need the older data.<br/>alter table part_t drop partition (month=1);<br/>-- If the table was partitioned by month and year, you would issue a statement like:<br/>-- alter table part_t drop partition (year=2003,month=1);<br/>-- which would require 12 ALTER TABLE statements to remove a year\'s worth of data.<br/><br/>-- If the data files for subsequent months were in a different file format,<br/>-- you could set a different file format for the new partition as you create it.<br/>alter table part_t add partition (month=3) set fileformat=parquet;<br/></div><p>' + 
      '      The value specified for a partition key can be an arbitrary constant expression, without any references to' + 
      '      columns. For example:' + 
      '    </p> <div class="sql-docs-code-block">alter table time_data add partition (month=concat(\'Decem\',\'ber\'));<br/>alter table sales_data add partition (zipcode = cast(9021 * 10 as string));</div><div class="sql-docs-note"><p>' + 
      '        An alternative way to reorganize a table and its associated data files is to use <span class="sql-docs-inline-code">CREATE' + 
      '        TABLE</span>  to create a variation of the original table, then use <span class="sql-docs-inline-code">INSERT</span>  to copy the' + 
      '        transformed or reordered data to the new table. The advantage of <span class="sql-docs-inline-code">ALTER TABLE</span>  is that it' + 
      '        avoids making a duplicate copy of the data files, allowing you to reorganize huge volumes of data in a' + 
      '        space-efficient way using familiar Hadoop techniques.' + 
      '      </p> </div> <p><b>To switch a table between internal and external:</b> </p> <p id="../Impala/docs/topics/impala_alter_table.xml_switch_internal_external_table">' + 
      '        You can switch a table from internal to external, or from external to internal, by using the <span class="sql-docs-inline-code">ALTER' + 
      '        TABLE</span>  statement:' + 
      '<div class="sql-docs-code-block">-- Switch a table from internal to external.<br/>ALTER TABLE <span class="sql-docs-variable">table_name</span> SET TBLPROPERTIES(\'EXTERNAL\'=\'TRUE\');<br/><br/>-- Switch a table from external to internal.<br/>ALTER TABLE <span class="sql-docs-variable">table_name</span> SET TBLPROPERTIES(\'EXTERNAL\'=\'FALSE\');<br/></div></p> <p id="../Impala/docs/topics/impala_alter_table.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_alter_table.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '      Most <span class="sql-docs-inline-code">ALTER TABLE</span>  clauses do not actually' + 
      '      read or write any HDFS files, and so do not depend on' + 
      '      specific HDFS permissions. For example, the <span class="sql-docs-inline-code">SET FILEFORMAT</span> ' + 
      '      clause does not actually check the file format existing data files or' + 
      '      convert them to the new format, and the <span class="sql-docs-inline-code">SET LOCATION</span>  clause' + 
      '      does not require any special permissions on the new location.' + 
      '      (Any permission-related failures would come later, when you' + 
      '      actually query or insert into the table.)' + 
      '    </p> <p>' + 
      '      In general, <span class="sql-docs-inline-code">ALTER TABLE</span>  clauses that do touch' + 
      '      HDFS files and directories require the same HDFS permissions' + 
      '      as corresponding <span class="sql-docs-inline-code">CREATE</span> , <span class="sql-docs-inline-code">INSERT</span> ,' + 
      '      or <span class="sql-docs-inline-code">SELECT</span>  statements.' + 
      '      The permissions allow' + 
      '      the user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '      typically the <span class="sql-docs-inline-code">impala</span>  user, to read or write' + 
      '      files or directories, or (in the case of the execute bit) descend into a directory.' + 
      '      The <span class="sql-docs-inline-code">RENAME TO</span>  clause requires read, write, and execute permission in the' + 
      '      source and destination database directories and in the table data directory,' + 
      '      and read and write permission for the data files within the table.' + 
      '      The <span class="sql-docs-inline-code">ADD PARTITION</span>  and <span class="sql-docs-inline-code">DROP PARTITION</span>  clauses' + 
      '      require write and execute permissions for the associated partition directory.' + 
      '    </p> <p id="../Impala/docs/topics/impala_alter_table.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p>' + 
      '      Because of the extra constraints and features of Kudu tables, such as the <span class="sql-docs-inline-code">NOT NULL</span> ' + 
      '      and <span class="sql-docs-inline-code">DEFAULT</span>  attributes for columns, <span class="sql-docs-inline-code">ALTER TABLE</span>  has specific' + 
      '      requirements related to Kudu tables:' + 
      '      <ul><li><p>' + 
      '            In an <span class="sql-docs-inline-code">ADD COLUMNS</span>  operation, you can specify the <span class="sql-docs-inline-code">NULL</span> ,' + 
      '            <span class="sql-docs-inline-code">NOT NULL</span> , and <span class="sql-docs-inline-code">DEFAULT <span class="sql-docs-variable">default_value</span> </span> ' + 
      '            column attributes.' + 
      '          </p> </li> <li><p>' + 
      '            In Impala 2.9 and higher, you can also specify the <span class="sql-docs-inline-code">ENCODING</span> ,' + 
      '            <span class="sql-docs-inline-code">COMPRESSION</span> , and <span class="sql-docs-inline-code">BLOCK_SIZE</span>  attributes when adding a column.' + 
      '          </p> </li> <li><p>' + 
      '            If you add a column with a <span class="sql-docs-inline-code">NOT NULL</span>  attribute, it must also have a' + 
      '            <span class="sql-docs-inline-code">DEFAULT</span>  attribute, so the default value can be assigned to that' + 
      '            column for all existing rows.' + 
      '          </p> </li> <li><p>' + 
      '            The <span class="sql-docs-inline-code">DROP COLUMN</span>  clause works the same for a Kudu table as for other' + 
      '            kinds of tables.' + 
      '          </p> </li> <li><p>' + 
      '            Although you can change the name of a column with the <span class="sql-docs-inline-code">CHANGE</span>  clause,' + 
      '            you cannot change the type of a column in a Kudu table.' + 
      '          </p> </li> <li><p>' + 
      '            You cannot change the nullability of existing columns in a Kudu table.' + 
      '          </p> </li> <li><p>' + 
      '            In Impala 2.10, you can change the default value, encoding,' + 
      '            compression, or block size of existing columns in a Kudu table by using the' + 
      '            <span class="sql-docs-inline-code">SET</span>  clause.' + 
      '          </p> </li> <li><p>' + 
      '            You cannot use the <span class="sql-docs-inline-code">REPLACE COLUMNS</span>  clause with a Kudu table.' + 
      '          </p> </li> <li><p>' + 
      '            The <span class="sql-docs-inline-code">RENAME TO</span>  clause for a Kudu table only affects the name stored in the' + 
      '            metastore database that Impala uses to refer to the table. To change which underlying Kudu' + 
      '            table is associated with an Impala table name, you must change the <span class="sql-docs-inline-code">TBLPROPERTIES</span> ' + 
      '            property of the table: <span class="sql-docs-inline-code">SET TBLPROPERTIES(\'kudu.table_name\'=\'<span class="sql-docs-variable">kudu_tbl_name</span> )</span> .' + 
      '            Doing so causes Kudu to change the name of the underlying Kudu table.' + 
      '          </p> </li> </ul> </p> <p>' + 
      '      The following are some examples of using the <span class="sql-docs-inline-code">ADD COLUMNS</span>  clause for a Kudu table:' + 
      '    </p> <div class="sql-docs-code-block">CREATE TABLE t1 ( x INT, PRIMARY KEY (x) )<br/>  PARTITION BY HASH (x) PARTITIONS 16<br/>  STORED AS KUDU<br/><br/>ALTER TABLE t1 ADD COLUMNS (y STRING ENCODING prefix_encoding);<br/>ALTER TABLE t1 ADD COLUMNS (z INT DEFAULT 10);<br/>ALTER TABLE t1 ADD COLUMNS (a STRING NOT NULL DEFAULT \'\', t TIMESTAMP COMPRESSION default_compression);<br/></div><p>' + 
      '      The following are some examples of modifying column defaults and storage attributes for a Kudu table:' + 
      '    </p> <div class="sql-docs-code-block">create table kt (x bigint primary key, s string default \'yes\', t timestamp)<br/>  stored as kudu;<br/><br/>-- You can change the default value for a column, which affects any rows<br/>-- inserted after this change is made.<br/>alter table kt alter column s set default \'no\';<br/><br/>-- You can remove the default value for a column, which affects any rows<br/>-- inserted after this change is made. If the column is nullable, any<br/>-- future inserts default to NULL for this column. If the column is marked<br/>-- NOT NULL, any future inserts must specify a value for the column.<br/>alter table kt alter column s drop default;<br/><br/>insert into kt values (1, \'foo\', now());<br/>-- Because of the DROP DEFAULT above, omitting S from the insert<br/>-- gives it a value of NULL.<br/>insert into kt (x, t) values (2, now());<br/><br/>select * from kt;<br/>+---+------+-------------------------------+<br/>| x | s    | t                             |<br/>+---+------+-------------------------------+<br/>| 2 | NULL | 2017-10-02 00:03:40.652156000 |<br/>| 1 | foo  | 2017-10-02 00:03:04.346185000 |<br/>+---+------+-------------------------------+<br/><br/>-- Other storage-related attributes can also be changed for columns.<br/>-- These changes take effect for any newly inserted rows, or rows<br/>-- rearranged due to compaction after deletes or updates.<br/>alter table kt alter column s set encoding prefix_encoding;<br/>-- The COLUMN keyword is optional in the syntax.<br/>alter table kt alter x set block_size 2048;<br/>alter table kt alter column t set compression zlib;<br/><br/>desc kt;<br/>+------+-----------+---------+-------------+----------+---------------+-----------------+---------------------+------------+<br/>| name | type      | comment | primary_key | nullable | default_value | encoding        | compression         | block_size |<br/>+------+-----------+---------+-------------+----------+---------------+-----------------+---------------------+------------+<br/>| x    | bigint    |         | true        | false    |               | AUTO_ENCODING   | DEFAULT_COMPRESSION | 2048       |<br/>| s    | string    |         | false       | true     |               | PREFIX_ENCODING | DEFAULT_COMPRESSION | 0          |<br/>| t    | timestamp |         | false       | true     |               | AUTO_ENCODING   | ZLIB                | 0          |<br/>+------+-----------+---------+-------------+----------+---------------+-----------------+---------------------+------------+<br/></div><p>' + 
      '      Kudu tables all use an underlying partitioning mechanism. The partition syntax is different than for non-Kudu' + 
      '      tables. You can use the <span class="sql-docs-inline-code">ALTER TABLE</span>  statement to add and drop <span class="sql-docs-variable">range partitions</span> ' + 
      '      from a Kudu table. Any new range must not overlap with any existing ranges. Dropping a range removes all the associated' + 
      '      rows from the table. See <span>kudu partitioning</span> for details.' + 
      '    </p> <p id="../Impala/docs/topics/impala_alter_table.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#tables">Overview of Impala Tables</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_table.xml#create_table">CREATE TABLE Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_table.xml#drop_table">DROP TABLE Statement</a>,' + 
      '      <span>partitioning</span>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#internal_tables"><h4>Internal Tables</h4> </a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#external_tables"><h4>External Tables</h4> </a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_alter_view.xml',
    title: 'ALTER VIEW Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Changes the characteristics of a view. The syntax has two forms:' + 
      '    </p> <ul><li>' + 
      '        The <span class="sql-docs-inline-code">AS</span>  clause associates the view with a different query.' + 
      '      </li> <li>' + 
      '        The <span class="sql-docs-inline-code">RENAME TO</span>  clause changes the name of the view, moves the view to' + 
      '        a different database, or both.' + 
      '      </li> </ul> <p>' + 
      '      Because a view is purely a logical construct (an alias for a query) with no physical data behind it,' + 
      '      <span class="sql-docs-inline-code">ALTER VIEW</span>  only involves changes to metadata in the metastore database, not any data files' + 
      '      in HDFS.' + 
      '    </p> <p id="../Impala/docs/topics/impala_alter_view.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">ALTER VIEW [<span class="sql-docs-variable">database_name</span> .]<span class="sql-docs-variable">view_name</span> AS <span class="sql-docs-variable">select_statement</span> ALTER VIEW [<span class="sql-docs-variable">database_name</span> .]<span class="sql-docs-variable">view_name</span> RENAME TO [<span class="sql-docs-variable">database_name</span> .]<span class="sql-docs-variable">view_name</span> </div><p id="../Impala/docs/topics/impala_alter_view.xml_ddl_blurb"><b>Statement type:</b>  DDL' + 
      '      </p> <p id="../Impala/docs/topics/impala_alter_view.xml_sync_ddl_blurb">' + 
      '        If you connect to different Impala nodes within an <span class="sql-docs-inline-code">impala-shell</span>  session for' + 
      '        load-balancing purposes, you can enable the <span class="sql-docs-inline-code">SYNC_DDL</span>  query option to make each DDL' + 
      '        statement wait before returning, until the new or changed metadata has been received by all the Impala' + 
      '        nodes. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_sync_ddl.xml#sync_ddl">SYNC_DDL Query Option</a> for details.' + 
      '      </p> <p id="../Impala/docs/topics/impala_alter_view.xml_security_blurb"><b>Security considerations:</b> </p> <p id="../Impala/docs/topics/impala_alter_view.xml_redaction_yes">' + 
      '        If these statements in your environment contain sensitive literal values such as credit card numbers or tax' + 
      '        identifiers, Impala can redact this sensitive information when displaying the statements in log files and' + 
      '        other administrative contexts. See  for details.' + 
      '      </p> <p id="../Impala/docs/topics/impala_alter_view.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_alter_view.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> <p id="../Impala/docs/topics/impala_alter_view.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">create table t1 (x int, y int, s string);<br/>create table t2 like t1;<br/>create view v1 as select * from t1;<br/>alter view v1 as select * from t2;<br/>alter view v1 as select x, upper(s) s from t2;</div><p id="../Impala/docs/topics/impala_alter_view.xml_describe_formatted_view">' + 
      '        To see the definition of a view, issue a <span class="sql-docs-inline-code">DESCRIBE FORMATTED</span>  statement, which shows the' + 
      '        query from the original <span class="sql-docs-inline-code">CREATE VIEW</span>  statement:' + 
      '<div class="sql-docs-code-block">[localhost:21000] > create view v1 as select * from t1;<br/>[localhost:21000] > describe formatted v1;<br/>Query finished, fetching results ...<br/>+------------------------------+------------------------------+------------+<br/>| name                         | type                         | comment    |<br/>+------------------------------+------------------------------+------------+<br/>| # col_name                   | data_type                    | comment    |<br/>|                              | NULL                         | NULL       |<br/>| x                            | int                          | None       |<br/>| y                            | int                          | None       |<br/>| s                            | string                       | None       |<br/>|                              | NULL                         | NULL       |<br/>| # Detailed Table Information | NULL                         | NULL       |<br/>| Database:                    | views                        | NULL       |<br/>| Owner:                       | doc_demo                     | NULL       |<br/>| CreateTime:                  | Mon Jul 08 15:56:27 EDT 2013 | NULL       |<br/>| LastAccessTime:              | UNKNOWN                      | NULL       |<br/>| Protect Mode:                | None                         | NULL       |<br/>| Retention:                   | 0                            | NULL       |<br/><b>| Table Type:                  | VIRTUAL_VIEW                 | NULL       |</b> | Table Parameters:            | NULL                         | NULL       |<br/>|                              | transient_lastDdlTime        | 1373313387 |<br/>|                              | NULL                         | NULL       |<br/>| # Storage Information        | NULL                         | NULL       |<br/>| SerDe Library:               | null                         | NULL       |<br/>| InputFormat:                 | null                         | NULL       |<br/>| OutputFormat:                | null                         | NULL       |<br/>| Compressed:                  | No                           | NULL       |<br/>| Num Buckets:                 | 0                            | NULL       |<br/>| Bucket Columns:              | []                           | NULL       |<br/>| Sort Columns:                | []                           | NULL       |<br/>|                              | NULL                         | NULL       |<br/>| # View Information           | NULL                         | NULL       |<br/><b>| View Original Text:          | SELECT * FROM t1             | NULL       |<br/>| View Expanded Text:          | SELECT * FROM t1             | NULL       |</b> +------------------------------+------------------------------+------------+<br/></div></p> <p id="../Impala/docs/topics/impala_alter_view.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_views.xml#views">Overview of Impala Views</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_view.xml#create_view">CREATE VIEW Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_view.xml#drop_view">DROP VIEW Statement</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_compute_stats.xml',
    title: 'COMPUTE STATS Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p> The' + 
      '      COMPUTE STATS statement gathers information about volume and distribution' + 
      '      of data in a table and all associated columns and partitions. The' + 
      '      information is stored in the metastore database, and used by Impala to' + 
      '      help optimize queries. For example, if Impala can determine that a table' + 
      '      is large or small, or has many or few distinct values it can organize and' + 
      '      parallelize the work appropriately for a join query or insert operation.' + 
      '      For details about the kinds of information gathered by this statement, see' + 
      '        <span>perf stats</span>.' + 
      '    </p> <p id="../Impala/docs/topics/impala_compute_stats.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block"><span class="sql-docs-inline-code">COMPUTE STATS [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">table_name</span> [ ( <span class="sql-docs-variable">column_list</span> ) ] [TABLESAMPLE SYSTEM(<span class="sql-docs-variable">percentage</span> ) [REPEATABLE(<span class="sql-docs-variable">seed</span> )]]</span> <span class="sql-docs-variable">column_list</span> ::= <span class="sql-docs-variable">column_name</span> [ , <span class="sql-docs-variable">column_name</span> , ... ]<br/><br/>COMPUTE INCREMENTAL STATS [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">table_name</span> [PARTITION (<span class="sql-docs-variable">partition_spec</span> )]<br/><br/><span class="sql-docs-variable">partition_spec</span> ::= <span class="sql-docs-variable">simple_partition_spec</span> | <span class="sql-docs-inline-code"><span class="sql-docs-variable">complex_partition_spec</span> </span> <span class="sql-docs-variable">simple_partition_spec</span> ::= <span class="sql-docs-variable">partition_col</span> =<span class="sql-docs-variable">constant_value</span> <span class="sql-docs-inline-code"><span class="sql-docs-variable">complex_partition_spec</span> ::= <span class="sql-docs-variable">comparison_expression_on_partition_col</span> </span> </div><p id="../Impala/docs/topics/impala_compute_stats.xml_incremental_partition_spec">' + 
      '        The <span class="sql-docs-inline-code">PARTITION</span>  clause is only allowed in combination with the <span class="sql-docs-inline-code">INCREMENTAL</span> ' + 
      '        clause. It is optional for <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span> , and required for <span class="sql-docs-inline-code">DROP' + 
      '        INCREMENTAL STATS</span> . Whenever you specify partitions through the <span class="sql-docs-inline-code">PARTITION' + 
      '        (<span class="sql-docs-variable">partition_spec</span> )</span>  clause in a <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  or' + 
      '        <span class="sql-docs-inline-code">DROP INCREMENTAL STATS</span>  statement, you must include all the partitioning columns in the' + 
      '        specification, and specify constant values for all the partition key columns.' + 
      '      </p> <p id="../Impala/docs/topics/impala_compute_stats.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      Originally, Impala relied on users to run the Hive <span class="sql-docs-inline-code">ANALYZE' + 
      '        TABLE</span>  statement, but that method of gathering statistics proved' + 
      '      unreliable and difficult to use. The Impala <span class="sql-docs-inline-code">COMPUTE STATS</span> ' + 
      '      statement was built to improve the reliability and user-friendliness of' + 
      '      this operation. <span class="sql-docs-inline-code">COMPUTE STATS</span>  does not require any setup' + 
      '      steps or special configuration. You only run a single Impala' + 
      '        <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement to gather both table and column' + 
      '      statistics, rather than separate Hive <span class="sql-docs-inline-code">ANALYZE TABLE</span> ' + 
      '      statements for each kind of statistics.' + 
      '    </p> <p>' + 
      '      For non-incremental <span class="sql-docs-inline-code">COMPUTE STATS</span> ' + 
      '      statement, the columns for which statistics are computed can be specified' + 
      '      with an optional comma-separate list of columns.' + 
      '    </p> <p>' + 
      '      If no column list is given, the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement' + 
      '      computes column-level statistics for all columns of the table. This adds' + 
      '      potentially unneeded work for columns whose stats are not needed by' + 
      '      queries. It can be especially costly for very wide tables and unneeded' + 
      '      large string fields.' + 
      '    </p> <p><span class="sql-docs-inline-code">COMPUTE STATS</span>  returns an error when a specified column' + 
      '      cannot be analyzed, such as when the column does not exist, the column is' + 
      '      of an unsupported type for COMPUTE STATS, e.g. colums of complex types,' + 
      '      or the column is a partitioning column.' + 
      '' + 
      '    </p> <p>' + 
      '      If an empty column list is given, no column is analyzed by <span class="sql-docs-inline-code">COMPUTE' + 
      '        STATS</span> .' + 
      '    </p> <p>' + 
      '      In Impala 2.12 and' + 
      '      higher, an optional <span class="sql-docs-inline-code">TABLESAMPLE</span>  clause immediately after' + 
      '      a table reference specifies that the <span class="sql-docs-inline-code">COMPUTE STATS</span> ' + 
      '      operation only processes a specified percentage of the table data. For' + 
      '      tables that are so large that a full <span class="sql-docs-inline-code">COMPUTE STATS</span> ' + 
      '      operation is impractical, you can use <span class="sql-docs-inline-code">COMPUTE STATS</span>  with' + 
      '      a <span class="sql-docs-inline-code">TABLESAMPLE</span>  clause to extrapolate statistics from a' + 
      '      sample of the table data. See perf_statsabout the' + 
      '      experimental stats extrapolation and sampling features.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  variation is a shortcut for partitioned tables that works on a' + 
      '      subset of partitions rather than the entire table. The incremental nature makes it suitable for large tables' + 
      '      with many partitions, where a full <span class="sql-docs-inline-code">COMPUTE STATS</span>  operation takes too long to be practical' + 
      '      each time a partition is added or dropped. See <span>perf stats incremental</span>' + 
      '      for full usage details.' + 
      '    </p> <div class="sql-docs-note"><p id="../Impala/docs/topics/impala_compute_stats.xml_cs_or_cis">' + 
      '        For a particular table, use either <span class="sql-docs-inline-code">COMPUTE STATS</span>  or' + 
      '        <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span> , but never combine the two or' + 
      '        alternate between them. If you switch from <span class="sql-docs-inline-code">COMPUTE STATS</span>  to' + 
      '        <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  during the lifetime of a table, or' + 
      '        vice versa, drop all statistics by running <span class="sql-docs-inline-code">DROP STATS</span>  before' + 
      '        making the switch.' + 
      '      </p> <p id="../Impala/docs/topics/impala_compute_stats.xml_incremental_stats_after_full">' + 
      '        When you run <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  on a table for the first time,' + 
      '        the statistics are computed again from scratch regardless of whether the table already' + 
      '        has statistics. Therefore, expect a one-time resource-intensive operation' + 
      '        for scanning the entire table when running <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span> ' + 
      '        for the first time on a given table.' + 
      '      </p> <p id="../Impala/docs/topics/impala_compute_stats.xml_incremental_stats_caveats">' + 
      '        For a table with a huge number of partitions and many columns, the approximately 400 bytes' + 
      '        of metadata per column per partition can add up to significant memory overhead, as it must' + 
      '        be cached on the <span class="sql-docs-inline-code">catalogd</span>  host and on every <span class="sql-docs-inline-code">impalad</span>  host' + 
      '        that is eligible to be a coordinator. If this metadata for all tables combined exceeds 2 GB,' + 
      '        you might experience service downtime.' + 
      '      </p> </div> <p><span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  only applies to partitioned tables. If you use the' + 
      '      <span class="sql-docs-inline-code">INCREMENTAL</span>  clause for an unpartitioned table, Impala automatically uses the original' + 
      '      <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement. Such tables display <span class="sql-docs-inline-code">false</span>  under the' + 
      '      <span class="sql-docs-inline-code">Incremental stats</span>  column of the <span class="sql-docs-inline-code">SHOW TABLE STATS</span>  output.' + 
      '    </p> <div class="sql-docs-note"><p>' + 
      '        Because many of the most performance-critical and resource-intensive' + 
      '        operations rely on table and column statistics to construct accurate and' + 
      '        efficient plans, <span class="sql-docs-inline-code">COMPUTE STATS</span>  is an important step at' + 
      '        the end of your ETL process. Run <span class="sql-docs-inline-code">COMPUTE STATS</span>  on all' + 
      '        tables as your first step during performance tuning for slow queries, or' + 
      '        troubleshooting for out-of-memory conditions:' + 
      '        <ul><li>' + 
      '            Accurate statistics help Impala construct an efficient query plan' + 
      '            for join queries, improving performance and reducing memory usage.' + 
      '          </li> <li>' + 
      '            Accurate statistics help Impala distribute the work effectively' + 
      '            for insert operations into Parquet tables, improving performance and' + 
      '            reducing memory usage.' + 
      '          </li> <li>' + 
      '            Accurate statistics help Impala estimate the memory' + 
      '            required for each query, which is important when you use resource' + 
      '            management features, such as admission control and the YARN resource' + 
      '            management framework. The statistics help Impala to achieve high' + 
      '            concurrency, full utilization of available memory, and avoid' + 
      '            contention with workloads from other Hadoop components.' + 
      '          </li> <li>' + 
      '            In Impala 2.8 and' + 
      '            higher, when you run the <span class="sql-docs-inline-code">COMPUTE STATS</span>  or' + 
      '              <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  statement against a' + 
      '            Parquet table, Impala automatically applies the query option setting' + 
      '              <span class="sql-docs-inline-code">MT_DOP=4</span>  to increase the amount of intra-node' + 
      '            parallelism during this CPU-intensive operation. See  for details about what this query option does' + 
      '            and how to use it with CPU-intensive <span class="sql-docs-inline-code">SELECT</span> ' + 
      '            statements.' + 
      '          </li> </ul> </p> </div> <p><b>Computing stats for groups of partitions:</b> </p> <p>' + 
      '      In Impala 2.8 and higher, you can run <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span> ' + 
      '      on multiple partitions, instead of the entire table or one partition at a time. You include' + 
      '      comparison operators other than <span class="sql-docs-inline-code">=</span>  in the <span class="sql-docs-inline-code">PARTITION</span>  clause,' + 
      '      and the <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  statement applies to all partitions that' + 
      '      match the comparison expression.' + 
      '    </p> <p>' + 
      '      For example, the <span class="sql-docs-inline-code">INT_PARTITIONS</span>  table contains 4 partitions.' + 
      '      The following <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  statements affect some but not all' + 
      '      partitions, as indicated by the <span class="sql-docs-inline-code">Updated <span class="sql-docs-variable">n</span>  partition(s)</span> ' + 
      '      messages. The partitions that are affected depend on values in the partition key column <span class="sql-docs-inline-code">X</span> ' + 
      '      that match the comparison expression in the <span class="sql-docs-inline-code">PARTITION</span>  clause.' + 
      '    </p> <div class="sql-docs-code-block"></div><p id="../Impala/docs/topics/impala_compute_stats.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p>' + 
      '      Currently, the statistics created by the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement do not include' + 
      '      information about complex type columns. The column stats metrics for complex columns are always shown' + 
      '      as -1. For queries involving complex type columns, Impala uses' + 
      '      heuristics to estimate the data distribution within such columns.' + 
      '    </p> <p id="../Impala/docs/topics/impala_compute_stats.xml_hbase_blurb"><b>HBase considerations:</b> </p> <p><span class="sql-docs-inline-code">COMPUTE STATS</span>  works for HBase tables also. The statistics gathered for HBase tables are' + 
      '      somewhat different than for HDFS-backed tables, but that metadata is still used for optimization when HBase' + 
      '      tables are involved in join queries.' + 
      '    </p> <p id="../Impala/docs/topics/impala_compute_stats.xml_s3_blurb"><b>Amazon S3 considerations:</b> </p> <p><span class="sql-docs-inline-code">COMPUTE STATS</span>  also works for tables where data resides in the Amazon Simple Storage Service (S3).' + 
      '      See <span>s3</span> for details.' + 
      '    </p> <p id="../Impala/docs/topics/impala_compute_stats.xml_performance_blurb"><b>Performance considerations:</b> </p> <p>' + 
      '      The statistics collected by <span class="sql-docs-inline-code">COMPUTE STATS</span>  are used to optimize join queries' + 
      '      <span class="sql-docs-inline-code">INSERT</span>  operations into Parquet tables, and other resource-intensive kinds of SQL statements.' + 
      '      See <span>perf stats</span> for details.' + 
      '    </p> <p>' + 
      '      For large tables, the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement itself might take a long time and you' + 
      '      might need to tune its performance. The <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement does not work with the' + 
      '      <span class="sql-docs-inline-code">EXPLAIN</span>  statement, or the <span class="sql-docs-inline-code">SUMMARY</span>  command in <span class="sql-docs-inline-code">impala-shell</span> .' + 
      '      You can use the <span class="sql-docs-inline-code">PROFILE</span>  statement in <span class="sql-docs-inline-code">impala-shell</span>  to examine timing information' + 
      '      for the statement as a whole. If a basic <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement takes a long time for a' + 
      '      partitioned table, consider switching to the <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  syntax so that only' + 
      '      newly added partitions are analyzed each time.' + 
      '    </p> <p id="../Impala/docs/topics/impala_compute_stats.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      This example shows two tables, <span class="sql-docs-inline-code">T1</span>  and <span class="sql-docs-inline-code">T2</span> , with a small number distinct' + 
      '      values linked by a parent-child relationship between <span class="sql-docs-inline-code">T1.ID</span>  and <span class="sql-docs-inline-code">T2.PARENT</span> .' + 
      '      <span class="sql-docs-inline-code">T1</span>  is tiny, while <span class="sql-docs-inline-code">T2</span>  has approximately 100K rows. Initially, the statistics' + 
      '      includes physical measurements such as the number of files, the total size, and size measurements for' + 
      '      fixed-length columns such as with the <span class="sql-docs-inline-code">INT</span>  type. Unknown values are represented by -1. After' + 
      '      running <span class="sql-docs-inline-code">COMPUTE STATS</span>  for each table, much more information is available through the' + 
      '      <span class="sql-docs-inline-code">SHOW STATS</span>  statements. If you were running a join query involving both of these tables, you' + 
      '      would need statistics for both tables to get the most effective optimization for the query.' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > show table stats t1;<br/>Query: show table stats t1<br/>+-------+--------+------+--------+<br/>| #Rows | #Files | Size | Format |<br/>+-------+--------+------+--------+<br/>| -1    | 1      | 33B  | TEXT   |<br/>+-------+--------+------+--------+<br/>Returned 1 row(s) in 0.02s<br/>[localhost:21000] > show table stats t2;<br/>Query: show table stats t2<br/>+-------+--------+----------+--------+<br/>| #Rows | #Files | Size     | Format |<br/>+-------+--------+----------+--------+<br/>| -1    | 28     | 960.00KB | TEXT   |<br/>+-------+--------+----------+--------+<br/>Returned 1 row(s) in 0.01s<br/>[localhost:21000] > show column stats t1;<br/>Query: show column stats t1<br/>+--------+--------+------------------+--------+----------+----------+<br/>| Column | Type   | #Distinct Values | #Nulls | Max Size | Avg Size |<br/>+--------+--------+------------------+--------+----------+----------+<br/>| id     | INT    | -1               | -1     | 4        | 4        |<br/>| s      | STRING | -1               | -1     | -1       | -1       |<br/>+--------+--------+------------------+--------+----------+----------+<br/>Returned 2 row(s) in 1.71s<br/>[localhost:21000] > show column stats t2;<br/>Query: show column stats t2<br/>+--------+--------+------------------+--------+----------+----------+<br/>| Column | Type   | #Distinct Values | #Nulls | Max Size | Avg Size |<br/>+--------+--------+------------------+--------+----------+----------+<br/>| parent | INT    | -1               | -1     | 4        | 4        |<br/>| s      | STRING | -1               | -1     | -1       | -1       |<br/>+--------+--------+------------------+--------+----------+----------+<br/>Returned 2 row(s) in 0.01s<br/>[localhost:21000] > compute stats t1;<br/>Query: compute stats t1<br/>+-----------------------------------------+<br/>| summary                                 |<br/>+-----------------------------------------+<br/>| Updated 1 partition(s) and 2 column(s). |<br/>+-----------------------------------------+<br/>Returned 1 row(s) in 5.30s<br/>[localhost:21000] > show table stats t1;<br/>Query: show table stats t1<br/>+-------+--------+------+--------+<br/>| #Rows | #Files | Size | Format |<br/>+-------+--------+------+--------+<br/>| 3     | 1      | 33B  | TEXT   |<br/>+-------+--------+------+--------+<br/>Returned 1 row(s) in 0.01s<br/>[localhost:21000] > show column stats t1;<br/>Query: show column stats t1<br/>+--------+--------+------------------+--------+----------+----------+<br/>| Column | Type   | #Distinct Values | #Nulls | Max Size | Avg Size |<br/>+--------+--------+------------------+--------+----------+----------+<br/>| id     | INT    | 3                | -1     | 4        | 4        |<br/>| s      | STRING | 3                | -1     | -1       | -1       |<br/>+--------+--------+------------------+--------+----------+----------+<br/>Returned 2 row(s) in 0.02s<br/>[localhost:21000] > compute stats t2;<br/>Query: compute stats t2<br/>+-----------------------------------------+<br/>| summary                                 |<br/>+-----------------------------------------+<br/>| Updated 1 partition(s) and 2 column(s). |<br/>+-----------------------------------------+<br/>Returned 1 row(s) in 5.70s<br/>[localhost:21000] > show table stats t2;<br/>Query: show table stats t2<br/>+-------+--------+----------+--------+<br/>| #Rows | #Files | Size     | Format |<br/>+-------+--------+----------+--------+<br/>| 98304 | 1      | 960.00KB | TEXT   |<br/>+-------+--------+----------+--------+<br/>Returned 1 row(s) in 0.03s<br/>[localhost:21000] > show column stats t2;<br/>Query: show column stats t2<br/>+--------+--------+------------------+--------+----------+----------+<br/>| Column | Type   | #Distinct Values | #Nulls | Max Size | Avg Size |<br/>+--------+--------+------------------+--------+----------+----------+<br/>| parent | INT    | 3                | -1     | 4        | 4        |<br/>| s      | STRING | 6                | -1     | 14       | 9.3      |<br/>+--------+--------+------------------+--------+----------+----------+<br/>Returned 2 row(s) in 0.01s</div><p>' + 
      '      The following example shows how to use the <span class="sql-docs-inline-code">INCREMENTAL</span>  clause, available in Impala 2.1.0 and' + 
      '      higher. The <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  syntax lets you collect statistics for newly added or' + 
      '      changed partitions, without rescanning the entire table.' + 
      '    </p> <div id="../Impala/docs/topics/impala_compute_stats.xml_compute_stats_walkthrough" class="sql-docs-code-block">-- Initially the table has no incremental stats, as indicated<br/>-- \'false\' under Incremental stats.<br/>show table stats item_partitioned;<br/>+-------------+-------+--------+----------+--------------+---------+------------------<br/>| i_category  | #Rows | #Files | Size     | Bytes Cached | Format  | Incremental stats<br/>+-------------+-------+--------+----------+--------------+---------+------------------<br/>| Books       | -1    | 1      | 223.74KB | NOT CACHED   | PARQUET | false<br/>| Children    | -1    | 1      | 230.05KB | NOT CACHED   | PARQUET | false<br/>| Electronics | -1    | 1      | 232.67KB | NOT CACHED   | PARQUET | false<br/>| Home        | -1    | 1      | 232.56KB | NOT CACHED   | PARQUET | false<br/>| Jewelry     | -1    | 1      | 223.72KB | NOT CACHED   | PARQUET | false<br/>| Men         | -1    | 1      | 231.25KB | NOT CACHED   | PARQUET | false<br/>| Music       | -1    | 1      | 237.90KB | NOT CACHED   | PARQUET | false<br/>| Shoes       | -1    | 1      | 234.90KB | NOT CACHED   | PARQUET | false<br/>| Sports      | -1    | 1      | 227.97KB | NOT CACHED   | PARQUET | false<br/>| Women       | -1    | 1      | 226.27KB | NOT CACHED   | PARQUET | false<br/>| Total       | -1    | 10     | 2.25MB   | 0B           |         |<br/>+-------------+-------+--------+----------+--------------+---------+------------------<br/><br/>-- After the first COMPUTE INCREMENTAL STATS,<br/>-- all partitions have stats. The first<br/>-- COMPUTE INCREMENTAL STATS scans the whole<br/>-- table, discarding any previous stats from<br/>-- a traditional COMPUTE STATS statement.<br/>compute incremental stats item_partitioned;<br/>+-------------------------------------------+<br/>| summary                                   |<br/>+-------------------------------------------+<br/>| Updated 10 partition(s) and 21 column(s). |<br/>+-------------------------------------------+<br/>show table stats item_partitioned;<br/>+-------------+-------+--------+----------+--------------+---------+------------------<br/>| i_category  | #Rows | #Files | Size     | Bytes Cached | Format  | Incremental stats<br/>+-------------+-------+--------+----------+--------------+---------+------------------<br/>| Books       | 1733  | 1      | 223.74KB | NOT CACHED   | PARQUET | true<br/>| Children    | 1786  | 1      | 230.05KB | NOT CACHED   | PARQUET | true<br/>| Electronics | 1812  | 1      | 232.67KB | NOT CACHED   | PARQUET | true<br/>| Home        | 1807  | 1      | 232.56KB | NOT CACHED   | PARQUET | true<br/>| Jewelry     | 1740  | 1      | 223.72KB | NOT CACHED   | PARQUET | true<br/>| Men         | 1811  | 1      | 231.25KB | NOT CACHED   | PARQUET | true<br/>| Music       | 1860  | 1      | 237.90KB | NOT CACHED   | PARQUET | true<br/>| Shoes       | 1835  | 1      | 234.90KB | NOT CACHED   | PARQUET | true<br/>| Sports      | 1783  | 1      | 227.97KB | NOT CACHED   | PARQUET | true<br/>| Women       | 1790  | 1      | 226.27KB | NOT CACHED   | PARQUET | true<br/>| Total       | 17957 | 10     | 2.25MB   | 0B           |         |<br/>+-------------+-------+--------+----------+--------------+---------+------------------<br/><br/>-- Add a new partition...<br/>alter table item_partitioned add partition (i_category=\'Camping\');<br/>-- Add or replace files in HDFS outside of Impala,<br/>-- rendering the stats for a partition obsolete.<br/>!import_data_into_sports_partition.sh<br/>refresh item_partitioned;<br/>drop incremental stats item_partitioned partition (i_category=\'Sports\');<br/>-- Now some partitions have incremental stats<br/>-- and some do not.<br/>show table stats item_partitioned;<br/>+-------------+-------+--------+----------+--------------+---------+------------------<br/>| i_category  | #Rows | #Files | Size     | Bytes Cached | Format  | Incremental stats<br/>+-------------+-------+--------+----------+--------------+---------+------------------<br/>| Books       | 1733  | 1      | 223.74KB | NOT CACHED   | PARQUET | true<br/>| Camping     | -1    | 1      | 408.02KB | NOT CACHED   | PARQUET | false<br/>| Children    | 1786  | 1      | 230.05KB | NOT CACHED   | PARQUET | true<br/>| Electronics | 1812  | 1      | 232.67KB | NOT CACHED   | PARQUET | true<br/>| Home        | 1807  | 1      | 232.56KB | NOT CACHED   | PARQUET | true<br/>| Jewelry     | 1740  | 1      | 223.72KB | NOT CACHED   | PARQUET | true<br/>| Men         | 1811  | 1      | 231.25KB | NOT CACHED   | PARQUET | true<br/>| Music       | 1860  | 1      | 237.90KB | NOT CACHED   | PARQUET | true<br/>| Shoes       | 1835  | 1      | 234.90KB | NOT CACHED   | PARQUET | true<br/>| Sports      | -1    | 1      | 227.97KB | NOT CACHED   | PARQUET | false<br/>| Women       | 1790  | 1      | 226.27KB | NOT CACHED   | PARQUET | true<br/>| Total       | 17957 | 11     | 2.65MB   | 0B           |         |<br/>+-------------+-------+--------+----------+--------------+---------+------------------<br/><br/>-- After another COMPUTE INCREMENTAL STATS,<br/>-- all partitions have incremental stats, and only the 2<br/>-- partitions without incremental stats were scanned.<br/>compute incremental stats item_partitioned;<br/>+------------------------------------------+<br/>| summary                                  |<br/>+------------------------------------------+<br/>| Updated 2 partition(s) and 21 column(s). |<br/>+------------------------------------------+<br/>show table stats item_partitioned;<br/>+-------------+-------+--------+----------+--------------+---------+------------------<br/>| i_category  | #Rows | #Files | Size     | Bytes Cached | Format  | Incremental stats<br/>+-------------+-------+--------+----------+--------------+---------+------------------<br/>| Books       | 1733  | 1      | 223.74KB | NOT CACHED   | PARQUET | true<br/>| Camping     | 5328  | 1      | 408.02KB | NOT CACHED   | PARQUET | true<br/>| Children    | 1786  | 1      | 230.05KB | NOT CACHED   | PARQUET | true<br/>| Electronics | 1812  | 1      | 232.67KB | NOT CACHED   | PARQUET | true<br/>| Home        | 1807  | 1      | 232.56KB | NOT CACHED   | PARQUET | true<br/>| Jewelry     | 1740  | 1      | 223.72KB | NOT CACHED   | PARQUET | true<br/>| Men         | 1811  | 1      | 231.25KB | NOT CACHED   | PARQUET | true<br/>| Music       | 1860  | 1      | 237.90KB | NOT CACHED   | PARQUET | true<br/>| Shoes       | 1835  | 1      | 234.90KB | NOT CACHED   | PARQUET | true<br/>| Sports      | 1783  | 1      | 227.97KB | NOT CACHED   | PARQUET | true<br/>| Women       | 1790  | 1      | 226.27KB | NOT CACHED   | PARQUET | true<br/>| Total       | 17957 | 11     | 2.65MB   | 0B           |         |<br/>+-------------+-------+--------+----------+--------------+---------+------------------<br/></div><p id="../Impala/docs/topics/impala_compute_stats.xml_file_format_blurb"><b>File format considerations:</b> </p> <p>' + 
      '      The <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement works with tables created with any of the file formats supported' + 
      '      by Impala. See <span>file formats</span> for details about working with the' + 
      '      different file formats. The following considerations apply to <span class="sql-docs-inline-code">COMPUTE STATS</span>  depending on the' + 
      '      file format of the table.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement works with text tables with no restrictions. These tables can be' + 
      '      created through either Impala or Hive.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement works with Parquet tables. These tables can be created through' + 
      '      either Impala or Hive.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement works with Avro tables without restriction in Impala 2.2' + 
      '      and higher. In earlier releases, <span class="sql-docs-inline-code">COMPUTE STATS</span>  worked only for Avro tables created through Hive,' + 
      '      and required the <span class="sql-docs-inline-code">CREATE TABLE</span>  statement to use SQL-style column names and types rather than an' + 
      '      Avro-style schema specification.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement works with RCFile tables with no restrictions. These tables can' + 
      '      be created through either Impala or Hive.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement works with SequenceFile tables with no restrictions. These' + 
      '      tables can be created through either Impala or Hive.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement works with partitioned tables, whether all the partitions use' + 
      '      the same file format, or some partitions are defined through <span class="sql-docs-inline-code">ALTER TABLE</span>  to use different' + 
      '      file formats.' + 
      '    </p> <p id="../Impala/docs/topics/impala_compute_stats.xml_ddl_blurb"><b>Statement type:</b>  DDL' + 
      '      </p> <p id="../Impala/docs/topics/impala_compute_stats.xml_cancel_blurb_maybe"><b>Cancellation:</b>  Certain multi-stage statements (<span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  and' + 
      '        <span class="sql-docs-inline-code">COMPUTE STATS</span> ) can be cancelled during some stages, when running <span class="sql-docs-inline-code">INSERT</span> ' + 
      '        or <span class="sql-docs-inline-code">SELECT</span>  operations internally. To cancel this statement, use Ctrl-C from the' + 
      '        <span class="sql-docs-inline-code">impala-shell</span>  interpreter, the  button from the' + 
      '         page in Hue, or  from the list of' + 
      '        in-flight queries (for a particular node) on the  tab in the Impala web UI' + 
      '        (port 25000).' + 
      '      </p> <p id="../Impala/docs/topics/impala_compute_stats.xml_restrictions_blurb"><b>Restrictions:</b> </p> <div id="../Impala/docs/topics/impala_compute_stats.xml_compute_stats_nulls" class="sql-docs-note"> Prior to Impala 1.4.0,' + 
      '          <span class="sql-docs-inline-code">COMPUTE STATS</span>  counted the number of' + 
      '          <span class="sql-docs-inline-code">NULL</span>  values in each column and recorded that figure' + 
      '        in the metastore database. Because Impala does not currently use the' + 
      '          <span class="sql-docs-inline-code">NULL</span>  count during query planning, Impala 1.4.0 and' + 
      '        higher speeds up the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement by' + 
      '        skipping this <span class="sql-docs-inline-code">NULL</span>  counting. </div> <p id="../Impala/docs/topics/impala_compute_stats.xml_internals_blurb"><b>Internal details:</b> </p> <p>' + 
      '      Behind the scenes, the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement' + 
      '      executes two statements: one to count the rows of each partition' + 
      '      in the table (or the entire table if unpartitioned) through the' + 
      '      <span class="sql-docs-inline-code">COUNT(*)</span>  function,' + 
      '      and another to count the approximate number of distinct values' + 
      '      in each column through the <span class="sql-docs-inline-code">NDV()</span>  function.' + 
      '      You might see these queries in your monitoring and diagnostic displays.' + 
      '      The same factors that affect the performance, scalability, and' + 
      '      execution of other queries (such as parallel execution, memory usage,' + 
      '      admission control, and timeouts) also apply to the queries run by the' + 
      '      <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement.' + 
      '    </p> <p id="../Impala/docs/topics/impala_compute_stats.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '      The user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '      typically the <span class="sql-docs-inline-code">impala</span>  user, must have read' + 
      '      permission for all affected files in the source directory:' + 
      '      all files in the case of an unpartitioned table or' + 
      '      a partitioned table in the case of <span class="sql-docs-inline-code">COMPUTE STATS</span> ;' + 
      '      or all the files in partitions without incremental stats in' + 
      '      the case of <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span> .' + 
      '      It must also have read and execute permissions for all' + 
      '      relevant directories holding the data files.' + 
      '      (Essentially, <span class="sql-docs-inline-code">COMPUTE STATS</span>  requires the' + 
      '      same permissions as the underlying <span class="sql-docs-inline-code">SELECT</span>  queries it runs' + 
      '      against the table.)' + 
      '    </p> <p id="../Impala/docs/topics/impala_compute_stats.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p>' + 
      '      The <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement applies to Kudu tables.' + 
      '      Impala does not compute the number of rows for each partition for' + 
      '      Kudu tables. Therefore, you do not need to re-run the operation when' + 
      '      you see -1 in the <span class="sql-docs-inline-code"># Rows</span>  column of the output from' + 
      '      <span class="sql-docs-inline-code">SHOW TABLE STATS</span> . That column always shows -1 for' + 
      '      all Kudu tables.' + 
      '    </p> <p id="../Impala/docs/topics/impala_compute_stats.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_stats.xml#drop_stats">DROP STATS Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_table_stats"><h4>SHOW TABLE STATS Statement</h4> </a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_column_stats"><h4>SHOW COLUMN STATS Statement</h4> </a>, <span>perf stats</span></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_create_database.xml',
    title: 'CREATE DATABASE Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Creates a new database.' + 
      '    </p> <p>' + 
      '      In Impala, a database is both:' + 
      '    </p> <ul><li>' + 
      '        A logical construct for grouping together related tables, views, and functions within their own namespace.' + 
      '        You might use a separate database for each application, set of related tables, or round of experimentation.' + 
      '      </li> <li>' + 
      '        A physical construct represented by a directory tree in HDFS. Tables (internal tables), partitions, and' + 
      '        data files are all located under this directory. You can perform HDFS-level operations such as backing it up and measuring space usage,' + 
      '        or remove it with a <span class="sql-docs-inline-code">DROP DATABASE</span>  statement.' + 
      '      </li> </ul> <p id="../Impala/docs/topics/impala_create_database.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">CREATE (DATABASE|SCHEMA) [IF NOT EXISTS] <span class="sql-docs-variable">database_name</span> [COMMENT \'<span class="sql-docs-variable">database_comment</span> \']<br/>  [LOCATION <span class="sql-docs-variable">hdfs_path</span> ];</div><p id="../Impala/docs/topics/impala_create_database.xml_ddl_blurb"><b>Statement type:</b>  DDL' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_database.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      A database is physically represented as a directory in HDFS, with a filename extension <span class="sql-docs-inline-code">.db</span> ,' + 
      '      under the main Impala data directory. If the associated HDFS directory does not exist, it is created for you.' + 
      '      All databases and their associated directories are top-level objects, with no physical or logical nesting.' + 
      '    </p> <p>' + 
      '      After creating a database, to make it the current database within an <span class="sql-docs-inline-code">impala-shell</span>  session,' + 
      '      use the <span class="sql-docs-inline-code">USE</span>  statement. You can refer to tables in the current database without prepending' + 
      '      any qualifier to their names.' + 
      '    </p> <p>' + 
      '      When you first connect to Impala through <span class="sql-docs-inline-code">impala-shell</span> , the database you start in (before' + 
      '      issuing any <span class="sql-docs-inline-code">CREATE DATABASE</span>  or <span class="sql-docs-inline-code">USE</span>  statements) is named' + 
      '      <span class="sql-docs-inline-code">default</span> .' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_database.xml_builtins_db">' + 
      '        Impala includes another predefined database, <span class="sql-docs-inline-code">_impala_builtins</span> , that serves as the location' + 
      '        for the <span>built-in functions</span>. To see the built-in' + 
      '        functions, use a statement like the following:' + 
      '<div class="sql-docs-code-block">show functions in _impala_builtins;<br/>show functions in _impala_builtins like \'*<span class="sql-docs-variable">substring</span> *\';<br/></div></p> <p>' + 
      '      After creating a database, your <span class="sql-docs-inline-code">impala-shell</span>  session or another' + 
      '      <span class="sql-docs-inline-code">impala-shell</span>  connected to the same node can immediately access that database. To access' + 
      '      the database through the Impala daemon on a different node, issue the <span class="sql-docs-inline-code">INVALIDATE METADATA</span> ' + 
      '      statement first while connected to that other node.' + 
      '    </p> <p>' + 
      '      Setting the <span class="sql-docs-inline-code">LOCATION</span>  attribute for a new database is a way to work with sets of files in an' + 
      '      HDFS directory structure outside the default Impala data directory, as opposed to setting the' + 
      '      <span class="sql-docs-inline-code">LOCATION</span>  attribute for each individual table.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_database.xml_sync_ddl_blurb">' + 
      '        If you connect to different Impala nodes within an <span class="sql-docs-inline-code">impala-shell</span>  session for' + 
      '        load-balancing purposes, you can enable the <span class="sql-docs-inline-code">SYNC_DDL</span>  query option to make each DDL' + 
      '        statement wait before returning, until the new or changed metadata has been received by all the Impala' + 
      '        nodes. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_sync_ddl.xml#sync_ddl">SYNC_DDL Query Option</a> for details.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_database.xml_hive_blurb"><b>Hive considerations:</b> </p> <p>' + 
      '      When you create a database in Impala, the database can also be used by Hive.' + 
      '      When you create a database in Hive, issue an <span class="sql-docs-inline-code">INVALIDATE METADATA</span> ' + 
      '      statement in Impala to make Impala permanently aware of the new database.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">SHOW DATABASES</span>  statement lists all databases, or the databases whose name' + 
      '      matches a wildcard pattern. <span class="sql-docs-inline-code">In Impala 2.5 and higher, the' + 
      '      <span class="sql-docs-inline-code">SHOW DATABASES</span>  output includes a second column that displays the associated' + 
      '      comment, if any, for each database.</span> </p> <p id="../Impala/docs/topics/impala_create_database.xml_s3_blurb"><b>Amazon S3 considerations:</b> </p> <p>' + 
      '      To specify that any tables created within a database reside on the Amazon S3 system,' + 
      '      you can include an <span class="sql-docs-inline-code">s3a://</span>  prefix on the <span class="sql-docs-inline-code">LOCATION</span> ' + 
      '      attribute. In Impala 2.6 and higher, Impala automatically creates any' + 
      '      required folders as the databases, tables, and partitions are created, and removes' + 
      '      them when they are dropped.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_database.xml_s3_ddl">' + 
      '        In Impala 2.6 and higher, Impala DDL statements such as' + 
      '        <span class="sql-docs-inline-code">CREATE DATABASE</span> , <span class="sql-docs-inline-code">CREATE TABLE</span> , <span class="sql-docs-inline-code">DROP DATABASE CASCADE</span> ,' + 
      '        <span class="sql-docs-inline-code">DROP TABLE</span> , and <span class="sql-docs-inline-code">ALTER TABLE [ADD|DROP] PARTITION</span>  can create or remove folders' + 
      '        as needed in the Amazon S3 system. Prior to Impala 2.6, you had to create folders yourself and point' + 
      '        Impala database, tables, or partitions at them, and manually remove folders when no longer needed.' + 
      '        See <span>s3</span> for details about reading and writing S3 data with Impala.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_database.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_database.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '      The user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '      typically the <span class="sql-docs-inline-code">impala</span>  user, must have write' + 
      '      permission for the parent HDFS directory under which the database' + 
      '      is located.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_database.xml_example_blurb"><b>Examples:</b> </p> <div id="../Impala/docs/topics/impala_create_database.xml_create_drop_db_example" class="sql-docs-code-block">create database first_db;<br/>use first_db;<br/>create table t1 (x int);<br/><br/>create database second_db;<br/>use second_db;<br/>-- Each database has its own namespace for tables.<br/>-- You can reuse the same table names in each database.<br/>create table t1 (s string);<br/><br/>create database temp;<br/><br/>-- You can either USE a database after creating it,<br/>-- or qualify all references to the table name with the name of the database.<br/>-- Here, tables T2 and T3 are both created in the TEMP database.<br/><br/>create table temp.t2 (x int, y int);<br/>use database temp;<br/>create table t3 (s string);<br/><br/>-- You cannot drop a database while it is selected by the USE statement.<br/>drop database temp;<br/><i>ERROR: AnalysisException: Cannot drop current default database: temp</i> -- The always-available database \'default\' is a convenient one to USE<br/>-- before dropping a database you created.<br/>use default;<br/><br/>-- Before dropping a database, first drop all the tables inside it,<br/><span class="sql-docs-inline-code">-- or in Impala 2.3and higher use the CASCADE clause.</span> drop database temp;<br/>ERROR: ImpalaRuntimeException: Error making \'dropDatabase\' RPC to Hive Metastore:<br/>CAUSED BY: InvalidOperationException: Database temp is not empty<br/>show tables in temp;<br/>+------+<br/>| name |<br/>+------+<br/>| t3   |<br/>+------+<br/><br/><span class="sql-docs-inline-code">-- Impala 2.3and higher:</span> <span class="sql-docs-inline-code">drop database temp cascade;</span> -- Earlier releases:<br/>drop table temp.t3;<br/>drop database temp;<br/></div><p id="../Impala/docs/topics/impala_create_database.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_databases.xml#databases">Overview of Impala Databases</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_database.xml#drop_database">DROP DATABASE Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_use.xml#use">USE Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_databases"><h4>SHOW DATABASES</h4> </a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#tables">Overview of Impala Tables</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_create_function.xml',
    title: 'CREATE FUNCTION Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Creates a user-defined function (UDF), which you can use to implement custom logic during' + 
      '      <span class="sql-docs-inline-code">SELECT</span>  or <span class="sql-docs-inline-code">INSERT</span>  operations.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_function.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
      '      The syntax is different depending on whether you create a scalar UDF, which is called once for each row and' + 
      '      implemented by a single function, or a user-defined aggregate function (UDA), which is implemented by' + 
      '      multiple functions that compute intermediate results across sets of rows.' + 
      '    </p> <p>' + 
      '      In Impala 2.5 and higher, the syntax is also different for creating or dropping scalar Java-based UDFs.' + 
      '      The statements for Java UDFs use a new syntax, without any argument types or return type specified. Java-based UDFs' + 
      '      created using the new syntax persist across restarts of the Impala catalog server, and can be shared transparently' + 
      '      between Impala and Hive.' + 
      '    </p> <p>' + 
      '      To create a persistent scalar C++ UDF with <span class="sql-docs-inline-code">CREATE FUNCTION</span> :' + 
      '    </p> <div class="sql-docs-code-block">CREATE FUNCTION [IF NOT EXISTS] [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">function_name</span> ([<span class="sql-docs-variable">arg_type</span> [, <span class="sql-docs-variable">arg_type</span> ...])<br/>  RETURNS <span class="sql-docs-variable">return_type</span> LOCATION \'<span class="sql-docs-variable">hdfs_path_to_dot_so</span> \'<br/>  SYMBOL=\'<span class="sql-docs-variable">symbol_name</span> \'</div><p>' + 
      '      To create a persistent Java UDF with <span class="sql-docs-inline-code">CREATE FUNCTION</span> :' + 
      '<div class="sql-docs-code-block">CREATE FUNCTION [IF NOT EXISTS] [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">function_name</span> LOCATION \'<span class="sql-docs-variable">hdfs_path_to_jar</span> \'<br/>  SYMBOL=\'<span class="sql-docs-variable">class_name</span> \'</div></p> <p>' + 
      '      To create a persistent UDA, which must be written in C++, issue a <span class="sql-docs-inline-code">CREATE AGGREGATE FUNCTION</span>  statement:' + 
      '    </p> <div class="sql-docs-code-block">CREATE [AGGREGATE] FUNCTION [IF NOT EXISTS] [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">function_name</span> ([<span class="sql-docs-variable">arg_type</span> [, <span class="sql-docs-variable">arg_type</span> ...])<br/>  RETURNS <span class="sql-docs-variable">return_type</span> LOCATION \'<span class="sql-docs-variable">hdfs_path</span> \'<br/>  [INIT_FN=\'<span class="sql-docs-variable">function</span> ]<br/>  UPDATE_FN=\'<span class="sql-docs-variable">function</span> MERGE_FN=\'<span class="sql-docs-variable">function</span> [PREPARE_FN=\'<span class="sql-docs-variable">function</span> ]<br/>  [CLOSEFN=\'<span class="sql-docs-variable">function</span> ]<br/>  <span class="sql-docs-inline-code">[SERIALIZE_FN=\'<span class="sql-docs-variable">function</span> ]</span> [FINALIZE_FN=\'<span class="sql-docs-variable">function</span> ]<br/>  <span class="sql-docs-inline-code">[INTERMEDIATE <span class="sql-docs-variable">type_spec</span> ]</span> </div><p id="../Impala/docs/topics/impala_create_function.xml_ddl_blurb"><b>Statement type:</b>  DDL' + 
      '      </p> <p><b>Varargs notation:</b> </p> <div class="sql-docs-note"><p>' + 
      '        Variable-length argument lists are supported for C++ UDFs, but currently not for Java UDFs.' + 
      '      </p> </div> <p>' + 
      '      If the underlying implementation of your function accepts a variable number of arguments:' + 
      '    </p> <ul><li>' + 
      '        The variable arguments must go last in the argument list.' + 
      '      </li> <li>' + 
      '        The variable arguments must all be of the same type.' + 
      '      </li> <li>' + 
      '        You must include at least one instance of the variable arguments in every function call invoked from SQL.' + 
      '      </li> <li>' + 
      '        You designate the variable portion of the argument list in the <span class="sql-docs-inline-code">CREATE FUNCTION</span>  statement' + 
      '        by including <span class="sql-docs-inline-code">...</span>  immediately after the type name of the first variable argument. For' + 
      '        example, to create a function that accepts an <span class="sql-docs-inline-code">INT</span>  argument, followed by a' + 
      '        <span class="sql-docs-inline-code">BOOLEAN</span> , followed by one or more <span class="sql-docs-inline-code">STRING</span>  arguments, your <span class="sql-docs-inline-code">CREATE' + 
      '        FUNCTION</span>  statement would look like:' + 
      '<div class="sql-docs-code-block">CREATE FUNCTION <span class="sql-docs-variable">func_name</span> (INT, BOOLEAN, STRING ...)<br/>  RETURNS <span class="sql-docs-variable">type</span> LOCATION \'<span class="sql-docs-variable">path</span> \' SYMBOL=\'<span class="sql-docs-variable">entry_point</span> \';<br/></div></li> </ul> <p>' + 
      '      See <span>udf varargs</span> for how to code a C++ UDF to accept' + 
      '      variable-length argument lists.' + 
      '    </p> <p><b>Scalar and aggregate functions:</b> </p> <p>' + 
      '      The simplest kind of user-defined function returns a single scalar value each time it is called, typically' + 
      '      once for each row in the result set. This general kind of function is what is usually meant by UDF.' + 
      '      User-defined aggregate functions (UDAs) are a specialized kind of UDF that produce a single value based on' + 
      '      the contents of multiple rows. You usually use UDAs in combination with a <span class="sql-docs-inline-code">GROUP BY</span>  clause to' + 
      '      condense a large result set into a smaller one, or even a single row summarizing column values across an' + 
      '      entire table.' + 
      '    </p> <p>' + 
      '      You create UDAs by using the <span class="sql-docs-inline-code">CREATE AGGREGATE FUNCTION</span>  syntax. The clauses' + 
      '      <span class="sql-docs-inline-code">INIT_FN</span> , <span class="sql-docs-inline-code">UPDATE_FN</span> , <span class="sql-docs-inline-code">MERGE_FN</span> ,' + 
      '      <span class="sql-docs-inline-code"><span class="sql-docs-inline-code">SERIALIZE_FN</span> ,</span> <span class="sql-docs-inline-code">FINALIZE_FN</span> , and' + 
      '      <span class="sql-docs-inline-code">INTERMEDIATE</span>  only apply when you create a UDA rather than a scalar UDF.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">*_FN</span>  clauses specify functions to call at different phases of function processing.' + 
      '    </p> <ul><li><b>Initialize:</b>  The function you specify with the <span class="sql-docs-inline-code">INIT_FN</span>  clause does any initial' + 
      '        setup, such as initializing member variables in internal data structures. This function is often a stub for' + 
      '        simple UDAs. You can omit this clause and a default (no-op) function will be used.' + 
      '      </li> <li><b>Update:</b>  The function you specify with the <span class="sql-docs-inline-code">UPDATE_FN</span>  clause is called once for each' + 
      '        row in the original result set, that is, before any <span class="sql-docs-inline-code">GROUP BY</span>  clause is applied. A separate' + 
      '        instance of the function is called for each different value returned by the <span class="sql-docs-inline-code">GROUP BY</span> ' + 
      '        clause. The final argument passed to this function is a pointer, to which you write an updated value based' + 
      '        on its original value and the value of the first argument.' + 
      '      </li> <li><b>Merge:</b>  The function you specify with the <span class="sql-docs-inline-code">MERGE_FN</span>  clause is called an arbitrary' + 
      '        number of times, to combine intermediate values produced by different nodes or different threads as Impala' + 
      '        reads and processes data files in parallel. The final argument passed to this function is a pointer, to' + 
      '        which you write an updated value based on its original value and the value of the first argument.' + 
      '      </li> <li><b>Serialize:</b>  The function you specify with the <span class="sql-docs-inline-code">SERIALIZE_FN</span>  clause frees memory' + 
      '        allocated to intermediate results. It is required if any memory was allocated by the Allocate function in' + 
      '        the Init, Update, or Merge functions, or if the intermediate type contains any pointers. See' + 
      '         for details.' + 
      '      </li> <li><b>Finalize:</b>  The function you specify with the <span class="sql-docs-inline-code">FINALIZE_FN</span>  clause does any required' + 
      '        teardown for resources acquired by your UDF, such as freeing memory, closing file handles if you explicitly' + 
      '        opened any files, and so on. This function is often a stub for simple UDAs. You can omit this clause and a' + 
      '        default (no-op) function will be used. It is required in UDAs where the final return type is different than' + 
      '        the intermediate type. or if any memory was allocated by the Allocate function in the Init, Update, or' + 
      '        Merge functions. See  for details.' + 
      '      </li> </ul> <p>' + 
      '      If you use a consistent naming convention for each of the underlying functions, Impala can automatically' + 
      '      determine the names based on the first such clause, so the others are optional.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">INTERMEDIATE</span>  clause specifies the data type of intermediate values passed from the' + 
      '      <q>update</q>  phase to the <q>merge</q>  phase, and from the <q>merge</q>  phase to the <q>finalize</q>  phase.' + 
      '      You can use any of the existing Impala data types, or the special notation' + 
      '      <span class="sql-docs-inline-code">CHAR(<span class="sql-docs-variable">n</span> )</span>  to allocate a scratch area of <span class="sql-docs-variable">n</span>  bytes for the' + 
      '      intermediate result. For example, if the different phases of your UDA pass strings to each other but in the' + 
      '      end the function returns a <span class="sql-docs-inline-code">BIGINT</span>  value, you would specify <span class="sql-docs-inline-code">INTERMEDIATE' + 
      '      STRING</span> . Likewise, if the different phases of your UDA pass 2 separate <span class="sql-docs-inline-code">BIGINT</span>  values' + 
      '      between them (8 bytes each), you would specify <span class="sql-docs-inline-code">INTERMEDIATE CHAR(16)</span>  so that each function' + 
      '      could read from and write to a 16-byte buffer.' + 
      '    </p> <p>' + 
      '      For end-to-end examples of UDAs, see <span>udfs</span>.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_function.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p id="../Impala/docs/topics/impala_create_function.xml_udfs_no_complex_types">' + 
      '        Currently, Impala UDFs cannot accept arguments or return values of the Impala complex types' + 
      '        (<span class="sql-docs-inline-code">STRUCT</span> , <span class="sql-docs-inline-code">ARRAY</span> , or <span class="sql-docs-inline-code">MAP</span> ).' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_function.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <ul><li>' + 
      '        You can write Impala UDFs in either C++ or Java. C++ UDFs are new to Impala, and are the recommended format' + 
      '        for high performance utilizing native code. Java-based UDFs are compatible between Impala and Hive, and are' + 
      '        most suited to reusing existing Hive UDFs. (Impala can run Java-based Hive UDFs but not Hive UDAs.)' + 
      '      </li> <li>Impala 2.5 introduces UDF improvements to persistence for both C++ and Java UDFs,' + 
      '        and better compatibility between Impala and Hive for Java UDFs.' + 
      '        See <span>udfs</span> for details.' + 
      '      </li> <li>' + 
      '        The body of the UDF is represented by a <span class="sql-docs-inline-code">.so</span>  or <span class="sql-docs-inline-code">.jar</span>  file, which you store' + 
      '        in HDFS and the <span class="sql-docs-inline-code">CREATE FUNCTION</span>  statement distributes to each Impala node.' + 
      '      </li> <li>' + 
      '        Impala calls the underlying code during SQL statement evaluation, as many times as needed to process all' + 
      '        the rows from the result set. All UDFs are assumed to be deterministic, that is, to always return the same' + 
      '        result when passed the same argument values. Impala might or might not skip some invocations of a UDF if' + 
      '        the result value is already known from a previous call. Therefore, do not rely on the UDF being called a' + 
      '        specific number of times, and do not return different result values based on some external factor such as' + 
      '        the current time, a random number function, or an external data source that could be updated while an' + 
      '        Impala query is in progress.' + 
      '      </li> <li>' + 
      '        The names of the function arguments in the UDF are not significant, only their number, positions, and data' + 
      '        types.' + 
      '      </li> <li>' + 
      '        You can overload the same function name by creating multiple versions of the function, each with a' + 
      '        different argument signature. For security reasons, you cannot make a UDF with the same name as any' + 
      '        built-in function.' + 
      '      </li> <li>' + 
      '        In the UDF code, you represent the function return result as a <span class="sql-docs-inline-code">struct</span> . This' + 
      '        <span class="sql-docs-inline-code">struct</span>  contains 2 fields. The first field is a <span class="sql-docs-inline-code">boolean</span>  representing' + 
      '        whether the value is <span class="sql-docs-inline-code">NULL</span>  or not. (When this field is <span class="sql-docs-inline-code">true</span> , the return' + 
      '        value is interpreted as <span class="sql-docs-inline-code">NULL</span> .) The second field is the same type as the specified function' + 
      '        return type, and holds the return value when the function returns something other than' + 
      '        <span class="sql-docs-inline-code">NULL</span> .' + 
      '      </li> <li>' + 
      '        In the UDF code, you represent the function arguments as an initial pointer to a UDF context structure,' + 
      '        followed by references to zero or more <span class="sql-docs-inline-code">struct</span> s, corresponding to each of the arguments.' + 
      '        Each <span class="sql-docs-inline-code">struct</span>  has the same 2 fields as with the return value, a <span class="sql-docs-inline-code">boolean</span> ' + 
      '        field representing whether the argument is <span class="sql-docs-inline-code">NULL</span> , and a field of the appropriate type' + 
      '        holding any non-<span class="sql-docs-inline-code">NULL</span>  argument value.' + 
      '      </li> <li>' + 
      '        For sample code and build instructions for UDFs,' + 
      '        see .' + 
      '      </li> <li>' + 
      '        Because the file representing the body of the UDF is stored in HDFS, it is automatically available to all' + 
      '        the Impala nodes. You do not need to manually copy any UDF-related files between servers.' + 
      '      </li> <li>' + 
      '        Because Impala currently does not have any <span class="sql-docs-inline-code">ALTER FUNCTION</span>  statement, if you need to rename' + 
      '        a function, move it to a different database, or change its signature or other properties, issue a' + 
      '        <span class="sql-docs-inline-code">DROP FUNCTION</span>  statement for the original function followed by a <span class="sql-docs-inline-code">CREATE' + 
      '        FUNCTION</span>  with the desired properties.' + 
      '      </li> <li>' + 
      '        Because each UDF is associated with a particular database, either issue a <span class="sql-docs-inline-code">USE</span>  statement' + 
      '        before doing any <span class="sql-docs-inline-code">CREATE FUNCTION</span>  statements, or specify the name of the function as' + 
      '        <span class="sql-docs-inline-code"><span class="sql-docs-variable">db_name</span> .<span class="sql-docs-variable">function_name</span> </span> .' + 
      '      </li> </ul> <p id="../Impala/docs/topics/impala_create_function.xml_sync_ddl_blurb">' + 
      '        If you connect to different Impala nodes within an <span class="sql-docs-inline-code">impala-shell</span>  session for' + 
      '        load-balancing purposes, you can enable the <span class="sql-docs-inline-code">SYNC_DDL</span>  query option to make each DDL' + 
      '        statement wait before returning, until the new or changed metadata has been received by all the Impala' + 
      '        nodes. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_sync_ddl.xml#sync_ddl">SYNC_DDL Query Option</a> for details.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_function.xml_compatibility_blurb"><b>Compatibility:</b> </p> <p>' + 
      '      Impala can run UDFs that were created through Hive, as long as they refer to Impala-compatible data types' + 
      '      (not composite or nested column types). Hive can run Java-based UDFs that were created through Impala, but' + 
      '      not Impala UDFs written in C++.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_function.xml_current_user_caveat">' + 
      '        The Hive <span class="sql-docs-inline-code">current_user()</span>  function cannot be' + 
      '        called from a Java UDF through Impala.' + 
      '      </p> <p><b>Persistence:</b> </p> <p id="../Impala/docs/topics/impala_create_function.xml_udf_persistence_restriction">' + 
      '        In Impala 2.5 and higher, Impala UDFs and UDAs written in C++ are persisted in the metastore database.' + 
      '        Java UDFs are also persisted, if they were created with the new <span class="sql-docs-inline-code">CREATE FUNCTION</span>  syntax for Java UDFs,' + 
      '        where the Java function argument and return types are omitted.' + 
      '        Java-based UDFs created with the old <span class="sql-docs-inline-code">CREATE FUNCTION</span>  syntax do not persist across restarts' + 
      '        because they are held in the memory of the <span class="sql-docs-inline-code">catalogd</span>  daemon.' + 
      '        Until you re-create such Java UDFs using the new <span class="sql-docs-inline-code">CREATE FUNCTION</span>  syntax,' + 
      '        you must reload those Java-based UDFs by running the original <span class="sql-docs-inline-code">CREATE FUNCTION</span>  statements again each time' + 
      '        you restart the <span class="sql-docs-inline-code">catalogd</span>  daemon.' + 
      '        Prior to Impala 2.5 the requirement to reload functions after a restart applied to both C++ and Java functions.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_function.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_function.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_function.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      For additional examples of all kinds of user-defined functions, see <span>udfs</span>.' + 
      '    </p> <p>' + 
      '      The following example shows how to take a Java jar file and make all the functions inside one of its classes' + 
      '      into UDFs under a single (overloaded) function name in Impala. Each <span class="sql-docs-inline-code">CREATE FUNCTION</span>  or' + 
      '      <span class="sql-docs-inline-code">DROP FUNCTION</span>  statement applies to all the overloaded Java functions with the same name.' + 
      '      This example uses the signatureless syntax for <span class="sql-docs-inline-code">CREATE FUNCTION</span>  and <span class="sql-docs-inline-code">DROP FUNCTION</span> ,' + 
      '      which is available in Impala 2.5 and higher.' + 
      '    </p> <p>' + 
      '      At the start, the jar file is in the local filesystem. Then it is copied into HDFS, so that it is' + 
      '      available for Impala to reference through the <span class="sql-docs-inline-code">CREATE FUNCTION</span>  statement and' + 
      '      queries that refer to the Impala function name.' + 
      '    </p> <div class="sql-docs-code-block">$ jar -tvf udf-examples.jar<br/>     0 Mon Feb 22 04:06:50 PST 2016 META-INF/<br/>   122 Mon Feb 22 04:06:48 PST 2016 META-INF/MANIFEST.MF<br/>     0 Mon Feb 22 04:06:46 PST 2016 org/<br/>     0 Mon Feb 22 04:06:46 PST 2016 org/apache/<br/>     0 Mon Feb 22 04:06:46 PST 2016 org/apache/impala/<br/>  2460 Mon Feb 22 04:06:46 PST 2016 org/apache/impala/IncompatibleUdfTest.class<br/>   541 Mon Feb 22 04:06:46 PST 2016 org/apache/impala/TestUdfException.class<br/>  3438 Mon Feb 22 04:06:46 PST 2016 org/apache/impala/JavaUdfTest.class<br/>  5872 Mon Feb 22 04:06:46 PST 2016 org/apache/impala/TestUdf.class<br/>...<br/>$ hdfs dfs -put udf-examples.jar /user/impala/udfs<br/>$ hdfs dfs -ls /user/impala/udfs<br/>Found 2 items<br/>-rw-r--r--   3 jrussell supergroup        853 2015-10-09 14:05 /user/impala/udfs/hello_world.jar<br/>-rw-r--r--   3 jrussell supergroup       7366 2016-06-08 14:25 /user/impala/udfs/udf-examples.jar<br/></div><p>' + 
      '      In <span class="sql-docs-inline-code">impala-shell</span> , the <span class="sql-docs-inline-code">CREATE FUNCTION</span>  refers to the HDFS path of the jar file' + 
      '      and the fully qualified class name inside the jar. Each of the functions inside the class becomes an' + 
      '      Impala function, each one overloaded under the specified Impala function name.' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > create function testudf location \'/user/impala/udfs/udf-examples.jar\' symbol=\'org.apache.impala.TestUdf\';<br/>[localhost:21000] > show functions;<br/>+-------------+---------------------------------------+-------------+---------------+<br/>| return type | signature                             | binary type | is persistent |<br/>+-------------+---------------------------------------+-------------+---------------+<br/>| BIGINT      | testudf(BIGINT)                       | JAVA        | true          |<br/>| BOOLEAN     | testudf(BOOLEAN)                      | JAVA        | true          |<br/>| BOOLEAN     | testudf(BOOLEAN, BOOLEAN)             | JAVA        | true          |<br/>| BOOLEAN     | testudf(BOOLEAN, BOOLEAN, BOOLEAN)    | JAVA        | true          |<br/>| DOUBLE      | testudf(DOUBLE)                       | JAVA        | true          |<br/>| DOUBLE      | testudf(DOUBLE, DOUBLE)               | JAVA        | true          |<br/>| DOUBLE      | testudf(DOUBLE, DOUBLE, DOUBLE)       | JAVA        | true          |<br/>| FLOAT       | testudf(FLOAT)                        | JAVA        | true          |<br/>| FLOAT       | testudf(FLOAT, FLOAT)                 | JAVA        | true          |<br/>| FLOAT       | testudf(FLOAT, FLOAT, FLOAT)          | JAVA        | true          |<br/>| INT         | testudf(INT)                          | JAVA        | true          |<br/>| DOUBLE      | testudf(INT, DOUBLE)                  | JAVA        | true          |<br/>| INT         | testudf(INT, INT)                     | JAVA        | true          |<br/>| INT         | testudf(INT, INT, INT)                | JAVA        | true          |<br/>| SMALLINT    | testudf(SMALLINT)                     | JAVA        | true          |<br/>| SMALLINT    | testudf(SMALLINT, SMALLINT)           | JAVA        | true          |<br/>| SMALLINT    | testudf(SMALLINT, SMALLINT, SMALLINT) | JAVA        | true          |<br/>| STRING      | testudf(STRING)                       | JAVA        | true          |<br/>| STRING      | testudf(STRING, STRING)               | JAVA        | true          |<br/>| STRING      | testudf(STRING, STRING, STRING)       | JAVA        | true          |<br/>| TINYINT     | testudf(TINYINT)                      | JAVA        | true          |<br/>+-------------+---------------------------------------+-------------+---------------+<br/></div><p>' + 
      '      These are all simple functions that return their single arguments, or' + 
      '      sum, concatenate, and so on their multiple arguments. Impala determines which' + 
      '      overloaded function to use based on the number and types of the arguments.' + 
      '    </p> <div class="sql-docs-code-block">insert into bigint_x values (1), (2), (4), (3);<br/>select testudf(x) from bigint_x;<br/>+-----------------+<br/>| udfs.testudf(x) |<br/>+-----------------+<br/>| 1               |<br/>| 2               |<br/>| 4               |<br/>| 3               |<br/>+-----------------+<br/><br/>insert into int_x values (1), (2), (4), (3);<br/>select testudf(x, x+1, x*x) from int_x;<br/>+-------------------------------+<br/>| udfs.testudf(x, x + 1, x * x) |<br/>+-------------------------------+<br/>| 4                             |<br/>| 9                             |<br/>| 25                            |<br/>| 16                            |<br/>+-------------------------------+<br/><br/>select testudf(x) from string_x;<br/>+-----------------+<br/>| udfs.testudf(x) |<br/>+-----------------+<br/>| one             |<br/>| two             |<br/>| four            |<br/>| three           |<br/>+-----------------+<br/>select testudf(x,x) from string_x;<br/>+--------------------+<br/>| udfs.testudf(x, x) |<br/>+--------------------+<br/>| oneone             |<br/>| twotwo             |<br/>| fourfour           |<br/>| threethree         |<br/>+--------------------+<br/></div><p>' + 
      '      The previous example used the same Impala function name as the name of the class.' + 
      '      This example shows how the Impala function name is independent of the underlying' + 
      '      Java class or function names. A second <span class="sql-docs-inline-code">CREATE FUNCTION</span>  statement' + 
      '      results in a set of overloaded functions all named <span class="sql-docs-inline-code">my_func</span> ,' + 
      '      to go along with the overloaded functions all named <span class="sql-docs-inline-code">testudf</span> .' + 
      '    </p> <div class="sql-docs-code-block">create function my_func location \'/user/impala/udfs/udf-examples.jar\'<br/>  symbol=\'org.apache.impala.TestUdf\';<br/><br/>show functions;<br/>+-------------+---------------------------------------+-------------+---------------+<br/>| return type | signature                             | binary type | is persistent |<br/>+-------------+---------------------------------------+-------------+---------------+<br/>| BIGINT      | my_func(BIGINT)                       | JAVA        | true          |<br/>| BOOLEAN     | my_func(BOOLEAN)                      | JAVA        | true          |<br/>| BOOLEAN     | my_func(BOOLEAN, BOOLEAN)             | JAVA        | true          |<br/>...<br/>| BIGINT      | testudf(BIGINT)                       | JAVA        | true          |<br/>| BOOLEAN     | testudf(BOOLEAN)                      | JAVA        | true          |<br/>| BOOLEAN     | testudf(BOOLEAN, BOOLEAN)             | JAVA        | true          |<br/>...<br/></div><p>' + 
      '      The corresponding <span class="sql-docs-inline-code">DROP FUNCTION</span>  statement with no signature' + 
      '      drops all the overloaded functions with that name.' + 
      '    </p> <div class="sql-docs-code-block">drop function my_func;<br/>show functions;<br/>+-------------+---------------------------------------+-------------+---------------+<br/>| return type | signature                             | binary type | is persistent |<br/>+-------------+---------------------------------------+-------------+---------------+<br/>| BIGINT      | testudf(BIGINT)                       | JAVA        | true          |<br/>| BOOLEAN     | testudf(BOOLEAN)                      | JAVA        | true          |<br/>| BOOLEAN     | testudf(BOOLEAN, BOOLEAN)             | JAVA        | true          |<br/>...<br/></div><p>' + 
      '      The signatureless <span class="sql-docs-inline-code">CREATE FUNCTION</span>  syntax for Java UDFs ensures that' + 
      '      the functions shown in this example remain available after the Impala service' + 
      '      (specifically, the Catalog Server) are restarted.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_function.xml_related_info"><b>Related information:</b> </p> <p><span>udfs</span> for more background information, usage instructions, and examples for' + 
      '      Impala UDFs; <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_function.xml#drop_function">DROP FUNCTION Statement</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_create_role.xml',
    title: 'CREATE ROLE Statement (Impala 2.0 or higher only)',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      The <span class="sql-docs-inline-code">CREATE ROLE</span>  statement creates a role to which privileges can be granted. Privileges can' + 
      '      be granted to roles, which can then be assigned to users. A user that has been assigned a role will only be' + 
      '      able to exercise the privileges of that role. Only users that have administrative privileges can create/drop' + 
      '      roles. By default, the <span class="sql-docs-inline-code">hive</span> , <span class="sql-docs-inline-code">impala</span>  and <span class="sql-docs-inline-code">hue</span>  users have' + 
      '      administrative privileges in Sentry.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_role.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">CREATE ROLE <span class="sql-docs-variable">role_name</span> </div><p id="../Impala/docs/topics/impala_create_role.xml_privileges_blurb"><b>Required privileges:</b> </p> <p>' + 
      '      Only administrative users (those with <span class="sql-docs-inline-code">ALL</span>  privileges on the server, defined in the Sentry' + 
      '      policy file) can use this statement.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_role.xml_compatibility_blurb"><b>Compatibility:</b> </p> <p>' + 
      '      Impala makes use of any roles and privileges specified by the <span class="sql-docs-inline-code">GRANT</span>  and' + 
      '      <span class="sql-docs-inline-code">REVOKE</span>  statements in Hive, and Hive makes use of any roles and privileges specified by the' + 
      '      <span class="sql-docs-inline-code">GRANT</span>  and <span class="sql-docs-inline-code">REVOKE</span>  statements in Impala. The Impala <span class="sql-docs-inline-code">GRANT</span> ' + 
      '      and <span class="sql-docs-inline-code">REVOKE</span>  statements for privileges do not require the <span class="sql-docs-inline-code">ROLE</span>  keyword to be' + 
      '      repeated before each role name, unlike the equivalent Hive statements.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_role.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_role.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_role.xml_related_info"><b>Related information:</b> </p> <p><span>authorization</span>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_grant.xml#grant">GRANT Statement (Impala 2.0 or higher only)</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_revoke.xml#revoke">REVOKE Statement (Impala 2.0 or higher only)</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_role.xml#drop_role">DROP ROLE Statement (Impala 2.0 or higher only)</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show">SHOW Statement</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_create_table.xml',
    title: 'CREATE TABLE Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Creates a new table and specifies its characteristics. While creating a table, you' + 
      '      optionally specify aspects such as:' + 
      '    </p> <ul><li>' + 
      '        Whether the table is internal or external.' + 
      '      </li> <li>' + 
      '        The columns and associated data types.' + 
      '      </li> <li>' + 
      '        The columns used for physically partitioning the data.' + 
      '      </li> <li>' + 
      '        The file format for data files.' + 
      '      </li> <li>' + 
      '        The HDFS directory where the data files are located.' + 
      '      </li> </ul> <p id="../Impala/docs/topics/impala_create_table.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
      '      The general syntax for creating a table and specifying its columns is as follows:' + 
      '    </p> <p><b>Explicit column definitions:</b> </p> <div class="sql-docs-code-block">CREATE [EXTERNAL] TABLE [IF NOT EXISTS] [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">table_name</span> (<span class="sql-docs-variable">col_name</span> <span class="sql-docs-variable">data_type</span> [COMMENT \'<span class="sql-docs-variable">col_comment</span> \']<br/>    [, ...]<br/>  )<br/>  [PARTITIONED BY (<span class="sql-docs-variable">col_name</span> <span class="sql-docs-variable">data_type</span> [COMMENT \'<span class="sql-docs-variable">col_comment</span> \'], ...)]<br/>  <span class="sql-docs-inline-code">[SORT BY ([<span class="sql-docs-variable">column</span> [, <span class="sql-docs-variable">column</span> ...]])]</span> [COMMENT \'<span class="sql-docs-variable">table_comment</span> \']<br/>  [ROW FORMAT <span class="sql-docs-variable">row_format</span> ]<br/>  [WITH SERDEPROPERTIES (\'<span class="sql-docs-variable">key1</span> \'=\'<span class="sql-docs-variable">value1</span> \', \'<span class="sql-docs-variable">key2</span> \'=\'<span class="sql-docs-variable">value2</span> \', ...)]<br/>  [STORED AS <span class="sql-docs-variable">file_format</span> ]<br/>  [LOCATION \'<span class="sql-docs-variable">hdfs_path</span> \']<br/>  <span class="sql-docs-inline-code">[CACHED IN \'<span class="sql-docs-variable">pool_name</span> \'</span> <span class="sql-docs-inline-code">[WITH REPLICATION = <span class="sql-docs-variable">integer</span> ]</span> | UNCACHED]<br/>  [TBLPROPERTIES (\'<span class="sql-docs-variable">key1</span> \'=\'<span class="sql-docs-variable">value1</span> \', \'<span class="sql-docs-variable">key2</span> \'=\'<span class="sql-docs-variable">value2</span> \', ...)]<br/></div><p><b>CREATE TABLE AS SELECT:</b> </p> <div class="sql-docs-code-block">CREATE [EXTERNAL] TABLE [IF NOT EXISTS] <span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">table_name</span> <span class="sql-docs-inline-code">[PARTITIONED BY (<span class="sql-docs-variable">col_name</span> [, ...])]</span> <span class="sql-docs-inline-code">[SORT BY ([<span class="sql-docs-variable">column</span> [, <span class="sql-docs-variable">column</span> ...]])]</span> [COMMENT \'<span class="sql-docs-variable">table_comment</span> \']<br/>  [ROW FORMAT <span class="sql-docs-variable">row_format</span> ]<br/>  [WITH SERDEPROPERTIES (\'<span class="sql-docs-variable">key1</span> \'=\'<span class="sql-docs-variable">value1</span> \', \'<span class="sql-docs-variable">key2</span> \'=\'<span class="sql-docs-variable">value2</span> \', ...)]<br/>  <span class="sql-docs-inline-code">[STORED AS <span class="sql-docs-variable">ctas_file_format</span> ]</span> [LOCATION \'<span class="sql-docs-variable">hdfs_path</span> \']<br/>  <span class="sql-docs-inline-code">[CACHED IN \'<span class="sql-docs-variable">pool_name</span> \'</span> <span class="sql-docs-inline-code">[WITH REPLICATION = <span class="sql-docs-variable">integer</span> ]</span> | UNCACHED]<br/>  [TBLPROPERTIES (\'<span class="sql-docs-variable">key1</span> \'=\'<span class="sql-docs-variable">value1</span> \', \'<span class="sql-docs-variable">key2</span> \'=\'<span class="sql-docs-variable">value2</span> \', ...)]<br/>AS<br/>  <span class="sql-docs-variable">select_statement</span> </div><div class="sql-docs-code-block">primitive_type:<br/>    TINYINT<br/>  | SMALLINT<br/>  | INT<br/>  | BIGINT<br/>  | BOOLEAN<br/>  | FLOAT<br/>  | DOUBLE<br/>  <span class="sql-docs-inline-code">| DECIMAL</span> | STRING<br/>  <span class="sql-docs-inline-code">| CHAR</span> <span class="sql-docs-inline-code">| VARCHAR</span> | TIMESTAMP<br/><br/><span class="sql-docs-inline-code">complex_type:<br/>    struct_type<br/>  | array_type<br/>  | map_type<br/><br/>struct_type: STRUCT < <span class="sql-docs-variable">name</span> : <span class="sql-docs-variable">primitive_or_complex_type</span> [COMMENT \'<span class="sql-docs-variable">comment_string</span> \'], ... ><br/><br/>array_type: ARRAY < <span class="sql-docs-variable">primitive_or_complex_type</span> ><br/><br/>map_type: MAP < <span class="sql-docs-variable">primitive_type</span> , <span class="sql-docs-variable">primitive_or_complex_type</span> ><br/></span> row_format:<br/>  DELIMITED [FIELDS TERMINATED BY \'<span class="sql-docs-variable">char</span> \' [ESCAPED BY \'<span class="sql-docs-variable">char</span> \']]<br/>  [LINES TERMINATED BY \'<span class="sql-docs-variable">char</span> \']<br/><br/>file_format:<br/>    PARQUET<br/>  | TEXTFILE<br/>  | AVRO<br/>  | SEQUENCEFILE<br/>  | RCFILE<br/><br/><span class="sql-docs-inline-code">ctas_file_format:<br/>    PARQUET<br/>  | TEXTFILE</span> </div><p><b>Column definitions inferred from data file:</b> </p> <div class="sql-docs-code-block">CREATE [EXTERNAL] TABLE [IF NOT EXISTS] [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">table_name</span> LIKE PARQUET \'<span class="sql-docs-variable">hdfs_path_of_parquet_file</span> \'<br/>  [PARTITIONED BY (<span class="sql-docs-variable">col_name</span> <span class="sql-docs-variable">data_type</span> [COMMENT \'<span class="sql-docs-variable">col_comment</span> \'], ...)]<br/>  <span class="sql-docs-inline-code">[SORT BY ([<span class="sql-docs-variable">column</span> [, <span class="sql-docs-variable">column</span> ...]])]</span> [COMMENT \'<span class="sql-docs-variable">table_comment</span> \']<br/>  [ROW FORMAT <span class="sql-docs-variable">row_format</span> ]<br/>  [WITH SERDEPROPERTIES (\'<span class="sql-docs-variable">key1</span> \'=\'<span class="sql-docs-variable">value1</span> \', \'<span class="sql-docs-variable">key2</span> \'=\'<span class="sql-docs-variable">value2</span> \', ...)]<br/>  [STORED AS <span class="sql-docs-variable">file_format</span> ]<br/>  [LOCATION \'<span class="sql-docs-variable">hdfs_path</span> \']<br/><span class="sql-docs-inline-code">[CACHED IN \'<span class="sql-docs-variable">pool_name</span> \'</span> <span class="sql-docs-inline-code">[WITH REPLICATION = <span class="sql-docs-variable">integer</span> ]</span> | UNCACHED]<br/>  [TBLPROPERTIES (\'<span class="sql-docs-variable">key1</span> \'=\'<span class="sql-docs-variable">value1</span> \', \'<span class="sql-docs-variable">key2</span> \'=\'<span class="sql-docs-variable">value2</span> \', ...)]<br/>data_type:<br/>    <span class="sql-docs-variable">primitive_type</span> | array_type<br/>  | map_type<br/>  | struct_type<br/></div><p><b>Kudu tables:</b> </p> <div class="sql-docs-code-block">CREATE TABLE [IF NOT EXISTS] [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">table_name</span> (<span class="sql-docs-variable">col_name</span> <span class="sql-docs-variable">data_type</span> <span class="sql-docs-inline-code">[<span class="sql-docs-variable">kudu_column_attribute</span> ...]</span> [COMMENT \'<span class="sql-docs-variable">col_comment</span> \']<br/>    [, ...]<br/>    [PRIMARY KEY (<span class="sql-docs-variable">col_name</span> [, ...])]<br/>  )<br/>  <span class="sql-docs-inline-code">[PARTITION BY <span class="sql-docs-variable">kudu_partition_clause</span> ]</span> [COMMENT \'<span class="sql-docs-variable">table_comment</span> \']<br/>  STORED AS KUDU<br/>  [TBLPROPERTIES (\'<span class="sql-docs-variable">key1</span> \'=\'<span class="sql-docs-variable">value1</span> \', \'<span class="sql-docs-variable">key2</span> \'=\'<span class="sql-docs-variable">value2</span> \', ...)]<br/></div><p><b>Kudu column attributes:</b> <div class="sql-docs-code-block">PRIMARY KEY<br/>| [NOT] NULL<br/>| ENCODING <span class="sql-docs-variable">codec</span> | COMPRESSION <span class="sql-docs-variable">algorithm</span> | DEFAULT <span class="sql-docs-variable">constant</span> | BLOCK_SIZE <span class="sql-docs-variable">number</span> </div></p> <p><b>kudu_partition_clause:</b> <div class="sql-docs-code-block">kudu_partition_clause ::= [ <span class="sql-docs-variable">hash_clause</span> [, ...]] [, <span class="sql-docs-variable">range_clause</span> ]<br/><br/>hash_clause ::=<br/>  HASH [ (<span class="sql-docs-variable">pk_col</span> [, ...]) ]<br/>    PARTITIONS <span class="sql-docs-variable">n</span> range_clause ::=<br/>  RANGE [ (<span class="sql-docs-variable">pk_col</span> [, ...]) ]<br/>  (<br/>    {<br/>      PARTITION <span class="sql-docs-variable">constant_expression</span> <span class="sql-docs-variable">range_comparison_operator</span> VALUES <span class="sql-docs-variable">range_comparison_operator</span> <span class="sql-docs-variable">constant_expression</span> | PARTITION VALUE = <span class="sql-docs-variable">constant_expression_or_tuple</span> }<br/>   [, ...]<br/>  )<br/><br/>range_comparison_operator ::= { < | <= }<br/></div></p> <p><b>External Kudu tables:</b> </p> <div class="sql-docs-code-block">CREATE EXTERNAL TABLE [IF NOT EXISTS] [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">table_name</span> [COMMENT \'<span class="sql-docs-variable">table_comment</span> \']<br/>  STORED AS KUDU<br/>  [TBLPROPERTIES (\'kudu.table_name\'=\'<span class="sql-docs-variable">internal_kudu_name</span> \')]<br/></div><p><b>CREATE TABLE AS SELECT for Kudu tables:</b> </p> <div class="sql-docs-code-block">CREATE TABLE [IF NOT EXISTS] <span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">table_name</span> [PRIMARY KEY (<span class="sql-docs-variable">col_name</span> [, ...])]<br/>  [PARTITION BY <span class="sql-docs-variable">kudu_partition_clause</span> ]<br/>  [COMMENT \'<span class="sql-docs-variable">table_comment</span> \']<br/>  STORED AS KUDU<br/>  [TBLPROPERTIES (\'<span class="sql-docs-variable">key1</span> \'=\'<span class="sql-docs-variable">value1</span> \', \'<span class="sql-docs-variable">key2</span> \'=\'<span class="sql-docs-variable">value2</span> \', ...)]<br/>AS<br/>  <span class="sql-docs-variable">select_statement</span> </div><p id="../Impala/docs/topics/impala_create_table.xml_ddl_blurb"><b>Statement type:</b>  DDL' + 
      '      </p> <p><b>Column definitions:</b> </p> <p>' + 
      '      Depending on the form of the <span class="sql-docs-inline-code">CREATE TABLE</span>  statement, the column' + 
      '      definitions are required or not allowed.' + 
      '    </p> <p>' + 
      '      With the <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  and <span class="sql-docs-inline-code">CREATE TABLE LIKE</span> ' + 
      '      syntax, you do not specify the columns at all; the column names and types are derived from' + 
      '      the source table, query, or data file.' + 
      '    </p> <p>' + 
      '      With the basic <span class="sql-docs-inline-code">CREATE TABLE</span>  syntax, you must list one or more columns,' + 
      '      its name, type, and optionally a comment, in addition to any columns used as partitioning' + 
      '      keys. There is one exception where the column list is not required: when creating an Avro' + 
      '      table with the <span class="sql-docs-inline-code">STORED AS AVRO</span>  clause, you can omit the list of columns' + 
      '      and specify the same metadata as part of the <span class="sql-docs-inline-code">TBLPROPERTIES</span>  clause.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_table.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p>' + 
      '      The Impala complex types (<span class="sql-docs-inline-code">STRUCT</span> , <span class="sql-docs-inline-code">ARRAY</span> , or' + 
      '      <span class="sql-docs-inline-code">MAP</span> ) are available in Impala 2.3 and higher.' + 
      '      Because you can nest these types (for example, to make an array of maps or a struct with' + 
      '      an array field), these types are also sometimes referred to as nested types. See' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a> for usage details.' + 
      '    </p> <p>' + 
      '      Impala can create tables containing complex type columns, with any supported file format.' + 
      '      Because currently Impala can only query complex type columns in Parquet tables, creating' + 
      '      tables with complex type columns and other file formats such as text is of limited use.' + 
      '      For example, you might create a text table including some columns with complex types with' + 
      '      Impala, and use Hive as part of your to ingest the nested type data and copy it to an' + 
      '      identical Parquet table. Or you might create a partitioned table containing complex type' + 
      '      columns using one file format, and use <span class="sql-docs-inline-code">ALTER TABLE</span>  to change the file' + 
      '      format of individual partitions to Parquet; Impala can then query only the Parquet-format' + 
      '      partitions in that table.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_table.xml_complex_types_partitioning">' + 
      '        Partitioned tables can contain complex type columns.' + 
      '        All the partition key columns must be scalar types.' + 
      '      </p> <p><b>Internal and external tables (EXTERNAL and LOCATION clauses):</b> </p> <p>' + 
      '      By default, Impala creates an <q>internal</q>  table, where Impala manages the underlying' + 
      '      data files for the table, and physically deletes the data files when you drop the table.' + 
      '      If you specify the <span class="sql-docs-inline-code">EXTERNAL</span>  clause, Impala treats the table as an' + 
      '      <q>external</q>  table, where the data files are typically produced outside Impala and' + 
      '      queried from their original locations in HDFS, and Impala leaves the data files in place' + 
      '      when you drop the table. For details about internal and external tables, see' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#tables">Overview of Impala Tables</a>.' + 
      '    </p> <p>' + 
      '      Typically, for an external table you include a <span class="sql-docs-inline-code">LOCATION</span>  clause to specify' + 
      '      the path to the HDFS directory where Impala reads and writes files for the table. For' + 
      '      example, if your data pipeline produces Parquet files in the HDFS directory' + 
      '      <span class="sql-docs-variable">/user/etl/destination</span> , you might create an external table as follows:' + 
      '    </p> <div class="sql-docs-code-block">CREATE EXTERNAL TABLE external_parquet (c1 INT, c2 STRING, c3 TIMESTAMP)<br/>  STORED AS PARQUET LOCATION \'/user/etl/destination\';<br/></div><p>' + 
      '      Although the <span class="sql-docs-inline-code">EXTERNAL</span>  and <span class="sql-docs-inline-code">LOCATION</span>  clauses are often' + 
      '      specified together, <span class="sql-docs-inline-code">LOCATION</span>  is optional for external tables, and you can' + 
      '      also specify <span class="sql-docs-inline-code">LOCATION</span>  for internal tables. The difference is all about' + 
      '      whether Impala <q>takes control</q>  of the underlying data files and moves them when you' + 
      '      rename the table, or deletes them when you drop the table. For more about internal and' + 
      '      external tables and how they interact with the <span class="sql-docs-inline-code">LOCATION</span>  attribute, see' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#tables">Overview of Impala Tables</a>.' + 
      '    </p> <p><b>Partitioned tables (PARTITIONED BY clause):</b> </p> <p>' + 
      '      The <span class="sql-docs-inline-code">PARTITIONED BY</span>  clause divides the data files based on the values from' + 
      '      one or more specified columns. Impala queries can use the partition metadata to minimize' + 
      '      the amount of data that is read from disk or transmitted across the network, particularly' + 
      '      during join queries. For details about partitioning, see' + 
      '      <span>partitioning</span>.' + 
      '    </p> <div class="sql-docs-note"><p>' + 
      '        All Kudu tables require partitioning, which involves different syntax than non-Kudu' + 
      '        tables. See the <span class="sql-docs-inline-code">PARTITION BY</span>  clause, rather than <span class="sql-docs-inline-code">PARTITIONED' + 
      '        BY</span> , for Kudu tables.' + 
      '      </p> <p>' + 
      '        In Impala 2.10 and higher, the <span class="sql-docs-inline-code">PARTITION BY</span> ' + 
      '        clause is optional for Kudu tables. If the clause is omitted, Impala automatically' + 
      '        constructs a single partition that is not connected to any column. Because such a' + 
      '        table cannot take advantage of Kudu features for parallelized queries and' + 
      '        query optimizations, omitting the <span class="sql-docs-inline-code">PARTITION BY</span>  clause is only' + 
      '        appropriate for small lookup tables.' + 
      '      </p> </div> <p>' + 
      '      Prior to Impala 2.5, you could use a partitioned table as the' + 
      '      source and copy data from it, but could not specify any partitioning clauses for the new' + 
      '      table. In Impala 2.5 and higher, you can now use the' + 
      '      <span class="sql-docs-inline-code">PARTITIONED BY</span>  clause with a <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span> ' + 
      '      statement. See the examples under the following discussion of the <span class="sql-docs-inline-code">CREATE TABLE AS' + 
      '      SELECT</span>  syntax variation.' + 
      '    </p> <p><b>Sorted tables (SORT BY clause):</b> </p> <p>' + 
      '      The optional <span class="sql-docs-inline-code">SORT BY</span>  clause lets you specify zero or more columns' + 
      '      that are sorted in the data files created by each Impala <span class="sql-docs-inline-code">INSERT</span>  or' + 
      '      <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  operation. Creating data files that are' + 
      '      sorted is most useful for Parquet tables, where the metadata stored inside each file includes' + 
      '      the minimum and maximum values for each column in the file. (The statistics apply to each row group' + 
      '      within the file; for simplicity, Impala writes a single row group in each file.) Grouping' + 
      '      data values together in relatively narrow ranges within each data file makes it possible' + 
      '      for Impala to quickly skip over data files that do not contain value ranges indicated in' + 
      '      the <span class="sql-docs-inline-code">WHERE</span>  clause of a query, and can improve the effectiveness' + 
      '      of Parquet encoding and compression.' + 
      '    </p> <p>' + 
      '      This clause is not applicable for Kudu tables or HBase tables. Although it works' + 
      '      for other HDFS file formats besides Parquet, the more efficient layout is most' + 
      '      evident with Parquet tables, because each Parquet data file includes statistics' + 
      '      about the data values in that file.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">SORT BY</span>  columns cannot include any partition key columns' + 
      '      for a partitioned table, because those column values are not represented in' + 
      '      the underlying data files.' + 
      '    </p> <p>' + 
      '      Because data files can arrive in Impala tables by mechanisms that do not respect' + 
      '      the <span class="sql-docs-inline-code">SORT BY</span>  clause, such as <span class="sql-docs-inline-code">LOAD DATA</span>  or ETL' + 
      '      tools that create HDFS files, Impala does not guarantee or rely on the data being' + 
      '      sorted. The sorting aspect is only used to create a more efficient layout for' + 
      '      Parquet files generated by Impala, which helps to optimize the processing of' + 
      '      those Parquet files during Impala queries. During an <span class="sql-docs-inline-code">INSERT</span> ' + 
      '      or <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  operation, the sorting occurs' + 
      '      when the <span class="sql-docs-inline-code">SORT BY</span>  clause applies to the destination table' + 
      '      for the data, regardless of whether the source table has a <span class="sql-docs-inline-code">SORT BY</span> ' + 
      '      clause.' + 
      '    </p> <p>' + 
      '      For example, when creating a table intended to contain census data, you might define' + 
      '      sort columns such as last name and state. If a data file in this table contains a' + 
      '      narrow range of last names, for example from <span class="sql-docs-inline-code">Smith</span>  to <span class="sql-docs-inline-code">Smythe</span> ,' + 
      '      Impala can quickly detect that this data file contains no matches for a <span class="sql-docs-inline-code">WHERE</span> ' + 
      '      clause such as <span class="sql-docs-inline-code">WHERE last_name = \'Jones\'</span>  and avoid reading the entire file.' + 
      '    </p> <div class="sql-docs-code-block">CREATE TABLE census_data (last_name STRING, first_name STRING, state STRING, address STRING)<br/>  SORT BY (last_name, state)<br/>  STORED AS PARQUET;<br/></div><p>' + 
      '      Likewise, if an existing table contains data without any sort order, you can reorganize' + 
      '      the data in a more efficient way by using <span class="sql-docs-inline-code">INSERT</span>  or' + 
      '      <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  to copy that data into a new table with a' + 
      '      <span class="sql-docs-inline-code">SORT BY</span>  clause:' + 
      '    </p> <div class="sql-docs-code-block">CREATE TABLE sorted_census_data<br/>  SORT BY (last_name, state)<br/>  STORED AS PARQUET<br/>  AS SELECT last_name, first_name, state, address<br/>    FROM unsorted_census_data;<br/></div><p>' + 
      '      The metadata for the <span class="sql-docs-inline-code">SORT BY</span>  clause is stored in the <span class="sql-docs-inline-code">TBLPROPERTIES</span> ' + 
      '      fields for the table. Other SQL engines that can interoperate with Impala tables, such as Hive' + 
      '      and Spark SQL, do not recognize this property when inserting into a table that has a <span class="sql-docs-inline-code">SORT BY</span> ' + 
      '      clause.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_table.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p>' + 
      '      Because Kudu tables do not support clauses related to HDFS and S3 data files and' + 
      '      partitioning mechanisms, the syntax associated with the <span class="sql-docs-inline-code">STORED AS KUDU</span> ' + 
      '      clause is shown separately in the above syntax descriptions. Kudu tables have their own' + 
      '      syntax for <span class="sql-docs-inline-code">CREATE TABLE</span> , <span class="sql-docs-inline-code">CREATE EXTERNAL TABLE</span> , and' + 
      '      <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span> . <span class="sql-docs-inline-code">Prior to Impala 2.10,' + 
      '      all internal Kudu tables require a <span class="sql-docs-inline-code">PARTITION BY</span>  clause, different than' + 
      '      the <span class="sql-docs-inline-code">PARTITIONED BY</span>  clause for HDFS-backed tables.</span> </p> <p>' + 
      '      Here are some examples of creating empty Kudu tables:' + 
      '    </p> <div class="sql-docs-code-block"><span class="sql-docs-inline-code">-- Single partition. Only for Impala 2.10and higher.<br/>-- Only suitable for small lookup tables.<br/>CREATE TABLE kudu_no_partition_by_clause<br/>  (<br/>    id bigint PRIMARY KEY, s STRING, b BOOLEAN<br/>  )<br/>  STORED AS KUDU;</span> -- Single-column primary key.<br/>CREATE TABLE kudu_t1 (id BIGINT PRIMARY key, s STRING, b BOOLEAN)<br/>  PARTITION BY HASH (id) PARTITIONS 20 STORED AS KUDU;<br/><br/>-- Multi-column primary key.<br/>CREATE TABLE kudu_t2 (id BIGINT, s STRING, b BOOLEAN, PRIMARY KEY (id,s))<br/>  PARTITION BY HASH (s) PARTITIONS 30 STORED AS KUDU;<br/><br/></div><p>' + 
      '      Here is an example of creating an external Kudu table:' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      Here is an example of <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  syntax for a Kudu table:' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      The following <span class="sql-docs-inline-code">CREATE TABLE</span>  clauses are not supported for Kudu tables:' + 
      '    </p> <ul><li><span class="sql-docs-inline-code">PARTITIONED BY</span>  (Kudu tables use the clause <span class="sql-docs-inline-code">PARTITION' + 
      '        BY</span>  instead)' + 
      '      </li> <li><span class="sql-docs-inline-code">LOCATION</span> </li> <li><span class="sql-docs-inline-code">ROWFORMAT</span> </li> <li><span class="sql-docs-inline-code">CACHED IN | UNCACHED</span> </li> <li><span class="sql-docs-inline-code">WITH SERDEPROPERTIES</span> </li> </ul> <p>' + 
      '      For more on the <span class="sql-docs-inline-code">PRIMARY KEY</span>  clause, see' + 
      '      <span>kudu primary key</span> and' + 
      '      <span>kudu primary key attribute</span>.' + 
      '    </p> <p>' + 
      '      For more on creating a Kudu table with a specific replication factor, see' + 
      '        <span>kudu replication factor</span>.' + 
      '    </p> <p>' + 
      '      For more on the <span class="sql-docs-inline-code">NULL</span>  and <span class="sql-docs-inline-code">NOT NULL</span>  attributes, see' + 
      '      <span>kudu not null attribute</span>.' + 
      '    </p> <p>' + 
      '      For more on the <span class="sql-docs-inline-code">ENCODING</span>  attribute, see' + 
      '      <span>kudu encoding attribute</span>.' + 
      '    </p> <p>' + 
      '      For more on the <span class="sql-docs-inline-code">COMPRESSION</span>  attribute, see' + 
      '      <span>kudu compression attribute</span>.' + 
      '    </p> <p>' + 
      '      For more on the <span class="sql-docs-inline-code">DEFAULT</span>  attribute, see' + 
      '      <span>kudu default attribute</span>.' + 
      '    </p> <p>' + 
      '      For more on the <span class="sql-docs-inline-code">BLOCK_SIZE</span>  attribute, see' + 
      '      <span>kudu block size attribute</span>.' + 
      '    </p> <p><b>Partitioning for Kudu tables (PARTITION BY clause)</b> </p> <p>' + 
      '      For Kudu tables, you specify logical partitioning across one or more columns using the' + 
      '      <span class="sql-docs-inline-code">PARTITION BY</span>  clause. In contrast to partitioning for HDFS-based tables,' + 
      '      multiple values for a partition key column can be located in the same partition. The' + 
      '      optional <span class="sql-docs-inline-code">HASH</span>  clause lets you divide one or a set of partition key' + 
      '      columns into a specified number of buckets. You can use more than one' + 
      '      <span class="sql-docs-inline-code">HASH</span>  clause, specifying a distinct set of partition key columns for each.' + 
      '      The optional <span class="sql-docs-inline-code">RANGE</span>  clause further subdivides the partitions, based on a' + 
      '      set of comparison operations for the partition key columns.' + 
      '    </p> <p>' + 
      '      Here are some examples of the <span class="sql-docs-inline-code">PARTITION BY HASH</span>  syntax:' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      Here are some examples of the <span class="sql-docs-inline-code">PARTITION BY RANGE</span>  syntax:' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      Here are some examples combining both <span class="sql-docs-inline-code">HASH</span>  and <span class="sql-docs-inline-code">RANGE</span> ' + 
      '      syntax for the <span class="sql-docs-inline-code">PARTITION BY</span>  clause:' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      For more usage details and examples of the Kudu partitioning syntax, see' + 
      '      .' + 
      '    </p> <p><b>Specifying file format (STORED AS and ROW FORMAT clauses):</b> </p> <p>' + 
      '      The <span class="sql-docs-inline-code">STORED AS</span>  clause identifies the format of the underlying data files.' + 
      '      Currently, Impala can query more types of file formats than it can create or insert into.' + 
      '      Use Hive to perform any create or data load operations that are not currently available in' + 
      '      Impala. For example, Impala can create an Avro, SequenceFile, or RCFile table but cannot' + 
      '      insert data into it. There are also Impala-specific procedures for using compression with' + 
      '      each kind of file format. For details about working with data files of various formats,' + 
      '      see <span>file formats</span>.' + 
      '    </p> <div class="sql-docs-note">' + 
      '      In Impala 1.4.0 and higher, Impala can create Avro tables, which formerly required doing' + 
      '      the <span class="sql-docs-inline-code">CREATE TABLE</span>  statement in Hive. See' + 
      '      <span>avro</span> for details and examples.' + 
      '    </div> <p>' + 
      '      By default (when no <span class="sql-docs-inline-code">STORED AS</span>  clause is specified), data files in Impala' + 
      '      tables are created as text files with Ctrl-A (hex 01) characters as the delimiter.' + 
      '' + 
      '      Specify the <span class="sql-docs-inline-code">ROW FORMAT DELIMITED</span>  clause to produce or ingest data files' + 
      '      that use a different delimiter character such as tab or <span class="sql-docs-inline-code">|</span> , or a different' + 
      '      line end character such as carriage return or newline. When specifying delimiter and line' + 
      '      end characters with the <span class="sql-docs-inline-code">FIELDS TERMINATED BY</span>  and <span class="sql-docs-inline-code">LINES TERMINATED' + 
      '      BY</span>  clauses, use <span class="sql-docs-inline-code">\'\\t\'</span>  for tab, <span class="sql-docs-inline-code">\'\\n\'</span>  for newline' + 
      '      or linefeed, <span class="sql-docs-inline-code">\'\\r\'</span>  for carriage return, and' + 
      '      <span class="sql-docs-inline-code">\\</span> <span class="sql-docs-inline-code">0</span>  for ASCII <span class="sql-docs-inline-code">nul</span>  (hex 00). For more' + 
      '      examples of text tables, see <span>txtfile</span>.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">ESCAPED BY</span>  clause applies both to text files that you create through' + 
      '      an <span class="sql-docs-inline-code">INSERT</span>  statement to an Impala <span class="sql-docs-inline-code">TEXTFILE</span>  table, and to' + 
      '      existing data files that you put into an Impala table directory. (You can ingest existing' + 
      '      data files either by creating the table with <span class="sql-docs-inline-code">CREATE EXTERNAL TABLE ...' + 
      '      LOCATION</span> , the <span class="sql-docs-inline-code">LOAD DATA</span>  statement, or through an HDFS operation' + 
      '      such as <span class="sql-docs-inline-code">hdfs dfs -put <span class="sql-docs-variable">file</span> <span class="sql-docs-variable">hdfs_path</span> </span> .) Choose an escape character that is not used' + 
      '      anywhere else in the file, and put it in front of each instance of the delimiter character' + 
      '      that occurs within a field value. Surrounding field values with quotation marks does not' + 
      '      help Impala to parse fields with embedded delimiter characters; the quotation marks are' + 
      '      considered to be part of the column value. If you want to use <span class="sql-docs-inline-code">\\</span>  as the' + 
      '      escape character, specify the clause in <span class="sql-docs-inline-code">impala-shell</span>  as <span class="sql-docs-inline-code">ESCAPED' + 
      '      BY \'\\\'</span> .' + 
      '    </p> <div id="../Impala/docs/topics/impala_create_table.xml_thorn" class="sql-docs-note">' + 
      '        The <span class="sql-docs-inline-code">CREATE TABLE</span>  clauses <span class="sql-docs-inline-code">FIELDS TERMINATED BY</span> , <span class="sql-docs-inline-code">ESCAPED' + 
      '        BY</span> , and <span class="sql-docs-inline-code">LINES TERMINATED BY</span>  have special rules for the string literal used for' + 
      '        their argument, because they all require a single character. You can use a regular character surrounded by' + 
      '        single or double quotation marks, an octal sequence such as <span class="sql-docs-inline-code">\'\\054\'</span>  (representing a comma),' + 
      '        or an integer in the range \'-127\'..\'128\' (with quotation marks but no backslash), which is interpreted as a' + 
      '        single-byte ASCII character. Negative values are subtracted from 256; for example, <span class="sql-docs-inline-code">FIELDS' + 
      '        TERMINATED BY \'-2\'</span>  sets the field delimiter to ASCII code 254, the <q>Icelandic Thorn</q> ' + 
      '        character used as a delimiter by some data formats.' + 
      '      </div> <p><b>Cloning tables (LIKE clause):</b> </p> <p>' + 
      '      To create an empty table with the same columns, comments, and other attributes as another' + 
      '      table, use the following variation. The <span class="sql-docs-inline-code">CREATE TABLE ... LIKE</span>  form allows' + 
      '      a restricted set of clauses, currently only the <span class="sql-docs-inline-code">LOCATION</span> ,' + 
      '      <span class="sql-docs-inline-code">COMMENT</span> , and <span class="sql-docs-inline-code">STORED AS</span>  clauses.' + 
      '    </p> <div class="sql-docs-code-block">CREATE [EXTERNAL] TABLE [IF NOT EXISTS] [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">table_name</span> <span class="sql-docs-inline-code">LIKE { [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">table_name</span> | PARQUET \'<span class="sql-docs-variable">hdfs_path_of_parquet_file</span> \' }</span> [COMMENT \'<span class="sql-docs-variable">table_comment</span> \']<br/>  [STORED AS <span class="sql-docs-variable">file_format</span> ]<br/>  [LOCATION \'<span class="sql-docs-variable">hdfs_path</span> \']</div><div class="sql-docs-note"><p>' + 
      '        To clone the structure of a table and transfer data into it in a single operation, use' + 
      '        the <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  syntax described in the next subsection.' + 
      '      </p> </div> <p>' + 
      '      When you clone the structure of an existing table using the <span class="sql-docs-inline-code">CREATE TABLE ...' + 
      '      LIKE</span>  syntax, the new table keeps the same file format as the original one, so you' + 
      '      only need to specify the <span class="sql-docs-inline-code">STORED AS</span>  clause if you want to use a different' + 
      '      file format, or when specifying a view as the original table. (Creating a table' + 
      '      <q>like</q>  a view produces a text table by default.)' + 
      '    </p> <p>' + 
      '      Although normally Impala cannot create an HBase table directly, Impala can clone the' + 
      '      structure of an existing HBase table with the <span class="sql-docs-inline-code">CREATE TABLE ... LIKE</span> ' + 
      '      syntax, preserving the file format and metadata from the original table.' + 
      '    </p> <p>' + 
      '      There are some exceptions to the ability to use <span class="sql-docs-inline-code">CREATE TABLE ... LIKE</span> ' + 
      '      with an Avro table. For example, you cannot use this technique for an Avro table that is' + 
      '      specified with an Avro schema but no columns. When in doubt, check if a <span class="sql-docs-inline-code">CREATE' + 
      '      TABLE ... LIKE</span>  operation works in Hive; if not, it typically will not work in' + 
      '      Impala either.' + 
      '    </p> <p>' + 
      '      If the original table is partitioned, the new table inherits the same partition key' + 
      '      columns. Because the new table is initially empty, it does not inherit the actual' + 
      '      partitions that exist in the original one. To create partitions in the new table, insert' + 
      '      data or issue <span class="sql-docs-inline-code">ALTER TABLE ... ADD PARTITION</span>  statements.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_table.xml_create_table_like_view">' + 
      '        Prior to Impala 1.4.0, it was not possible to use the <span class="sql-docs-inline-code">CREATE TABLE LIKE' + 
      '        <span class="sql-docs-variable">view_name</span> </span>  syntax. In Impala 1.4.0 and higher, you can create a table with the' + 
      '        same column definitions as a view using the <span class="sql-docs-inline-code">CREATE TABLE LIKE</span>  technique. Although' + 
      '        <span class="sql-docs-inline-code">CREATE TABLE LIKE</span>  normally inherits the file format of the original table, a view has no' + 
      '        underlying file format, so <span class="sql-docs-inline-code">CREATE TABLE LIKE <span class="sql-docs-variable">view_name</span> </span>  produces a text' + 
      '        table by default. To specify a different file format, include a <span class="sql-docs-inline-code">STORED AS' + 
      '        <span class="sql-docs-variable">file_format</span> </span>  clause at the end of the <span class="sql-docs-inline-code">CREATE TABLE LIKE</span> ' + 
      '        statement.' + 
      '      </p> <p>' + 
      '      Because <span class="sql-docs-inline-code">CREATE TABLE ... LIKE</span>  only manipulates table metadata, not the' + 
      '      physical data of the table, issue <span class="sql-docs-inline-code">INSERT INTO TABLE</span>  statements afterward' + 
      '      to copy any data from the original table into the new one, optionally converting the data' + 
      '      to a new file format. (For some file formats, Impala can do a <span class="sql-docs-inline-code">CREATE TABLE ...' + 
      '      LIKE</span>  to create the table, but Impala cannot insert data in that file format; in' + 
      '      these cases, you must load the data in Hive. See' + 
      '      <span>file formats</span> for details.)' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_table.xml_ctas"><b>CREATE TABLE AS SELECT:</b> </p> <p>' + 
      '      The <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  syntax is a shorthand notation to create a' + 
      '      table based on column definitions from another table, and copy data from the source table' + 
      '      to the destination table without issuing any separate <span class="sql-docs-inline-code">INSERT</span>  statement.' + 
      '      This idiom is so popular that it has its own acronym, <q>CTAS</q> .' + 
      '    </p> <p>' + 
      '      The following examples show how to copy data from a source table <span class="sql-docs-inline-code">T1</span>  to a' + 
      '      variety of destinations tables, applying various transformations to the table properties,' + 
      '      table layout, or the data itself as part of the operation:' + 
      '    </p> <div class="sql-docs-code-block">-- Sample table to be the source of CTAS operations.<br/>CREATE TABLE t1 (x INT, y STRING);<br/>INSERT INTO t1 VALUES (1, \'one\'), (2, \'two\'), (3, \'three\');<br/><br/>-- Clone all the columns and data from one table to another.<br/>CREATE TABLE clone_of_t1 AS SELECT * FROM t1;<br/>+-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 3 row(s) |<br/>+-------------------+<br/><br/>-- Clone the columns and data, and convert the data to a different file format.<br/>CREATE TABLE parquet_version_of_t1 STORED AS PARQUET AS SELECT * FROM t1;<br/>+-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 3 row(s) |<br/>+-------------------+<br/><br/>-- Copy only some rows to the new table.<br/>CREATE TABLE subset_of_t1 AS SELECT * FROM t1 WHERE x >= 2;<br/>+-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 2 row(s) |<br/>+-------------------+<br/><br/>-- Same idea as CREATE TABLE LIKE: clone table layout but do not copy any data.<br/>CREATE TABLE empty_clone_of_t1 AS SELECT * FROM t1 WHERE 1=0;<br/>+-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 0 row(s) |<br/>+-------------------+<br/><br/>-- Reorder and rename columns and transform the data.<br/>CREATE TABLE t5 AS SELECT upper(y) AS s, x+1 AS a, \'Entirely new column\' AS n FROM t1;<br/>+-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 3 row(s) |<br/>+-------------------+<br/>SELECT * FROM t5;<br/>+-------+---+---------------------+<br/>| s     | a | n                   |<br/>+-------+---+---------------------+<br/>| ONE   | 2 | Entirely new column |<br/>| TWO   | 3 | Entirely new column |<br/>| THREE | 4 | Entirely new column |<br/>+-------+---+---------------------+<br/></div><p>' + 
      '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_select.xml#select">SELECT Statement</a> for details about query syntax for the' + 
      '      <span class="sql-docs-inline-code">SELECT</span>  portion of a <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  statement.' + 
      '    </p> <p>' + 
      '      The newly created table inherits the column names that you select from the original table,' + 
      '      which you can override by specifying column aliases in the query. Any column or table' + 
      '      comments from the original table are not carried over to the new table.' + 
      '    </p> <div class="sql-docs-note">' + 
      '      When using the <span class="sql-docs-inline-code">STORED AS</span>  clause with a <span class="sql-docs-inline-code">CREATE TABLE AS' + 
      '      SELECT</span>  statement, the destination table must be a file format that Impala can' + 
      '      write to: currently, text or Parquet. You cannot specify an Avro, SequenceFile, or RCFile' + 
      '      table as the destination table for a CTAS operation.' + 
      '    </div> <p>' + 
      '      Prior to Impala 2.5 you could use a partitioned table as the source' + 
      '      and copy data from it, but could not specify any partitioning clauses for the new table.' + 
      '      In Impala 2.5 and higher, you can now use the <span class="sql-docs-inline-code">PARTITIONED' + 
      '      BY</span>  clause with a <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  statement. The following' + 
      '      example demonstrates how you can copy data from an unpartitioned table in a <span class="sql-docs-inline-code">CREATE' + 
      '      TABLE AS SELECT</span>  operation, creating a new partitioned table in the process. The' + 
      '      main syntax consideration is the column order in the <span class="sql-docs-inline-code">PARTITIONED BY</span> ' + 
      '      clause and the select list: the partition key columns must be listed last in the select' + 
      '      list, in the same order as in the <span class="sql-docs-inline-code">PARTITIONED BY</span>  clause. Therefore, in' + 
      '      this case, the column order in the destination table is different from the source table.' + 
      '      You also only specify the column names in the <span class="sql-docs-inline-code">PARTITIONED BY</span>  clause, not' + 
      '      the data types or column comments.' + 
      '    </p> <div class="sql-docs-code-block">create table partitions_no (year smallint, month tinyint, s string);<br/>insert into partitions_no values (2016, 1, \'January 2016\'),<br/>  (2016, 2, \'February 2016\'), (2016, 3, \'March 2016\');<br/><br/>-- Prove that the source table is not partitioned.<br/>show partitions partitions_no;<br/>ERROR: AnalysisException: Table is not partitioned: ctas_partition_by.partitions_no<br/><br/>-- Create new table with partitions based on column values from source table.<br/><b>create table partitions_yes partitioned by (year, month)<br/>  as select s, year, month from partitions_no;</b> +-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 3 row(s) |<br/>+-------------------+<br/><br/>-- Prove that the destination table is partitioned.<br/>show partitions partitions_yes;<br/>+-------+-------+-------+--------+------+...<br/>| year  | month | #Rows | #Files | Size |...<br/>+-------+-------+-------+--------+------+...<br/>| 2016  | 1     | -1    | 1      | 13B  |...<br/>| 2016  | 2     | -1    | 1      | 14B  |...<br/>| 2016  | 3     | -1    | 1      | 11B  |...<br/>| Total |       | -1    | 3      | 38B  |...<br/>+-------+-------+-------+--------+------+...<br/></div><p>' + 
      '      The most convenient layout for partitioned tables is with all the partition key columns at' + 
      '      the end. The CTAS <span class="sql-docs-inline-code">PARTITIONED BY</span>  syntax requires that column order in the' + 
      '      select list, resulting in that same column order in the destination table.' + 
      '    </p> <div class="sql-docs-code-block">describe partitions_no;<br/>+-------+----------+---------+<br/>| name  | type     | comment |<br/>+-------+----------+---------+<br/>| year  | smallint |         |<br/>| month | tinyint  |         |<br/>| s     | string   |         |<br/>+-------+----------+---------+<br/><br/>-- The CTAS operation forced us to put the partition key columns last.<br/>-- Having those columns last works better with idioms such as SELECT *<br/>-- for partitioned tables.<br/>describe partitions_yes;<br/>+-------+----------+---------+<br/>| name  | type     | comment |<br/>+-------+----------+---------+<br/>| s     | string   |         |<br/>| year  | smallint |         |<br/>| month | tinyint  |         |<br/>+-------+----------+---------+<br/></div><p>' + 
      '      Attempting to use a select list with the partition key columns not at the end results in' + 
      '      an error due to a column name mismatch:' + 
      '    </p> <div class="sql-docs-code-block">-- We expect this CTAS to fail because non-key column S<br/>-- comes after key columns YEAR and MONTH in the select list.<br/>create table partitions_maybe partitioned by (year, month)<br/>  as select year, month, s from partitions_no;<br/>ERROR: AnalysisException: Partition column name mismatch: year != month<br/></div><p>' + 
      '      For example, the following statements show how you can clone all the data in a table, or a' + 
      '      subset of the columns and/or rows, or reorder columns, rename them, or construct them out' + 
      '      of expressions:' + 
      '    </p> <p>' + 
      '      As part of a CTAS operation, you can convert the data to any file format that Impala can' + 
      '      write (currently, <span class="sql-docs-inline-code">TEXTFILE</span>  and <span class="sql-docs-inline-code">PARQUET</span> ). You cannot' + 
      '      specify the lower-level properties of a text table, such as the delimiter.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_table.xml_insert_sort_blurb"><b>Sorting considerations:</b>  Although you can specify an <span class="sql-docs-inline-code">ORDER BY</span>  clause in an' + 
      '        <span class="sql-docs-inline-code">INSERT ... SELECT</span>  statement, any <span class="sql-docs-inline-code">ORDER BY</span>  clause is ignored and the' + 
      '        results are not necessarily sorted. An <span class="sql-docs-inline-code">INSERT ... SELECT</span>  operation potentially creates' + 
      '        many different data files, prepared on different data nodes, and therefore the notion of the data being' + 
      '        stored in sorted order is impractical.' + 
      '      </p> <p><b>CREATE TABLE LIKE PARQUET:</b> </p> <p>' + 
      '      The variation <span class="sql-docs-inline-code">CREATE TABLE ... LIKE PARQUET' + 
      '      \'<span class="sql-docs-variable">hdfs_path_of_parquet_file</span> \'</span>  lets you skip the column' + 
      '      definitions of the <span class="sql-docs-inline-code">CREATE TABLE</span>  statement. The column names and data' + 
      '      types are automatically configured based on the organization of the specified Parquet data' + 
      '      file, which must already reside in HDFS. You can use a data file located outside the' + 
      '      Impala database directories, or a file from an existing Impala Parquet table; either way,' + 
      '      Impala only uses the column definitions from the file and does not use the HDFS location' + 
      '      for the <span class="sql-docs-inline-code">LOCATION</span>  attribute of the new table. (Although you can also' + 
      '      specify the enclosing directory with the <span class="sql-docs-inline-code">LOCATION</span>  attribute, to both use' + 
      '      the same schema as the data file and point the Impala table at the associated directory' + 
      '      for querying.)' + 
      '    </p> <p>' + 
      '      The following considerations apply when you use the <span class="sql-docs-inline-code">CREATE TABLE LIKE' + 
      '      PARQUET</span>  technique:' + 
      '    </p> <ul><li>' + 
      '        Any column comments from the original table are not preserved in the new table. Each' + 
      '        column in the new table has a comment stating the low-level Parquet field type used to' + 
      '        deduce the appropriate SQL column type.' + 
      '      </li> <li>' + 
      '        If you use a data file from a partitioned Impala table, any partition key columns from' + 
      '        the original table are left out of the new table, because they are represented in HDFS' + 
      '        directory names rather than stored in the data file. To preserve the partition' + 
      '        information, repeat the same <span class="sql-docs-inline-code">PARTITION</span>  clause as in the original' + 
      '        <span class="sql-docs-inline-code">CREATE TABLE</span>  statement.' + 
      '      </li> <li>' + 
      '        The file format of the new table defaults to text, as with other kinds of <span class="sql-docs-inline-code">CREATE' + 
      '        TABLE</span>  statements. To make the new table also use Parquet format, include the' + 
      '        clause <span class="sql-docs-inline-code">STORED AS PARQUET</span>  in the <span class="sql-docs-inline-code">CREATE TABLE LIKE' + 
      '        PARQUET</span>  statement.' + 
      '      </li> <li>' + 
      '        If the Parquet data file comes from an existing Impala table, currently, any' + 
      '        <span class="sql-docs-inline-code">TINYINT</span>  or <span class="sql-docs-inline-code">SMALLINT</span>  columns are turned into' + 
      '        <span class="sql-docs-inline-code">INT</span>  columns in the new table. Internally, Parquet stores such values as' + 
      '        32-bit integers.' + 
      '      </li> <li>' + 
      '        When the destination table uses the Parquet file format, the <span class="sql-docs-inline-code">CREATE TABLE AS' + 
      '        SELECT</span>  and <span class="sql-docs-inline-code">INSERT ... SELECT</span>  statements always create at least' + 
      '        one data file, even if the <span class="sql-docs-inline-code">SELECT</span>  part of the statement does not match' + 
      '        any rows. You can use such an empty Parquet data file as a template for subsequent' + 
      '        <span class="sql-docs-inline-code">CREATE TABLE LIKE PARQUET</span>  statements.' + 
      '      </li> </ul> <p>' + 
      '      For more details about creating Parquet tables, and examples of the <span class="sql-docs-inline-code">CREATE TABLE' + 
      '      LIKE PARQUET</span>  syntax, see <span>parquet</span>.' + 
      '    </p> <p><b>Visibility and Metadata (TBLPROPERTIES and WITH SERDEPROPERTIES clauses):</b> </p> <p>' + 
      '      You can associate arbitrary items of metadata with a table by specifying the' + 
      '      <span class="sql-docs-inline-code">TBLPROPERTIES</span>  clause. This clause takes a comma-separated list of' + 
      '      key-value pairs and stores those items in the metastore database. You can also change the' + 
      '      table properties later with an <span class="sql-docs-inline-code">ALTER TABLE</span>  statement. You can observe the' + 
      '      table properties for different delimiter and escape characters using the <span class="sql-docs-inline-code">DESCRIBE' + 
      '      FORMATTED</span>  command, and change those settings for an existing table with' + 
      '      <span class="sql-docs-inline-code">ALTER TABLE ... SET TBLPROPERTIES</span> .' + 
      '    </p> <p>' + 
      '      You can also associate SerDes properties with the table by specifying key-value pairs' + 
      '      through the <span class="sql-docs-inline-code">WITH SERDEPROPERTIES</span>  clause. This metadata is not used by' + 
      '      Impala, which has its own built-in serializer and deserializer for the file formats it' + 
      '      supports. Particular property values might be needed for Hive compatibility with certain' + 
      '      variations of file formats, particularly Avro.' + 
      '    </p> <p>' + 
      '      Some DDL operations that interact with other Hadoop components require specifying' + 
      '      particular values in the <span class="sql-docs-inline-code">SERDEPROPERTIES</span>  or' + 
      '      <span class="sql-docs-inline-code">TBLPROPERTIES</span>  fields, such as creating an Avro table or an HBase table.' + 
      '      (You typically create HBase tables in Hive, because they require additional clauses not' + 
      '      currently available in Impala.)' + 
      '</p> <p>' + 
      '      To see the column definitions and column comments for an existing table, for example' + 
      '      before issuing a <span class="sql-docs-inline-code">CREATE TABLE ... LIKE</span>  or a <span class="sql-docs-inline-code">CREATE TABLE ... AS' + 
      '      SELECT</span>  statement, issue the statement <span class="sql-docs-inline-code">DESCRIBE' + 
      '      <span class="sql-docs-variable">table_name</span> </span> . To see even more detail, such as the location of' + 
      '      data files and the values for clauses such as <span class="sql-docs-inline-code">ROW FORMAT</span>  and' + 
      '      <span class="sql-docs-inline-code">STORED AS</span> , issue the statement <span class="sql-docs-inline-code">DESCRIBE FORMATTED' + 
      '      <span class="sql-docs-variable">table_name</span> </span> . <span class="sql-docs-inline-code">DESCRIBE FORMATTED</span>  is also needed' + 
      '      to see any overall table comment (as opposed to individual column comments).' + 
      '    </p> <p>' + 
      '      After creating a table, your <span class="sql-docs-inline-code">impala-shell</span>  session or another' + 
      '      <span class="sql-docs-inline-code">impala-shell</span>  connected to the same node can immediately query that' + 
      '      table. There might be a brief interval (one statestore heartbeat) before the table can be' + 
      '      queried through a different Impala node. To make the <span class="sql-docs-inline-code">CREATE TABLE</span> ' + 
      '      statement return only when the table is recognized by all Impala nodes in the cluster,' + 
      '      enable the <span class="sql-docs-inline-code">SYNC_DDL</span>  query option.' + 
      '    </p> <p><b>HDFS caching (CACHED IN clause):</b> </p> <p>' + 
      '      If you specify the <span class="sql-docs-inline-code">CACHED IN</span>  clause, any existing or future data files in' + 
      '      the table directory or the partition subdirectories are designated to be loaded into' + 
      '      memory with the HDFS caching mechanism. See' + 
      '      <span>hdfs caching</span> for details about using the HDFS' + 
      '      caching feature.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_table.xml_impala_cache_replication_factor">' + 
      '        In Impala 2.2 and higher, the optional <span class="sql-docs-inline-code">WITH REPLICATION</span>  clause' + 
      '        for <span class="sql-docs-inline-code">CREATE TABLE</span>  and <span class="sql-docs-inline-code">ALTER TABLE</span>  lets you specify' + 
      '        a <span class="sql-docs-variable">replication factor</span> , the number of hosts on which to cache the same data blocks.' + 
      '        When Impala processes a cached data block, where the cache replication factor is greater than 1, Impala randomly' + 
      '        selects a host that has a cached copy of that data block. This optimization avoids excessive CPU' + 
      '        usage on a single host when the same cached data block is processed multiple times.' + 
      '        Where practical, specify a value greater than or equal to the HDFS block replication factor.' + 
      '      </p> <p><b>Column order</b> :' + 
      '    </p> <p>' + 
      '      If you intend to use the table to hold data files produced by some external source,' + 
      '      specify the columns in the same order as they appear in the data files.' + 
      '    </p> <p>' + 
      '      If you intend to insert or copy data into the table through Impala, or if you have control' + 
      '      over the way externally produced data files are arranged, use your judgment to specify' + 
      '      columns in the most convenient order:' + 
      '    </p> <ul><li><p>' + 
      '          If certain columns are often <span class="sql-docs-inline-code">NULL</span> , specify those columns last. You' + 
      '          might produce data files that omit these trailing columns entirely. Impala' + 
      '          automatically fills in the <span class="sql-docs-inline-code">NULL</span>  values if so.' + 
      '        </p> </li> <li><p>' + 
      '          If an unpartitioned table will be used as the source for an <span class="sql-docs-inline-code">INSERT ...' + 
      '          SELECT</span>  operation into a partitioned table, specify last in the unpartitioned' + 
      '          table any columns that correspond to partition key columns in the partitioned table,' + 
      '          and in the same order as the partition key columns are declared in the partitioned' + 
      '          table. This technique lets you use <span class="sql-docs-inline-code">INSERT ... SELECT *</span>  when copying' + 
      '          data to the partitioned table, rather than specifying each column name individually.' + 
      '        </p> </li> <li><p>' + 
      '          If you specify columns in an order that you later discover is suboptimal, you can' + 
      '          sometimes work around the problem without recreating the table. You can create a view' + 
      '          that selects columns from the original table in a permuted order, then do a' + 
      '          <span class="sql-docs-inline-code">SELECT *</span>  from the view. When inserting data into a table, you can' + 
      '          specify a permuted order for the inserted columns to match the order in the' + 
      '          destination table.' + 
      '        </p> </li> </ul> <p id="../Impala/docs/topics/impala_create_table.xml_hive_blurb"><b>Hive considerations:</b> </p> <p>' + 
      '      Impala queries can make use of metadata about the table and columns, such as the number of' + 
      '      rows in a table or the number of different values in a column. Prior to Impala 1.2.2, to' + 
      '      create this metadata, you issued the <span class="sql-docs-inline-code">ANALYZE TABLE</span>  statement in Hive to' + 
      '      gather this information, after creating the table and loading representative data into it.' + 
      '      In Impala 1.2.2 and higher, the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement produces these' + 
      '      statistics within Impala, without needing to use Hive at all.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_table.xml_hbase_blurb"><b>HBase considerations:</b> </p> <div class="sql-docs-note"><p>' + 
      '        The Impala <span class="sql-docs-inline-code">CREATE TABLE</span>  statement cannot create an HBase table, because' + 
      '        it currently does not support the <span class="sql-docs-inline-code">STORED BY</span>  clause needed for HBase' + 
      '        tables. Create such tables in Hive, then query them through Impala. For information on' + 
      '        using Impala with HBase tables, see <span>impala hbase</span>.' + 
      '      </p> </div> <p id="../Impala/docs/topics/impala_create_table.xml_s3_blurb"><b>Amazon S3 considerations:</b> </p> <p>' + 
      '      To create a table where the data resides in the Amazon Simple Storage Service (S3),' + 
      '      specify a <span class="sql-docs-inline-code">s3a://</span>  prefix <span class="sql-docs-inline-code">LOCATION</span>  attribute pointing to' + 
      '      the data files in S3.' + 
      '    </p> <p>' + 
      '      In Impala 2.6 and higher, you can use this special' + 
      '      <span class="sql-docs-inline-code">LOCATION</span>  syntax as part of a <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span> ' + 
      '      statement.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_table.xml_s3_ddl">' + 
      '        In Impala 2.6 and higher, Impala DDL statements such as' + 
      '        <span class="sql-docs-inline-code">CREATE DATABASE</span> , <span class="sql-docs-inline-code">CREATE TABLE</span> , <span class="sql-docs-inline-code">DROP DATABASE CASCADE</span> ,' + 
      '        <span class="sql-docs-inline-code">DROP TABLE</span> , and <span class="sql-docs-inline-code">ALTER TABLE [ADD|DROP] PARTITION</span>  can create or remove folders' + 
      '        as needed in the Amazon S3 system. Prior to Impala 2.6, you had to create folders yourself and point' + 
      '        Impala database, tables, or partitions at them, and manually remove folders when no longer needed.' + 
      '        See <span>s3</span> for details about reading and writing S3 data with Impala.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_table.xml_insert_sort_blurb"><b>Sorting considerations:</b>  Although you can specify an <span class="sql-docs-inline-code">ORDER BY</span>  clause in an' + 
      '        <span class="sql-docs-inline-code">INSERT ... SELECT</span>  statement, any <span class="sql-docs-inline-code">ORDER BY</span>  clause is ignored and the' + 
      '        results are not necessarily sorted. An <span class="sql-docs-inline-code">INSERT ... SELECT</span>  operation potentially creates' + 
      '        many different data files, prepared on different data nodes, and therefore the notion of the data being' + 
      '        stored in sorted order is impractical.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_table.xml_hdfs_blurb"><b>HDFS considerations:</b> </p> <p>' + 
      '      The <span class="sql-docs-inline-code">CREATE TABLE</span>  statement for an internal table creates a directory in' + 
      '      HDFS. The <span class="sql-docs-inline-code">CREATE EXTERNAL TABLE</span>  statement associates the table with an' + 
      '      existing HDFS directory, and does not create any new directory in HDFS. To locate the HDFS' + 
      '      data directory for a table, issue a <span class="sql-docs-inline-code">DESCRIBE FORMATTED' + 
      '      <span class="sql-docs-variable">table</span> </span>  statement. To examine the contents of that HDFS' + 
      '      directory, use an OS command such as <span class="sql-docs-inline-code">hdfs dfs -ls' + 
      '      hdfs://<span class="sql-docs-variable">path</span> </span> , either from the OS command line or through the' + 
      '      <span class="sql-docs-inline-code">shell</span>  or <span class="sql-docs-inline-code">!</span>  commands in <span class="sql-docs-inline-code">impala-shell</span> .' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  syntax creates data files under the table data' + 
      '      directory to hold any data copied by the <span class="sql-docs-inline-code">INSERT</span>  portion of the statement.' + 
      '      (Even if no data is copied, Impala might create one or more empty data files.)' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_table.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '      The user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under, typically the' + 
      '      <span class="sql-docs-inline-code">impala</span>  user, must have both execute and write permission for the database' + 
      '      directory where the table is being created.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_table.xml_security_blurb"><b>Security considerations:</b> </p> <p id="../Impala/docs/topics/impala_create_table.xml_redaction_yes">' + 
      '        If these statements in your environment contain sensitive literal values such as credit card numbers or tax' + 
      '        identifiers, Impala can redact this sensitive information when displaying the statements in log files and' + 
      '        other administrative contexts. See  for details.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_table.xml_cancel_blurb_maybe"><b>Cancellation:</b>  Certain multi-stage statements (<span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  and' + 
      '        <span class="sql-docs-inline-code">COMPUTE STATS</span> ) can be cancelled during some stages, when running <span class="sql-docs-inline-code">INSERT</span> ' + 
      '        or <span class="sql-docs-inline-code">SELECT</span>  operations internally. To cancel this statement, use Ctrl-C from the' + 
      '        <span class="sql-docs-inline-code">impala-shell</span>  interpreter, the  button from the' + 
      '         page in Hue, or  from the list of' + 
      '        in-flight queries (for a particular node) on the  tab in the Impala web UI' + 
      '        (port 25000).' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_table.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#tables">Overview of Impala Tables</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_alter_table.xml#alter_table">ALTER TABLE Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_table.xml#drop_table">DROP TABLE Statement</a>,' + 
      '      <span>partitioning</span>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#internal_tables"><h4>Internal Tables</h4> </a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#external_tables"><h4>External Tables</h4> </a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_compute_stats.xml#compute_stats">COMPUTE STATS Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_sync_ddl.xml#sync_ddl">SYNC_DDL Query Option</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_tables"><h4>SHOW TABLES Statement</h4> </a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_create_table"><h4>SHOW CREATE TABLE Statement</h4> </a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_describe.xml#describe">DESCRIBE Statement</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_create_view.xml',
    title: 'CREATE VIEW Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      The <span class="sql-docs-inline-code">CREATE VIEW</span>  statement lets you create a shorthand abbreviation for a' + 
      '      more complicated query. The base query can involve joins, expressions, reordered columns,' + 
      '      column aliases, and other SQL features that can make a query hard to understand or' + 
      '      maintain.' + 
      '    </p> <p>' + 
      '      Because a view is purely a logical construct (an alias for a query) with no physical data' + 
      '      behind it, <span class="sql-docs-inline-code">ALTER VIEW</span>  only involves changes to metadata in the metastore' + 
      '      database, not any data files in HDFS.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_view.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">CREATE VIEW [IF NOT EXISTS] <span class="sql-docs-variable">view_name</span> [(<span class="sql-docs-variable">column_name</span> [COMMENT \'<span class="sql-docs-variable">column_comment</span> \'][, ...])]<br/>    [COMMENT \'<span class="sql-docs-variable">view_comment</span> \']<br/>  AS <span class="sql-docs-variable">select_statement</span> </div><p id="../Impala/docs/topics/impala_create_view.xml_ddl_blurb"><b>Statement type:</b>  DDL' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_view.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      The <span class="sql-docs-inline-code">CREATE VIEW</span>  statement can be useful in scenarios such as the' + 
      '      following:' + 
      '    </p> <ul><li>' + 
      '        To turn even the most lengthy and complicated SQL query into a one-liner. You can issue' + 
      '        simple queries against the view from applications, scripts, or interactive queries in' + 
      '        <span class="sql-docs-inline-code">impala-shell</span> . For example:' + 
      '<div class="sql-docs-code-block">select * from <span class="sql-docs-variable">view_name</span> ;<br/>select * from <span class="sql-docs-variable">view_name</span> order by c1 desc limit 10;</div>' + 
      '        The more complicated and hard-to-read the original query, the more benefit there is to' + 
      '        simplifying the query using a view.' + 
      '      </li> <li>' + 
      '        To hide the underlying table and column names, to minimize maintenance problems if those' + 
      '        names change. In that case, you re-create the view using the new names, and all queries' + 
      '        that use the view rather than the underlying tables keep running with no changes.' + 
      '      </li> <li>' + 
      '        To experiment with optimization techniques and make the optimized queries available to' + 
      '        all applications. For example, if you find a combination of <span class="sql-docs-inline-code">WHERE</span> ' + 
      '        conditions, join order, join hints, and so on that works the best for a class of' + 
      '        queries, you can establish a view that incorporates the best-performing techniques.' + 
      '        Applications can then make relatively simple queries against the view, without repeating' + 
      '        the complicated and optimized logic over and over. If you later find a better way to' + 
      '        optimize the original query, when you re-create the view, all the applications' + 
      '        immediately take advantage of the optimized base query.' + 
      '      </li> <li>' + 
      '        To simplify a whole class of related queries, especially complicated queries involving' + 
      '        joins between multiple tables, complicated expressions in the column list, and other SQL' + 
      '        syntax that makes the query difficult to understand and debug. For example, you might' + 
      '        create a view that joins several tables, filters using several <span class="sql-docs-inline-code">WHERE</span> ' + 
      '        conditions, and selects several columns from the result set. Applications might issue' + 
      '        queries against this view that only vary in their <span class="sql-docs-inline-code">LIMIT</span> , <span class="sql-docs-inline-code">ORDER' + 
      '        BY</span> , and similar simple clauses.' + 
      '      </li> </ul> <p>' + 
      '      For queries that require repeating complicated clauses over and over again, for example in' + 
      '      the select list, <span class="sql-docs-inline-code">ORDER BY</span> , and <span class="sql-docs-inline-code">GROUP BY</span>  clauses, you can' + 
      '      use the <span class="sql-docs-inline-code">WITH</span>  clause as an alternative to creating a view.' + 
      '    </p> <p>' + 
      '      You can optionally specify the table-level and the column-level comments as in the' + 
      '      <span class="sql-docs-inline-code">CREATE TABLE</span>  statement.' + 
      '    </p> <p id="../Impala/docs/topics/impala_create_view.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p id="../Impala/docs/topics/impala_create_view.xml_complex_types_views">' + 
      '        For tables containing complex type columns (<span class="sql-docs-inline-code">ARRAY</span> ,' + 
      '        <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ), you typically use' + 
      '        join queries to refer to the complex values. You can use views to' + 
      '        hide the join notation, making such tables seem like traditional denormalized' + 
      '        tables, and making those tables queryable by business intelligence tools' + 
      '        that do not have built-in support for those complex types.' + 
      '        See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types_views"><h4>Accessing Complex Type Data in Flattened Form Using Views</h4> </a> for details.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_view.xml_complex_types_views_caveat">' + 
      '        Because you cannot directly issue <span class="sql-docs-inline-code">SELECT <span class="sql-docs-variable">col_name</span> </span> ' + 
      '        against a column of complex type, you cannot use a view or a <span class="sql-docs-inline-code">WITH</span> ' + 
      '        clause to <q>rename</q>  a column by selecting it with a column alias.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_view.xml_sync_ddl_blurb">' + 
      '        If you connect to different Impala nodes within an <span class="sql-docs-inline-code">impala-shell</span>  session for' + 
      '        load-balancing purposes, you can enable the <span class="sql-docs-inline-code">SYNC_DDL</span>  query option to make each DDL' + 
      '        statement wait before returning, until the new or changed metadata has been received by all the Impala' + 
      '        nodes. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_sync_ddl.xml#sync_ddl">SYNC_DDL Query Option</a> for details.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_view.xml_security_blurb"><b>Security considerations:</b> </p> <p id="../Impala/docs/topics/impala_create_view.xml_redaction_yes">' + 
      '        If these statements in your environment contain sensitive literal values such as credit card numbers or tax' + 
      '        identifiers, Impala can redact this sensitive information when displaying the statements in log files and' + 
      '        other administrative contexts. See  for details.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_view.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_view.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> <p id="../Impala/docs/topics/impala_create_view.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">-- Create a view that is exactly the same as the underlying table.<br/>CREATE VIEW v1 AS SELECT * FROM t1;<br/><br/>-- Create a view that includes only certain columns from the underlying table.<br/>CREATE VIEW v2 AS SELECT c1, c3, c7 FROM t1;<br/><br/>-- Create a view that filters the values from the underlying table.<br/>CREATE VIEW v3 AS SELECT DISTINCT c1, c3, c7 FROM t1 WHERE c1 IS NOT NULL AND c5 > 0;<br/><br/>-- Create a view that that reorders and renames columns from the underlying table.<br/>CREATE VIEW v4 AS SELECT c4 AS last_name, c6 AS address, c2 AS birth_date FROM t1;<br/><br/>-- Create a view that runs functions to convert or transform certain columns.<br/>CREATE VIEW v5 AS SELECT c1, CAST(c3 AS STRING) c3, CONCAT(c4,c5) c5, TRIM(c6) c6, "Constant" c8 FROM t1;<br/><br/>-- Create a view that hides the complexity of a view query.<br/>CREATE VIEW v6 AS SELECT t1.c1, t2.c2 FROM t1 JOIN t2 ON t1.id = t2.id;<br/><br/>-- Create a view with a column comment and a table comment.<br/>CREATE VIEW v7 (c1 COMMENT \'Comment for c1\', c2) COMMENT \'Comment for v7\' AS SELECT t1.c1, t1.c2 FROM t1;<br/></div><p id="../Impala/docs/topics/impala_create_view.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_views.xml#views">Overview of Impala Views</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_alter_view.xml#alter_view">ALTER VIEW Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_view.xml#drop_view">DROP VIEW Statement</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_delete.xml',
    title: 'DELETE Statement (Impala 2.8 or higher only)',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Deletes an arbitrary number of rows from a Kudu table.' + 
      '      This statement only works for Impala tables that use the Kudu storage engine.' + 
      '    </p> <p id="../Impala/docs/topics/impala_delete.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">DELETE [FROM] [<span class="sql-docs-variable">database_name</span> .]<span class="sql-docs-variable">table_name</span> [ WHERE <span class="sql-docs-variable">where_conditions</span> ]<br/><br/>DELETE <span class="sql-docs-variable">table_ref</span> FROM [<span class="sql-docs-variable">joined_table_refs</span> ] [ WHERE <span class="sql-docs-variable">where_conditions</span> ]<br/></div><p>' + 
      '      The first form evaluates rows from one table against an optional' + 
      '      <span class="sql-docs-inline-code">WHERE</span>  clause, and deletes all the rows that' + 
      '      match the <span class="sql-docs-inline-code">WHERE</span>  conditions, or all rows if' + 
      '      <span class="sql-docs-inline-code">WHERE</span>  is omitted.' + 
      '    </p> <p>' + 
      '      The second form evaluates one or more join clauses, and deletes' + 
      '      all matching rows from one of the tables. The join clauses can' + 
      '      include non-Kudu tables, but the table from which the rows' + 
      '      are deleted must be a Kudu table. The <span class="sql-docs-inline-code">FROM</span> ' + 
      '      keyword is required in this case, to separate the name of' + 
      '      the table whose rows are being deleted from the table names' + 
      '      of the join clauses.' + 
      '    </p> <p id="../Impala/docs/topics/impala_delete.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      The conditions in the <span class="sql-docs-inline-code">WHERE</span>  clause are the same ones allowed' + 
      '      for the <span class="sql-docs-inline-code">SELECT</span>  statement. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_select.xml#select">SELECT Statement</a>' + 
      '      for details.' + 
      '    </p> <p>' + 
      '      The conditions in the <span class="sql-docs-inline-code">WHERE</span>  clause can refer to' + 
      '      any combination of primary key columns or other columns. Referring to' + 
      '      primary key columns in the <span class="sql-docs-inline-code">WHERE</span>  clause is more efficient' + 
      '      than referring to non-primary key columns.' + 
      '    </p> <p>' + 
      '      If the <span class="sql-docs-inline-code">WHERE</span>  clause is omitted, all rows are removed from the table.' + 
      '    </p> <p>' + 
      '      Because Kudu currently does not enforce strong consistency during concurrent DML operations,' + 
      '      be aware that the results after this statement finishes might be different than you' + 
      '      intuitively expect:' + 
      '    </p> <ul><li><p>' + 
      '          If some rows cannot be deleted because their' + 
      '          some primary key columns are not found, due to their being deleted' + 
      '          by a concurrent <span class="sql-docs-inline-code">DELETE</span>  operation,' + 
      '          the statement succeeds but returns a warning.' + 
      '        </p> </li> <li><p>' + 
      '          A <span class="sql-docs-inline-code">DELETE</span>  statement might also overlap with' + 
      '          <span class="sql-docs-inline-code">INSERT</span> , <span class="sql-docs-inline-code">UPDATE</span> ,' + 
      '          or <span class="sql-docs-inline-code">UPSERT</span>  statements running concurrently on the same table.' + 
      '          After the statement finishes, there might be more or fewer rows than expected in the table' + 
      '          because it is undefined whether the <span class="sql-docs-inline-code">DELETE</span>  applies to rows that are' + 
      '          inserted or updated while the <span class="sql-docs-inline-code">DELETE</span>  is in progress.' + 
      '        </p> </li> </ul> <p>' + 
      '      The number of affected rows is reported in an <span class="sql-docs-inline-code">impala-shell</span>  message' + 
      '      and in the query profile.' + 
      '    </p> <p id="../Impala/docs/topics/impala_delete.xml_dml_blurb_kudu"><b>Statement type:</b>  DML' + 
      '      </p> <div id="../Impala/docs/topics/impala_delete.xml_compute_stats_next" class="sql-docs-note">' + 
      '        After adding or replacing data in a table used in performance-critical queries, issue a <span class="sql-docs-inline-code">COMPUTE' + 
      '        STATS</span>  statement to make sure all statistics are up-to-date. Consider updating statistics for a' + 
      '        table after any <span class="sql-docs-inline-code">INSERT</span> , <span class="sql-docs-inline-code">LOAD DATA</span> , or <span class="sql-docs-inline-code">CREATE TABLE AS' + 
      '        SELECT</span>  statement in Impala, or after loading data through Hive and doing a <span class="sql-docs-inline-code">REFRESH' + 
      '        <span class="sql-docs-variable">table_name</span> </span>  in Impala. This technique is especially important for tables that' + 
      '        are very large, used in join queries, or both.' + 
      '      </div> <p id="../Impala/docs/topics/impala_delete.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      The following examples show how to delete rows from a specified' + 
      '      table, either all rows or rows that match a <span class="sql-docs-inline-code">WHERE</span> ' + 
      '      clause:' + 
      '    </p> <div class="sql-docs-code-block">-- Deletes all rows. The FROM keyword is optional.<br/>DELETE FROM kudu_table;<br/>DELETE kudu_table;<br/><br/>-- Deletes 0, 1, or more rows.<br/>-- (If c1 is a single-column primary key, the statement could only<br/>-- delete 0 or 1 rows.)<br/>DELETE FROM kudu_table WHERE c1 = 100;<br/><br/>-- Deletes all rows that match all the WHERE conditions.<br/>DELETE FROM kudu_table WHERE<br/>  (c1 > c2 OR c3 IN (\'hello\',\'world\')) AND c4 IS NOT NULL;<br/>DELETE FROM t1 WHERE<br/>  (c1 IN (1,2,3) AND c2 > c3) OR c4 IS NOT NULL;<br/>DELETE FROM time_series WHERE<br/>  year = 2016 AND month IN (11,12) AND day > 15;<br/><br/>-- WHERE condition with a subquery.<br/>DELETE FROM t1 WHERE<br/>  c5 IN (SELECT DISTINCT other_col FROM other_table);<br/><br/>-- Does not delete any rows, because the WHERE condition is always false.<br/>DELETE FROM kudu_table WHERE 1 = 0;<br/></div><p>' + 
      '      The following examples show how to delete rows that are part' + 
      '      of the result set from a join:' + 
      '    </p> <div class="sql-docs-code-block">-- Remove _all_ rows from t1 that have a matching X value in t2.<br/>DELETE t1 FROM t1 JOIN t2 ON t1.x = t2.x;<br/><br/>-- Remove _some_ rows from t1 that have a matching X value in t2.<br/>DELETE t1 FROM t1 JOIN t2 ON t1.x = t2.x<br/>  WHERE t1.y = FALSE and t2.z > 100;<br/><br/>-- Delete from a Kudu table based on a join with a non-Kudu table.<br/>DELETE t1 FROM kudu_table t1 JOIN non_kudu_table t2 ON t1.x = t2.x;<br/><br/>-- The tables can be joined in any order as long as the Kudu table<br/>-- is specified as the deletion target.<br/>DELETE t2 FROM non_kudu_table t1 JOIN kudu_table t2 ON t1.x = t2.x;<br/></div><p id="../Impala/docs/topics/impala_delete.xml_related_info"><b>Related information:</b> </p> <p><span>impala kudu</span>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_insert.xml#insert">INSERT Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_update.xml#update">UPDATE Statement (Impala 2.8 or higher only)</a>, <span>upsert</span></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_describe.xml',
    title: 'DESCRIBE Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      The <span class="sql-docs-inline-code">DESCRIBE</span>  statement displays metadata about a table, such as the column names and their' + 
      '      data types.' + 
      '      <span class="sql-docs-inline-code">In Impala 2.3 and higher, you can specify the name of a complex type column, which takes' + 
      '      the form of a dotted path. The path might include multiple components in the case of a nested type definition.</span> <span class="sql-docs-inline-code">In Impala 2.5 and higher, the <span class="sql-docs-inline-code">DESCRIBE DATABASE</span>  form can display' + 
      '      information about a database.</span> </p> <p id="../Impala/docs/topics/impala_describe.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">DESCRIBE [DATABASE] [FORMATTED|EXTENDED] <span class="sql-docs-variable">object_name</span> object_name ::=<br/>    [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">table_name</span> [.<span class="sql-docs-variable">complex_col_name</span> ...]<br/>  | <span class="sql-docs-variable">db_name</span> </div><p>' + 
      '      You can use the abbreviation <span class="sql-docs-inline-code">DESC</span>  for the <span class="sql-docs-inline-code">DESCRIBE</span>  statement.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">DESCRIBE FORMATTED</span>  variation displays additional information, in a format familiar to' + 
      '      users of Apache Hive. The extra information includes low-level details such as whether the table is internal' + 
      '      or external, when it was created, the file format, the location of the data in HDFS, whether the object is a' + 
      '      table or a view, and (for views) the text of the query from the view definition.' + 
      '    </p> <div class="sql-docs-note">' + 
      '      The <span class="sql-docs-inline-code">Compressed</span>  field is not a reliable indicator of whether the table contains compressed' + 
      '      data. It typically always shows <span class="sql-docs-inline-code">No</span> , because the compression settings only apply during the' + 
      '      session that loads data and are not stored persistently with the table metadata.' + 
      '    </div> <p><b>Describing databases:</b> </p> <p>' + 
      '  By default, the <span class="sql-docs-inline-code">DESCRIBE</span>  output for a database includes the location' + 
      '  and the comment, which can be set by the <span class="sql-docs-inline-code">LOCATION</span>  and <span class="sql-docs-inline-code">COMMENT</span> ' + 
      '  clauses on the <span class="sql-docs-inline-code">CREATE DATABASE</span>  statement.' + 
      '</p> <p>' + 
      '  The additional information displayed by the <span class="sql-docs-inline-code">FORMATTED</span>  or <span class="sql-docs-inline-code">EXTENDED</span> ' + 
      '  keyword includes the HDFS user ID that is considered the owner of the database, and any' + 
      '  optional database properties. The properties could be specified by the <span class="sql-docs-inline-code">WITH DBPROPERTIES</span> ' + 
      '  clause if the database is created using a Hive <span class="sql-docs-inline-code">CREATE DATABASE</span>  statement.' + 
      '  Impala currently does not set or do any special processing based on those properties.' + 
      '</p> <p>' + 
      'The following examples show the variations in syntax and output for' + 
      'describing databases. This feature is available in Impala 2.5' + 
      'and higher.' + 
      '</p> <div class="sql-docs-code-block">describe database default;<br/>+---------+----------------------+-----------------------+<br/>| name    | location             | comment               |<br/>+---------+----------------------+-----------------------+<br/>| default | /user/hive/warehouse | Default Hive database |<br/>+---------+----------------------+-----------------------+<br/><br/>describe database formatted default;<br/>+---------+----------------------+-----------------------+<br/>| name    | location             | comment               |<br/>+---------+----------------------+-----------------------+<br/>| default | /user/hive/warehouse | Default Hive database |<br/>| Owner:  |                      |                       |<br/>|         | public               | ROLE                  |<br/>+---------+----------------------+-----------------------+<br/><br/>describe database extended default;<br/>+---------+----------------------+-----------------------+<br/>| name    | location             | comment               |<br/>+---------+----------------------+-----------------------+<br/>| default | /user/hive/warehouse | Default Hive database |<br/>| Owner:  |                      |                       |<br/>|         | public               | ROLE                  |<br/>+---------+----------------------+-----------------------+<br/></div><p><b>Describing tables:</b> </p> <p>' + 
      '  If the <span class="sql-docs-inline-code">DATABASE</span>  keyword is omitted, the default' + 
      '  for the <span class="sql-docs-inline-code">DESCRIBE</span>  statement is to refer to a table.' + 
      '</p> <div class="sql-docs-code-block">-- By default, the table is assumed to be in the current database.<br/>describe my_table;<br/>+------+--------+---------+<br/>| name | type   | comment |<br/>+------+--------+---------+<br/>| x    | int    |         |<br/>| s    | string |         |<br/>+------+--------+---------+<br/><br/>-- Use a fully qualified table name to specify a table in any database.<br/>describe my_database.my_table;<br/>+------+--------+---------+<br/>| name | type   | comment |<br/>+------+--------+---------+<br/>| x    | int    |         |<br/>| s    | string |         |<br/>+------+--------+---------+<br/><br/>-- The formatted or extended output includes additional useful information.<br/>-- The LOCATION field is especially useful to know for DDL statements and HDFS commands<br/>-- during ETL jobs. (The LOCATION includes a full hdfs:// URL, omitted here for readability.)<br/>describe formatted my_table;<br/>+------------------------------+----------------------------------------------+----------------------+<br/>| name                         | type                                         | comment              |<br/>+------------------------------+----------------------------------------------+----------------------+<br/>| # col_name                   | data_type                                    | comment              |<br/>|                              | NULL                                         | NULL                 |<br/>| x                            | int                                          | NULL                 |<br/>| s                            | string                                       | NULL                 |<br/>|                              | NULL                                         | NULL                 |<br/>| # Detailed Table Information | NULL                                         | NULL                 |<br/>| Database:                    | my_database                                  | NULL                 |<br/>| Owner:                       | jrussell                                     | NULL                 |<br/>| CreateTime:                  | Fri Mar 18 15:58:00 PDT 2016                 | NULL                 |<br/>| LastAccessTime:              | UNKNOWN                                      | NULL                 |<br/>| Protect Mode:                | None                                         | NULL                 |<br/>| Retention:                   | 0                                            | NULL                 |<br/>| Location:                    | /user/hive/warehouse/my_database.db/my_table | NULL                 |<br/>| Table Type:                  | MANAGED_TABLE                                | NULL                 |<br/>| Table Parameters:            | NULL                                         | NULL                 |<br/>|                              | transient_lastDdlTime                        | 1458341880           |<br/>|                              | NULL                                         | NULL                 |<br/>| # Storage Information        | NULL                                         | NULL                 |<br/>| SerDe Library:               | org. ... .LazySimpleSerDe                    | NULL                 |<br/>| InputFormat:                 | org.apache.hadoop.mapred.TextInputFormat     | NULL                 |<br/>| OutputFormat:                | org. ... .HiveIgnoreKeyTextOutputFormat      | NULL                 |<br/>| Compressed:                  | No                                           | NULL                 |<br/>| Num Buckets:                 | 0                                            | NULL                 |<br/>| Bucket Columns:              | []                                           | NULL                 |<br/>| Sort Columns:                | []                                           | NULL                 |<br/>+------------------------------+----------------------------------------------+----------------------+<br/></div><p id="../Impala/docs/topics/impala_describe.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p>' + 
      '      Because the column definitions for complex types can become long, particularly when such types are nested,' + 
      '      the <span class="sql-docs-inline-code">DESCRIBE</span>  statement uses special formatting for complex type columns to make the output readable.' + 
      '    </p> <p>' + 
      '      For the <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , and <span class="sql-docs-inline-code">MAP</span>  types available in' + 
      '      Impala 2.3 and higher, the <span class="sql-docs-inline-code">DESCRIBE</span>  output is formatted to avoid' + 
      '      excessively long lines for multiple fields within a <span class="sql-docs-inline-code">STRUCT</span> , or a nested sequence of' + 
      '      complex types.' + 
      '    </p> <p id="../Impala/docs/topics/impala_describe.xml_complex_types_describe">' + 
      '        You can pass a multi-part qualified name to <span class="sql-docs-inline-code">DESCRIBE</span> ' + 
      '        to specify an <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , or <span class="sql-docs-inline-code">MAP</span> ' + 
      '        column and visualize its structure as if it were a table.' + 
      '        For example, if table <span class="sql-docs-inline-code">T1</span>  contains an <span class="sql-docs-inline-code">ARRAY</span>  column' + 
      '        <span class="sql-docs-inline-code">A1</span> , you could issue the statement <span class="sql-docs-inline-code">DESCRIBE t1.a1</span> .' + 
      '        If table <span class="sql-docs-inline-code">T1</span>  contained a <span class="sql-docs-inline-code">STRUCT</span>  column <span class="sql-docs-inline-code">S1</span> ,' + 
      '        and a field <span class="sql-docs-inline-code">F1</span>  within the <span class="sql-docs-inline-code">STRUCT</span>  was a <span class="sql-docs-inline-code">MAP</span> ,' + 
      '        you could issue the statement <span class="sql-docs-inline-code">DESCRIBE t1.s1.f1</span> .' + 
      '        An <span class="sql-docs-inline-code">ARRAY</span>  is shown as a two-column table, with' + 
      '        <span class="sql-docs-inline-code">ITEM</span>  and <span class="sql-docs-inline-code">POS</span>  columns.' + 
      '        A <span class="sql-docs-inline-code">STRUCT</span>  is shown as a table with each field' + 
      '        representing a column in the table.' + 
      '        A <span class="sql-docs-inline-code">MAP</span>  is shown as a two-column table, with' + 
      '        <span class="sql-docs-inline-code">KEY</span>  and <span class="sql-docs-inline-code">VALUE</span>  columns.' + 
      '      </p> <p>' + 
      '      For example, here is the <span class="sql-docs-inline-code">DESCRIBE</span>  output for a table containing a single top-level column' + 
      '      of each complex type:' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      Here are examples showing how to <q>drill down</q>  into the layouts of complex types, including' + 
      '      using multi-part names to examine the definitions of nested types.' + 
      '      The <span class="sql-docs-inline-code">< ></span>  delimiters identify the columns with complex types;' + 
      '      these are the columns where you can descend another level to see the parts that make up' + 
      '      the complex type.' + 
      '      This technique helps you to understand the multi-part names you use as table references in queries' + 
      '      involving complex types, and the corresponding column names you refer to in the <span class="sql-docs-inline-code">SELECT</span>  list.' + 
      '      These tables are from the <q>nested TPC-H</q>  schema, shown in detail in' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_sample_schema"><h4>Sample Schema and Data for Experimenting with Impala Complex Types</h4> </a>.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">REGION</span>  table contains an <span class="sql-docs-inline-code">ARRAY</span>  of <span class="sql-docs-inline-code">STRUCT</span> ' + 
      '      elements:' + 
      '    </p> <ul><li><p>' + 
      '          The first <span class="sql-docs-inline-code">DESCRIBE</span>  specifies the table name, to display the definition' + 
      '          of each top-level column.' + 
      '        </p> </li> <li><p>' + 
      '          The second <span class="sql-docs-inline-code">DESCRIBE</span>  specifies the name of a complex' + 
      '          column, <span class="sql-docs-inline-code">REGION.R_NATIONS</span> , showing that when you include the name of an <span class="sql-docs-inline-code">ARRAY</span> ' + 
      '          column in a <span class="sql-docs-inline-code">FROM</span>  clause, that table reference acts like a two-column table with' + 
      '          columns <span class="sql-docs-inline-code">ITEM</span>  and <span class="sql-docs-inline-code">POS</span> .' + 
      '        </p> </li> <li><p>' + 
      '          The final <span class="sql-docs-inline-code">DESCRIBE</span>  specifies the fully qualified name of the <span class="sql-docs-inline-code">ITEM</span>  field,' + 
      '          to display the layout of its underlying <span class="sql-docs-inline-code">STRUCT</span>  type in table format, with the fields' + 
      '          mapped to column names.' + 
      '        </p> </li> </ul> <div class="sql-docs-code-block"></div><p>' + 
      '      The <span class="sql-docs-inline-code">CUSTOMER</span>  table contains an <span class="sql-docs-inline-code">ARRAY</span>  of <span class="sql-docs-inline-code">STRUCT</span> ' + 
      '      elements, where one field in the <span class="sql-docs-inline-code">STRUCT</span>  is another <span class="sql-docs-inline-code">ARRAY</span>  of' + 
      '      <span class="sql-docs-inline-code">STRUCT</span>  elements:' + 
      '    </p> <ul><li><p>' + 
      '          Again, the initial <span class="sql-docs-inline-code">DESCRIBE</span>  specifies only the table name.' + 
      '        </p> </li> <li><p>' + 
      '          The second <span class="sql-docs-inline-code">DESCRIBE</span>  specifies the qualified name of the complex' + 
      '          column, <span class="sql-docs-inline-code">CUSTOMER.C_ORDERS</span> , showing how an <span class="sql-docs-inline-code">ARRAY</span> ' + 
      '          is represented as a two-column table with columns <span class="sql-docs-inline-code">ITEM</span>  and <span class="sql-docs-inline-code">POS</span> .' + 
      '        </p> </li> <li><p>' + 
      '          The third <span class="sql-docs-inline-code">DESCRIBE</span>  specifies the qualified name of the <span class="sql-docs-inline-code">ITEM</span> ' + 
      '          of the <span class="sql-docs-inline-code">ARRAY</span>  column, to see the structure of the nested <span class="sql-docs-inline-code">ARRAY</span> .' + 
      '          Again, it has has two parts, <span class="sql-docs-inline-code">ITEM</span>  and <span class="sql-docs-inline-code">POS</span> . Because the' + 
      '          <span class="sql-docs-inline-code">ARRAY</span>  contains a <span class="sql-docs-inline-code">STRUCT</span> , the layout of the <span class="sql-docs-inline-code">STRUCT</span> ' + 
      '          is shown.' + 
      '        </p> </li> <li><p>' + 
      '          The fourth and fifth <span class="sql-docs-inline-code">DESCRIBE</span>  statements drill down into a <span class="sql-docs-inline-code">STRUCT</span>  field that' + 
      '          is itself a complex type, an <span class="sql-docs-inline-code">ARRAY</span>  of <span class="sql-docs-inline-code">STRUCT</span> .' + 
      '          The <span class="sql-docs-inline-code">ITEM</span>  portion of the qualified name is only required when the <span class="sql-docs-inline-code">ARRAY</span> ' + 
      '          elements are anonymous. The fields of the <span class="sql-docs-inline-code">STRUCT</span>  give names to any other complex types' + 
      '          nested inside the <span class="sql-docs-inline-code">STRUCT</span> . Therefore, the <span class="sql-docs-inline-code">DESCRIBE</span>  parameters' + 
      '          <span class="sql-docs-inline-code">CUSTOMER.C_ORDERS.ITEM.O_LINEITEMS</span>  and <span class="sql-docs-inline-code">CUSTOMER.C_ORDERS.O_LINEITEMS</span> ' + 
      '          are equivalent. (For brevity, leave out the <span class="sql-docs-inline-code">ITEM</span>  portion of' + 
      '          a qualified name when it is not required.)' + 
      '        </p> </li> <li><p>' + 
      '          The final <span class="sql-docs-inline-code">DESCRIBE</span>  shows the layout of the deeply nested <span class="sql-docs-inline-code">STRUCT</span>  type.' + 
      '          Because there are no more complex types nested inside this <span class="sql-docs-inline-code">STRUCT</span> , this is as far' + 
      '          as you can drill down into the layout for this table.' + 
      '        </p> </li> </ul> <div class="sql-docs-code-block"></div><p id="../Impala/docs/topics/impala_describe.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '  After the <span class="sql-docs-inline-code">impalad</span>  daemons are restarted, the first query against a table can take longer' + 
      '  than subsequent queries, because the metadata for the table is loaded before the query is processed. This' + 
      '  one-time delay for each table can cause misleading results in benchmark tests or cause unnecessary concern.' + 
      '  To <q>warm up</q>  the Impala metadata cache, you can issue a <span class="sql-docs-inline-code">DESCRIBE</span>  statement in advance' + 
      '  for each table you intend to access later.' + 
      '</p> <p>' + 
      '  When you are dealing with data files stored in HDFS, sometimes it is important to know details such as the' + 
      '  path of the data files for an Impala table, and the hostname for the namenode. You can get this information' + 
      '  from the <span class="sql-docs-inline-code">DESCRIBE FORMATTED</span>  output. You specify HDFS URIs or path specifications with' + 
      '  statements such as <span class="sql-docs-inline-code">LOAD DATA</span>  and the <span class="sql-docs-inline-code">LOCATION</span>  clause of <span class="sql-docs-inline-code">CREATE' + 
      '  TABLE</span>  or <span class="sql-docs-inline-code">ALTER TABLE</span> . You might also use HDFS URIs or paths with Linux commands' + 
      '  such as <span class="sql-docs-inline-code">hadoop</span>  and <span class="sql-docs-inline-code">hdfs</span>  to copy, rename, and so on, data files in HDFS.' + 
      '</p> <p id="../Impala/docs/topics/impala_describe.xml_sync_ddl_blurb">' + 
      '        If you connect to different Impala nodes within an <span class="sql-docs-inline-code">impala-shell</span>  session for' + 
      '        load-balancing purposes, you can enable the <span class="sql-docs-inline-code">SYNC_DDL</span>  query option to make each DDL' + 
      '        statement wait before returning, until the new or changed metadata has been received by all the Impala' + 
      '        nodes. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_sync_ddl.xml#sync_ddl">SYNC_DDL Query Option</a> for details.' + 
      '      </p> <p>' + 
      '  Each table can also have associated table statistics and column statistics. To see these categories of' + 
      '  information, use the <span class="sql-docs-inline-code">SHOW TABLE STATS <span class="sql-docs-variable">table_name</span> </span>  and <span class="sql-docs-inline-code">SHOW COLUMN' + 
      '  STATS <span class="sql-docs-variable">table_name</span> </span>  statements.' + 
      '' + 
      '  See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show">SHOW Statement</a> for details.' + 
      '</p> <div id="../Impala/docs/topics/impala_describe.xml_compute_stats_next" class="sql-docs-note">' + 
      '        After adding or replacing data in a table used in performance-critical queries, issue a <span class="sql-docs-inline-code">COMPUTE' + 
      '        STATS</span>  statement to make sure all statistics are up-to-date. Consider updating statistics for a' + 
      '        table after any <span class="sql-docs-inline-code">INSERT</span> , <span class="sql-docs-inline-code">LOAD DATA</span> , or <span class="sql-docs-inline-code">CREATE TABLE AS' + 
      '        SELECT</span>  statement in Impala, or after loading data through Hive and doing a <span class="sql-docs-inline-code">REFRESH' + 
      '        <span class="sql-docs-variable">table_name</span> </span>  in Impala. This technique is especially important for tables that' + 
      '        are very large, used in join queries, or both.' + 
      '      </div> <p id="../Impala/docs/topics/impala_describe.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '  The following example shows the results of both a standard <span class="sql-docs-inline-code">DESCRIBE</span>  and <span class="sql-docs-inline-code">DESCRIBE' + 
      '  FORMATTED</span>  for different kinds of schema objects:' + 
      '</p> <ul><li><span class="sql-docs-inline-code">DESCRIBE</span>  for a table or a view returns the name, type, and comment for each of the' + 
      '      columns. For a view, if the column value is computed by an expression, the column name is automatically' + 
      '      generated as <span class="sql-docs-inline-code">_c0</span> , <span class="sql-docs-inline-code">_c1</span> , and so on depending on the ordinal number of the' + 
      '      column.' + 
      '    </li> <li>' + 
      '      A table created with no special format or storage clauses is designated as a <span class="sql-docs-inline-code">MANAGED_TABLE</span> ' + 
      '      (an <q>internal table</q>  in Impala terminology). Its data files are stored in an HDFS directory under the' + 
      '      default Hive data directory. By default, it uses Text data format.' + 
      '    </li> <li>' + 
      '      A view is designated as <span class="sql-docs-inline-code">VIRTUAL_VIEW</span>  in <span class="sql-docs-inline-code">DESCRIBE FORMATTED</span>  output. Some' + 
      '      of its properties are <span class="sql-docs-inline-code">NULL</span>  or blank because they are inherited from the base table. The' + 
      '      text of the query that defines the view is part of the <span class="sql-docs-inline-code">DESCRIBE FORMATTED</span>  output.' + 
      '    </li> <li>' + 
      '      A table with additional clauses in the <span class="sql-docs-inline-code">CREATE TABLE</span>  statement has differences in' + 
      '      <span class="sql-docs-inline-code">DESCRIBE FORMATTED</span>  output. The output for <span class="sql-docs-inline-code">T2</span>  includes the' + 
      '      <span class="sql-docs-inline-code">EXTERNAL_TABLE</span>  keyword because of the <span class="sql-docs-inline-code">CREATE EXTERNAL TABLE</span>  syntax, and' + 
      '      different <span class="sql-docs-inline-code">InputFormat</span>  and <span class="sql-docs-inline-code">OutputFormat</span>  fields to reflect the Parquet file' + 
      '      format.' + 
      '    </li> </ul> <div class="sql-docs-code-block">[localhost:21000] > create table t1 (x int, y int, s string);<br/>Query: create table t1 (x int, y int, s string)<br/>[localhost:21000] > describe t1;<br/>Query: describe t1<br/>Query finished, fetching results ...<br/>+------+--------+---------+<br/>| name | type   | comment |<br/>+------+--------+---------+<br/>| x    | int    |         |<br/>| y    | int    |         |<br/>| s    | string |         |<br/>+------+--------+---------+<br/>Returned 3 row(s) in 0.13s<br/>[localhost:21000] > describe formatted t1;<br/>Query: describe formatted t1<br/>Query finished, fetching results ...<br/>+------------------------------+--------------------------------------------+------------+<br/>| name                         | type                                       | comment    |<br/>+------------------------------+--------------------------------------------+------------+<br/>| # col_name                   | data_type                                  | comment    |<br/>|                              | NULL                                       | NULL       |<br/>| x                            | int                                        | None       |<br/>| y                            | int                                        | None       |<br/>| s                            | string                                     | None       |<br/>|                              | NULL                                       | NULL       |<br/>| # Detailed Table Information | NULL                                       | NULL       |<br/>| Database:                    | describe_formatted                         | NULL       |<br/>| Owner:                       | doc_demo                                   | NULL       |<br/>| CreateTime:                  | Mon Jul 22 17:03:16 EDT 2013               | NULL       |<br/>| LastAccessTime:              | UNKNOWN                                    | NULL       |<br/>| Protect Mode:                | None                                       | NULL       |<br/>| Retention:                   | 0                                          | NULL       |<br/>| Location:                    | hdfs://127.0.0.1:8020/user/hive/warehouse/ |            |<br/>|                              |   describe_formatted.db/t1                 | NULL       |<br/>| Table Type:                  | MANAGED_TABLE                              | NULL       |<br/>| Table Parameters:            | NULL                                       | NULL       |<br/>|                              | transient_lastDdlTime                      | 1374526996 |<br/>|                              | NULL                                       | NULL       |<br/>| # Storage Information        | NULL                                       | NULL       |<br/>| SerDe Library:               | org.apache.hadoop.hive.serde2.lazy.        |            |<br/>|                              |   LazySimpleSerDe                          | NULL       |<br/>| InputFormat:                 | org.apache.hadoop.mapred.TextInputFormat   | NULL       |<br/>| OutputFormat:                | org.apache.hadoop.hive.ql.io.              |            |<br/>|                              |   HiveIgnoreKeyTextOutputFormat            | NULL       |<br/>| Compressed:                  | No                                         | NULL       |<br/>| Num Buckets:                 | 0                                          | NULL       |<br/>| Bucket Columns:              | []                                         | NULL       |<br/>| Sort Columns:                | []                                         | NULL       |<br/>+------------------------------+--------------------------------------------+------------+<br/>Returned 26 row(s) in 0.03s<br/>[localhost:21000] > create view v1 as select x, upper(s) from t1;<br/>Query: create view v1 as select x, upper(s) from t1<br/>[localhost:21000] > describe v1;<br/>Query: describe v1<br/>Query finished, fetching results ...<br/>+------+--------+---------+<br/>| name | type   | comment |<br/>+------+--------+---------+<br/>| x    | int    |         |<br/>| _c1  | string |         |<br/>+------+--------+---------+<br/>Returned 2 row(s) in 0.10s<br/>[localhost:21000] > describe formatted v1;<br/>Query: describe formatted v1<br/>Query finished, fetching results ...<br/>+------------------------------+------------------------------+----------------------+<br/>| name                         | type                         | comment              |<br/>+------------------------------+------------------------------+----------------------+<br/>| # col_name                   | data_type                    | comment              |<br/>|                              | NULL                         | NULL                 |<br/>| x                            | int                          | None                 |<br/>| _c1                          | string                       | None                 |<br/>|                              | NULL                         | NULL                 |<br/>| # Detailed Table Information | NULL                         | NULL                 |<br/>| Database:                    | describe_formatted           | NULL                 |<br/>| Owner:                       | doc_demo                     | NULL                 |<br/>| CreateTime:                  | Mon Jul 22 16:56:38 EDT 2013 | NULL                 |<br/>| LastAccessTime:              | UNKNOWN                      | NULL                 |<br/>| Protect Mode:                | None                         | NULL                 |<br/>| Retention:                   | 0                            | NULL                 |<br/>| Table Type:                  | VIRTUAL_VIEW                 | NULL                 |<br/>| Table Parameters:            | NULL                         | NULL                 |<br/>|                              | transient_lastDdlTime        | 1374526598           |<br/>|                              | NULL                         | NULL                 |<br/>| # Storage Information        | NULL                         | NULL                 |<br/>| SerDe Library:               | null                         | NULL                 |<br/>| InputFormat:                 | null                         | NULL                 |<br/>| OutputFormat:                | null                         | NULL                 |<br/>| Compressed:                  | No                           | NULL                 |<br/>| Num Buckets:                 | 0                            | NULL                 |<br/>| Bucket Columns:              | []                           | NULL                 |<br/>| Sort Columns:                | []                           | NULL                 |<br/>|                              | NULL                         | NULL                 |<br/>| # View Information           | NULL                         | NULL                 |<br/>| View Original Text:          | SELECT x, upper(s) FROM t1   | NULL                 |<br/>| View Expanded Text:          | SELECT x, upper(s) FROM t1   | NULL                 |<br/>+------------------------------+------------------------------+----------------------+<br/>Returned 28 row(s) in 0.03s<br/>[localhost:21000] > create external table t2 (x int, y int, s string) stored as parquet location \'/user/doc_demo/sample_data\';<br/>[localhost:21000] > describe formatted t2;<br/>Query: describe formatted t2<br/>Query finished, fetching results ...<br/>+------------------------------+----------------------------------------------------+------------+<br/>| name                         | type                                               | comment    |<br/>+------------------------------+----------------------------------------------------+------------+<br/>| # col_name                   | data_type                                          | comment    |<br/>|                              | NULL                                               | NULL       |<br/>| x                            | int                                                | None       |<br/>| y                            | int                                                | None       |<br/>| s                            | string                                             | None       |<br/>|                              | NULL                                               | NULL       |<br/>| # Detailed Table Information | NULL                                               | NULL       |<br/>| Database:                    | describe_formatted                                 | NULL       |<br/>| Owner:                       | doc_demo                                           | NULL       |<br/>| CreateTime:                  | Mon Jul 22 17:01:47 EDT 2013                       | NULL       |<br/>| LastAccessTime:              | UNKNOWN                                            | NULL       |<br/>| Protect Mode:                | None                                               | NULL       |<br/>| Retention:                   | 0                                                  | NULL       |<br/>| Location:                    | hdfs://127.0.0.1:8020/user/doc_demo/sample_data    | NULL       |<br/>| Table Type:                  | EXTERNAL_TABLE                                     | NULL       |<br/>| Table Parameters:            | NULL                                               | NULL       |<br/>|                              | EXTERNAL                                           | TRUE       |<br/>|                              | transient_lastDdlTime                              | 1374526907 |<br/>|                              | NULL                                               | NULL       |<br/>| # Storage Information        | NULL                                               | NULL       |<br/>| SerDe Library:               | org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe | NULL       |<br/>| InputFormat:                 | org.apache.impala.hive.serde.ParquetInputFormat    | NULL       |<br/>| OutputFormat:                | org.apache.impala.hive.serde.ParquetOutputFormat   | NULL       |<br/>| Compressed:                  | No                                                 | NULL       |<br/>| Num Buckets:                 | 0                                                  | NULL       |<br/>| Bucket Columns:              | []                                                 | NULL       |<br/>| Sort Columns:                | []                                                 | NULL       |<br/>+------------------------------+----------------------------------------------------+------------+<br/>Returned 27 row(s) in 0.17s</div><p id="../Impala/docs/topics/impala_describe.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_describe.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '      The user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '      typically the <span class="sql-docs-inline-code">impala</span>  user, must have read and execute' + 
      '      permissions for all directories that are part of the table.' + 
      '      (A table could span multiple different HDFS directories if it is partitioned.' + 
      '      The directories could be widely scattered because a partition can reside' + 
      '      in an arbitrary HDFS directory based on its <span class="sql-docs-inline-code">LOCATION</span>  attribute.)' + 
      '    </p> <p id="../Impala/docs/topics/impala_describe.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p>' + 
      '      The information displayed for Kudu tables includes the additional attributes' + 
      '      that are only applicable for Kudu tables:' + 
      '    </p> <ul><li>' + 
      '        Whether or not the column is part of the primary key. Every Kudu table' + 
      '        has a <span class="sql-docs-inline-code">true</span>  value here for at least one column. There' + 
      '        could be multiple <span class="sql-docs-inline-code">true</span>  values, for tables with' + 
      '        composite primary keys.' + 
      '      </li> <li>' + 
      '        Whether or not the column is nullable. Specified by the <span class="sql-docs-inline-code">NULL</span> ' + 
      '        or <span class="sql-docs-inline-code">NOT NULL</span>  attributes on the <span class="sql-docs-inline-code">CREATE TABLE</span>  statement.' + 
      '        Columns that are part of the primary key are automatically non-nullable.' + 
      '      </li> <li>' + 
      '        The default value, if any, for the column. Specified by the <span class="sql-docs-inline-code">DEFAULT</span> ' + 
      '        attribute on the <span class="sql-docs-inline-code">CREATE TABLE</span>  statement. If the default value is' + 
      '        <span class="sql-docs-inline-code">NULL</span> , that is not indicated in this column. It is implied by' + 
      '        <span class="sql-docs-inline-code">nullable</span>  being true and no other default value specified.' + 
      '      </li> <li>' + 
      '        The encoding used for values in the column. Specified by the <span class="sql-docs-inline-code">ENCODING</span> ' + 
      '        attribute on the <span class="sql-docs-inline-code">CREATE TABLE</span>  statement.' + 
      '      </li> <li>' + 
      '        The compression used for values in the column. Specified by the <span class="sql-docs-inline-code">COMPRESSION</span> ' + 
      '        attribute on the <span class="sql-docs-inline-code">CREATE TABLE</span>  statement.' + 
      '      </li> <li>' + 
      '        The block size (in bytes) used for the underlying Kudu storage layer for the column.' + 
      '        Specified by the <span class="sql-docs-inline-code">BLOCK_SIZE</span>  attribute on the <span class="sql-docs-inline-code">CREATE TABLE</span> ' + 
      '        statement.' + 
      '      </li> </ul> <p>' + 
      '      The following example shows <span class="sql-docs-inline-code">DESCRIBE</span>  output for a simple Kudu table, with' + 
      '      a single-column primary key and all column attributes left with their default values:' + 
      '    </p> <div class="sql-docs-code-block">describe million_rows;<br/>+------+--------+---------+-------------+----------+---------------+---------------+---------------------+------------+<br/>| name | type   | comment | primary_key | nullable | default_value | encoding      | compression         | block_size |<br/>+------+--------+---------+-------------+----------+---------------+---------------+---------------------+------------+<br/>| id   | string |         | true        | false    |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |<br/>| s    | string |         | false       | false    |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |<br/>+------+--------+---------+-------------+----------+---------------+---------------+---------------------+------------+<br/></div><p>' + 
      '      The following example shows <span class="sql-docs-inline-code">DESCRIBE</span>  output for a Kudu table with a' + 
      '      two-column primary key, and Kudu-specific attributes applied to some columns:' + 
      '    </p> <div class="sql-docs-code-block">create table kudu_describe_example<br/>(<br/>  c1 int, c2 int,<br/>  c3 string, c4 string not null, c5 string default \'n/a\', c6 string default \'\',<br/>  c7 bigint not null, c8 bigint null default null, c9 bigint default -1 encoding bit_shuffle,<br/>  primary key(c1,c2)<br/>)<br/>partition by hash (c1, c2) partitions 10 stored as kudu;<br/><br/>describe kudu_describe_example;<br/>+------+--------+---------+-------------+----------+---------------+---------------+---------------------+------------+<br/>| name | type   | comment | primary_key | nullable | default_value | encoding      | compression         | block_size |<br/>+------+--------+---------+-------------+----------+---------------+---------------+---------------------+------------+<br/>| c1   | int    |         | true        | false    |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |<br/>| c2   | int    |         | true        | false    |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |<br/>| c3   | string |         | false       | true     |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |<br/>| c4   | string |         | false       | false    |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |<br/>| c5   | string |         | false       | true     | n/a           | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |<br/>| c6   | string |         | false       | true     |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |<br/>| c7   | bigint |         | false       | false    |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |<br/>| c8   | bigint |         | false       | true     |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |<br/>| c9   | bigint |         | false       | true     | -1            | BIT_SHUFFLE   | DEFAULT_COMPRESSION | 0          |<br/>+------+--------+---------+-------------+----------+---------------+---------------+---------------------+------------+<br/></div><p id="../Impala/docs/topics/impala_describe.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#tables">Overview of Impala Tables</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_table.xml#create_table">CREATE TABLE Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_tables"><h4>SHOW TABLES Statement</h4> </a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_create_table"><h4>SHOW CREATE TABLE Statement</h4> </a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_drop_database.xml',
    title: 'DROP DATABASE Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Removes a database from the system. The physical operations involve removing the metadata for the database' + 
      '      from the metastore, and deleting the corresponding <span class="sql-docs-inline-code">*.db</span>  directory from HDFS.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_database.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">DROP (DATABASE|SCHEMA) [IF EXISTS] <span class="sql-docs-variable">database_name</span> <span class="sql-docs-inline-code">[RESTRICT | CASCADE]</span> ;</div><p id="../Impala/docs/topics/impala_drop_database.xml_ddl_blurb"><b>Statement type:</b>  DDL' + 
      '      </p> <p id="../Impala/docs/topics/impala_drop_database.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      By default, the database must be empty before it can be dropped, to avoid losing any data.' + 
      '    </p> <p>' + 
      '      In Impala 2.3 and higher, you can include the <span class="sql-docs-inline-code">CASCADE</span> ' + 
      '      clause to make Impala drop all tables and other objects in the database before dropping the database itself.' + 
      '      The <span class="sql-docs-inline-code">RESTRICT</span>  clause enforces the original requirement that the database be empty' + 
      '      before being dropped. Because the <span class="sql-docs-inline-code">RESTRICT</span>  behavior is still the default, this' + 
      '      clause is optional.' + 
      '    </p> <p>' + 
      '      The automatic dropping resulting from the <span class="sql-docs-inline-code">CASCADE</span>  clause follows the same rules as the' + 
      '      corresponding <span class="sql-docs-inline-code">DROP TABLE</span> , <span class="sql-docs-inline-code">DROP VIEW</span> , and <span class="sql-docs-inline-code">DROP FUNCTION</span>  statements.' + 
      '      In particular, the HDFS directories and data files for any external tables are left behind when the' + 
      '      tables are removed.' + 
      '    </p> <p>' + 
      '      When you do not use the <span class="sql-docs-inline-code">CASCADE</span>  clause, drop or move all the objects inside the database manually' + 
      '      before dropping the database itself:' + 
      '    </p> <ul><li><p>' + 
      '          Use the <span class="sql-docs-inline-code">SHOW TABLES</span>  statement to locate all tables and views in the database,' + 
      '          and issue <span class="sql-docs-inline-code">DROP TABLE</span>  and <span class="sql-docs-inline-code">DROP VIEW</span>  statements to remove them all.' + 
      '        </p> </li> <li><p>' + 
      '          Use the <span class="sql-docs-inline-code">SHOW FUNCTIONS</span>  and <span class="sql-docs-inline-code">SHOW AGGREGATE FUNCTIONS</span>  statements' + 
      '          to locate all user-defined functions in the database, and issue <span class="sql-docs-inline-code">DROP FUNCTION</span> ' + 
      '          and <span class="sql-docs-inline-code">DROP AGGREGATE FUNCTION</span>  statements to remove them all.' + 
      '        </p> </li> <li><p>' + 
      '          To keep tables or views contained by a database while removing the database itself, use' + 
      '          <span class="sql-docs-inline-code">ALTER TABLE</span>  and <span class="sql-docs-inline-code">ALTER VIEW</span>  to move the relevant' + 
      '          objects to a different database before dropping the original database.' + 
      '        </p> </li> </ul> <p>' + 
      '      You cannot drop the current database, that is, the database your session connected to' + 
      '      either through the <span class="sql-docs-inline-code">USE</span>  statement or the <span class="sql-docs-inline-code">-d</span>  option of <span class="sql-docs-inline-code">impala-shell</span> .' + 
      '      Issue a <span class="sql-docs-inline-code">USE</span>  statement to switch to a different database first.' + 
      '      Because the <span class="sql-docs-inline-code">default</span>  database is always available, issuing' + 
      '      <span class="sql-docs-inline-code">USE default</span>  is a convenient way to leave the current database' + 
      '      before dropping it.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_database.xml_hive_blurb"><b>Hive considerations:</b> </p> <p>' + 
      '      When you drop a database in Impala, the database can no longer be used by Hive.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_database.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_database.xml#create_database">CREATE DATABASE Statement</a> for examples covering <span class="sql-docs-inline-code">CREATE' + 
      '      DATABASE</span> , <span class="sql-docs-inline-code">USE</span> , and <span class="sql-docs-inline-code">DROP DATABASE</span> .' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_database.xml_s3_blurb"><b>Amazon S3 considerations:</b> </p> <p id="../Impala/docs/topics/impala_drop_database.xml_s3_ddl">' + 
      '        In Impala 2.6 and higher, Impala DDL statements such as' + 
      '        <span class="sql-docs-inline-code">CREATE DATABASE</span> , <span class="sql-docs-inline-code">CREATE TABLE</span> , <span class="sql-docs-inline-code">DROP DATABASE CASCADE</span> ,' + 
      '        <span class="sql-docs-inline-code">DROP TABLE</span> , and <span class="sql-docs-inline-code">ALTER TABLE [ADD|DROP] PARTITION</span>  can create or remove folders' + 
      '        as needed in the Amazon S3 system. Prior to Impala 2.6, you had to create folders yourself and point' + 
      '        Impala database, tables, or partitions at them, and manually remove folders when no longer needed.' + 
      '        See <span>s3</span> for details about reading and writing S3 data with Impala.' + 
      '      </p> <p id="../Impala/docs/topics/impala_drop_database.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_drop_database.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '      The user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '      typically the <span class="sql-docs-inline-code">impala</span>  user, must have write' + 
      '      permission for the directory associated with the database.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_database.xml_example_blurb"><b>Examples:</b> </p> <div id="../Impala/docs/topics/impala_drop_database.xml_create_drop_db_example" class="sql-docs-code-block">create database first_db;<br/>use first_db;<br/>create table t1 (x int);<br/><br/>create database second_db;<br/>use second_db;<br/>-- Each database has its own namespace for tables.<br/>-- You can reuse the same table names in each database.<br/>create table t1 (s string);<br/><br/>create database temp;<br/><br/>-- You can either USE a database after creating it,<br/>-- or qualify all references to the table name with the name of the database.<br/>-- Here, tables T2 and T3 are both created in the TEMP database.<br/><br/>create table temp.t2 (x int, y int);<br/>use database temp;<br/>create table t3 (s string);<br/><br/>-- You cannot drop a database while it is selected by the USE statement.<br/>drop database temp;<br/><i>ERROR: AnalysisException: Cannot drop current default database: temp</i> -- The always-available database \'default\' is a convenient one to USE<br/>-- before dropping a database you created.<br/>use default;<br/><br/>-- Before dropping a database, first drop all the tables inside it,<br/><span class="sql-docs-inline-code">-- or in Impala 2.3and higher use the CASCADE clause.</span> drop database temp;<br/>ERROR: ImpalaRuntimeException: Error making \'dropDatabase\' RPC to Hive Metastore:<br/>CAUSED BY: InvalidOperationException: Database temp is not empty<br/>show tables in temp;<br/>+------+<br/>| name |<br/>+------+<br/>| t3   |<br/>+------+<br/><br/><span class="sql-docs-inline-code">-- Impala 2.3and higher:</span> <span class="sql-docs-inline-code">drop database temp cascade;</span> -- Earlier releases:<br/>drop table temp.t3;<br/>drop database temp;<br/></div><p id="../Impala/docs/topics/impala_drop_database.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_databases.xml#databases">Overview of Impala Databases</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_database.xml#create_database">CREATE DATABASE Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_use.xml#use">USE Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_databases"><h4>SHOW DATABASES</h4> </a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_table.xml#drop_table">DROP TABLE Statement</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_drop_function.xml',
    title: 'DROP FUNCTION Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Removes a user-defined function (UDF), so that it is not available for execution during Impala' + 
      '      <span class="sql-docs-inline-code">SELECT</span>  or <span class="sql-docs-inline-code">INSERT</span>  operations.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_function.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
      '      To drop C++ UDFs and UDAs:' + 
      '    </p> <div class="sql-docs-code-block">DROP [AGGREGATE] FUNCTION [IF EXISTS] [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">function_name</span> (<span class="sql-docs-variable">type</span> [, <span class="sql-docs-variable">type</span> ...])</div><div class="sql-docs-note"><p>' + 
      '        The preceding syntax, which includes the function signature, also applies to Java UDFs that were created' + 
      '        using the corresponding <span class="sql-docs-inline-code">CREATE FUNCTION</span>  syntax that includes the argument and return types.' + 
      '        After upgrading to Impala 2.5 or higher, consider re-creating all Java UDFs with the' + 
      '        <span class="sql-docs-inline-code">CREATE FUNCTION</span>  syntax that does not include the function signature. Java UDFs created this' + 
      '        way are now persisted in the metastore database and do not need to be re-created after an Impala restart.' + 
      '      </p> </div> <p>' + 
      '      To drop Java UDFs (created using the <span class="sql-docs-inline-code">CREATE FUNCTION</span>  syntax with no function signature):' + 
      '    </p> <div class="sql-docs-code-block">DROP FUNCTION [IF EXISTS] [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">function_name</span> </div><p id="../Impala/docs/topics/impala_drop_function.xml_ddl_blurb"><b>Statement type:</b>  DDL' + 
      '      </p> <p id="../Impala/docs/topics/impala_drop_function.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      Because the same function name could be overloaded with different argument signatures, you specify the' + 
      '      argument types to identify the exact function to drop.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_function.xml_restrictions_blurb"><b>Restrictions:</b> </p> <p id="../Impala/docs/topics/impala_drop_function.xml_udf_persistence_restriction">' + 
      '        In Impala 2.5 and higher, Impala UDFs and UDAs written in C++ are persisted in the metastore database.' + 
      '        Java UDFs are also persisted, if they were created with the new <span class="sql-docs-inline-code">CREATE FUNCTION</span>  syntax for Java UDFs,' + 
      '        where the Java function argument and return types are omitted.' + 
      '        Java-based UDFs created with the old <span class="sql-docs-inline-code">CREATE FUNCTION</span>  syntax do not persist across restarts' + 
      '        because they are held in the memory of the <span class="sql-docs-inline-code">catalogd</span>  daemon.' + 
      '        Until you re-create such Java UDFs using the new <span class="sql-docs-inline-code">CREATE FUNCTION</span>  syntax,' + 
      '        you must reload those Java-based UDFs by running the original <span class="sql-docs-inline-code">CREATE FUNCTION</span>  statements again each time' + 
      '        you restart the <span class="sql-docs-inline-code">catalogd</span>  daemon.' + 
      '        Prior to Impala 2.5 the requirement to reload functions after a restart applied to both C++ and Java functions.' + 
      '      </p> <p id="../Impala/docs/topics/impala_drop_function.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_drop_function.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '      The user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '      typically the <span class="sql-docs-inline-code">impala</span>  user, does not need any' + 
      '      particular HDFS permissions to perform this statement.' + 
      '      All read and write operations are on the metastore database,' + 
      '      not HDFS files and directories.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_function.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      The following example shows how to drop Java functions created with the signatureless' + 
      '      <span class="sql-docs-inline-code">CREATE FUNCTION</span>  syntax in Impala 2.5 and higher.' + 
      '      Issuing <span class="sql-docs-inline-code">DROP FUNCTION <span class="sql-docs-variable">function_name</span> </span>  removes all the' + 
      '      overloaded functions under that name.' + 
      '      (See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_function.xml#create_function">CREATE FUNCTION Statement</a> for a longer example' + 
      '      showing how to set up such functions in the first place.)' + 
      '    </p> <div class="sql-docs-code-block">create function my_func location \'/user/impala/udfs/udf-examples.jar\'<br/>  symbol=\'org.apache.impala.TestUdf\';<br/><br/>show functions;<br/>+-------------+---------------------------------------+-------------+---------------+<br/>| return type | signature                             | binary type | is persistent |<br/>+-------------+---------------------------------------+-------------+---------------+<br/>| BIGINT      | my_func(BIGINT)                       | JAVA        | true          |<br/>| BOOLEAN     | my_func(BOOLEAN)                      | JAVA        | true          |<br/>| BOOLEAN     | my_func(BOOLEAN, BOOLEAN)             | JAVA        | true          |<br/>...<br/>| BIGINT      | testudf(BIGINT)                       | JAVA        | true          |<br/>| BOOLEAN     | testudf(BOOLEAN)                      | JAVA        | true          |<br/>| BOOLEAN     | testudf(BOOLEAN, BOOLEAN)             | JAVA        | true          |<br/>...<br/><br/>drop function my_func;<br/>show functions;<br/>+-------------+---------------------------------------+-------------+---------------+<br/>| return type | signature                             | binary type | is persistent |<br/>+-------------+---------------------------------------+-------------+---------------+<br/>| BIGINT      | testudf(BIGINT)                       | JAVA        | true          |<br/>| BOOLEAN     | testudf(BOOLEAN)                      | JAVA        | true          |<br/>| BOOLEAN     | testudf(BOOLEAN, BOOLEAN)             | JAVA        | true          |<br/>...<br/></div><p id="../Impala/docs/topics/impala_drop_function.xml_related_info"><b>Related information:</b> </p> <p><span>udfs</span>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_function.xml#create_function">CREATE FUNCTION Statement</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_drop_role.xml',
    title: 'DROP ROLE Statement (Impala 2.0 or higher only)',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      The <span class="sql-docs-inline-code">DROP ROLE</span>  statement removes a role from the metastore database. Once dropped, the role' + 
      '      is revoked for all users to whom it was previously assigned, and all privileges granted to that role are' + 
      '      revoked. Queries that are already executing are not affected. Impala verifies the role information' + 
      '      approximately every 60 seconds, so the effects of <span class="sql-docs-inline-code">DROP ROLE</span>  might not take effect for new' + 
      '      Impala queries for a brief period.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_role.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">DROP ROLE <span class="sql-docs-variable">role_name</span> </div><p id="../Impala/docs/topics/impala_drop_role.xml_privileges_blurb"><b>Required privileges:</b> </p> <p>' + 
      '      Only administrative users (initially, a predefined set of users specified in the Sentry service configuration' + 
      '      file) can use this statement.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_role.xml_compatibility_blurb"><b>Compatibility:</b> </p> <p>' + 
      '      Impala makes use of any roles and privileges specified by the <span class="sql-docs-inline-code">GRANT</span>  and' + 
      '      <span class="sql-docs-inline-code">REVOKE</span>  statements in Hive, and Hive makes use of any roles and privileges specified by the' + 
      '      <span class="sql-docs-inline-code">GRANT</span>  and <span class="sql-docs-inline-code">REVOKE</span>  statements in Impala. The Impala <span class="sql-docs-inline-code">GRANT</span> ' + 
      '      and <span class="sql-docs-inline-code">REVOKE</span>  statements for privileges do not require the <span class="sql-docs-inline-code">ROLE</span>  keyword to be' + 
      '      repeated before each role name, unlike the equivalent Hive statements.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_role.xml_related_info"><b>Related information:</b> </p> <p><span>authorization</span>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_grant.xml#grant">GRANT Statement (Impala 2.0 or higher only)</a><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_revoke.xml#revoke">REVOKE Statement (Impala 2.0 or higher only)</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_role.xml#create_role">CREATE ROLE Statement (Impala 2.0 or higher only)</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show">SHOW Statement</a></p> <p id="../Impala/docs/topics/impala_drop_role.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_drop_role.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_drop_stats.xml',
    title: 'DROP STATS Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Removes the specified statistics from a table or partition. The statistics were originally created by the' + 
      '      <span class="sql-docs-inline-code">COMPUTE STATS</span>  or <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  statement.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_stats.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">DROP STATS [<span class="sql-docs-variable">database_name</span> .]<span class="sql-docs-variable">table_name</span> DROP INCREMENTAL STATS [<span class="sql-docs-variable">database_name</span> .]<span class="sql-docs-variable">table_name</span> PARTITION (<span class="sql-docs-variable">partition_spec</span> )<br/><br/><span class="sql-docs-variable">partition_spec</span> ::= <span class="sql-docs-variable">partition_col</span> =<span class="sql-docs-variable">constant_value</span> </div><p id="../Impala/docs/topics/impala_drop_stats.xml_incremental_partition_spec">' + 
      '        The <span class="sql-docs-inline-code">PARTITION</span>  clause is only allowed in combination with the <span class="sql-docs-inline-code">INCREMENTAL</span> ' + 
      '        clause. It is optional for <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span> , and required for <span class="sql-docs-inline-code">DROP' + 
      '        INCREMENTAL STATS</span> . Whenever you specify partitions through the <span class="sql-docs-inline-code">PARTITION' + 
      '        (<span class="sql-docs-variable">partition_spec</span> )</span>  clause in a <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  or' + 
      '        <span class="sql-docs-inline-code">DROP INCREMENTAL STATS</span>  statement, you must include all the partitioning columns in the' + 
      '        specification, and specify constant values for all the partition key columns.' + 
      '      </p> <p><span class="sql-docs-inline-code">DROP STATS</span>  removes all statistics from the table, whether created by <span class="sql-docs-inline-code">COMPUTE' + 
      '      STATS</span>  or <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span> .' + 
      '    </p> <p><span class="sql-docs-inline-code">DROP INCREMENTAL STATS</span>  only affects incremental statistics for a single partition, specified' + 
      '      through the <span class="sql-docs-inline-code">PARTITION</span>  clause. The incremental stats are marked as outdated, so that they are' + 
      '      recomputed by the next <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  statement.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_stats.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      You typically use this statement when the statistics for a table or a partition have become stale due to data' + 
      '      files being added to or removed from the associated HDFS data directories, whether by manual HDFS operations' + 
      '      or <span class="sql-docs-inline-code">INSERT</span> , <span class="sql-docs-inline-code">INSERT OVERWRITE</span> , or <span class="sql-docs-inline-code">LOAD DATA</span>  statements, or' + 
      '      adding or dropping partitions.' + 
      '    </p> <p>' + 
      '      When a table or partition has no associated statistics, Impala treats it as essentially zero-sized when' + 
      '      constructing the execution plan for a query. In particular, the statistics influence the order in which' + 
      '      tables are joined in a join query. To ensure proper query planning and good query performance and' + 
      '      scalability, make sure to run <span class="sql-docs-inline-code">COMPUTE STATS</span>  or <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  on' + 
      '      the table or partition after removing any stale statistics.' + 
      '    </p> <p>' + 
      '      Dropping the statistics is not required for an unpartitioned table or a partitioned table covered by the' + 
      '      original type of statistics. A subsequent <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement replaces any existing' + 
      '      statistics with new ones, for all partitions, regardless of whether the old ones were outdated. Therefore,' + 
      '      this statement was rarely used before the introduction of incremental statistics.' + 
      '    </p> <p>' + 
      '      Dropping the statistics is required for a partitioned table containing incremental statistics, to make a' + 
      '      subsequent <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  statement rescan an existing partition. See' + 
      '      <span>perf stats</span> for information about incremental statistics, a new feature' + 
      '      available in Impala 2.1.0 and higher.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_stats.xml_ddl_blurb"><b>Statement type:</b>  DDL' + 
      '      </p> <p id="../Impala/docs/topics/impala_drop_stats.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_drop_stats.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '      The user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '      typically the <span class="sql-docs-inline-code">impala</span>  user, does not need any' + 
      '      particular HDFS permissions to perform this statement.' + 
      '      All read and write operations are on the metastore database,' + 
      '      not HDFS files and directories.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_stats.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      The following example shows a partitioned table that has associated statistics produced by the' + 
      '      <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  statement, and how the situation evolves as statistics are dropped' + 
      '      from specific partitions, then the entire table.' + 
      '    </p> <p>' + 
      '      Initially, all table and column statistics are filled in.' + 
      '    </p> <div class="sql-docs-code-block">show table stats item_partitioned;<br/>+-------------+-------+--------+----------+--------------+---------+-----------------<br/>| i_category  | #Rows | #Files | Size     | Bytes Cached | Format  | Incremental stats<br/>+-------------+-------+--------+----------+--------------+---------+-----------------<br/>| Books       | 1733  | 1      | 223.74KB | NOT CACHED   | PARQUET | true<br/>| Children    | 1786  | 1      | 230.05KB | NOT CACHED   | PARQUET | true<br/>| Electronics | 1812  | 1      | 232.67KB | NOT CACHED   | PARQUET | true<br/>| Home        | 1807  | 1      | 232.56KB | NOT CACHED   | PARQUET | true<br/>| Jewelry     | 1740  | 1      | 223.72KB | NOT CACHED   | PARQUET | true<br/>| Men         | 1811  | 1      | 231.25KB | NOT CACHED   | PARQUET | true<br/>| Music       | 1860  | 1      | 237.90KB | NOT CACHED   | PARQUET | true<br/>| Shoes       | 1835  | 1      | 234.90KB | NOT CACHED   | PARQUET | true<br/>| Sports      | 1783  | 1      | 227.97KB | NOT CACHED   | PARQUET | true<br/>| Women       | 1790  | 1      | 226.27KB | NOT CACHED   | PARQUET | true<br/>| Total       | 17957 | 10     | 2.25MB   | 0B           |         |<br/>+-------------+-------+--------+----------+--------------+---------+-----------------<br/>show column stats item_partitioned;<br/>+------------------+-----------+------------------+--------+----------+--------------<br/>| Column           | Type      | #Distinct Values | #Nulls | Max Size | Avg Size<br/>+------------------+-----------+------------------+--------+----------+--------------<br/>| i_item_sk        | INT       | 19443            | -1     | 4        | 4<br/>| i_item_id        | STRING    | 9025             | -1     | 16       | 16<br/>| i_rec_start_date | TIMESTAMP | 4                | -1     | 16       | 16<br/>| i_rec_end_date   | TIMESTAMP | 3                | -1     | 16       | 16<br/>| i_item_desc      | STRING    | 13330            | -1     | 200      | 100.302803039<br/>| i_current_price  | FLOAT     | 2807             | -1     | 4        | 4<br/>| i_wholesale_cost | FLOAT     | 2105             | -1     | 4        | 4<br/>| i_brand_id       | INT       | 965              | -1     | 4        | 4<br/>| i_brand          | STRING    | 725              | -1     | 22       | 16.1776008605<br/>| i_class_id       | INT       | 16               | -1     | 4        | 4<br/>| i_class          | STRING    | 101              | -1     | 15       | 7.76749992370<br/>| i_category_id    | INT       | 10               | -1     | 4        | 4<br/>| i_manufact_id    | INT       | 1857             | -1     | 4        | 4<br/>| i_manufact       | STRING    | 1028             | -1     | 15       | 11.3295001983<br/>| i_size           | STRING    | 8                | -1     | 11       | 4.33459997177<br/>| i_formulation    | STRING    | 12884            | -1     | 20       | 19.9799995422<br/>| i_color          | STRING    | 92               | -1     | 10       | 5.38089990615<br/>| i_units          | STRING    | 22               | -1     | 7        | 4.18690013885<br/>| i_container      | STRING    | 2                | -1     | 7        | 6.99259996414<br/>| i_manager_id     | INT       | 105              | -1     | 4        | 4<br/>| i_product_name   | STRING    | 19094            | -1     | 25       | 18.0233001708<br/>| i_category       | STRING    | 10               | 0      | -1       | -1<br/>+------------------+-----------+------------------+--------+----------+--------------<br/></div><p>' + 
      '      To remove statistics for particular partitions, use the <span class="sql-docs-inline-code">DROP INCREMENTAL STATS</span>  statement.' + 
      '      After removing statistics for two partitions, the table-level statistics reflect that change in the' + 
      '      <span class="sql-docs-inline-code">#Rows</span>  and <span class="sql-docs-inline-code">Incremental stats</span>  fields. The counts, maximums, and averages of' + 
      '      the column-level statistics are unaffected.' + 
      '    </p> <div class="sql-docs-note">' + 
      '      (It is possible that the row count might be preserved in future after a <span class="sql-docs-inline-code">DROP INCREMENTAL' + 
      '      STATS</span>  statement. Check the resolution of the issue' + 
      '      .)' + 
      '    </div> <div class="sql-docs-code-block">drop incremental stats item_partitioned partition (i_category=\'Sports\');<br/>drop incremental stats item_partitioned partition (i_category=\'Electronics\');<br/><br/>show table stats item_partitioned<br/>+-------------+-------+--------+----------+--------------+---------+------------------<br/>| i_category  | #Rows | #Files | Size     | Bytes Cached | Format  | Incremental stats<br/>+-------------+-------+--------+----------+--------------+---------+-----------------<br/>| Books       | 1733  | 1      | 223.74KB | NOT CACHED   | PARQUET | true<br/>| Children    | 1786  | 1      | 230.05KB | NOT CACHED   | PARQUET | true<br/>| Electronics | -1    | 1      | 232.67KB | NOT CACHED   | PARQUET | false<br/>| Home        | 1807  | 1      | 232.56KB | NOT CACHED   | PARQUET | true<br/>| Jewelry     | 1740  | 1      | 223.72KB | NOT CACHED   | PARQUET | true<br/>| Men         | 1811  | 1      | 231.25KB | NOT CACHED   | PARQUET | true<br/>| Music       | 1860  | 1      | 237.90KB | NOT CACHED   | PARQUET | true<br/>| Shoes       | 1835  | 1      | 234.90KB | NOT CACHED   | PARQUET | true<br/>| Sports      | -1    | 1      | 227.97KB | NOT CACHED   | PARQUET | false<br/>| Women       | 1790  | 1      | 226.27KB | NOT CACHED   | PARQUET | true<br/>| Total       | 17957 | 10     | 2.25MB   | 0B           |         |<br/>+-------------+-------+--------+----------+--------------+---------+-----------------<br/>show column stats item_partitioned<br/>+------------------+-----------+------------------+--------+----------+--------------<br/>| Column           | Type      | #Distinct Values | #Nulls | Max Size | Avg Size<br/>+------------------+-----------+------------------+--------+----------+--------------<br/>| i_item_sk        | INT       | 19443            | -1     | 4        | 4<br/>| i_item_id        | STRING    | 9025             | -1     | 16       | 16<br/>| i_rec_start_date | TIMESTAMP | 4                | -1     | 16       | 16<br/>| i_rec_end_date   | TIMESTAMP | 3                | -1     | 16       | 16<br/>| i_item_desc      | STRING    | 13330            | -1     | 200      | 100.302803039<br/>| i_current_price  | FLOAT     | 2807             | -1     | 4        | 4<br/>| i_wholesale_cost | FLOAT     | 2105             | -1     | 4        | 4<br/>| i_brand_id       | INT       | 965              | -1     | 4        | 4<br/>| i_brand          | STRING    | 725              | -1     | 22       | 16.1776008605<br/>| i_class_id       | INT       | 16               | -1     | 4        | 4<br/>| i_class          | STRING    | 101              | -1     | 15       | 7.76749992370<br/>| i_category_id    | INT       | 10               | -1     | 4        | 4<br/>| i_manufact_id    | INT       | 1857             | -1     | 4        | 4<br/>| i_manufact       | STRING    | 1028             | -1     | 15       | 11.3295001983<br/>| i_size           | STRING    | 8                | -1     | 11       | 4.33459997177<br/>| i_formulation    | STRING    | 12884            | -1     | 20       | 19.9799995422<br/>| i_color          | STRING    | 92               | -1     | 10       | 5.38089990615<br/>| i_units          | STRING    | 22               | -1     | 7        | 4.18690013885<br/>| i_container      | STRING    | 2                | -1     | 7        | 6.99259996414<br/>| i_manager_id     | INT       | 105              | -1     | 4        | 4<br/>| i_product_name   | STRING    | 19094            | -1     | 25       | 18.0233001708<br/>| i_category       | STRING    | 10               | 0      | -1       | -1<br/>+------------------+-----------+------------------+--------+----------+--------------<br/></div><p>' + 
      '      To remove all statistics from the table, whether produced by <span class="sql-docs-inline-code">COMPUTE STATS</span>  or' + 
      '      <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span> , use the <span class="sql-docs-inline-code">DROP STATS</span>  statement without the' + 
      '      <span class="sql-docs-inline-code">INCREMENTAL</span>  clause). Now, both table-level and column-level statistics are reset.' + 
      '    </p> <div class="sql-docs-code-block">drop stats item_partitioned;<br/><br/>show table stats item_partitioned<br/>+-------------+-------+--------+----------+--------------+---------+------------------<br/>| i_category  | #Rows | #Files | Size     | Bytes Cached | Format  | Incremental stats<br/>+-------------+-------+--------+----------+--------------+---------+------------------<br/>| Books       | -1    | 1      | 223.74KB | NOT CACHED   | PARQUET | false<br/>| Children    | -1    | 1      | 230.05KB | NOT CACHED   | PARQUET | false<br/>| Electronics | -1    | 1      | 232.67KB | NOT CACHED   | PARQUET | false<br/>| Home        | -1    | 1      | 232.56KB | NOT CACHED   | PARQUET | false<br/>| Jewelry     | -1    | 1      | 223.72KB | NOT CACHED   | PARQUET | false<br/>| Men         | -1    | 1      | 231.25KB | NOT CACHED   | PARQUET | false<br/>| Music       | -1    | 1      | 237.90KB | NOT CACHED   | PARQUET | false<br/>| Shoes       | -1    | 1      | 234.90KB | NOT CACHED   | PARQUET | false<br/>| Sports      | -1    | 1      | 227.97KB | NOT CACHED   | PARQUET | false<br/>| Women       | -1    | 1      | 226.27KB | NOT CACHED   | PARQUET | false<br/>| Total       | -1    | 10     | 2.25MB   | 0B           |         |<br/>+-------------+-------+--------+----------+--------------+---------+------------------<br/>show column stats item_partitioned<br/>+------------------+-----------+------------------+--------+----------+----------+<br/>| Column           | Type      | #Distinct Values | #Nulls | Max Size | Avg Size |<br/>+------------------+-----------+------------------+--------+----------+----------+<br/>| i_item_sk        | INT       | -1               | -1     | 4        | 4        |<br/>| i_item_id        | STRING    | -1               | -1     | -1       | -1       |<br/>| i_rec_start_date | TIMESTAMP | -1               | -1     | 16       | 16       |<br/>| i_rec_end_date   | TIMESTAMP | -1               | -1     | 16       | 16       |<br/>| i_item_desc      | STRING    | -1               | -1     | -1       | -1       |<br/>| i_current_price  | FLOAT     | -1               | -1     | 4        | 4        |<br/>| i_wholesale_cost | FLOAT     | -1               | -1     | 4        | 4        |<br/>| i_brand_id       | INT       | -1               | -1     | 4        | 4        |<br/>| i_brand          | STRING    | -1               | -1     | -1       | -1       |<br/>| i_class_id       | INT       | -1               | -1     | 4        | 4        |<br/>| i_class          | STRING    | -1               | -1     | -1       | -1       |<br/>| i_category_id    | INT       | -1               | -1     | 4        | 4        |<br/>| i_manufact_id    | INT       | -1               | -1     | 4        | 4        |<br/>| i_manufact       | STRING    | -1               | -1     | -1       | -1       |<br/>| i_size           | STRING    | -1               | -1     | -1       | -1       |<br/>| i_formulation    | STRING    | -1               | -1     | -1       | -1       |<br/>| i_color          | STRING    | -1               | -1     | -1       | -1       |<br/>| i_units          | STRING    | -1               | -1     | -1       | -1       |<br/>| i_container      | STRING    | -1               | -1     | -1       | -1       |<br/>| i_manager_id     | INT       | -1               | -1     | 4        | 4        |<br/>| i_product_name   | STRING    | -1               | -1     | -1       | -1       |<br/>| i_category       | STRING    | 10               | 0      | -1       | -1       |<br/>+------------------+-----------+------------------+--------+----------+----------+<br/></div><p id="../Impala/docs/topics/impala_drop_stats.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_compute_stats.xml#compute_stats">COMPUTE STATS Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_table_stats"><h4>SHOW TABLE STATS Statement</h4> </a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_column_stats"><h4>SHOW COLUMN STATS Statement</h4> </a>, <span>perf stats</span></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_drop_table.xml',
    title: 'DROP TABLE Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Removes an Impala table. Also removes the underlying HDFS data files for internal tables, although not for' + 
      '      external tables.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_table.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">DROP TABLE [IF EXISTS] [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">table_name</span> <span class="sql-docs-inline-code">[PURGE]</span> </div><p><b>IF EXISTS clause:</b> </p> <p>' + 
      '      The optional <span class="sql-docs-inline-code">IF EXISTS</span>  clause makes the statement succeed whether or not the table exists.' + 
      '      If the table does exist, it is dropped; if it does not exist, the statement has no effect. This capability is' + 
      '      useful in standardized setup scripts that remove existing schema objects and create new ones. By using some' + 
      '      combination of <span class="sql-docs-inline-code">IF EXISTS</span>  for the <span class="sql-docs-inline-code">DROP</span>  statements and <span class="sql-docs-inline-code">IF NOT' + 
      '      EXISTS</span>  clauses for the <span class="sql-docs-inline-code">CREATE</span>  statements, the script can run successfully the first' + 
      '      time you run it (when the objects do not exist yet) and subsequent times (when some or all of the objects do' + 
      '      already exist).' + 
      '    </p> <p><b>PURGE clause:</b> </p> <p> The optional <span class="sql-docs-inline-code">PURGE</span>  keyword, available in' + 
      '      Impala 2.3 and higher, causes Impala to remove the associated' + 
      '      HDFS data files immediately, rather than going through the HDFS trashcan' + 
      '      mechanism. Use this keyword when dropping a table if it is crucial to' + 
      '      remove the data as quickly as possible to free up space, or if there is a' + 
      '      problem with the trashcan, such as the trash cannot being configured or' + 
      '      being in a different HDFS encryption zone than the data files. </p> <p id="../Impala/docs/topics/impala_drop_table.xml_ddl_blurb"><b>Statement type:</b>  DDL' + 
      '      </p> <p id="../Impala/docs/topics/impala_drop_table.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      By default, Impala removes the associated HDFS directory and data files for the table. If you issue a' + 
      '      <span class="sql-docs-inline-code">DROP TABLE</span>  and the data files are not deleted, it might be for the following reasons:' + 
      '    </p> <ul><li>' + 
      '        If the table was created with the' + 
      '        <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#external_tables">EXTERNAL</a></span>  clause, Impala leaves all' + 
      '        files and directories untouched. Use external tables when the data is under the control of other Hadoop' + 
      '        components, and Impala is only used to query the data files from their original locations.' + 
      '      </li> <li>' + 
      '        Impala might leave the data files behind unintentionally, if there is no HDFS location available to hold' + 
      '        the HDFS trashcan for the <span class="sql-docs-inline-code">impala</span>  user. See' + 
      '        <span>prereqs account</span> for the procedure to set up the required HDFS home' + 
      '        directory.' + 
      '      </li> </ul> <p>' + 
      '      Make sure that you are in the correct database before dropping a table, either by issuing a' + 
      '      <span class="sql-docs-inline-code">USE</span>  statement first or by using a fully qualified name' + 
      '      <span class="sql-docs-inline-code"><span class="sql-docs-variable">db_name</span> .<span class="sql-docs-variable">table_name</span> </span> .' + 
      '    </p> <p>' + 
      '      If you intend to issue a <span class="sql-docs-inline-code">DROP DATABASE</span>  statement, first issue <span class="sql-docs-inline-code">DROP TABLE</span> ' + 
      '      statements to remove all the tables in that database.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_table.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">create database temporary;<br/>use temporary;<br/>create table unimportant (x int);<br/>create table trivial (s string);<br/>-- Drop a table in the current database.<br/>drop table unimportant;<br/>-- Switch to a different database.<br/>use default;<br/>-- To drop a table in a different database...<br/>drop table trivial;<br/><i>ERROR: AnalysisException: Table does not exist: default.trivial</i> -- ...use a fully qualified name.<br/>drop table temporary.trivial;</div><p id="../Impala/docs/topics/impala_drop_table.xml_disk_space_blurb">' + 
      '        For other tips about managing and reclaiming Impala disk space, see' + 
      '        <span>disk space</span>.' + 
      '      </p> <p id="../Impala/docs/topics/impala_drop_table.xml_s3_blurb"><b>Amazon S3 considerations:</b> </p> <p>' + 
      '      The <span class="sql-docs-inline-code">DROP TABLE</span>  statement can remove data files from S3' + 
      '      if the associated S3 table is an internal table.' + 
      '      In Impala 2.6 and higher, as part of improved support for writing' + 
      '      to S3, Impala also removes the associated folder when dropping an internal table' + 
      '      that resides on S3.' + 
      '      See <span>s3</span> for details about working with S3 tables.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_table.xml_s3_drop_table_purge">' + 
      '        For best compatibility with the S3 write support in Impala 2.6' + 
      '        and higher:' + 
      '        <ul><li>Use native Hadoop techniques to create data files in S3 for querying through Impala.</li> <li>Use the <span class="sql-docs-inline-code">PURGE</span>  clause of <span class="sql-docs-inline-code">DROP TABLE</span>  when dropping internal (managed) tables.</li> </ul> ' + 
      '        By default, when you drop an internal (managed) table, the data files are' + 
      '        moved to the HDFS trashcan. This operation is expensive for tables that' + 
      '        reside on the Amazon S3 filesystem. Therefore, for S3 tables, prefer to use' + 
      '        <span class="sql-docs-inline-code">DROP TABLE <span class="sql-docs-variable">table_name</span>  PURGE</span>  rather than the default <span class="sql-docs-inline-code">DROP TABLE</span>  statement.' + 
      '        The <span class="sql-docs-inline-code">PURGE</span>  clause makes Impala delete the data files immediately,' + 
      '        skipping the HDFS trashcan.' + 
      '        For the <span class="sql-docs-inline-code">PURGE</span>  clause to work effectively, you must originally create the' + 
      '        data files on S3 using one of the tools from the Hadoop ecosystem, such as' + 
      '        <span class="sql-docs-inline-code">hadoop fs -cp</span> , or <span class="sql-docs-inline-code">INSERT</span>  in Impala or Hive.' + 
      '      </p> <p id="../Impala/docs/topics/impala_drop_table.xml_s3_ddl">' + 
      '        In Impala 2.6 and higher, Impala DDL statements such as' + 
      '        <span class="sql-docs-inline-code">CREATE DATABASE</span> , <span class="sql-docs-inline-code">CREATE TABLE</span> , <span class="sql-docs-inline-code">DROP DATABASE CASCADE</span> ,' + 
      '        <span class="sql-docs-inline-code">DROP TABLE</span> , and <span class="sql-docs-inline-code">ALTER TABLE [ADD|DROP] PARTITION</span>  can create or remove folders' + 
      '        as needed in the Amazon S3 system. Prior to Impala 2.6, you had to create folders yourself and point' + 
      '        Impala database, tables, or partitions at them, and manually remove folders when no longer needed.' + 
      '        See <span>s3</span> for details about reading and writing S3 data with Impala.' + 
      '      </p> <p id="../Impala/docs/topics/impala_drop_table.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_drop_table.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '      For an internal table, the user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '      typically the <span class="sql-docs-inline-code">impala</span>  user, must have write' + 
      '      permission for all the files and directories that make up the table.' + 
      '    </p> <p>' + 
      '      For an external table, dropping the table only involves changes to metadata in the metastore database.' + 
      '      Because Impala does not remove any HDFS files or directories when external tables are dropped,' + 
      '      no particular permissions are needed for the associated HDFS files or directories.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_table.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p>' + 
      '      Kudu tables can be managed or external, the same as with HDFS-based' + 
      '      tables. For a managed table, the underlying Kudu table and its data' + 
      '      are removed by <span class="sql-docs-inline-code">DROP TABLE</span> . For an external table,' + 
      '      the underlying Kudu table and its data remain after a' + 
      '      <span class="sql-docs-inline-code">DROP TABLE</span> .' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_table.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#tables">Overview of Impala Tables</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_alter_table.xml#alter_table">ALTER TABLE Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_table.xml#create_table">CREATE TABLE Statement</a>,' + 
      '      <span>partitioning</span>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#internal_tables"><h4>Internal Tables</h4> </a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#external_tables"><h4>External Tables</h4> </a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_drop_view.xml',
    title: 'DROP VIEW Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Removes the specified view, which was originally created by the <span class="sql-docs-inline-code">CREATE VIEW</span>  statement.' + 
      '      Because a view is purely a logical construct (an alias for a query) with no physical data behind it,' + 
      '      <span class="sql-docs-inline-code">DROP VIEW</span>  only involves changes to metadata in the metastore database, not any data files in' + 
      '      HDFS.' + 
      '    </p> <p id="../Impala/docs/topics/impala_drop_view.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">DROP VIEW [IF EXISTS] [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">view_name</span> </div><p id="../Impala/docs/topics/impala_drop_view.xml_ddl_blurb"><b>Statement type:</b>  DDL' + 
      '      </p> <p id="../Impala/docs/topics/impala_drop_view.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_drop_view.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> <p id="../Impala/docs/topics/impala_drop_view.xml_example_blurb"><b>Examples:</b> </p> <p id="../Impala/docs/topics/impala_drop_view.xml_create_drop_view_examples">' + 
      '        The following example creates a series of views and then drops them. These examples illustrate how views' + 
      '        are associated with a particular database, and both the view definitions and the view names for' + 
      '        <span class="sql-docs-inline-code">CREATE VIEW</span>  and <span class="sql-docs-inline-code">DROP VIEW</span>  can refer to a view in the current database or' + 
      '        a fully qualified view name.' + 
      '<div class="sql-docs-code-block">-- Create and drop a view in the current database.<br/>CREATE VIEW few_rows_from_t1 AS SELECT * FROM t1 LIMIT 10;<br/>DROP VIEW few_rows_from_t1;<br/><br/>-- Create and drop a view referencing a table in a different database.<br/>CREATE VIEW table_from_other_db AS SELECT x FROM db1.foo WHERE x IS NOT NULL;<br/>DROP VIEW table_from_other_db;<br/><br/>USE db1;<br/>-- Create a view in a different database.<br/>CREATE VIEW db2.v1 AS SELECT * FROM db2.foo;<br/>-- Switch into the other database and drop the view.<br/>USE db2;<br/>DROP VIEW v1;<br/><br/>USE db1;<br/>-- Create a view in a different database.<br/>CREATE VIEW db2.v1 AS SELECT * FROM db2.foo;<br/>-- Drop a view in the other database.<br/>DROP VIEW db2.v1;<br/></div></p> <p id="../Impala/docs/topics/impala_drop_view.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_views.xml#views">Overview of Impala Views</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_view.xml#create_view">CREATE VIEW Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_alter_view.xml#alter_view">ALTER VIEW Statement</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_explain.xml',
    title: 'EXPLAIN Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Returns the execution plan for a statement, showing the low-level mechanisms that Impala will use to read the' + 
      '      data, divide the work among nodes in the cluster, and transmit intermediate and final results across the' + 
      '      network. Use <span class="sql-docs-inline-code">explain</span>  followed by a complete <span class="sql-docs-inline-code">SELECT</span>  query. For example:' + 
      '    </p> <p id="../Impala/docs/topics/impala_explain.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">EXPLAIN { <span class="sql-docs-variable">select_query</span> | <span class="sql-docs-variable">ctas_stmt</span> | <span class="sql-docs-variable">insert_stmt</span> }<br/></div><p>' + 
      '      The <span class="sql-docs-variable">select_query</span>  is a <span class="sql-docs-inline-code">SELECT</span>  statement, optionally prefixed by a' + 
      '      <span class="sql-docs-inline-code">WITH</span>  clause. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_select.xml#select">SELECT Statement</a> for details.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-variable">insert_stmt</span>  is an <span class="sql-docs-inline-code">INSERT</span>  statement that inserts into or overwrites an' + 
      '      existing table. It can use either the <span class="sql-docs-inline-code">INSERT ... SELECT</span>  or <span class="sql-docs-inline-code">INSERT ...' + 
      '      VALUES</span>  syntax. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_insert.xml#insert">INSERT Statement</a> for details.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-variable">ctas_stmt</span>  is a <span class="sql-docs-inline-code">CREATE TABLE</span>  statement using the <span class="sql-docs-inline-code">AS' + 
      '      SELECT</span>  clause, typically abbreviated as a <q>CTAS</q>  operation. See' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_table.xml#create_table">CREATE TABLE Statement</a> for details.' + 
      '    </p> <p id="../Impala/docs/topics/impala_explain.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      You can interpret the output to judge whether the query is performing efficiently, and adjust the query' + 
      '      and/or the schema if not. For example, you might change the tests in the <span class="sql-docs-inline-code">WHERE</span>  clause, add' + 
      '      hints to make join operations more efficient, introduce subqueries, change the order of tables in a join, add' + 
      '      or change partitioning for a table, collect column statistics and/or table statistics in Hive, or any other' + 
      '      performance tuning steps.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">EXPLAIN</span>  output reminds you if table or column statistics are missing from any table' + 
      '      involved in the query. These statistics are important for optimizing queries involving large tables or' + 
      '      multi-table joins. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_compute_stats.xml#compute_stats">COMPUTE STATS Statement</a> for how to gather statistics,' + 
      '      and <span>perf stats</span> for how to use this information for query tuning.' + 
      '    </p> <p id="../Impala/docs/topics/impala_explain.xml_explain_interpret">' + 
      '        Read the <span class="sql-docs-inline-code">EXPLAIN</span>  plan from bottom to top:' + 
      '        <ul><li>' + 
      '            The last part of the plan shows the low-level details such as the expected amount of data that will be' + 
      '            read, where you can judge the effectiveness of your partitioning strategy and estimate how long it will' + 
      '            take to scan a table based on total data size and the size of the cluster.' + 
      '          </li> <li>' + 
      '            As you work your way up, next you see the operations that will be parallelized and performed on each' + 
      '            Impala node.' + 
      '          </li> <li>' + 
      '            At the higher levels, you see how data flows when intermediate result sets are combined and transmitted' + 
      '            from one node to another.' + 
      '          </li> <li>' + 
      '            See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_explain_level.xml#explain_level">EXPLAIN_LEVEL Query Option</a> for details about the' + 
      '            <span class="sql-docs-inline-code">EXPLAIN_LEVEL</span>  query option, which lets you customize how much detail to show in the' + 
      '            <span class="sql-docs-inline-code">EXPLAIN</span>  plan depending on whether you are doing high-level or low-level tuning,' + 
      '            dealing with logical or physical aspects of the query.' + 
      '          </li> </ul> </p> <p>' + 
      '      If you come from a traditional database background and are not familiar with data warehousing, keep in mind' + 
      '      that Impala is optimized for full table scans across very large tables. The structure and distribution of' + 
      '      this data is typically not suitable for the kind of indexing and single-row lookups that are common in OLTP' + 
      '      environments. Seeing a query scan entirely through a large table is common, not necessarily an indication of' + 
      '      an inefficient query. Of course, if you can reduce the volume of scanned data by orders of magnitude, for' + 
      '      example by using a query that affects only certain partitions within a partitioned table, then you might be' + 
      '      able to optimize a query so that it executes in seconds rather than minutes.' + 
      '    </p> <p>' + 
      '      For more information and examples to help you interpret <span class="sql-docs-inline-code">EXPLAIN</span>  output, see' + 
      '      <span>perf explain</span>.' + 
      '    </p> <p><b>Extended EXPLAIN output:</b> </p> <p>' + 
      '      For performance tuning of complex queries, and capacity planning (such as using the admission control and' + 
      '      resource management features), you can enable more detailed and informative output for the' + 
      '      <span class="sql-docs-inline-code">EXPLAIN</span>  statement. In the <span class="sql-docs-inline-code">impala-shell</span>  interpreter, issue the command' + 
      '      <span class="sql-docs-inline-code">SET EXPLAIN_LEVEL=<span class="sql-docs-variable">level</span> </span> , where <span class="sql-docs-variable">level</span>  is an integer' + 
      '      from 0 to 3 or corresponding mnemonic values <span class="sql-docs-inline-code">minimal</span> , <span class="sql-docs-inline-code">standard</span> ,' + 
      '      <span class="sql-docs-inline-code">extended</span> , or <span class="sql-docs-inline-code">verbose</span> .' + 
      '    </p> <p>' + 
      '      When extended <span class="sql-docs-inline-code">EXPLAIN</span>  output is enabled, <span class="sql-docs-inline-code">EXPLAIN</span>  statements print' + 
      '      information about estimated memory requirements, minimum number of virtual cores, and so on.' + 
      '      </p> <p>' + 
      '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_explain_level.xml#explain_level">EXPLAIN_LEVEL Query Option</a> for details and examples.' + 
      '    </p> <p id="../Impala/docs/topics/impala_explain.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      This example shows how the standard <span class="sql-docs-inline-code">EXPLAIN</span>  output moves from the lowest (physical) level to' + 
      '      the higher (logical) levels. The query begins by scanning a certain amount of data; each node performs an' + 
      '      aggregation operation (evaluating <span class="sql-docs-inline-code">COUNT(*)</span> ) on some subset of data that is local to that' + 
      '      node; the intermediate results are transmitted back to the coordinator node (labelled here as the' + 
      '      <span class="sql-docs-inline-code">EXCHANGE</span>  node); lastly, the intermediate results are summed to display the final result.' + 
      '    </p> <div id="../Impala/docs/topics/impala_explain.xml_explain_plan_simple" class="sql-docs-code-block">[impalad-host:21000] > explain select count(*) from customer_address;<br/>+----------------------------------------------------------+<br/>| Explain String                                           |<br/>+----------------------------------------------------------+<br/>| Estimated Per-Host Requirements: Memory=42.00MB VCores=1 |<br/>|                                                          |<br/>| 03:AGGREGATE [MERGE FINALIZE]                            |<br/>| |  output: sum(count(*))                                 |<br/>| |                                                        |<br/>| 02:EXCHANGE [PARTITION=UNPARTITIONED]                    |<br/>| |                                                        |<br/>| 01:AGGREGATE                                             |<br/>| |  output: count(*)                                      |<br/>| |                                                        |<br/>| 00:SCAN HDFS [default.customer_address]                  |<br/>|    partitions=1/1 size=5.25MB                            |<br/>+----------------------------------------------------------+<br/></div><p>' + 
      '      These examples show how the extended <span class="sql-docs-inline-code">EXPLAIN</span>  output becomes more accurate and informative as' + 
      '      statistics are gathered by the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement. Initially, much of the information' + 
      '      about data size and distribution is marked <q>unavailable</q> . Impala can determine the raw data size, but' + 
      '      not the number of rows or number of distinct values for each column without additional analysis. The' + 
      '      <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement performs this analysis, so a subsequent <span class="sql-docs-inline-code">EXPLAIN</span> ' + 
      '      statement has additional information to use in deciding how to optimize the distributed query.' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > set explain_level=extended;<br/>EXPLAIN_LEVEL set to extended<br/>[localhost:21000] > explain select x from t1;<br/>[localhost:21000] > explain select x from t1;<br/>+----------------------------------------------------------+<br/>| Explain String                                           |<br/>+----------------------------------------------------------+<br/>| Estimated Per-Host Requirements: Memory=32.00MB VCores=1 |<br/>|                                                          |<br/>| 01:EXCHANGE [PARTITION=UNPARTITIONED]                    |<br/>| |  hosts=1 per-host-mem=unavailable                      |<br/><b>| |  tuple-ids=0 row-size=4B cardinality=unavailable       |</b> | |                                                        |<br/>| 00:SCAN HDFS [default.t2, PARTITION=RANDOM]              |<br/>|    partitions=1/1 size=36B                               |<br/><b>|    table stats: unavailable                              |</b> <b>|    column stats: unavailable                             |</b> |    hosts=1 per-host-mem=32.00MB                          |<br/><b>|    tuple-ids=0 row-size=4B cardinality=unavailable       |</b> +----------------------------------------------------------+<br/></div><div class="sql-docs-code-block">[localhost:21000] > compute stats t1;<br/>+-----------------------------------------+<br/>| summary                                 |<br/>+-----------------------------------------+<br/>| Updated 1 partition(s) and 1 column(s). |<br/>+-----------------------------------------+<br/>[localhost:21000] > explain select x from t1;<br/>+----------------------------------------------------------+<br/>| Explain String                                           |<br/>+----------------------------------------------------------+<br/>| Estimated Per-Host Requirements: Memory=64.00MB VCores=1 |<br/>|                                                          |<br/>| 01:EXCHANGE [PARTITION=UNPARTITIONED]                    |<br/>| |  hosts=1 per-host-mem=unavailable                      |<br/>| |  tuple-ids=0 row-size=4B cardinality=0                 |<br/>| |                                                        |<br/>| 00:SCAN HDFS [default.t1, PARTITION=RANDOM]              |<br/>|    partitions=1/1 size=36B                               |<br/><b>|    table stats: 0 rows total                             |</b> <b>|    column stats: all                                     |</b> |    hosts=1 per-host-mem=64.00MB                          |<br/><b>|    tuple-ids=0 row-size=4B cardinality=0                 |</b> +----------------------------------------------------------+<br/></div><p id="../Impala/docs/topics/impala_explain.xml_security_blurb"><b>Security considerations:</b> </p> <p id="../Impala/docs/topics/impala_explain.xml_redaction_yes">' + 
      '        If these statements in your environment contain sensitive literal values such as credit card numbers or tax' + 
      '        identifiers, Impala can redact this sensitive information when displaying the statements in log files and' + 
      '        other administrative contexts. See  for details.' + 
      '      </p> <p id="../Impala/docs/topics/impala_explain.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_explain.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '      The user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '      typically the <span class="sql-docs-inline-code">impala</span>  user, must have read' + 
      '      and execute permissions for all applicable directories in all source tables' + 
      '      for the query that is being explained.' + 
      '      (A <span class="sql-docs-inline-code">SELECT</span>  operation could read files from multiple different HDFS directories' + 
      '      if the source table is partitioned.)' + 
      '    </p> <p id="../Impala/docs/topics/impala_explain.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p>' + 
      '      The <span class="sql-docs-inline-code">EXPLAIN</span>  statement displays equivalent plan' + 
      '      information for queries against Kudu tables as for queries' + 
      '      against HDFS-based tables.' + 
      '    </p> <p>' + 
      '      To see which predicates Impala can <q>push down</q>  to Kudu for' + 
      '      efficient evaluation, without transmitting unnecessary rows back' + 
      '      to Impala, look for the <span class="sql-docs-inline-code">kudu predicates</span>  item in' + 
      '      the scan phase of the query. The label <span class="sql-docs-inline-code">kudu predicates</span> ' + 
      '      indicates a condition that can be evaluated efficiently on the Kudu' + 
      '      side. The label <span class="sql-docs-inline-code">predicates</span>  in a <span class="sql-docs-inline-code">SCAN KUDU</span> ' + 
      '      node indicates a condition that is evaluated by Impala.' + 
      '      For example, in a table with primary key column <span class="sql-docs-inline-code">X</span> ' + 
      '      and non-primary key column <span class="sql-docs-inline-code">Y</span> , you can see that' + 
      '      some operators in the <span class="sql-docs-inline-code">WHERE</span>  clause are evaluated' + 
      '      immediately by Kudu and others are evaluated later by Impala:' + 
      '    </p> <div class="sql-docs-code-block">EXPLAIN SELECT x,y from kudu_table WHERE<br/>  x = 1 AND y NOT IN (2,3) AND z = 1<br/>  AND a IS NOT NULL AND b > 0 AND length(s) > 5;<br/>+----------------<br/>| Explain String<br/>+----------------<br/>...<br/>| 00:SCAN KUDU [kudu_table]<br/>|    predicates: y NOT IN (2, 3), length(s) > 5<br/>|    kudu predicates: a IS NOT NULL, b > 0, x = 1, z = 1<br/></div><p>' + 
      '      Only binary predicates, <span class="sql-docs-inline-code">IS NULL</span>  and <span class="sql-docs-inline-code">IS NOT NULL</span> ' + 
      '      (in Impala 2.9 and higher), and <span class="sql-docs-inline-code">IN</span>  predicates' + 
      '      containing literal values that exactly match the types in the Kudu table, and do not' + 
      '      require any casting, can be pushed to Kudu.' + 
      '    </p> <p id="../Impala/docs/topics/impala_explain.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_select.xml#select">SELECT Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_insert.xml#insert">INSERT Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_table.xml#create_table">CREATE TABLE Statement</a>,' + 
      '      <span>explain plan</span></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_grant.xml',
    title: 'GRANT Statement (Impala 2.0 or higher only)',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      The <span class="sql-docs-inline-code">GRANT</span>  statement grants roles or privileges on specified objects to groups. Only Sentry' + 
      '      administrative users can grant roles to a group.' + 
      '    </p> <p id="../Impala/docs/topics/impala_grant.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">GRANT ROLE <span class="sql-docs-variable">role_name</span> TO GROUP <span class="sql-docs-variable">group_name</span> GRANT <span class="sql-docs-variable">privilege</span> ON <span class="sql-docs-variable">object_type</span> <span class="sql-docs-variable">object_name</span> TO [ROLE] <span class="sql-docs-variable">roleName</span> [WITH GRANT OPTION]<br/><br/><span class="sql-docs-inline-code">privilege ::= SELECT | SELECT(<span class="sql-docs-variable">column_name</span> ) | INSERT | ALL</span> object_type ::= TABLE | DATABASE | SERVER | URI<br/></div><p>' + 
      '      Typically, the object name is an identifier. For URIs, it is a string literal.' + 
      '    </p> <p id="../Impala/docs/topics/impala_grant.xml_privileges_blurb"><b>Required privileges:</b> </p> <p>' + 
      '      Only administrative users (initially, a predefined set of users specified in the Sentry service configuration' + 
      '      file) can use this statement.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">WITH GRANT OPTION</span>  clause allows members of the specified role to issue' + 
      '      <span class="sql-docs-inline-code">GRANT</span>  and <span class="sql-docs-inline-code">REVOKE</span>  statements for those same privileges' + 
      '' + 
      '      Hence, if a role has the <span class="sql-docs-inline-code">ALL</span>  privilege on a database and the <span class="sql-docs-inline-code">WITH GRANT' + 
      '      OPTION</span>  set, users granted that role can execute <span class="sql-docs-inline-code">GRANT</span> /<span class="sql-docs-inline-code">REVOKE</span> ' + 
      '      statements only for that database or child tables of the database. This means a user could revoke the' + 
      '      privileges of the user that provided them the <span class="sql-docs-inline-code">GRANT OPTION</span> .' + 
      '    </p> <p>' + 
      '      Impala does not currently support revoking only the <span class="sql-docs-inline-code">WITH GRANT OPTION</span>  from a privilege' + 
      '      previously granted to a role. To remove the <span class="sql-docs-inline-code">WITH GRANT OPTION</span> , revoke the privilege and' + 
      '      grant it again without the <span class="sql-docs-inline-code">WITH GRANT OPTION</span>  flag.' + 
      '    </p> <p>' + 
      '      The ability to grant or revoke <span class="sql-docs-inline-code">SELECT</span>  privilege on specific columns is available' + 
      '      in Impala 2.3 and higher. See  for details.' + 
      '    </p> <p id="../Impala/docs/topics/impala_grant.xml_compatibility_blurb"><b>Compatibility:</b> </p> <p><ul><li>' + 
      '          The Impala <span class="sql-docs-inline-code">GRANT</span>  and <span class="sql-docs-inline-code">REVOKE</span>  statements are available in' + 
      '          Impala 2.0 and later.' + 
      '        </li> <li>' + 
      '          In Impala 1.4 and later, Impala can make use of any roles and privileges specified by the' + 
      '          <span class="sql-docs-inline-code">GRANT</span>  and <span class="sql-docs-inline-code">REVOKE</span>  statements in Hive, when your system is configured to' + 
      '          use the Sentry service instead of the file-based policy mechanism.' + 
      '        </li> <li>' + 
      '          The Impala <span class="sql-docs-inline-code">GRANT</span>  and <span class="sql-docs-inline-code">REVOKE</span>  statements for privileges do not require' + 
      '          the <span class="sql-docs-inline-code">ROLE</span>  keyword to be repeated before each role name, unlike the equivalent Hive' + 
      '          statements.' + 
      '        </li> <li id="../Impala/docs/topics/impala_grant.xml_grant_revoke_single">' + 
      '          Currently, each Impala <span class="sql-docs-inline-code">GRANT</span>  or <span class="sql-docs-inline-code">REVOKE</span>  statement can only grant or' + 
      '          revoke a single privilege to or from a single role.' + 
      '        </li> </ul> </p> <p id="../Impala/docs/topics/impala_grant.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_grant.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> <p id="../Impala/docs/topics/impala_grant.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p id="../Impala/docs/topics/impala_grant.xml_kudu_sentry_limitations">' + 
      '        Access to Kudu tables must be granted to and revoked from roles with the' + 
      '        following considerations:' + 
      '        <ul><li>' + 
      '            Only users with the <span class="sql-docs-inline-code">ALL</span>  privilege on' + 
      '              <span class="sql-docs-inline-code">SERVER</span>  can create external Kudu tables.' + 
      '          </li> <li>' + 
      '            The <span class="sql-docs-inline-code">ALL</span>  privileges on <span class="sql-docs-inline-code">SERVER</span>  is' + 
      '            required to specify the <span class="sql-docs-inline-code">kudu.master_addresses</span> ' + 
      '            property in the <span class="sql-docs-inline-code">CREATE TABLE</span>  statements for managed' + 
      '            tables as well as external tables.' + 
      '          </li> <li>' + 
      '            Access to Kudu tables is enforced at the table level and at the' + 
      '            column level.' + 
      '          </li> <li>' + 
      '            The <span class="sql-docs-inline-code">SELECT</span> - and <span class="sql-docs-inline-code">INSERT</span> -specific' + 
      '            permissions are supported.' + 
      '          </li> <li>' + 
      '            The <span class="sql-docs-inline-code">DELETE</span> , <span class="sql-docs-inline-code">UPDATE</span> , and' + 
      '            <span class="sql-docs-inline-code">UPSERT</span>  operations require the <span class="sql-docs-inline-code">ALL</span> ' + 
      '            privilege.' + 
      '          </li> </ul> ' + 
      '        Because non-SQL APIs can access Kudu data without going through Sentry' + 
      '        authorization, currently the Sentry support is considered preliminary' + 
      '        and subject to change.' + 
      '      </p> <p id="../Impala/docs/topics/impala_grant.xml_related_info"><b>Related information:</b> </p> <p><span>authorization</span>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_revoke.xml#revoke">REVOKE Statement (Impala 2.0 or higher only)</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_role.xml#create_role">CREATE ROLE Statement (Impala 2.0 or higher only)</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_role.xml#drop_role">DROP ROLE Statement (Impala 2.0 or higher only)</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show">SHOW Statement</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_insert.xml',
    title: 'INSERT Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Impala supports inserting into tables and partitions that you create with the Impala <span class="sql-docs-inline-code">CREATE' + 
      '      TABLE</span>  statement, or pre-defined tables and partitions created through Hive.' + 
      '    </p> <p id="../Impala/docs/topics/impala_insert.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">[<span class="sql-docs-variable">with_clause</span> ]<br/>  INSERT <span class="sql-docs-inline-code">[<span class="sql-docs-variable">hint_clause</span> ]</span> { INTO | OVERWRITE } [TABLE] <span class="sql-docs-variable">table_name</span> [(<span class="sql-docs-variable">column_list</span> )]<br/>  [ PARTITION (<span class="sql-docs-variable">partition_clause</span> )]<br/>{<br/>    [<span class="sql-docs-variable">hint_clause</span> ] <span class="sql-docs-variable">select_statement</span> | VALUES (<span class="sql-docs-variable">value</span> [, <span class="sql-docs-variable">value</span> ...]) [, (<span class="sql-docs-variable">value</span> [, <span class="sql-docs-variable">value</span> ...]) ...]<br/>}<br/><br/>partition_clause ::= <span class="sql-docs-variable">col_name</span> [= <span class="sql-docs-variable">constant</span> ] [, <span class="sql-docs-variable">col_name</span> [= <span class="sql-docs-variable">constant</span> ] ...]<br/><br/>hint_clause ::=<br/>  <span class="sql-docs-variable">hint_with_dashes</span> |<br/>  <span class="sql-docs-variable">hint_with_cstyle_delimiters</span> |<br/>  <span class="sql-docs-variable">hint_with_brackets</span> hint_with_dashes ::= -- +SHUFFLE | -- +NOSHUFFLE <span class="sql-docs-inline-code">-- +CLUSTERED</span> hint_with_cstyle_comments ::= /* +SHUFFLE */ | /* +NOSHUFFLE */ <span class="sql-docs-inline-code">| /* +CLUSTERED */</span> hint_with_brackets ::= [SHUFFLE] | [NOSHUFFLE]<br/>  (With this hint format, the square brackets are part of the syntax.)<br/></div><div id="../Impala/docs/topics/impala_insert.xml_square_bracket_hint_caveat" class="sql-docs-note">' + 
      '        The square bracket style of hint is now deprecated and might be removed in' + 
      '        a future release. For that reason, any newly added hints are not available' + 
      '        with the square bracket syntax.' + 
      '      </div> <p><b>Appending or replacing (INTO and OVERWRITE clauses):</b> </p> <p>' + 
      '      The <span class="sql-docs-inline-code">INSERT INTO</span>  syntax appends data to a table. The existing data files are left as-is, and' + 
      '      the inserted data is put into one or more new data files.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">INSERT OVERWRITE</span>  syntax replaces the data in a table.' + 
      '' + 
      '      Currently, the overwritten data files are deleted immediately; they do not go through the HDFS trash' + 
      '      mechanism.' + 
      '    </p> <p id="../Impala/docs/topics/impala_insert.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p>' + 
      '      The <span class="sql-docs-inline-code">INSERT</span>  statement currently does not support writing data files' + 
      '      containing complex types (<span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , and <span class="sql-docs-inline-code">MAP</span> ).' + 
      '      To prepare Parquet data for such tables, you generate the data files outside Impala and then' + 
      '      use <span class="sql-docs-inline-code">LOAD DATA</span>  or <span class="sql-docs-inline-code">CREATE EXTERNAL TABLE</span>  to associate those' + 
      '      data files with the table. Currently, such tables must use the Parquet file format.' + 
      '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a> for details about working with complex types.' + 
      '    </p> <p id="../Impala/docs/topics/impala_insert.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p id="../Impala/docs/topics/impala_insert.xml_kudu_no_insert_overwrite">' + 
      '        Currently, the <span class="sql-docs-inline-code">INSERT OVERWRITE</span>  syntax cannot be used with Kudu tables.' + 
      '      </p> <p>' + 
      '      Kudu tables require a unique primary key for each row. If an <span class="sql-docs-inline-code">INSERT</span> ' + 
      '      statement attempts to insert a row with the same values for the primary key columns' + 
      '      as an existing row, that row is discarded and the insert operation continues.' + 
      '      When rows are discarded due to duplicate primary keys, the statement finishes' + 
      '      with a warning, not an error. (This is a change from early releases of Kudu' + 
      '      where the default was to return in error in such cases, and the syntax' + 
      '      <span class="sql-docs-inline-code">INSERT IGNORE</span>  was required to make the statement succeed.' + 
      '      The <span class="sql-docs-inline-code">IGNORE</span>  clause is no longer part of the <span class="sql-docs-inline-code">INSERT</span> ' + 
      '      syntax.)' + 
      '    </p> <p>' + 
      '      For situations where you prefer to replace rows with duplicate primary key values,' + 
      '      rather than discarding the new data, you can use the <span class="sql-docs-inline-code">UPSERT</span> ' + 
      '      statement instead of <span class="sql-docs-inline-code">INSERT</span> . <span class="sql-docs-inline-code">UPSERT</span>  inserts' + 
      '      rows that are entirely new, and for rows that match an existing primary key in the' + 
      '      table, the non-primary-key columns are updated to reflect the values in the' + 
      '      <q>upserted</q>  data.' + 
      '    </p> <p>' + 
      '      If you really want to store new rows, not replace existing ones, but cannot do so' + 
      '      because of the primary key uniqueness constraint, consider recreating the table' + 
      '      with additional columns included in the primary key.' + 
      '    </p> <p>' + 
      '      See <span>impala kudu</span> for more details about using Impala with Kudu.' + 
      '    </p> <p id="../Impala/docs/topics/impala_insert.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      Impala currently supports:' + 
      '    </p> <ul><li>' + 
      '        Copy data from another table using <span class="sql-docs-inline-code">SELECT</span>  query. In Impala 1.2.1 and higher, you can' + 
      '        combine <span class="sql-docs-inline-code">CREATE TABLE</span>  and <span class="sql-docs-inline-code">INSERT</span>  operations into a single step with the' + 
      '        <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  syntax, which bypasses the actual <span class="sql-docs-inline-code">INSERT</span>  keyword.' + 
      '      </li> <li>' + 
      '        An optional <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_with.xml#with">WITH clause</a> before the' + 
      '        <span class="sql-docs-inline-code">INSERT</span>  keyword, to define a subquery referenced in the <span class="sql-docs-inline-code">SELECT</span>  portion.' + 
      '      </li> <li>' + 
      '        Create one or more new rows using constant expressions through <span class="sql-docs-inline-code">VALUES</span>  clause. (The' + 
      '        <span class="sql-docs-inline-code">VALUES</span>  clause was added in Impala 1.0.1.)' + 
      '      </li> <li><p>' + 
      '          By default, the first column of each newly inserted row goes into the first column of the table, the' + 
      '          second column into the second column, and so on.' + 
      '        </p> <p>' + 
      '          You can also specify the columns to be inserted, an arbitrarily ordered subset of the columns in the' + 
      '          destination table, by specifying a column list immediately after the name of the destination table. This' + 
      '          feature lets you adjust the inserted columns to match the layout of a <span class="sql-docs-inline-code">SELECT</span>  statement,' + 
      '          rather than the other way around. (This feature was added in Impala 1.1.)' + 
      '        </p> <p>' + 
      '          The number of columns mentioned in the column list (known as the <q>column permutation</q> ) must match' + 
      '          the number of columns in the <span class="sql-docs-inline-code">SELECT</span>  list or the <span class="sql-docs-inline-code">VALUES</span>  tuples. The' + 
      '          order of columns in the column permutation can be different than in the underlying table, and the columns' + 
      '          of each input row are reordered to match. If the number of columns in the column permutation is less than' + 
      '          in the destination table, all unmentioned columns are set to <span class="sql-docs-inline-code">NULL</span> .' + 
      '        </p> </li> <li>' + 
      '        An optional hint clause immediately either before the <span class="sql-docs-inline-code">SELECT</span>  keyword or after the' + 
      '        <span class="sql-docs-inline-code">INSERT</span>  keyword, to fine-tune the behavior when doing an <span class="sql-docs-inline-code">INSERT ... SELECT</span> ' + 
      '        operation into partitioned Parquet tables. The hint clause cannot be specified in multiple places.' + 
      '        The hint keywords are <span class="sql-docs-inline-code">[SHUFFLE]</span>  and <span class="sql-docs-inline-code">[NOSHUFFLE]</span> , including the square brackets.' + 
      '        Inserting into partitioned Parquet tables can be a resource-intensive operation because it potentially' + 
      '        involves many files being written to HDFS simultaneously, and separate' + 
      '        <span class="sql-docs-inline-code">large</span>  memory buffers being allocated to buffer the data for each' + 
      '        partition. For usage details, see <span>parquet etl</span>.' + 
      '      </li> </ul> <div class="sql-docs-note"><ul><li>' + 
      '          Insert commands that partition or add files result in changes to Hive metadata. Because Impala uses Hive' + 
      '          metadata, such changes may necessitate a metadata refresh. For more information, see the' + 
      '          <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_refresh.xml#refresh">REFRESH</a> function.' + 
      '        </li> <li>' + 
      '          Currently, Impala can only insert data into tables that use the text and Parquet formats. For other file' + 
      '          formats, insert the data using Hive and use Impala to query it.' + 
      '        </li> <li>' + 
      '          As an alternative to the <span class="sql-docs-inline-code">INSERT</span>  statement, if you have existing data files elsewhere in' + 
      '          HDFS, the <span class="sql-docs-inline-code">LOAD DATA</span>  statement can move those files into a table. This statement works' + 
      '          with tables of any file format.' + 
      '        </li> </ul> </div> <p id="../Impala/docs/topics/impala_insert.xml_dml_blurb"><b>Statement type:</b>  DML (but still affected by' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_sync_ddl.xml#sync_ddl">SYNC_DDL</a> query option)' + 
      '      </p> <p id="../Impala/docs/topics/impala_insert.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      When you insert the results of an expression, particularly of a built-in function call, into a small numeric' + 
      '      column such as <span class="sql-docs-inline-code">INT</span> , <span class="sql-docs-inline-code">SMALLINT</span> , <span class="sql-docs-inline-code">TINYINT</span> , or' + 
      '      <span class="sql-docs-inline-code">FLOAT</span> , you might need to use a <span class="sql-docs-inline-code">CAST()</span>  expression to coerce values into the' + 
      '      appropriate type. Impala does not automatically convert from a larger type to a smaller one. For example, to' + 
      '      insert cosine values into a <span class="sql-docs-inline-code">FLOAT</span>  column, write <span class="sql-docs-inline-code">CAST(COS(angle) AS FLOAT)</span> ' + 
      '      in the <span class="sql-docs-inline-code">INSERT</span>  statement to make the conversion explicit.' + 
      '    </p> <p id="../Impala/docs/topics/impala_insert.xml_file_format_blurb"><b>File format considerations:</b> </p> <p>' + 
      '      Because Impala can read certain file formats that it cannot write,' + 
      '      the <span class="sql-docs-inline-code">INSERT</span>  statement does not work for all kinds of' + 
      '      Impala tables. See <span>file formats</span>' + 
      '      for details about what file formats are supported by the' + 
      '      <span class="sql-docs-inline-code">INSERT</span>  statement.' + 
      '    </p> <p id="../Impala/docs/topics/impala_insert.xml_insert_parquet_blocksize">' + 
      '        Any <span class="sql-docs-inline-code">INSERT</span>  statement for a Parquet table requires enough free space in the HDFS filesystem' + 
      '        to write one block. Because Parquet data files use a block size of 1 GB by default, an' + 
      '        <span class="sql-docs-inline-code">INSERT</span>  might fail (even for a very small amount of data) if your HDFS is running low on' + 
      '        space.' + 
      '      </p> <p id="../Impala/docs/topics/impala_insert.xml_sync_ddl_blurb">' + 
      '        If you connect to different Impala nodes within an <span class="sql-docs-inline-code">impala-shell</span>  session for' + 
      '        load-balancing purposes, you can enable the <span class="sql-docs-inline-code">SYNC_DDL</span>  query option to make each DDL' + 
      '        statement wait before returning, until the new or changed metadata has been received by all the Impala' + 
      '        nodes. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_sync_ddl.xml#sync_ddl">SYNC_DDL Query Option</a> for details.' + 
      '      </p> <div id="../Impala/docs/topics/impala_insert.xml_compute_stats_next" class="sql-docs-note">' + 
      '        After adding or replacing data in a table used in performance-critical queries, issue a <span class="sql-docs-inline-code">COMPUTE' + 
      '        STATS</span>  statement to make sure all statistics are up-to-date. Consider updating statistics for a' + 
      '        table after any <span class="sql-docs-inline-code">INSERT</span> , <span class="sql-docs-inline-code">LOAD DATA</span> , or <span class="sql-docs-inline-code">CREATE TABLE AS' + 
      '        SELECT</span>  statement in Impala, or after loading data through Hive and doing a <span class="sql-docs-inline-code">REFRESH' + 
      '        <span class="sql-docs-variable">table_name</span> </span>  in Impala. This technique is especially important for tables that' + 
      '        are very large, used in join queries, or both.' + 
      '      </div> <p id="../Impala/docs/topics/impala_insert.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      The following example sets up new tables with the same definition as the <span class="sql-docs-inline-code">TAB1</span>  table from the' + 
      '      <span>Tutorial</span> section, using different file' + 
      '      formats, and demonstrates inserting data into the tables created with the <span class="sql-docs-inline-code">STORED AS TEXTFILE</span> ' + 
      '      and <span class="sql-docs-inline-code">STORED AS PARQUET</span>  clauses:' + 
      '    </p> <div class="sql-docs-code-block">CREATE DATABASE IF NOT EXISTS file_formats;<br/>USE file_formats;<br/><br/>DROP TABLE IF EXISTS text_table;<br/>CREATE TABLE text_table<br/>( id INT, col_1 BOOLEAN, col_2 DOUBLE, col_3 TIMESTAMP )<br/>STORED AS TEXTFILE;<br/><br/>DROP TABLE IF EXISTS parquet_table;<br/>CREATE TABLE parquet_table<br/>( id INT, col_1 BOOLEAN, col_2 DOUBLE, col_3 TIMESTAMP )<br/>STORED AS PARQUET;</div><p>' + 
      '      With the <span class="sql-docs-inline-code">INSERT INTO TABLE</span>  syntax, each new set of inserted rows is appended to any existing' + 
      '      data in the table. This is how you would record small amounts of data that arrive continuously, or ingest new' + 
      '      batches of data alongside the existing data. For example, after running 2 <span class="sql-docs-inline-code">INSERT INTO TABLE</span> ' + 
      '      statements with 5 rows each, the table contains 10 rows total:' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > insert into table text_table select * from default.tab1;<br/>Inserted 5 rows in 0.41s<br/><br/>[localhost:21000] > insert into table text_table select * from default.tab1;<br/>Inserted 5 rows in 0.46s<br/><br/>[localhost:21000] > select count(*) from text_table;<br/>+----------+<br/>| count(*) |<br/>+----------+<br/>| 10       |<br/>+----------+<br/>Returned 1 row(s) in 0.26s</div><p>' + 
      '      With the <span class="sql-docs-inline-code">INSERT OVERWRITE TABLE</span>  syntax, each new set of inserted rows replaces any existing' + 
      '      data in the table. This is how you load data to query in a data warehousing scenario where you analyze just' + 
      '      the data for a particular day, quarter, and so on, discarding the previous data each time. You might keep the' + 
      '      entire set of data in one raw table, and transfer and transform certain rows into a more compact and' + 
      '      efficient form to perform intensive analysis on that subset.' + 
      '    </p> <p>' + 
      '      For example, here we insert 5 rows into a table using the <span class="sql-docs-inline-code">INSERT INTO</span>  clause, then replace' + 
      '      the data by inserting 3 rows with the <span class="sql-docs-inline-code">INSERT OVERWRITE</span>  clause. Afterward, the table only' + 
      '      contains the 3 rows from the final <span class="sql-docs-inline-code">INSERT</span>  statement.' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > insert into table parquet_table select * from default.tab1;<br/>Inserted 5 rows in 0.35s<br/><br/>[localhost:21000] > insert overwrite table parquet_table select * from default.tab1 limit 3;<br/>Inserted 3 rows in 0.43s<br/>[localhost:21000] > select count(*) from parquet_table;<br/>+----------+<br/>| count(*) |<br/>+----------+<br/>| 3        |<br/>+----------+<br/>Returned 1 row(s) in 0.43s</div><p>' + 
      '      The <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_insert.xml#values">VALUES</a></span>  clause lets you insert one or more' + 
      '      rows by specifying constant values for all the columns. The number, types, and order of the expressions must' + 
      '      match the table definition.' + 
      '    </p> <div id="../Impala/docs/topics/impala_insert.xml_insert_values_warning" class="sql-docs-note">' + 
      '      The <span class="sql-docs-inline-code">INSERT ... VALUES</span>  technique is not suitable for loading large quantities of data into' + 
      '      HDFS-based tables, because the insert operations cannot be parallelized, and each one produces a separate' + 
      '      data file. Use it for setting up small dimension tables or tiny amounts of data for experimenting with SQL' + 
      '      syntax, or with HBase tables. Do not use it for large ETL jobs or benchmark tests for load operations. Do not' + 
      '      run scripts with thousands of <span class="sql-docs-inline-code">INSERT ... VALUES</span>  statements that insert a single row each' + 
      '      time. If you do run <span class="sql-docs-inline-code">INSERT ... VALUES</span>  operations to load data into a staging table as one' + 
      '      stage in an ETL pipeline, include multiple row values if possible within each <span class="sql-docs-inline-code">VALUES</span>  clause,' + 
      '      and use a separate database to make cleanup easier if the operation does produce many tiny files.' + 
      '    </div> <p>' + 
      '      The following example shows how to insert one row or multiple rows, with expressions of different types,' + 
      '      using literal values, expressions, and function return values:' + 
      '    </p> <div class="sql-docs-code-block">create table val_test_1 (c1 int, c2 float, c3 string, c4 boolean, c5 timestamp);<br/>insert into val_test_1 values (100, 99.9/10, \'abc\', true, now());<br/>create table val_test_2 (id int, token string);<br/>insert overwrite val_test_2 values (1, \'a\'), (2, \'b\'), (-1,\'xyzzy\');</div><p>' + 
      '      These examples show the type of <q>not implemented</q>  error that you see when attempting to insert data into' + 
      '      a table with a file format that Impala currently does not write to:' + 
      '    </p> <div class="sql-docs-code-block">DROP TABLE IF EXISTS sequence_table;<br/>CREATE TABLE sequence_table<br/>( id INT, col_1 BOOLEAN, col_2 DOUBLE, col_3 TIMESTAMP )<br/>STORED AS SEQUENCEFILE;<br/><br/>DROP TABLE IF EXISTS rc_table;<br/>CREATE TABLE rc_table<br/>( id INT, col_1 BOOLEAN, col_2 DOUBLE, col_3 TIMESTAMP )<br/>STORED AS RCFILE;<br/><br/>[localhost:21000] > insert into table rc_table select * from default.tab1;<br/>Remote error<br/>Backend 0:RC_FILE not implemented.<br/><br/>[localhost:21000] > insert into table sequence_table select * from default.tab1;<br/>Remote error<br/>Backend 0:SEQUENCE_FILE not implemented. </div><p>' + 
      '      The following examples show how you can copy the data in all the columns from one table to another, copy the' + 
      '      data from only some columns, or specify the columns in the select list in a different order than they' + 
      '      actually appear in the table:' + 
      '    </p> <div class="sql-docs-code-block">-- Start with 2 identical tables.<br/>create table t1 (c1 int, c2 int);<br/>create table t2 like t1;<br/><br/>-- If there is no () part after the destination table name,<br/>-- all columns must be specified, either as * or by name.<br/>insert into t2 select * from t1;<br/>insert into t2 select c1, c2 from t1;<br/><br/>-- With the () notation following the destination table name,<br/>-- you can omit columns (all values for that column are NULL<br/>-- in the destination table), and/or reorder the values<br/>-- selected from the source table. This is the "column permutation" feature.<br/>insert into t2 (c1) select c1 from t1;<br/>insert into t2 (c2, c1) select c1, c2 from t1;<br/><br/>-- The column names can be entirely different in the source and destination tables.<br/>-- You can copy any columns, not just the corresponding ones, from the source table.<br/>-- But the number and type of selected columns must match the columns mentioned in the () part.<br/>alter table t2 replace columns (x int, y int);<br/>insert into t2 (y) select c1 from t1;<br/></div><p id="../Impala/docs/topics/impala_insert.xml_insert_sort_blurb"><b>Sorting considerations:</b>  Although you can specify an <span class="sql-docs-inline-code">ORDER BY</span>  clause in an' + 
      '        <span class="sql-docs-inline-code">INSERT ... SELECT</span>  statement, any <span class="sql-docs-inline-code">ORDER BY</span>  clause is ignored and the' + 
      '        results are not necessarily sorted. An <span class="sql-docs-inline-code">INSERT ... SELECT</span>  operation potentially creates' + 
      '        many different data files, prepared on different data nodes, and therefore the notion of the data being' + 
      '        stored in sorted order is impractical.' + 
      '      </p> <p><b>Concurrency considerations:</b>  Each <span class="sql-docs-inline-code">INSERT</span>  operation creates new data files with unique' + 
      '      names, so you can run multiple <span class="sql-docs-inline-code">INSERT INTO</span>  statements simultaneously without filename' + 
      '      conflicts.' + 
      '' + 
      '      While data is being inserted into an Impala table, the data is staged temporarily in a subdirectory inside' + 
      '      the data directory; during this period, you cannot issue queries against that table in Hive. If an' + 
      '      <span class="sql-docs-inline-code">INSERT</span>  operation fails, the temporary data file and the subdirectory could be left behind in' + 
      '      the data directory. If so, remove the relevant subdirectory and any data files it contains manually, by' + 
      '      issuing an <span class="sql-docs-inline-code">hdfs dfs -rm -r</span>  command, specifying the full path of the work subdirectory, whose' + 
      '      name ends in <span class="sql-docs-inline-code">_dir</span> .' + 
      '    </p> </div> <div id="../Impala/docs/topics/impala_insert.xml_values"><h4>VALUES Clause</h4> <div><p>' + 
      '        The <span class="sql-docs-inline-code">VALUES</span>  clause is a general-purpose way to specify the columns of one or more rows,' + 
      '        typically within an <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_insert.xml#insert">INSERT</a></span>  statement.' + 
      '      </p> <div class="sql-docs-note"></div> <p>' + 
      '        The following examples illustrate:' + 
      '      </p> <ul><li>' + 
      '          How to insert a single row using a <span class="sql-docs-inline-code">VALUES</span>  clause.' + 
      '        </li> <li>' + 
      '          How to insert multiple rows using a <span class="sql-docs-inline-code">VALUES</span>  clause.' + 
      '        </li> <li>' + 
      '          How the row or rows from a <span class="sql-docs-inline-code">VALUES</span>  clause can be appended to a table through' + 
      '          <span class="sql-docs-inline-code">INSERT INTO</span> , or replace the contents of the table through <span class="sql-docs-inline-code">INSERT' + 
      '          OVERWRITE</span> .' + 
      '        </li> <li>' + 
      '          How the entries in a <span class="sql-docs-inline-code">VALUES</span>  clause can be literals, function results, or any other kind' + 
      '          of expression. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_literals.xml#literals">Literals</a> for the notation to use for literal' + 
      '          values, especially <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_literals.xml#string_literals"><h4>String Literals</h4> </a> for quoting and escaping' + 
      '          conventions for strings. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_operators.xml#operators">SQL Operators</a> and' + 
      '          <span>builtins</span> for other things you can include in expressions with the' + 
      '          <span class="sql-docs-inline-code">VALUES</span>  clause.' + 
      '        </li> </ul> <div class="sql-docs-code-block">[localhost:21000] > describe val_example;<br/>Query: describe val_example<br/>Query finished, fetching results ...<br/>+-------+---------+---------+<br/>| name  | type    | comment |<br/>+-------+---------+---------+<br/>| id    | int     |         |<br/>| col_1 | boolean |         |<br/>| col_2 | double  |         |<br/>+-------+---------+---------+<br/><br/>[localhost:21000] > insert into val_example values (1,true,100.0);<br/>Inserted 1 rows in 0.30s<br/>[localhost:21000] > select * from val_example;<br/>+----+-------+-------+<br/>| id | col_1 | col_2 |<br/>+----+-------+-------+<br/>| 1  | true  | 100   |<br/>+----+-------+-------+<br/><br/>[localhost:21000] > insert overwrite val_example values (10,false,pow(2,5)), (50,true,10/3);<br/>Inserted 2 rows in 0.16s<br/>[localhost:21000] > select * from val_example;<br/>+----+-------+-------------------+<br/>| id | col_1 | col_2             |<br/>+----+-------+-------------------+<br/>| 10 | false | 32                |<br/>| 50 | true  | 3.333333333333333 |<br/>+----+-------+-------------------+</div><p>' + 
      '        When used in an <span class="sql-docs-inline-code">INSERT</span>  statement, the Impala <span class="sql-docs-inline-code">VALUES</span>  clause can specify' + 
      '        some or all of the columns in the destination table, and the columns can be specified in a different order' + 
      '        than they actually appear in the table. To specify a different set or order of columns than in the table,' + 
      '        use the syntax:' + 
      '      </p> <div class="sql-docs-code-block">INSERT INTO <span class="sql-docs-variable">destination</span> (<span class="sql-docs-variable">col_x</span> , <span class="sql-docs-variable">col_y</span> , <span class="sql-docs-variable">col_z</span> )<br/>  VALUES<br/>  (<span class="sql-docs-variable">val_x</span> , <span class="sql-docs-variable">val_y</span> , <span class="sql-docs-variable">val_z</span> );<br/></div><p>' + 
      '        Any columns in the table that are not listed in the <span class="sql-docs-inline-code">INSERT</span>  statement are set to' + 
      '        <span class="sql-docs-inline-code">NULL</span> .' + 
      '      </p> <p>' + 
      '        To use a <span class="sql-docs-inline-code">VALUES</span>  clause like a table in other statements, wrap it in parentheses and use' + 
      '        <span class="sql-docs-inline-code">AS</span>  clauses to specify aliases for the entire object and any columns you need to refer to:' + 
      '      </p> <div class="sql-docs-code-block">[localhost:21000] > select * from (values(4,5,6),(7,8,9)) as t;<br/>+---+---+---+<br/>| 4 | 5 | 6 |<br/>+---+---+---+<br/>| 4 | 5 | 6 |<br/>| 7 | 8 | 9 |<br/>+---+---+---+<br/>[localhost:21000] > select * from (values(1 as c1, true as c2, \'abc\' as c3),(100,false,\'xyz\')) as t;<br/>+-----+-------+-----+<br/>| c1  | c2    | c3  |<br/>+-----+-------+-----+<br/>| 1   | true  | abc |<br/>| 100 | false | xyz |<br/>+-----+-------+-----+</div><p>' + 
      '        For example, you might use a tiny table constructed like this from constant literals or function return' + 
      '        values as part of a longer statement involving joins or <span class="sql-docs-inline-code">UNION ALL</span> .' + 
      '      </p> <p id="../Impala/docs/topics/impala_insert.xml_hdfs_blurb"><b>HDFS considerations:</b> </p> <p>' + 
      '        Impala physically writes all inserted files under the ownership of its default user, typically' + 
      '        <span class="sql-docs-inline-code">impala</span> . Therefore, this user must have HDFS write permission in the corresponding table' + 
      '        directory.' + 
      '      </p> <p>' + 
      '        The permission requirement is independent of the authorization performed by the Sentry framework. (If the' + 
      '        connected user is not authorized to insert into a table, Sentry blocks that operation immediately,' + 
      '        regardless of the privileges available to the <span class="sql-docs-inline-code">impala</span>  user.) Files created by Impala are' + 
      '        not owned by and do not inherit permissions from the connected user.' + 
      '      </p> <p>' + 
      '        The number of data files produced by an <span class="sql-docs-inline-code">INSERT</span>  statement depends on the size of the' + 
      '        cluster, the number of data blocks that are processed, the partition key columns in a partitioned table,' + 
      '        and the mechanism Impala uses for dividing the work in parallel. Do not assume that an' + 
      '        <span class="sql-docs-inline-code">INSERT</span>  statement will produce some particular number of output files. In case of' + 
      '        performance issues with data written by Impala, check that the output files do not suffer from issues such' + 
      '        as many tiny files or many tiny partitions. (In the Hadoop context, even files or partitions of a few tens' + 
      '        of megabytes are considered <q>tiny</q> .)' + 
      '      </p> <p id="../Impala/docs/topics/impala_insert.xml_insert_hidden_work_directory">' + 
      '        The <span class="sql-docs-inline-code">INSERT</span>  statement has always left behind a hidden work directory inside the data' + 
      '        directory of the table. Formerly, this hidden work directory was named' + 
      '        <span class="sql-docs-variable">.impala_insert_staging</span>  . In Impala 2.0.1 and later, this directory name is changed to' + 
      '        <span class="sql-docs-variable">_impala_insert_staging</span>  . (While HDFS tools are expected to treat names beginning' + 
      '        either with underscore and dot as hidden, in practice names beginning with an underscore are more widely' + 
      '        supported.) If you have any scripts, cleanup jobs, and so on that rely on the name of this work directory,' + 
      '        adjust them to use the new name.' + 
      '      </p> <p id="../Impala/docs/topics/impala_insert.xml_hbase_blurb"><b>HBase considerations:</b> </p> <p>' + 
      '        You can use the <span class="sql-docs-inline-code">INSERT</span>  statement with HBase tables as follows:' + 
      '      </p> <ul><li><p>' + 
      '            You can insert a single row or a small set of rows into an HBase table with the <span class="sql-docs-inline-code">INSERT ...' + 
      '            VALUES</span>  syntax. This is a good use case for HBase tables with Impala, because HBase tables are' + 
      '            not subject to the same kind of fragmentation from many small insert operations as HDFS tables are.' + 
      '          </p> </li> <li><p>' + 
      '            You can insert any number of rows at once into an HBase table using the <span class="sql-docs-inline-code">INSERT ...' + 
      '            SELECT</span>  syntax.' + 
      '          </p> </li> <li><p>' + 
      '            If more than one inserted row has the same value for the HBase key column, only the last inserted row' + 
      '            with that value is visible to Impala queries. You can take advantage of this fact with <span class="sql-docs-inline-code">INSERT' + 
      '            ... VALUES</span>  statements to effectively update rows one at a time, by inserting new rows with the' + 
      '            same key values as existing rows. Be aware that after an <span class="sql-docs-inline-code">INSERT ... SELECT</span>  operation' + 
      '            copying from an HDFS table, the HBase table might contain fewer rows than were inserted, if the key' + 
      '            column in the source table contained duplicate values.' + 
      '          </p> </li> <li><p>' + 
      '            You cannot <span class="sql-docs-inline-code">INSERT OVERWRITE</span>  into an HBase table. New rows are always appended.' + 
      '          </p> </li> <li><p>' + 
      '            When you create an Impala or Hive table that maps to an HBase table, the column order you specify with' + 
      '            the <span class="sql-docs-inline-code">INSERT</span>  statement might be different than the order you declare with the' + 
      '            <span class="sql-docs-inline-code">CREATE TABLE</span>  statement. Behind the scenes, HBase arranges the columns based on how' + 
      '            they are divided into column families. This might cause a mismatch during insert operations, especially' + 
      '            if you use the syntax <span class="sql-docs-inline-code">INSERT INTO <span class="sql-docs-variable">hbase_table</span>  SELECT * FROM' + 
      '            <span class="sql-docs-variable">hdfs_table</span> </span> . Before inserting data, verify the column order by issuing a' + 
      '            <span class="sql-docs-inline-code">DESCRIBE</span>  statement for the table, and adjust the order of the select list in the' + 
      '            <span class="sql-docs-inline-code">INSERT</span>  statement.' + 
      '          </p> </li> </ul> <p>' + 
      '        See <span>impala hbase</span> for more details about using Impala with HBase.' + 
      '      </p> <p id="../Impala/docs/topics/impala_insert.xml_s3_blurb"><b>Amazon S3 considerations:</b> </p> <p id="../Impala/docs/topics/impala_insert.xml_s3_dml">' + 
      '        In Impala 2.6 and higher, the Impala DML statements (<span class="sql-docs-inline-code">INSERT</span> , <span class="sql-docs-inline-code">LOAD DATA</span> ,' + 
      '        and <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span> ) can write data into a table or partition that resides in the' + 
      '        Amazon Simple Storage Service (S3).' + 
      '        The syntax of the DML statements is the same as for any other tables, because the S3 location for tables and' + 
      '        partitions is specified by an <span class="sql-docs-inline-code">s3a://</span>  prefix in the' + 
      '        <span class="sql-docs-inline-code">LOCATION</span>  attribute of' + 
      '        <span class="sql-docs-inline-code">CREATE TABLE</span>  or <span class="sql-docs-inline-code">ALTER TABLE</span>  statements.' + 
      '        If you bring data into S3 using the normal S3 transfer mechanisms instead of Impala DML statements,' + 
      '        issue a <span class="sql-docs-inline-code">REFRESH</span>  statement for the table before using Impala to query the S3 data.' + 
      '      </p> <p id="../Impala/docs/topics/impala_insert.xml_s3_dml_performance">' + 
      '        Because of differences between S3 and traditional filesystems, DML operations' + 
      '        for S3 tables can take longer than for tables on HDFS. For example, both the' + 
      '        <span class="sql-docs-inline-code">LOAD DATA</span>  statement and the final stage of the <span class="sql-docs-inline-code">INSERT</span> ' + 
      '        and <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  statements involve moving files from one directory' + 
      '        to another. (In the case of <span class="sql-docs-inline-code">INSERT</span>  and <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span> ,' + 
      '        the files are moved from a temporary staging directory to the final destination directory.)' + 
      '        Because S3 does not support a <q>rename</q>  operation for existing objects, in these cases Impala' + 
      '        actually copies the data files from one location to another and then removes the original files.' + 
      '        In Impala 2.6, the <span class="sql-docs-inline-code">S3_SKIP_INSERT_STAGING</span>  query option provides a way' + 
      '        to speed up <span class="sql-docs-inline-code">INSERT</span>  statements for S3 tables and partitions, with the tradeoff' + 
      '        that a problem during statement execution could leave data in an inconsistent state.' + 
      '        It does not apply to <span class="sql-docs-inline-code">INSERT OVERWRITE</span>  or <span class="sql-docs-inline-code">LOAD DATA</span>  statements.' + 
      '        See <span>s3 skip insert staging</span> for details.' + 
      '      </p> <p>See <span>s3</span> for details about reading and writing S3 data with Impala.</p> <p id="../Impala/docs/topics/impala_insert.xml_adls_blurb"><b>ADLS considerations:</b> </p> <p id="../Impala/docs/topics/impala_insert.xml_adls_dml">' + 
      '        In Impala 2.9 and higher, the Impala DML statements (<span class="sql-docs-inline-code">INSERT</span> , <span class="sql-docs-inline-code">LOAD DATA</span> ,' + 
      '        and <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span> ) can write data into a table or partition that resides in the' + 
      '        Azure Data Lake Store (ADLS).' + 
      '        The syntax of the DML statements is the same as for any other tables, because the ADLS location for tables and' + 
      '        partitions is specified by an <span class="sql-docs-inline-code">adl://</span>  prefix in the' + 
      '        <span class="sql-docs-inline-code">LOCATION</span>  attribute of' + 
      '        <span class="sql-docs-inline-code">CREATE TABLE</span>  or <span class="sql-docs-inline-code">ALTER TABLE</span>  statements.' + 
      '        If you bring data into ADLS using the normal ADLS transfer mechanisms instead of Impala DML statements,' + 
      '        issue a <span class="sql-docs-inline-code">REFRESH</span>  statement for the table before using Impala to query the ADLS data.' + 
      '      </p> <p>See <span>adls</span> for details about reading and writing ADLS data with Impala.</p> <p id="../Impala/docs/topics/impala_insert.xml_security_blurb"><b>Security considerations:</b> </p> <p id="../Impala/docs/topics/impala_insert.xml_redaction_yes">' + 
      '        If these statements in your environment contain sensitive literal values such as credit card numbers or tax' + 
      '        identifiers, Impala can redact this sensitive information when displaying the statements in log files and' + 
      '        other administrative contexts. See  for details.' + 
      '      </p> <p id="../Impala/docs/topics/impala_insert.xml_cancel_blurb_yes"><b>Cancellation:</b>  Can be cancelled. To cancel this statement, use Ctrl-C from the' + 
      '        <span class="sql-docs-inline-code">impala-shell</span>  interpreter, the  button from the' + 
      '         page in Hue, or  from the list of' + 
      '        in-flight queries (for a particular node) on the  tab in the Impala web UI' + 
      '        (port 25000).' + 
      '      </p> <p id="../Impala/docs/topics/impala_insert.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '        The user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '        typically the <span class="sql-docs-inline-code">impala</span>  user, must have read' + 
      '        permission for the files in the source directory of an <span class="sql-docs-inline-code">INSERT ... SELECT</span> ' + 
      '        operation, and write permission for all affected directories in the destination table.' + 
      '        (An <span class="sql-docs-inline-code">INSERT</span>  operation could write files to multiple different HDFS directories' + 
      '        if the destination table is partitioned.)' + 
      '        This user must also have write permission to create a temporary work directory' + 
      '        in the top-level HDFS directory of the destination table.' + 
      '        An <span class="sql-docs-inline-code">INSERT OVERWRITE</span>  operation does not require write permission on' + 
      '        the original data files in the table, only on the table directories themselves.' + 
      '      </p> <p id="../Impala/docs/topics/impala_insert.xml_restrictions_blurb"><b>Restrictions:</b> </p> <p id="../Impala/docs/topics/impala_insert.xml_char_varchar_cast_from_string">' + 
      '        For <span class="sql-docs-inline-code">INSERT</span>  operations into <span class="sql-docs-inline-code">CHAR</span>  or <span class="sql-docs-inline-code">VARCHAR</span>  columns, you' + 
      '        must cast all <span class="sql-docs-inline-code">STRING</span>  literals or expressions returning <span class="sql-docs-inline-code">STRING</span>  to to a' + 
      '        <span class="sql-docs-inline-code">CHAR</span>  or <span class="sql-docs-inline-code">VARCHAR</span>  type with the appropriate length.' + 
      '      </p> <p id="../Impala/docs/topics/impala_insert.xml_related_options"><b>Related startup options:</b> </p> <p id="../Impala/docs/topics/impala_insert.xml_insert_inherit_permissions">' + 
      '        By default, if an <span class="sql-docs-inline-code">INSERT</span>  statement creates any new subdirectories underneath a partitioned' + 
      '        table, those subdirectories are assigned default HDFS permissions for the <span class="sql-docs-inline-code">impala</span>  user. To' + 
      '        make each subdirectory have the same permissions as its parent directory in HDFS, specify the' + 
      '        <span class="sql-docs-inline-code">--insert_inherit_permissions</span>  startup option for the <span class="sql-docs-inline-code">impalad</span>  daemon.' + 
      '      </p> </div> </div> <div id="../Impala/docs/topics/impala_insert.xml_partition_insert"><h4>Inserting Into Partitioned Tables with PARTITION Clause</h4> <div><p>' + 
      '        For a partitioned table, the optional <span class="sql-docs-inline-code">PARTITION</span>  clause' + 
      '        identifies which partition or partitions the values are inserted' + 
      '        into.' + 
      '      </p> <p>' + 
      '        All examples in this section will use the table declared as below:' + 
      '      </p> <div class="sql-docs-code-block">CREATE TABLE t1 (w INT) PARTITIONED BY (x INT, y STRING);</div></div> <div id="../Impala/docs/topics/impala_insert.xml_static_partition_insert"><h4>Static Partition Inserts</h4> <div><p>' + 
      '          In a static partition insert where a partition key column is given a' + 
      '          constant value, such as <span class="sql-docs-inline-code">PARTITION</span> <span class="sql-docs-inline-code">(year=2012, month=2)</span> , the rows are inserted with the' + 
      '          same values specified for those partition key columns.' + 
      '        </p> <p>' + 
      '          The number of columns in the <span class="sql-docs-inline-code">SELECT</span>  list must equal' + 
      '          the number of columns in the column permutation.' + 
      '        </p> <p>' + 
      '          The <span class="sql-docs-inline-code">PARTITION</span>  clause must be used for static' + 
      '          partitioning inserts.' + 
      '        </p> <p>' + 
      '          Example:' + 
      '        </p> <p>' + 
      '          The following statement will insert the' + 
      '            <span class="sql-docs-inline-code">some_other_table.c1</span>  values for the' + 
      '            <span class="sql-docs-inline-code">w</span>  column, and all the rows inserted will have the' + 
      '          same <span class="sql-docs-inline-code">x</span>  value of <span class="sql-docs-inline-code">10</span> , and the same' + 
      '            <span class="sql-docs-inline-code">y</span>  value of' + 
      '          <span class="sql-docs-inline-code">‘a’</span> .<div class="sql-docs-code-block">INSERT INTO t1 PARTITION (x=10, y=\'a\')<br/>            SELECT c1 FROM some_other_table;</div></p> </div> </div> <div id="../Impala/docs/topics/impala_insert.xml_dynamic_partition_insert"><h4>Dynamic Partition Inserts</h4> <div><p>' + 
      '            In a dynamic partition insert where a partition key' + 
      '          column is in the <span class="sql-docs-inline-code">INSERT</span>  statement but not assigned a' + 
      '          value, such as in <span class="sql-docs-inline-code">PARTITION (year, region)</span> (both' + 
      '          columns unassigned) or <span class="sql-docs-inline-code">PARTITION(year, region=\'CA\')</span> ' + 
      '            (<span class="sql-docs-inline-code">year</span>  column unassigned), the unassigned columns' + 
      '          are filled in with the final columns of the <span class="sql-docs-inline-code">SELECT</span>  or' + 
      '            <span class="sql-docs-inline-code">VALUES</span>  clause. In this case, the number of columns' + 
      '          in the <span class="sql-docs-inline-code">SELECT</span>  list must equal the number of columns' + 
      '          in the column permutation plus the number of partition key columns not' + 
      '          assigned a constant value.' + 
      '          </p> <p>' + 
      '            See <a target="_blank" href="https://www.cloudera.com/documentation/enterprise/latest/topics/impala_partitioning.html#partition_static_dynamic">Static and Dynamic Partitioning' + 
      '                Clauses</a> for examples and performance characteristics' + 
      '            of static and dynamic partitioned inserts.' + 
      '          </p> <p>' + 
      '            The following rules apply to dynamic partition' + 
      '            inserts.' + 
      '          </p> <ul><li><p>' + 
      '                The columns are bound in the order they appear in the' + 
      '                  <span class="sql-docs-inline-code">INSERT</span>  statement.' + 
      '              </p> <p>' + 
      '                The table below shows the values inserted with the' + 
      '                <span class="sql-docs-inline-code">INSERT</span>  statements of different column' + 
      '              orders.' + 
      '              </p> </li> </ul> <ul><li>' + 
      '              When a partition clause is specified but the non-partition' + 
      '            columns are not specified in the <span class="sql-docs-inline-code">INSERT</span>  statement,' + 
      '            as in the first example below, the non-partition columns are treated' + 
      '            as though they had been specified before the' + 
      '              <span class="sql-docs-inline-code">PARTITION</span>  clause in the SQL.' + 
      '              <p>' + 
      '                Example: These' + 
      '              three statements are equivalent, inserting <span class="sql-docs-inline-code">1</span>  to' + 
      '                <span class="sql-docs-inline-code">w</span> , <span class="sql-docs-inline-code">2</span>  to <span class="sql-docs-inline-code">x</span> ,' + 
      '              and <span class="sql-docs-inline-code">‘c’</span>  to <span class="sql-docs-inline-code">y</span> ' + 
      '            columns.' + 
      '              </p> <div class="sql-docs-code-block">INSERT INTO t1 PARTITION (x,y) VALUES (1, 2, ‘c’);<br/>INSERT INTO t1 (w) PARTITION (x, y) VALUES (1, 2, ‘c’);<br/>INSERT INTO t1 PARTITION (x, y=\'c\') VALUES (1, 2);</div></li> <li>' + 
      '              The <span class="sql-docs-inline-code">PARTITION</span>  clause is not required for' + 
      '            dynamic partition, but all the partition columns must be explicitly' + 
      '            present in the <span class="sql-docs-inline-code">INSERT</span>  statement in the column list' + 
      '            or in the <span class="sql-docs-inline-code">PARTITION</span>  clause. The partition columns' + 
      '            cannot be defaulted to <span class="sql-docs-inline-code">NULL</span> .' + 
      '              <p>' + 
      '                Example:' + 
      '              </p> <p>The following statements are valid because the partition' + 
      '              columns, <span class="sql-docs-inline-code">x</span>  and <span class="sql-docs-inline-code">y</span> , are present in' + 
      '              the <span class="sql-docs-inline-code">INSERT</span>  statements, either in the' + 
      '                <span class="sql-docs-inline-code">PARTITION</span>  clause or in the column' + 
      '              list.' + 
      '              </p> <div class="sql-docs-code-block">INSERT INTO t1 PARTITION (x,y) VALUES (1, 2, ‘c’);<br/>INSERT INTO t1 (w, x) PARTITION (y) VALUES (1, 2, ‘c’);</div><p>' + 
      '                The following statement is not valid for the partitioned table as' + 
      '              defined above because the partition columns, <span class="sql-docs-inline-code">x</span> ' + 
      '              and <span class="sql-docs-inline-code">y</span> , are not present in the' + 
      '                <span class="sql-docs-inline-code">INSERT</span>  statement.' + 
      '              </p> <div class="sql-docs-code-block">INSERT INTO t1 VALUES (1, 2, \'c\');</div></li> <li>' + 
      '              If partition columns do not exist in the source table, you can' + 
      '              specify a specific value for that column in the' + 
      '              <span class="sql-docs-inline-code">PARTITION</span>  clause.' + 
      '              <p>' + 
      '                Example: The <span class="sql-docs-inline-code">source</span>  table only contains the column' + 
      '                <span class="sql-docs-inline-code">w</span>  and <span class="sql-docs-inline-code">y</span> . The value,' + 
      '                <span class="sql-docs-inline-code">20</span> , specified in the <span class="sql-docs-inline-code">PARTITION</span> ' + 
      '              clause, is inserted into the <span class="sql-docs-inline-code">x</span>  column.' + 
      '              </p> <div class="sql-docs-code-block">INSERT INTO t1 PARTITION (x=20, y) SELECT * FROM source;</div></li> </ul> </div> </div> </div> ',
    children: []
  },
  {
    id: 'topics/impala_invalidate_metadata.xml',
    title: 'INVALIDATE METADATA Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      The <span class="sql-docs-inline-code">INVALIDATE METADATA</span>  statement marks the metadata for one or all' + 
      '      tables as stale. The next time the Impala service performs a query against a table whose' + 
      '      metadata is invalidated, Impala reloads the associated metadata before the query proceeds.' + 
      '      As this is a very expensive operation compared to the incremental metadata update done by' + 
      '      the <span class="sql-docs-inline-code">REFRESH</span>  statement, when possible, prefer <span class="sql-docs-inline-code">REFRESH</span> ' + 
      '      rather than <span class="sql-docs-inline-code">INVALIDATE METADATA</span> .' + 
      '    </p> <p><span class="sql-docs-inline-code">INVALIDATE METADATA</span>  is required when the following changes are made' + 
      '      outside of Impala, in Hive and other Hive client, such as SparkSQL:' + 
      '      <ul><li>' + 
      '          Metadata of existing tables changes.' + 
      '        </li> <li>' + 
      '          New tables are added, and Impala will use the tables.' + 
      '        </li> <li>' + 
      '          The <span class="sql-docs-inline-code">SERVER</span>  or <span class="sql-docs-inline-code">DATABASE</span>  level Sentry privileges are' + 
      '          changed.' + 
      '        </li> <li>' + 
      '          Block metadata changes, but the files remain the same (HDFS rebalance).' + 
      '        </li> <li>' + 
      '          UDF jars change.' + 
      '        </li> <li>' + 
      '          Some tables are no longer queried, and you want to remove their metadata from the' + 
      '          catalog and coordinator caches to reduce memory requirements.' + 
      '        </li> </ul> </p> <p>' + 
      '      No <span class="sql-docs-inline-code">INVALIDATE METADATA</span>  is needed when the changes are made by' + 
      '      <span class="sql-docs-inline-code">impalad</span> .' + 
      '    </p> <p>' + 
      '      See <span>intro metastore</span> for the information about the way' + 
      '      Impala uses metadata and how it shares the same metastore database as Hive.' + 
      '    </p> <p>' + 
      '      Once issued, the <span class="sql-docs-inline-code">INVALIDATE METADATA</span>  statement cannot be cancelled.' + 
      '    </p> <p id="../Impala/docs/topics/impala_invalidate_metadata.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">INVALIDATE METADATA [[<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">table_name</span> ]</div><p>' + 
      '      If there is no table specified, the cached metadata for all tables is flushed and synced' + 
      '      with Hive Metastore (HMS). If tables were dropped from the HMS, they will be removed from' + 
      '      the catalog, and if new tables were added, they will show up in the catalog.' + 
      '    </p> <p>' + 
      '      If you specify a table name, only the metadata for that one table is flushed and synced' + 
      '      with the HMS.' + 
      '    </p> <p id="../Impala/docs/topics/impala_invalidate_metadata.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      To return accurate query results, Impala need to keep the metadata current for the' + 
      '      databases and tables queried. Therefore, if some other entity modifies information used by' + 
      '      Impala in the metastore, the information cached by Impala must be updated via' + 
      '      <span class="sql-docs-inline-code">INVALIDATE METADATA</span>  or <span class="sql-docs-inline-code">REFRESH</span> .' + 
      '    </p> <p id="../Impala/docs/topics/impala_invalidate_metadata.xml_refresh_vs_invalidate"><span class="sql-docs-inline-code">INVALIDATE METADATA</span>  and <span class="sql-docs-inline-code">REFRESH</span>  are' + 
      '        counterparts:' + 
      '      <ul><li><span class="sql-docs-inline-code">INVALIDATE METADATA</span>  is an asynchronous operations' + 
      '            that simply discards the loaded metadata from the catalog and' + 
      '            coordinator caches. After that operation, the catalog and all the' + 
      '            Impala coordinators only know about the existence of databases and' + 
      '            tables and nothing more. Metadata loading for tables is triggered by' + 
      '            any subsequent queries.' + 
      '          </li> <li><span class="sql-docs-inline-code">REFRESH</span>  reloads the metadata synchronously.' + 
      '              <span class="sql-docs-inline-code">REFRESH</span>  is more lightweight than doing a full' + 
      '            metadata load after a table has been invalidated.' + 
      '              <span class="sql-docs-inline-code">REFRESH</span>  cannot detect changes in block locations' + 
      '            triggered by operations like HDFS balancer, hence causing remote' + 
      '            reads during query execution with negative performance implications.' + 
      '          </li> </ul> </p> <p>' + 
      '      Use <span class="sql-docs-inline-code">REFRESH</span>  after invalidating a specific table to separate the metadata' + 
      '      load from the first query that\'s run against that table.' + 
      '    </p> <p id="../Impala/docs/topics/impala_invalidate_metadata.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      This example illustrates creating a new database and new table in Hive, then doing an' + 
      '      <span class="sql-docs-inline-code">INVALIDATE METADATA</span>  statement in Impala using the fully qualified table' + 
      '      name, after which both the new table and the new database are visible to Impala.' + 
      '    </p> <p>' + 
      '      Before the <span class="sql-docs-inline-code">INVALIDATE METADATA</span>  statement was issued, Impala would give a' + 
      '      <q>not found</q>  error if you tried to refer to those database or table names.' + 
      '    </p> <div class="sql-docs-code-block">$ hive<br/>hive> CREATE DATABASE new_db_from_hive;<br/>hive> CREATE TABLE new_db_from_hive.new_table_from_hive (x INT);<br/>hive> quit;<br/><br/>$ impala-shell<br/>> REFRESH new_db_from_hive.new_table_from_hive;<br/>ERROR: AnalysisException: Database does not exist: new_db_from_hive<br/><br/>> INVALIDATE METADATA new_db_from_hive.new_table_from_hive;<br/><br/>> SHOW DATABASES LIKE \'new*\';<br/>+--------------------+<br/>| new_db_from_hive   |<br/>+--------------------+<br/><br/>> SHOW TABLES IN new_db_from_hive;<br/>+---------------------+<br/>| new_table_from_hive |<br/>+---------------------+</div><p>' + 
      '      Use the <span class="sql-docs-inline-code">REFRESH</span>  statement for incremental metadata update.' + 
      '    </p> <div class="sql-docs-code-block">> REFRESH new_table_from_hive;<br/></div><p>' + 
      '      For more examples of using <span class="sql-docs-inline-code">INVALIDATE METADATA</span>  with a combination of' + 
      '      Impala and Hive operations, see' + 
      '      <span>tutorial impala hive</span>.' + 
      '    </p> <p id="../Impala/docs/topics/impala_invalidate_metadata.xml_hdfs_blurb"><b>HDFS considerations:</b> </p> <p>' + 
      '      By default, the <span class="sql-docs-inline-code">INVALIDATE METADATA</span>  command checks HDFS permissions of' + 
      '      the underlying data files and directories, caching this information so that a statement' + 
      '      can be cancelled immediately if for example the <span class="sql-docs-inline-code">impala</span>  user does not have' + 
      '      permission to write to the data directory for the table. (This checking does not apply' + 
      '      when the <span class="sql-docs-inline-code">catalogd</span>  configuration option' + 
      '      <span class="sql-docs-inline-code">--load_catalog_in_background</span>  is set to <span class="sql-docs-inline-code">false</span> , which it' + 
      '      is by default.) Impala reports any lack of write permissions as an <span class="sql-docs-inline-code">INFO</span> ' + 
      '      message in the log file.' + 
      '    </p> <p>' + 
      '      If you change HDFS permissions to make data readable or writeable by the Impala user,' + 
      '      issue another <span class="sql-docs-inline-code">INVALIDATE METADATA</span>  to make Impala aware of the change.' + 
      '    </p> <p id="../Impala/docs/topics/impala_invalidate_metadata.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p id="../Impala/docs/topics/impala_invalidate_metadata.xml_kudu_metadata_intro">' + 
      '        Much of the metadata for Kudu tables is handled by the underlying' + 
      '        storage layer. Kudu tables have less reliance on the metastore' + 
      '        database, and require less metadata caching on the Impala side.' + 
      '        For example, information about partitions in Kudu tables is managed' + 
      '        by Kudu, and Impala does not cache any block locality metadata' + 
      '        for Kudu tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_invalidate_metadata.xml_kudu_metadata_details">' + 
      '        The <span class="sql-docs-inline-code">REFRESH</span>  and <span class="sql-docs-inline-code">INVALIDATE METADATA</span> ' + 
      '        statements are needed less frequently for Kudu tables than for' + 
      '        HDFS-backed tables. Neither statement is needed when data is' + 
      '        added to, removed, or updated in a Kudu table, even if the changes' + 
      '        are made directly to Kudu through a client program using the Kudu API.' + 
      '        Run <span class="sql-docs-inline-code">REFRESH <span class="sql-docs-variable">table_name</span> </span>  or' + 
      '        <span class="sql-docs-inline-code">INVALIDATE METADATA <span class="sql-docs-variable">table_name</span> </span> ' + 
      '        for a Kudu table only after making a change to the Kudu table schema,' + 
      '        such as adding or dropping a column.' + 
      '      </p> <p id="../Impala/docs/topics/impala_invalidate_metadata.xml_related_info"><b>Related information:</b> </p> <p><span>intro metastore</span>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_refresh.xml#refresh">REFRESH Statement</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_load_data.xml',
    title: 'LOAD DATA Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      The <span class="sql-docs-inline-code">LOAD DATA</span>  statement streamlines the ETL process for an internal Impala table by moving a' + 
      '      data file or all the data files in a directory from an HDFS location into the Impala data directory for that' + 
      '      table.' + 
      '    </p> <p id="../Impala/docs/topics/impala_load_data.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">LOAD DATA INPATH \'<span class="sql-docs-variable">hdfs_file_or_directory_path</span> \' [OVERWRITE] INTO TABLE <span class="sql-docs-variable">tablename</span> [PARTITION (<span class="sql-docs-variable">partcol1</span> =<span class="sql-docs-variable">val1</span> , <span class="sql-docs-variable">partcol2</span> =<span class="sql-docs-variable">val2</span> ...)]</div><p>' + 
      '      When the <span class="sql-docs-inline-code">LOAD DATA</span>  statement operates on a partitioned table,' + 
      '      it always operates on one partition at a time. Specify the <span class="sql-docs-inline-code">PARTITION</span>  clauses' + 
      '      and list all the partition key columns, with a constant value specified for each.' + 
      '    </p> <p id="../Impala/docs/topics/impala_load_data.xml_dml_blurb"><b>Statement type:</b>  DML (but still affected by' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_sync_ddl.xml#sync_ddl">SYNC_DDL</a> query option)' + 
      '      </p> <p id="../Impala/docs/topics/impala_load_data.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <ul><li>' + 
      '        The loaded data files are moved, not copied, into the Impala data directory.' + 
      '      </li> <li>' + 
      '        You can specify the HDFS path of a single file to be moved, or the HDFS path of a directory to move all the' + 
      '        files inside that directory. You cannot specify any sort of wildcard to take only some of the files from a' + 
      '        directory. When loading a directory full of data files, keep all the data files at the top level, with no' + 
      '        nested directories underneath.' + 
      '      </li> <li>' + 
      '        Currently, the Impala <span class="sql-docs-inline-code">LOAD DATA</span>  statement only imports files from HDFS, not from the local' + 
      '        filesystem. It does not support the <span class="sql-docs-inline-code">LOCAL</span>  keyword of the Hive <span class="sql-docs-inline-code">LOAD DATA</span> ' + 
      '        statement. You must specify a path, not an <span class="sql-docs-inline-code">hdfs://</span>  URI.' + 
      '      </li> <li>' + 
      '        In the interest of speed, only limited error checking is done. If the loaded files have the wrong file' + 
      '        format, different columns than the destination table, or other kind of mismatch, Impala does not raise any' + 
      '        error for the <span class="sql-docs-inline-code">LOAD DATA</span>  statement. Querying the table afterward could produce a runtime' + 
      '        error or unexpected results. Currently, the only checking the <span class="sql-docs-inline-code">LOAD DATA</span>  statement does is' + 
      '        to avoid mixing together uncompressed and LZO-compressed text files in the same table.' + 
      '      </li> <li>' + 
      '        When you specify an HDFS directory name as the <span class="sql-docs-inline-code">LOAD DATA</span>  argument, any hidden files in' + 
      '        that directory (files whose names start with a <span class="sql-docs-inline-code">.</span> ) are not moved to the Impala data' + 
      '        directory.' + 
      '      </li> <li>' + 
      '        The operation fails if the source directory contains any non-hidden directories.' + 
      '        Prior to Impala 2.5 if the source directory contained any subdirectory, even a hidden one such as' + 
      '        <span class="sql-docs-variable">_impala_insert_staging</span> , the <span class="sql-docs-inline-code">LOAD DATA</span>  statement would fail.' + 
      '        In Impala 2.5 and higher, <span class="sql-docs-inline-code">LOAD DATA</span>  ignores hidden subdirectories in the' + 
      '        source directory, and only fails if any of the subdirectories are non-hidden.' + 
      '      </li> <li>' + 
      '        The loaded data files retain their original names in the new location, unless a name conflicts with an' + 
      '        existing data file, in which case the name of the new file is modified slightly to be unique. (The' + 
      '        name-mangling is a slight difference from the Hive <span class="sql-docs-inline-code">LOAD DATA</span>  statement, which replaces' + 
      '        identically named files.)' + 
      '      </li> <li>' + 
      '        By providing an easy way to transport files from known locations in HDFS into the Impala data directory' + 
      '        structure, the <span class="sql-docs-inline-code">LOAD DATA</span>  statement lets you avoid memorizing the locations and layout of' + 
      '        HDFS directory tree containing the Impala databases and tables. (For a quick way to check the location of' + 
      '        the data files for an Impala table, issue the statement <span class="sql-docs-inline-code">DESCRIBE FORMATTED' + 
      '        <span class="sql-docs-variable">table_name</span> </span> .)' + 
      '      </li> <li>' + 
      '        The <span class="sql-docs-inline-code">PARTITION</span>  clause is especially convenient for ingesting new data for a partitioned' + 
      '        table. As you receive new data for a time period, geographic region, or other division that corresponds to' + 
      '        one or more partitioning columns, you can load that data straight into the appropriate Impala data' + 
      '        directory, which might be nested several levels down if the table is partitioned by multiple columns. When' + 
      '        the table is partitioned, you must specify constant values for all the partitioning columns.' + 
      '      </li> </ul> <p id="../Impala/docs/topics/impala_load_data.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p>' + 
      '      Because Impala currently cannot create Parquet data files containing complex types' + 
      '      (<span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , and <span class="sql-docs-inline-code">MAP</span> ), the' + 
      '      <span class="sql-docs-inline-code">LOAD DATA</span>  statement is especially important when working with' + 
      '      tables containing complex type columns. You create the Parquet data files outside' + 
      '      Impala, then use either <span class="sql-docs-inline-code">LOAD DATA</span> , an external table, or HDFS-level' + 
      '      file operations followed by <span class="sql-docs-inline-code">REFRESH</span>  to associate the data files with' + 
      '      the corresponding table.' + 
      '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a> for details about using complex types.' + 
      '    </p> <p id="../Impala/docs/topics/impala_load_data.xml_sync_ddl_blurb">' + 
      '        If you connect to different Impala nodes within an <span class="sql-docs-inline-code">impala-shell</span>  session for' + 
      '        load-balancing purposes, you can enable the <span class="sql-docs-inline-code">SYNC_DDL</span>  query option to make each DDL' + 
      '        statement wait before returning, until the new or changed metadata has been received by all the Impala' + 
      '        nodes. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_sync_ddl.xml#sync_ddl">SYNC_DDL Query Option</a> for details.' + 
      '      </p> <div id="../Impala/docs/topics/impala_load_data.xml_compute_stats_next" class="sql-docs-note">' + 
      '        After adding or replacing data in a table used in performance-critical queries, issue a <span class="sql-docs-inline-code">COMPUTE' + 
      '        STATS</span>  statement to make sure all statistics are up-to-date. Consider updating statistics for a' + 
      '        table after any <span class="sql-docs-inline-code">INSERT</span> , <span class="sql-docs-inline-code">LOAD DATA</span> , or <span class="sql-docs-inline-code">CREATE TABLE AS' + 
      '        SELECT</span>  statement in Impala, or after loading data through Hive and doing a <span class="sql-docs-inline-code">REFRESH' + 
      '        <span class="sql-docs-variable">table_name</span> </span>  in Impala. This technique is especially important for tables that' + 
      '        are very large, used in join queries, or both.' + 
      '      </div> <p id="../Impala/docs/topics/impala_load_data.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      First, we use a trivial Python script to write different numbers of strings (one per line) into files stored' + 
      '      in the <span class="sql-docs-inline-code">doc_demo</span>  HDFS user account. (Substitute the path for your own HDFS user account when' + 
      '      doing <span class="sql-docs-inline-code">hdfs dfs</span>  operations like these.)' + 
      '    </p> <div class="sql-docs-code-block">$ random_strings.py 1000 | hdfs dfs -put - /user/doc_demo/thousand_strings.txt<br/>$ random_strings.py 100 | hdfs dfs -put - /user/doc_demo/hundred_strings.txt<br/>$ random_strings.py 10 | hdfs dfs -put - /user/doc_demo/ten_strings.txt</div><p>' + 
      '      Next, we create a table and load an initial set of data into it. Remember, unless you specify a' + 
      '      <span class="sql-docs-inline-code">STORED AS</span>  clause, Impala tables default to <span class="sql-docs-inline-code">TEXTFILE</span>  format with Ctrl-A (hex' + 
      '      01) as the field delimiter. This example uses a single-column table, so the delimiter is not significant. For' + 
      '      large-scale ETL jobs, you would typically use binary format data files such as Parquet or Avro, and load them' + 
      '      into Impala tables that use the corresponding file format.' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > create table t1 (s string);<br/>[localhost:21000] > load data inpath \'/user/doc_demo/thousand_strings.txt\' into table t1;<br/>Query finished, fetching results ...<br/>+----------------------------------------------------------+<br/>| summary                                                  |<br/>+----------------------------------------------------------+<br/>| Loaded 1 file(s). Total files in destination location: 1 |<br/>+----------------------------------------------------------+<br/>Returned 1 row(s) in 0.61s<br/>[kilo2-202-961.cs1cloud.internal:21000] > select count(*) from t1;<br/>Query finished, fetching results ...<br/>+------+<br/>| _c0  |<br/>+------+<br/>| 1000 |<br/>+------+<br/>Returned 1 row(s) in 0.67s<br/>[localhost:21000] > load data inpath \'/user/doc_demo/thousand_strings.txt\' into table t1;<br/>ERROR: AnalysisException: INPATH location \'/user/doc_demo/thousand_strings.txt\' does not exist. </div><p>' + 
      '      As indicated by the message at the end of the previous example, the data file was moved from its original' + 
      '      location. The following example illustrates how the data file was moved into the Impala data directory for' + 
      '      the destination table, keeping its original filename:' + 
      '    </p> <div class="sql-docs-code-block">$ hdfs dfs -ls /user/hive/warehouse/load_data_testing.db/t1<br/>Found 1 items<br/>-rw-r--r--   1 doc_demo doc_demo      13926 2013-06-26 15:40 /user/hive/warehouse/load_data_testing.db/t1/thousand_strings.txt</div><p>' + 
      '      The following example demonstrates the difference between the <span class="sql-docs-inline-code">INTO TABLE</span>  and' + 
      '      <span class="sql-docs-inline-code">OVERWRITE TABLE</span>  clauses. The table already contains 1000 rows. After issuing the' + 
      '      <span class="sql-docs-inline-code">LOAD DATA</span>  statement with the <span class="sql-docs-inline-code">INTO TABLE</span>  clause, the table contains 100 more' + 
      '      rows, for a total of 1100. After issuing the <span class="sql-docs-inline-code">LOAD DATA</span>  statement with the <span class="sql-docs-inline-code">OVERWRITE' + 
      '      INTO TABLE</span>  clause, the former contents are gone, and now the table only contains the 10 rows from' + 
      '      the just-loaded data file.' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > load data inpath \'/user/doc_demo/hundred_strings.txt\' into table t1;<br/>Query finished, fetching results ...<br/>+----------------------------------------------------------+<br/>| summary                                                  |<br/>+----------------------------------------------------------+<br/>| Loaded 1 file(s). Total files in destination location: 2 |<br/>+----------------------------------------------------------+<br/>Returned 1 row(s) in 0.24s<br/>[localhost:21000] > select count(*) from t1;<br/>Query finished, fetching results ...<br/>+------+<br/>| _c0  |<br/>+------+<br/>| 1100 |<br/>+------+<br/>Returned 1 row(s) in 0.55s<br/>[localhost:21000] > load data inpath \'/user/doc_demo/ten_strings.txt\' overwrite into table t1;<br/>Query finished, fetching results ...<br/>+----------------------------------------------------------+<br/>| summary                                                  |<br/>+----------------------------------------------------------+<br/>| Loaded 1 file(s). Total files in destination location: 1 |<br/>+----------------------------------------------------------+<br/>Returned 1 row(s) in 0.26s<br/>[localhost:21000] > select count(*) from t1;<br/>Query finished, fetching results ...<br/>+-----+<br/>| _c0 |<br/>+-----+<br/>| 10  |<br/>+-----+<br/>Returned 1 row(s) in 0.62s</div><p id="../Impala/docs/topics/impala_load_data.xml_s3_blurb"><b>Amazon S3 considerations:</b> </p> <p id="../Impala/docs/topics/impala_load_data.xml_s3_dml">' + 
      '        In Impala 2.6 and higher, the Impala DML statements (<span class="sql-docs-inline-code">INSERT</span> , <span class="sql-docs-inline-code">LOAD DATA</span> ,' + 
      '        and <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span> ) can write data into a table or partition that resides in the' + 
      '        Amazon Simple Storage Service (S3).' + 
      '        The syntax of the DML statements is the same as for any other tables, because the S3 location for tables and' + 
      '        partitions is specified by an <span class="sql-docs-inline-code">s3a://</span>  prefix in the' + 
      '        <span class="sql-docs-inline-code">LOCATION</span>  attribute of' + 
      '        <span class="sql-docs-inline-code">CREATE TABLE</span>  or <span class="sql-docs-inline-code">ALTER TABLE</span>  statements.' + 
      '        If you bring data into S3 using the normal S3 transfer mechanisms instead of Impala DML statements,' + 
      '        issue a <span class="sql-docs-inline-code">REFRESH</span>  statement for the table before using Impala to query the S3 data.' + 
      '      </p> <p id="../Impala/docs/topics/impala_load_data.xml_s3_dml_performance">' + 
      '        Because of differences between S3 and traditional filesystems, DML operations' + 
      '        for S3 tables can take longer than for tables on HDFS. For example, both the' + 
      '        <span class="sql-docs-inline-code">LOAD DATA</span>  statement and the final stage of the <span class="sql-docs-inline-code">INSERT</span> ' + 
      '        and <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  statements involve moving files from one directory' + 
      '        to another. (In the case of <span class="sql-docs-inline-code">INSERT</span>  and <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span> ,' + 
      '        the files are moved from a temporary staging directory to the final destination directory.)' + 
      '        Because S3 does not support a <q>rename</q>  operation for existing objects, in these cases Impala' + 
      '        actually copies the data files from one location to another and then removes the original files.' + 
      '        In Impala 2.6, the <span class="sql-docs-inline-code">S3_SKIP_INSERT_STAGING</span>  query option provides a way' + 
      '        to speed up <span class="sql-docs-inline-code">INSERT</span>  statements for S3 tables and partitions, with the tradeoff' + 
      '        that a problem during statement execution could leave data in an inconsistent state.' + 
      '        It does not apply to <span class="sql-docs-inline-code">INSERT OVERWRITE</span>  or <span class="sql-docs-inline-code">LOAD DATA</span>  statements.' + 
      '        See <span>s3 skip insert staging</span> for details.' + 
      '      </p> <p>See <span>s3</span> for details about reading and writing S3 data with Impala.</p> <p id="../Impala/docs/topics/impala_load_data.xml_adls_blurb"><b>ADLS considerations:</b> </p> <p id="../Impala/docs/topics/impala_load_data.xml_adls_dml">' + 
      '        In Impala 2.9 and higher, the Impala DML statements (<span class="sql-docs-inline-code">INSERT</span> , <span class="sql-docs-inline-code">LOAD DATA</span> ,' + 
      '        and <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span> ) can write data into a table or partition that resides in the' + 
      '        Azure Data Lake Store (ADLS).' + 
      '        The syntax of the DML statements is the same as for any other tables, because the ADLS location for tables and' + 
      '        partitions is specified by an <span class="sql-docs-inline-code">adl://</span>  prefix in the' + 
      '        <span class="sql-docs-inline-code">LOCATION</span>  attribute of' + 
      '        <span class="sql-docs-inline-code">CREATE TABLE</span>  or <span class="sql-docs-inline-code">ALTER TABLE</span>  statements.' + 
      '        If you bring data into ADLS using the normal ADLS transfer mechanisms instead of Impala DML statements,' + 
      '        issue a <span class="sql-docs-inline-code">REFRESH</span>  statement for the table before using Impala to query the ADLS data.' + 
      '      </p> <p>See <span>adls</span> for details about reading and writing ADLS data with Impala.</p> <p id="../Impala/docs/topics/impala_load_data.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_load_data.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '      The user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '      typically the <span class="sql-docs-inline-code">impala</span>  user, must have read and write' + 
      '      permissions for the files in the source directory, and write' + 
      '      permission for the destination directory.' + 
      '    </p> <p id="../Impala/docs/topics/impala_load_data.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p id="../Impala/docs/topics/impala_load_data.xml_kudu_no_load_data">' + 
      '        The <span class="sql-docs-inline-code">LOAD DATA</span>  statement cannot be used with Kudu tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_load_data.xml_hbase_blurb"><b>HBase considerations:</b> </p> <p id="../Impala/docs/topics/impala_load_data.xml_hbase_no_load_data">' + 
      '        The <span class="sql-docs-inline-code">LOAD DATA</span>  statement cannot be used with HBase tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_load_data.xml_related_info"><b>Related information:</b> </p> <p>' + 
      '      The <span class="sql-docs-inline-code">LOAD DATA</span>  statement is an alternative to the' + 
      '      <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_insert.xml#insert">INSERT</a></span>  statement.' + 
      '      Use <span class="sql-docs-inline-code">LOAD DATA</span> ' + 
      '      when you have the data files in HDFS but outside of any Impala table.' + 
      '    </p> <p>' + 
      '      The <span class="sql-docs-inline-code">LOAD DATA</span>  statement is also an alternative' + 
      '      to the <span class="sql-docs-inline-code">CREATE EXTERNAL TABLE</span>  statement. Use' + 
      '      <span class="sql-docs-inline-code">LOAD DATA</span>  when it is appropriate to move the' + 
      '      data files under Impala control rather than querying them' + 
      '      from their original location. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#external_tables"><h4>External Tables</h4> </a>' + 
      '      for information about working with external tables.' + 
      '    </p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_refresh.xml',
    title: 'REFRESH Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      The <span class="sql-docs-inline-code">REFRESH</span>  statement reloads the metadata for the table from the' + 
      '      metastore database and does an incremental reload of the file and block metadata from the' + 
      '      HDFS NameNode. <span class="sql-docs-inline-code">REFRESH</span>  is used to avoid inconsistencies between Impala' + 
      '      and external metadata sources, namely Hive Metastore (HMS) and NameNodes.' + 
      '    </p> <p> The <span class="sql-docs-inline-code">REFRESH</span>  statement is only required if you load data' + 
      '      from outside of Impala. Updated metadata, as a result of running' + 
      '        <span class="sql-docs-inline-code">REFRESH</span> , is broadcast to all Impala coordinators. </p> <p>' + 
      '      See <span>intro metastore</span> for the information about the way' + 
      '      Impala uses metadata and how it shares the same metastore database as Hive.' + 
      '    </p> <p>' + 
      '      Once issued, the <span class="sql-docs-inline-code">REFRESH</span>  statement cannot be cancelled.' + 
      '    </p> <p id="../Impala/docs/topics/impala_refresh.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">REFRESH [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">table_name</span> [PARTITION (<span class="sql-docs-variable">key_col1</span> =<span class="sql-docs-variable">val1</span> [, <span class="sql-docs-variable">key_col2</span> =<span class="sql-docs-variable">val2</span> ...])]</div><p id="../Impala/docs/topics/impala_refresh.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      The table name is a required parameter, and the table must already exist and be known to' + 
      '      Impala.' + 
      '    </p> <p>' + 
      '      Only the metadata for the specified table is reloaded.' + 
      '    </p> <p>' + 
      '      Use the <span class="sql-docs-inline-code">REFRESH</span>  statement to load the latest metastore metadata for a' + 
      '      particular table after one of the following scenarios happens outside of Impala:' + 
      '    </p> <ul><li>' + 
      '        Deleting or adding files.' + 
      '        <p>' + 
      '          For example, after loading new data files into the HDFS data directory for the table,' + 
      '          including inserting data from Hive via <span class="sql-docs-inline-code">INSERT</span>  or <span class="sql-docs-inline-code">LOAD' + 
      '          DATA</span> .' + 
      '        </p> </li> <li>' + 
      '        Deleting, adding, or modifying partitions.' + 
      '        <p>' + 
      '          For example, after issuing <span class="sql-docs-inline-code">ALTER TABLE</span>  or other table-modifying SQL' + 
      '          statement in Hive' + 
      '        </p> </li> </ul> <div class="sql-docs-note"><p>' + 
      '        In Impala 2.3 and higher, the <span class="sql-docs-inline-code">ALTER TABLE' + 
      '        <span class="sql-docs-variable">table_name</span>  RECOVER PARTITIONS</span>  statement is a faster' + 
      '        alternative to <span class="sql-docs-inline-code">REFRESH</span>  when you are only adding new partition' + 
      '        directories through Hive or manual HDFS operations. See' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_alter_table.xml#alter_table">ALTER TABLE Statement</a> for details.' + 
      '      </p> </div> <p id="../Impala/docs/topics/impala_refresh.xml_refresh_vs_invalidate"><span class="sql-docs-inline-code">INVALIDATE METADATA</span>  and <span class="sql-docs-inline-code">REFRESH</span>  are' + 
      '        counterparts:' + 
      '      <ul><li><span class="sql-docs-inline-code">INVALIDATE METADATA</span>  is an asynchronous operations' + 
      '            that simply discards the loaded metadata from the catalog and' + 
      '            coordinator caches. After that operation, the catalog and all the' + 
      '            Impala coordinators only know about the existence of databases and' + 
      '            tables and nothing more. Metadata loading for tables is triggered by' + 
      '            any subsequent queries.' + 
      '          </li> <li><span class="sql-docs-inline-code">REFRESH</span>  reloads the metadata synchronously.' + 
      '              <span class="sql-docs-inline-code">REFRESH</span>  is more lightweight than doing a full' + 
      '            metadata load after a table has been invalidated.' + 
      '              <span class="sql-docs-inline-code">REFRESH</span>  cannot detect changes in block locations' + 
      '            triggered by operations like HDFS balancer, hence causing remote' + 
      '            reads during query execution with negative performance implications.' + 
      '          </li> </ul> </p> <p><b>Refreshing a single partition:</b> </p> <p>' + 
      '      In Impala 2.7 and higher, the <span class="sql-docs-inline-code">REFRESH</span>  statement' + 
      '      can apply to a single partition at a time, rather than the whole table. Include the' + 
      '      optional <span class="sql-docs-inline-code">PARTITION (<span class="sql-docs-variable">partition_spec</span> )</span>  clause and specify' + 
      '      values for each of the partition key columns.' + 
      '    </p> <p>' + 
      '      The following rules apply:' + 
      '      <ul><li>' + 
      '          The <span class="sql-docs-inline-code">PARTITION</span>  clause of the <span class="sql-docs-inline-code">REFRESH</span>  statement must' + 
      '          include all the partition key columns.' + 
      '        </li> <li>' + 
      '          The order of the partition key columns does not have to match the column order in the' + 
      '          table.' + 
      '        </li> <li>' + 
      '          Specifying a nonexistent partition does not cause an error.' + 
      '        </li> <li>' + 
      '          The partition can be one that Impala created and is already aware of, or a new' + 
      '          partition created through Hive.' + 
      '        </li> </ul> </p> <p>' + 
      '      The following examples demonstrates the above rules.' + 
      '    </p> <div class="sql-docs-code-block"></div><p>' + 
      '      For examples of using <span class="sql-docs-inline-code">REFRESH</span>  and <span class="sql-docs-inline-code">INVALIDATE METADATA</span> ' + 
      '      with a combination of Impala and Hive operations, see' + 
      '      <span>tutorial impala hive</span>.' + 
      '    </p> <p><b>Related impala-shell options:</b> </p> <p>' + 
      '      Due to the expense of reloading the metadata for all tables, the' + 
      '      <span class="sql-docs-inline-code">impala-shell</span> <span class="sql-docs-inline-code">-r</span>  option is not recommended.' + 
      '    </p> <p id="../Impala/docs/topics/impala_refresh.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '      All HDFS and Sentry permissions and privilege requirements are the same whether you' + 
      '      refresh the entire table or a single partition.' + 
      '    </p> <p id="../Impala/docs/topics/impala_refresh.xml_hdfs_blurb"><b>HDFS considerations:</b> </p> <p>' + 
      '      The <span class="sql-docs-inline-code">REFRESH</span>  statement checks HDFS permissions of the underlying data' + 
      '      files and directories, caching this information so that a statement can be cancelled' + 
      '      immediately if for example the <span class="sql-docs-inline-code">impala</span>  user does not have permission to' + 
      '      write to the data directory for the table. Impala reports any lack of write permissions as' + 
      '      an <span class="sql-docs-inline-code">INFO</span>  message in the log file.' + 
      '    </p> <p>' + 
      '      If you change HDFS permissions to make data readable or writeable by the Impala user,' + 
      '      issue another <span class="sql-docs-inline-code">REFRESH</span>  to make Impala aware of the change.' + 
      '    </p> <p id="../Impala/docs/topics/impala_refresh.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p id="../Impala/docs/topics/impala_refresh.xml_kudu_metadata_intro">' + 
      '        Much of the metadata for Kudu tables is handled by the underlying' + 
      '        storage layer. Kudu tables have less reliance on the metastore' + 
      '        database, and require less metadata caching on the Impala side.' + 
      '        For example, information about partitions in Kudu tables is managed' + 
      '        by Kudu, and Impala does not cache any block locality metadata' + 
      '        for Kudu tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_refresh.xml_kudu_metadata_details">' + 
      '        The <span class="sql-docs-inline-code">REFRESH</span>  and <span class="sql-docs-inline-code">INVALIDATE METADATA</span> ' + 
      '        statements are needed less frequently for Kudu tables than for' + 
      '        HDFS-backed tables. Neither statement is needed when data is' + 
      '        added to, removed, or updated in a Kudu table, even if the changes' + 
      '        are made directly to Kudu through a client program using the Kudu API.' + 
      '        Run <span class="sql-docs-inline-code">REFRESH <span class="sql-docs-variable">table_name</span> </span>  or' + 
      '        <span class="sql-docs-inline-code">INVALIDATE METADATA <span class="sql-docs-variable">table_name</span> </span> ' + 
      '        for a Kudu table only after making a change to the Kudu table schema,' + 
      '        such as adding or dropping a column.' + 
      '      </p> <p id="../Impala/docs/topics/impala_refresh.xml_related_info"><b>Related information:</b> </p> <p><span>intro metastore</span>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_invalidate_metadata.xml#invalidate_metadata">INVALIDATE METADATA Statement</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_revoke.xml',
    title: 'REVOKE Statement (Impala 2.0 or higher only)',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      The <span class="sql-docs-inline-code">REVOKE</span>  statement revokes roles or privileges on a specified object from groups. Only' + 
      '      Sentry administrative users can revoke the role from a group. The revocation has a cascading effect. For' + 
      '      example, revoking the <span class="sql-docs-inline-code">ALL</span>  privilege on a database also revokes the same privilege for all' + 
      '      the tables in that database.' + 
      '    </p> <p id="../Impala/docs/topics/impala_revoke.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">REVOKE ROLE <span class="sql-docs-variable">role_name</span> FROM GROUP <span class="sql-docs-variable">group_name</span> REVOKE <span class="sql-docs-variable">privilege</span> ON <span class="sql-docs-variable">object_type</span> <span class="sql-docs-variable">object_name</span> FROM [ROLE] <span class="sql-docs-variable">role_name</span> <span class="sql-docs-inline-code">privilege ::= SELECT | SELECT(<span class="sql-docs-variable">column_name</span> ) | INSERT | ALL</span> object_type ::= TABLE | DATABASE | SERVER | URI<br/></div><p>' + 
      '      Typically, the object name is an identifier. For URIs, it is a string literal.' + 
      '    </p> <p>' + 
      '      The ability to grant or revoke <span class="sql-docs-inline-code">SELECT</span>  privilege on specific columns is available' + 
      '      in Impala 2.3 and higher. See' + 
      '       for details.' + 
      '    </p> <p id="../Impala/docs/topics/impala_revoke.xml_privileges_blurb"><b>Required privileges:</b> </p> <p>' + 
      '      Only administrative users (those with <span class="sql-docs-inline-code">ALL</span>  privileges on the server, defined in the Sentry' + 
      '      policy file) can use this statement.' + 
      '    </p> <p id="../Impala/docs/topics/impala_revoke.xml_compatibility_blurb"><b>Compatibility:</b> </p> <p><ul><li>' + 
      '          The Impala <span class="sql-docs-inline-code">GRANT</span>  and <span class="sql-docs-inline-code">REVOKE</span>  statements are available in Impala 2.0 and' + 
      '          higher.' + 
      '        </li> <li>' + 
      '          In Impala 1.4 and higher, Impala makes use of any roles and privileges specified by the' + 
      '          <span class="sql-docs-inline-code">GRANT</span>  and <span class="sql-docs-inline-code">REVOKE</span>  statements in Hive, when your system is configured to' + 
      '          use the Sentry service instead of the file-based policy mechanism.' + 
      '        </li> <li>' + 
      '          The Impala <span class="sql-docs-inline-code">GRANT</span>  and <span class="sql-docs-inline-code">REVOKE</span>  statements do not require the' + 
      '          <span class="sql-docs-inline-code">ROLE</span>  keyword to be repeated before each role name, unlike the equivalent Hive' + 
      '          statements.' + 
      '        </li> <li id="../Impala/docs/topics/impala_revoke.xml_grant_revoke_single">' + 
      '          Currently, each Impala <span class="sql-docs-inline-code">GRANT</span>  or <span class="sql-docs-inline-code">REVOKE</span>  statement can only grant or' + 
      '          revoke a single privilege to or from a single role.' + 
      '        </li> </ul> </p> <p id="../Impala/docs/topics/impala_revoke.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_revoke.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> <p id="../Impala/docs/topics/impala_revoke.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p id="../Impala/docs/topics/impala_revoke.xml_kudu_sentry_limitations">' + 
      '        Access to Kudu tables must be granted to and revoked from roles with the' + 
      '        following considerations:' + 
      '        <ul><li>' + 
      '            Only users with the <span class="sql-docs-inline-code">ALL</span>  privilege on' + 
      '              <span class="sql-docs-inline-code">SERVER</span>  can create external Kudu tables.' + 
      '          </li> <li>' + 
      '            The <span class="sql-docs-inline-code">ALL</span>  privileges on <span class="sql-docs-inline-code">SERVER</span>  is' + 
      '            required to specify the <span class="sql-docs-inline-code">kudu.master_addresses</span> ' + 
      '            property in the <span class="sql-docs-inline-code">CREATE TABLE</span>  statements for managed' + 
      '            tables as well as external tables.' + 
      '          </li> <li>' + 
      '            Access to Kudu tables is enforced at the table level and at the' + 
      '            column level.' + 
      '          </li> <li>' + 
      '            The <span class="sql-docs-inline-code">SELECT</span> - and <span class="sql-docs-inline-code">INSERT</span> -specific' + 
      '            permissions are supported.' + 
      '          </li> <li>' + 
      '            The <span class="sql-docs-inline-code">DELETE</span> , <span class="sql-docs-inline-code">UPDATE</span> , and' + 
      '            <span class="sql-docs-inline-code">UPSERT</span>  operations require the <span class="sql-docs-inline-code">ALL</span> ' + 
      '            privilege.' + 
      '          </li> </ul> ' + 
      '        Because non-SQL APIs can access Kudu data without going through Sentry' + 
      '        authorization, currently the Sentry support is considered preliminary' + 
      '        and subject to change.' + 
      '      </p> <p id="../Impala/docs/topics/impala_revoke.xml_related_info"><b>Related information:</b> </p> <p><span>authorization</span>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_grant.xml#grant">GRANT Statement (Impala 2.0 or higher only)</a><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_role.xml#create_role">CREATE ROLE Statement (Impala 2.0 or higher only)</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_role.xml#drop_role">DROP ROLE Statement (Impala 2.0 or higher only)</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show">SHOW Statement</a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_select.xml',
    title: 'SELECT Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      The <span class="sql-docs-inline-code">SELECT</span>  statement performs queries, retrieving data from one or more tables and producing' + 
      '      result sets consisting of rows and columns.' + 
      '    </p> <p>' + 
      '      The Impala <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_insert.xml#insert">INSERT</a></span>  statement also typically ends' + 
      '      with a <span class="sql-docs-inline-code">SELECT</span>  statement, to define data to copy from one table to another.' + 
      '    </p> <p id="../Impala/docs/topics/impala_select.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">[WITH <i>name</i> AS (<i>select_expression</i> ) [, ...] ]<br/>SELECT<br/>  [ALL | DISTINCT]<br/>  [STRAIGHT_JOIN]<br/>  <i>expression</i> [, <i>expression</i> ...]<br/>FROM <i>table_reference</i> [, <i>table_reference</i> ...]<br/>[[FULL | [LEFT | RIGHT] INNER | [LEFT | RIGHT] OUTER | [LEFT | RIGHT] SEMI | [LEFT | RIGHT] ANTI | CROSS]<br/>  JOIN <i>table_reference</i> [ON <i>join_equality_clauses</i> | USING (<span class="sql-docs-variable">col1</span> [, <span class="sql-docs-variable">col2</span> ...]] ...<br/>WHERE <i>conditions</i> GROUP BY { <i>column</i> | <i>expression</i> [, ...] }<br/>HAVING <span class="sql-docs-inline-code">conditions</span> ORDER BY { <i>column</i> | <i>expression</i> [ASC | DESC] [NULLS FIRST | NULLS LAST] [, ...] }<br/>LIMIT <i>expression</i> [OFFSET <i>expression</i> ]<br/>[UNION [ALL] <i>select_statement</i> ] ...]<br/><br/>table_reference := { <span class="sql-docs-variable">table_name</span> | (<span class="sql-docs-variable">subquery</span> ) }<br/>  <span class="sql-docs-inline-code">[ TABLESAMPLE SYSTEM(<span class="sql-docs-variable">percentage</span> ) [REPEATABLE(<span class="sql-docs-variable">seed</span> )] ]</span> </div><p>' + 
      '      Impala <span class="sql-docs-inline-code">SELECT</span>  queries support:' + 
      '    </p> <ul><li>' + 
      '        SQL scalar data types: <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_boolean.xml#boolean">BOOLEAN</a></span> ,' + 
      '        <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tinyint.xml#tinyint">TINYINT</a></span> ,' + 
      '        <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_smallint.xml#smallint">SMALLINT</a></span> ,' + 
      '        <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_int.xml#int">INT</a></span> ,' + 
      '        <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_bigint.xml#bigint">BIGINT</a></span> ,' + 
      '        <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_decimal.xml#decimal">DECIMAL</a></span> <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_float.xml#float">FLOAT</a></span> ,' + 
      '        <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_double.xml#double">DOUBLE</a></span> ,' + 
      '        <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_timestamp.xml#timestamp">TIMESTAMP</a></span> ,' + 
      '        <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_string.xml#string">STRING</a></span> ,' + 
      '        <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_varchar.xml#varchar">VARCHAR</a></span> ,' + 
      '        <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_char.xml#char">CHAR</a></span> .' + 
      '      </li> <li>' + 
      '        The complex data types <span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , and <span class="sql-docs-inline-code">MAP</span> ,' + 
      '        are available in Impala 2.3 and higher.' + 
      '        Queries involving these types typically involve special qualified names' + 
      '        using dot notation for referring to the complex column fields,' + 
      '        and join clauses for bringing the complex columns into the result set.' + 
      '        See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a> for details.' + 
      '      </li> <li>' + 
      '        An optional <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_with.xml#with">WITH clause</a> before the' + 
      '        <span class="sql-docs-inline-code">SELECT</span>  keyword, to define a subquery whose name or column names can be referenced from' + 
      '        later in the main query. This clause lets you abstract repeated clauses, such as aggregation functions,' + 
      '        that are referenced multiple times in the same query.' + 
      '      </li> <li>' + 
      '        By default, one <span class="sql-docs-inline-code">DISTINCT</span>  clause per query. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_distinct.xml#distinct">DISTINCT Operator</a>' + 
      '        for details. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_appx_count_distinct.xml#appx_count_distinct">APPX_COUNT_DISTINCT Query Option (Impala 2.0 or higher only)</a> for a query option to' + 
      '        allow multiple <span class="sql-docs-inline-code">COUNT(DISTINCT)</span>  impressions in the same query.' + 
      '      </li> <li>' + 
      '        Subqueries in a <span class="sql-docs-inline-code">FROM</span>  clause. In Impala 2.0 and higher,' + 
      '        subqueries can also go in the <span class="sql-docs-inline-code">WHERE</span>  clause, for example with the' + 
      '        <span class="sql-docs-inline-code">IN()</span> , <span class="sql-docs-inline-code">EXISTS</span> , and <span class="sql-docs-inline-code">NOT EXISTS</span>  operators.' + 
      '      </li> <li><span class="sql-docs-inline-code">WHERE</span> , <span class="sql-docs-inline-code">GROUP BY</span> , <span class="sql-docs-inline-code">HAVING</span>  clauses.' + 
      '      </li> <li><span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_order_by.xml#order_by">ORDER BY</a></span> . Prior to Impala 1.4.0, Impala' + 
      '        required that queries using an <span class="sql-docs-inline-code">ORDER BY</span>  clause also include a' + 
      '        <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_limit.xml#limit">LIMIT</a></span>  clause. In Impala 1.4.0 and higher, this' + 
      '        restriction is lifted; sort operations that would exceed the Impala memory limit automatically use a' + 
      '        temporary disk work area to perform the sort.' + 
      '      </li> <li><p id="../Impala/docs/topics/impala_select.xml_join_types">' + 
      '        Impala supports a wide variety of <span class="sql-docs-inline-code">JOIN</span>  clauses. Left, right, semi, full, and outer joins' + 
      '        are supported in all Impala versions. The <span class="sql-docs-inline-code">CROSS JOIN</span>  operator is available in Impala 1.2.2' + 
      '        and higher. During performance tuning, you can override the reordering of join clauses that Impala does' + 
      '        internally by including the keyword <span class="sql-docs-inline-code">STRAIGHT_JOIN</span>  immediately after the' + 
      '        <span class="sql-docs-inline-code">SELECT</span>  and any <span class="sql-docs-inline-code">DISTINCT</span>  or <span class="sql-docs-inline-code">ALL</span>  keywords.' + 
      '      </p> <p>' + 
      '          See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_joins.xml#joins">Joins in Impala SELECT Statements</a> for details and examples of join queries.' + 
      '        </p> </li> <li><span class="sql-docs-inline-code">UNION ALL</span> .' + 
      '      </li> <li><span class="sql-docs-inline-code">LIMIT</span> .' + 
      '      </li> <li>' + 
      '        External tables.' + 
      '      </li> <li>' + 
      '        Relational operators such as greater than, less than, or equal to.' + 
      '      </li> <li>' + 
      '        Arithmetic operators such as addition or subtraction.' + 
      '      </li> <li>' + 
      '        Logical/Boolean operators <span class="sql-docs-inline-code">AND</span> , <span class="sql-docs-inline-code">OR</span> , and <span class="sql-docs-inline-code">NOT</span> . Impala does' + 
      '        not support the corresponding symbols <span class="sql-docs-inline-code">&&</span> , <span class="sql-docs-inline-code">||</span> , and' + 
      '        <span class="sql-docs-inline-code">!</span> .' + 
      '      </li> <li>' + 
      '        Common SQL built-in functions such as <span class="sql-docs-inline-code">COUNT</span> , <span class="sql-docs-inline-code">SUM</span> , <span class="sql-docs-inline-code">CAST</span> ,' + 
      '        <span class="sql-docs-inline-code">LIKE</span> , <span class="sql-docs-inline-code">IN</span> , <span class="sql-docs-inline-code">BETWEEN</span> , and <span class="sql-docs-inline-code">COALESCE</span> . Impala' + 
      '        specifically supports built-ins described in <span>builtins</span>.' + 
      '      </li> <li>' + 
      '        In Impala 2.9 and higher, an optional <span class="sql-docs-inline-code">TABLESAMPLE</span> ' + 
      '        clause immediately after a table reference, to specify that the query only processes a' + 
      '        specified percentage of the table data. See  for details.' + 
      '      </li> </ul> <p id="../Impala/docs/topics/impala_select.xml_ignore_file_extensions">' + 
      '        Impala queries ignore files with extensions commonly used for temporary work files by Hadoop tools. Any' + 
      '        files with extensions <span class="sql-docs-inline-code">.tmp</span>  or <span class="sql-docs-inline-code">.copying</span>  are not considered part of the' + 
      '        Impala table. The suffix matching is case-insensitive, so for example Impala ignores both' + 
      '        <span class="sql-docs-inline-code">.copying</span>  and <span class="sql-docs-inline-code">.COPYING</span>  suffixes.' + 
      '      </p> <p id="../Impala/docs/topics/impala_select.xml_security_blurb"><b>Security considerations:</b> </p> <p id="../Impala/docs/topics/impala_select.xml_redaction_yes">' + 
      '        If these statements in your environment contain sensitive literal values such as credit card numbers or tax' + 
      '        identifiers, Impala can redact this sensitive information when displaying the statements in log files and' + 
      '        other administrative contexts. See  for details.' + 
      '      </p> <p id="../Impala/docs/topics/impala_select.xml_s3_blurb"><b>Amazon S3 considerations:</b> </p> <p id="../Impala/docs/topics/impala_select.xml_s3_block_splitting">' + 
      '        In Impala 2.6 and higher, Impala queries are optimized for files stored in Amazon S3.' + 
      '        For Impala tables that use the file formats Parquet, ORC, RCFile, SequenceFile,' + 
      '        Avro, and uncompressed text, the setting <span class="sql-docs-inline-code">fs.s3a.block.size</span> ' + 
      '        in the <span class="sql-docs-variable">core-site.xml</span>  configuration file determines' + 
      '        how Impala divides the I/O work of reading the data files. This configuration' + 
      '        setting is specified in bytes. By default, this' + 
      '        value is 33554432 (32 MB), meaning that Impala parallelizes S3 read operations on the files' + 
      '        as if they were made up of 32 MB blocks. For example, if your S3 queries primarily access' + 
      '        Parquet files written by MapReduce or Hive, increase <span class="sql-docs-inline-code">fs.s3a.block.size</span> ' + 
      '        to 134217728 (128 MB) to match the row group size of those files. If most S3 queries involve' + 
      '        Parquet files written by Impala, increase <span class="sql-docs-inline-code">fs.s3a.block.size</span> ' + 
      '        to 268435456 (256 MB) to match the row group size produced by Impala.' + 
      '      </p> <p id="../Impala/docs/topics/impala_select.xml_cancel_blurb_yes"><b>Cancellation:</b>  Can be cancelled. To cancel this statement, use Ctrl-C from the' + 
      '        <span class="sql-docs-inline-code">impala-shell</span>  interpreter, the  button from the' + 
      '         page in Hue, or  from the list of' + 
      '        in-flight queries (for a particular node) on the  tab in the Impala web UI' + 
      '        (port 25000).' + 
      '      </p> <p id="../Impala/docs/topics/impala_select.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '      The user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '      typically the <span class="sql-docs-inline-code">impala</span>  user, must have read' + 
      '      permissions for the files in all applicable directories in all source tables,' + 
      '      and read and execute permissions for the relevant data directories.' + 
      '      (A <span class="sql-docs-inline-code">SELECT</span>  operation could read files from multiple different HDFS directories' + 
      '      if the source table is partitioned.)' + 
      '      If a query attempts to read a data file and is unable to because of an HDFS permission error,' + 
      '      the query halts and does not return any further results.' + 
      '    </p> <p id="../Impala/docs/topics/impala_select.xml_related_info"><b>Related information:</b> </p> <p>' + 
      '      The <span class="sql-docs-inline-code">SELECT</span>  syntax is so extensive that it forms its own category of statements: queries. The' + 
      '      other major classifications of SQL statements are data definition language (see' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_ddl.xml#ddl">DDL Statements</a>) and data manipulation language (see <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_dml.xml#dml">DML Statements</a>).' + 
      '    </p> <p>' + 
      '      Because the focus of Impala is on fast queries with interactive response times over huge data sets, query' + 
      '      performance and scalability are important considerations. See' + 
      '      <span>performance</span> and <span>scalability</span> for' + 
      '      details.' + 
      '    </p> </div> ',
    children: [
    {
      id: 'topics/impala_joins.xml',
      title: 'Joins in Impala SELECT Statements',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      A join query is a <span class="sql-docs-inline-code">SELECT</span>  statement that combines data from two or more tables,' + 
        '      and returns a result set containing items from some or all of those tables. It is a way to' + 
        '      cross-reference and correlate related data that is organized into multiple tables, typically' + 
        '      using identifiers that are repeated in each of the joined tables.' + 
        '    </p> <p id="../Impala/docs/topics/impala_joins.xml_syntax_blurb"><b>Syntax:</b> </p> <p id="../Impala/docs/topics/impala_joins.xml_join_types">' + 
        '        Impala supports a wide variety of <span class="sql-docs-inline-code">JOIN</span>  clauses. Left, right, semi, full, and outer joins' + 
        '        are supported in all Impala versions. The <span class="sql-docs-inline-code">CROSS JOIN</span>  operator is available in Impala 1.2.2' + 
        '        and higher. During performance tuning, you can override the reordering of join clauses that Impala does' + 
        '        internally by including the keyword <span class="sql-docs-inline-code">STRAIGHT_JOIN</span>  immediately after the' + 
        '        <span class="sql-docs-inline-code">SELECT</span>  and any <span class="sql-docs-inline-code">DISTINCT</span>  or <span class="sql-docs-inline-code">ALL</span>  keywords.' + 
        '      </p> <div class="sql-docs-code-block">SELECT <span class="sql-docs-variable">select_list</span> FROM<br/>  <span class="sql-docs-variable">table_or_subquery1</span> [INNER] JOIN <span class="sql-docs-variable">table_or_subquery2</span> |<br/>  <span class="sql-docs-variable">table_or_subquery1</span> {LEFT [OUTER] | RIGHT [OUTER] | FULL [OUTER]} JOIN <span class="sql-docs-variable">table_or_subquery2</span> |<br/>  <span class="sql-docs-variable">table_or_subquery1</span> {LEFT | RIGHT} SEMI JOIN <span class="sql-docs-variable">table_or_subquery2</span> |<br/>  <span class="sql-docs-inline-code"><span class="sql-docs-variable">table_or_subquery1</span> {LEFT | RIGHT} ANTI JOIN <span class="sql-docs-variable">table_or_subquery2</span> |</span> [ ON <span class="sql-docs-variable">col1</span> = <span class="sql-docs-variable">col2</span> [AND <span class="sql-docs-variable">col3</span> = <span class="sql-docs-variable">col4</span> ...] |<br/>      USING (<span class="sql-docs-variable">col1</span> [, <span class="sql-docs-variable">col2</span> ...]) ]<br/>  [<span class="sql-docs-variable">other_join_clause</span> ...]<br/>[ WHERE <span class="sql-docs-variable">where_clauses</span> ]<br/><br/>SELECT <span class="sql-docs-variable">select_list</span> FROM<br/>  <span class="sql-docs-variable">table_or_subquery1</span> , <span class="sql-docs-variable">table_or_subquery2</span> [, <span class="sql-docs-variable">table_or_subquery3</span> ...]<br/>  [<span class="sql-docs-variable">other_join_clause</span> ...]<br/>WHERE<br/>    <span class="sql-docs-variable">col1</span> = <span class="sql-docs-variable">col2</span> [AND <span class="sql-docs-variable">col3</span> = <span class="sql-docs-variable">col4</span> ...]<br/><br/>SELECT <span class="sql-docs-variable">select_list</span> FROM<br/>  <span class="sql-docs-variable">table_or_subquery1</span> CROSS JOIN <span class="sql-docs-variable">table_or_subquery2</span> [<span class="sql-docs-variable">other_join_clause</span> ...]<br/>[ WHERE <span class="sql-docs-variable">where_clauses</span> ]</div><p><b>SQL-92 and SQL-89 Joins:</b> </p> <p>' + 
        '      Queries with the explicit <span class="sql-docs-inline-code">JOIN</span>  keywords are known as SQL-92 style joins, referring to the' + 
        '      level of the SQL standard where they were introduced. The corresponding <span class="sql-docs-inline-code">ON</span>  or' + 
        '      <span class="sql-docs-inline-code">USING</span>  clauses clearly show which columns are used as the join keys in each case:' + 
        '    </p> <div class="sql-docs-code-block">SELECT t1.c1, t2.c2 FROM <b>t1 JOIN t2</b> <b>ON t1.id = t2.id and t1.type_flag = t2.type_flag</b> WHERE t1.c1 > 100;<br/><br/>SELECT t1.c1, t2.c2 FROM <b>t1 JOIN t2</b> <b>USING (id, type_flag)</b> WHERE t1.c1 > 100;</div><p>' + 
        '      The <span class="sql-docs-inline-code">ON</span>  clause is a general way to compare columns across the two tables, even if the column' + 
        '      names are different. The <span class="sql-docs-inline-code">USING</span>  clause is a shorthand notation for specifying the join' + 
        '      columns, when the column names are the same in both tables. You can code equivalent <span class="sql-docs-inline-code">WHERE</span> ' + 
        '      clauses that compare the columns, instead of <span class="sql-docs-inline-code">ON</span>  or <span class="sql-docs-inline-code">USING</span>  clauses, but that' + 
        '      practice is not recommended because mixing the join comparisons with other filtering clauses is typically' + 
        '      less readable and harder to maintain.' + 
        '    </p> <p>' + 
        '      Queries with a comma-separated list of tables and subqueries are known as SQL-89 style joins. In these' + 
        '      queries, the equality comparisons between columns of the joined tables go in the <span class="sql-docs-inline-code">WHERE</span> ' + 
        '      clause alongside other kinds of comparisons. This syntax is easy to learn, but it is also easy to' + 
        '      accidentally remove a <span class="sql-docs-inline-code">WHERE</span>  clause needed for the join to work correctly.' + 
        '    </p> <div class="sql-docs-code-block">SELECT t1.c1, t2.c2 FROM <b>t1, t2</b> WHERE<br/>  <b>t1.id = t2.id AND t1.type_flag = t2.type_flag</b> AND t1.c1 > 100;</div><p><b>Self-joins:</b> </p> <p>' + 
        '      Impala can do self-joins, for example to join on two different columns in the same table to represent' + 
        '      parent-child relationships or other tree-structured data. There is no explicit syntax for this; just use the' + 
        '      same table name for both the left-hand and right-hand table, and assign different table aliases to use when' + 
        '      referring to the fully qualified column names:' + 
        '    </p> <div class="sql-docs-code-block">-- Combine fields from both parent and child rows.<br/>SELECT lhs.id, rhs.parent, lhs.c1, rhs.c2 FROM tree_data lhs, tree_data rhs WHERE lhs.id = rhs.parent;</div><p><b>Cartesian joins:</b> </p> <p>' + 
        '      To avoid producing huge result sets by mistake, Impala does not allow Cartesian joins of the form:' + 
        '<div class="sql-docs-code-block">SELECT ... FROM t1 JOIN t2;<br/>SELECT ... FROM t1, t2;</div>' + 
        '      If you intend to join the tables based on common values, add <span class="sql-docs-inline-code">ON</span>  or <span class="sql-docs-inline-code">WHERE</span> ' + 
        '      clauses to compare columns across the tables. If you truly intend to do a Cartesian join, use the' + 
        '      <span class="sql-docs-inline-code">CROSS JOIN</span>  keyword as the join operator. The <span class="sql-docs-inline-code">CROSS JOIN</span>  form does not use' + 
        '      any <span class="sql-docs-inline-code">ON</span>  clause, because it produces a result set with all combinations of rows from the' + 
        '      left-hand and right-hand tables. The result set can still be filtered by subsequent <span class="sql-docs-inline-code">WHERE</span> ' + 
        '      clauses. For example:' + 
        '    </p> <div class="sql-docs-code-block">SELECT ... FROM t1 CROSS JOIN t2;<br/>SELECT ... FROM t1 CROSS JOIN t2 WHERE <span class="sql-docs-variable">tests_on_non_join_columns</span> ;</div><p><b>Inner and outer joins:</b> </p> <p>' + 
        '      An inner join is the most common and familiar type: rows in the result set contain the requested columns from' + 
        '      the appropriate tables, for all combinations of rows where the join columns of the tables have identical' + 
        '      values. If a column with the same name occurs in both tables, use a fully qualified name or a column alias to' + 
        '      refer to the column in the select list or other clauses. Impala performs inner joins by default for both' + 
        '      SQL-89 and SQL-92 join syntax:' + 
        '    </p> <div class="sql-docs-code-block">-- The following 3 forms are all equivalent.<br/>SELECT t1.id, c1, c2 FROM t1, t2 WHERE t1.id = t2.id;<br/>SELECT t1.id, c1, c2 FROM t1 JOIN t2 ON t1.id = t2.id;<br/>SELECT t1.id, c1, c2 FROM t1 INNER JOIN t2 ON t1.id = t2.id;</div><p>' + 
        '      An outer join retrieves all rows from the left-hand table, or the right-hand table, or both; wherever there' + 
        '      is no matching data in the table on the other side of the join, the corresponding columns in the result set' + 
        '      are set to <span class="sql-docs-inline-code">NULL</span> . To perform an outer join, include the <span class="sql-docs-inline-code">OUTER</span>  keyword in the' + 
        '      join operator, along with either <span class="sql-docs-inline-code">LEFT</span> , <span class="sql-docs-inline-code">RIGHT</span> , or <span class="sql-docs-inline-code">FULL</span> :' + 
        '    </p> <div class="sql-docs-code-block">SELECT * FROM t1 LEFT OUTER JOIN t2 ON t1.id = t2.id;<br/>SELECT * FROM t1 RIGHT OUTER JOIN t2 ON t1.id = t2.id;<br/>SELECT * FROM t1 FULL OUTER JOIN t2 ON t1.id = t2.id;</div><p>' + 
        '      For outer joins, Impala requires SQL-92 syntax; that is, the <span class="sql-docs-inline-code">JOIN</span>  keyword instead of' + 
        '      comma-separated table names. Impala does not support vendor extensions such as <span class="sql-docs-inline-code">(+)</span>  or' + 
        '      <span class="sql-docs-inline-code">*=</span>  notation for doing outer joins with SQL-89 query syntax.' + 
        '    </p> <p><b>Equijoins and Non-Equijoins:</b> </p> <p>' + 
        '      By default, Impala requires an equality comparison between the left-hand and right-hand tables, either' + 
        '      through <span class="sql-docs-inline-code">ON</span> , <span class="sql-docs-inline-code">USING</span> , or <span class="sql-docs-inline-code">WHERE</span>  clauses. These types of' + 
        '      queries are classified broadly as equijoins. Inner, outer, full, and semi joins can all be equijoins based on' + 
        '      the presence of equality tests between columns in the left-hand and right-hand tables.' + 
        '    </p> <p>' + 
        '      In Impala 1.2.2 and higher, non-equijoin queries are also possible, with comparisons such as' + 
        '      <span class="sql-docs-inline-code">!=</span>  or <span class="sql-docs-inline-code"><</span>  between the join columns. These kinds of queries require care to' + 
        '      avoid producing huge result sets that could exceed resource limits. Once you have planned a non-equijoin' + 
        '      query that produces a result set of acceptable size, you can code the query using the <span class="sql-docs-inline-code">CROSS' + 
        '      JOIN</span>  operator, and add the extra comparisons in the <span class="sql-docs-inline-code">WHERE</span>  clause:' + 
        '    </p> <div class="sql-docs-code-block">SELECT * FROM t1 CROSS JOIN t2 WHERE t1.total > t2.maximum_price;</div><p>' + 
        '      In Impala 2.3 and higher, additional non-equijoin queries are possible due to the addition' + 
        '      of nested loop joins. These queries typically involve <span class="sql-docs-inline-code">SEMI JOIN</span> ,' + 
        '      <span class="sql-docs-inline-code">ANTI JOIN</span> , or <span class="sql-docs-inline-code">FULL OUTER JOIN</span>  clauses.' + 
        '      Impala sometimes also uses nested loop joins internally when evaluating <span class="sql-docs-inline-code">OUTER JOIN</span> ' + 
        '      queries involving complex type columns.' + 
        '      Query phases involving nested loop joins do not use the spill-to-disk mechanism if they' + 
        '      exceed the memory limit. Impala decides internally when to use each join mechanism; you cannot' + 
        '      specify any query hint to choose between the nested loop join or the original hash join algorithm.' + 
        '    </p> <div class="sql-docs-code-block">SELECT * FROM t1 LEFT OUTER JOIN t2 ON t1.int_col < t2.int_col;</div><p><b>Semi-joins:</b> </p> <p>' + 
        '      Semi-joins are a relatively rarely used variation. With the left semi-join, only data from the left-hand' + 
        '      table is returned, for rows where there is matching data in the right-hand table, based on comparisons' + 
        '      between join columns in <span class="sql-docs-inline-code">ON</span>  or <span class="sql-docs-inline-code">WHERE</span>  clauses. Only one instance of each row' + 
        '      from the left-hand table is returned, regardless of how many matching rows exist in the right-hand table.' + 
        '      <span class="sql-docs-inline-code">A right semi-join (available in Impala 2.0 and higher) reverses the comparison and returns' + 
        '      data from the right-hand table.</span> </p> <div class="sql-docs-code-block">SELECT t1.c1, t1.c2, t1.c2 FROM t1 LEFT SEMI JOIN t2 ON t1.id = t2.id;</div><p><b>Natural joins (not supported):</b> </p> <p>' + 
        '      Impala does not support the <span class="sql-docs-inline-code">NATURAL JOIN</span>  operator, again to avoid inconsistent or huge' + 
        '      result sets. Natural joins do away with the <span class="sql-docs-inline-code">ON</span>  and <span class="sql-docs-inline-code">USING</span>  clauses, and' + 
        '      instead automatically join on all columns with the same names in the left-hand and right-hand tables. This' + 
        '      kind of query is not recommended for rapidly evolving data structures such as are typically used in Hadoop.' + 
        '      Thus, Impala does not support the <span class="sql-docs-inline-code">NATURAL JOIN</span>  syntax, which can produce different query' + 
        '      results as columns are added to or removed from tables.' + 
        '    </p> <p>' + 
        '      If you do have any queries that use <span class="sql-docs-inline-code">NATURAL JOIN</span> , make sure to rewrite them with explicit' + 
        '      <span class="sql-docs-inline-code">USING</span>  clauses, because Impala could interpret the <span class="sql-docs-inline-code">NATURAL</span>  keyword as a' + 
        '      table alias:' + 
        '    </p> <div class="sql-docs-code-block">-- \'NATURAL\' is interpreted as an alias for \'t1\' and Impala attempts an inner join,<br/>-- resulting in an error because inner joins require explicit comparisons between columns.<br/>SELECT t1.c1, t2.c2 FROM t1 NATURAL JOIN t2;<br/>ERROR: NotImplementedException: Join with \'t2\' requires at least one conjunctive equality predicate.<br/>  To perform a Cartesian product between two tables, use a CROSS JOIN.<br/><br/>-- If you expect the tables to have identically named columns with matching values,<br/>-- list the corresponding column names in a USING clause.<br/>SELECT t1.c1, t2.c2 FROM t1 JOIN t2 USING (id, type_flag, name, address);</div><p><b>Anti-joins (Impala 2.0 and higher only):</b> </p> <p>' + 
        '      Impala supports the <span class="sql-docs-inline-code">LEFT ANTI JOIN</span>  and <span class="sql-docs-inline-code">RIGHT ANTI JOIN</span>  clauses in' + 
        '      Impala 2.0 and higher. The <span class="sql-docs-inline-code">LEFT</span>  or <span class="sql-docs-inline-code">RIGHT</span> ' + 
        '      keyword is required for this kind of join. For <span class="sql-docs-inline-code">LEFT ANTI JOIN</span> , this clause returns those' + 
        '      values from the left-hand table that have no matching value in the right-hand table. <span class="sql-docs-inline-code">RIGHT ANTI' + 
        '      JOIN</span>  reverses the comparison and returns values from the right-hand table. You can express this' + 
        '      negative relationship either through the <span class="sql-docs-inline-code">ANTI JOIN</span>  clause or through a <span class="sql-docs-inline-code">NOT' + 
        '      EXISTS</span>  operator with a subquery.' + 
        '    </p> <p id="../Impala/docs/topics/impala_joins.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p>' + 
        '      When referring to a column with a complex type (<span class="sql-docs-inline-code">STRUCT</span> , <span class="sql-docs-inline-code">ARRAY</span> , or <span class="sql-docs-inline-code">MAP</span> )' + 
        '      in a query, you use join notation to <q>unpack</q>  the scalar fields of the struct, the elements of the array, or' + 
        '      the key-value pairs of the map. (The join notation is not required for aggregation operations, such as' + 
        '      <span class="sql-docs-inline-code">COUNT()</span>  or <span class="sql-docs-inline-code">SUM()</span>  for array elements.) Because Impala recognizes which complex type elements are associated with which row' + 
        '      of the result set, you use the same syntax as for a cross or cartesian join, without an explicit join condition.' + 
        '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a> for details about Impala support for complex types.' + 
        '    </p> <p id="../Impala/docs/topics/impala_joins.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
        '      You typically use join queries in situations like these:' + 
        '    </p> <ul><li>' + 
        '        When related data arrives from different sources, with each data set physically residing in a separate' + 
        '        table. For example, you might have address data from business records that you cross-check against phone' + 
        '        listings or census data.' + 
        '        <div class="sql-docs-note">' + 
        '          Impala can join tables of different file formats, including Impala-managed tables and HBase tables. For' + 
        '          example, you might keep small dimension tables in HBase, for convenience of single-row lookups and' + 
        '          updates, and for the larger fact tables use Parquet or other binary file format optimized for scan' + 
        '          operations. Then, you can issue a join query to cross-reference the fact tables with the dimension' + 
        '          tables.' + 
        '        </div> </li> <li>' + 
        '        When data is normalized, a technique for reducing data duplication by dividing it across multiple tables.' + 
        '        This kind of organization is often found in data that comes from traditional relational database systems.' + 
        '        For example, instead of repeating some long string such as a customer name in multiple tables, each table' + 
        '        might contain a numeric customer ID. Queries that need to display the customer name could <q>join</q>  the' + 
        '        table that specifies which customer ID corresponds to which name.' + 
        '      </li> <li>' + 
        '        When certain columns are rarely needed for queries, so they are moved into separate tables to reduce' + 
        '        overhead for common queries. For example, a <span class="sql-docs-inline-code">biography</span>  field might be rarely needed in' + 
        '        queries on employee data. Putting that field in a separate table reduces the amount of I/O for common' + 
        '        queries on employee addresses or phone numbers. Queries that do need the <span class="sql-docs-inline-code">biography</span>  column' + 
        '        can retrieve it by performing a join with that separate table.' + 
        '      </li> <li>' + 
        '        In Impala 2.3 or higher, when referring to complex type columns in queries.' + 
        '        See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a> for details.' + 
        '      </li> </ul> <p>' + 
        '      When comparing columns with the same names in <span class="sql-docs-inline-code">ON</span>  or <span class="sql-docs-inline-code">WHERE</span>  clauses, use the' + 
        '      fully qualified names such as <span class="sql-docs-inline-code"><span class="sql-docs-variable">db_name</span> .<span class="sql-docs-variable">table_name</span> </span> , or' + 
        '      assign table aliases, column aliases, or both to make the code more compact and understandable:' + 
        '    </p> <div class="sql-docs-code-block">select t1.c1 as first_id, t2.c2 as second_id from<br/>  t1 join t2 on first_id = second_id;<br/><br/>select fact.custno, dimension.custno from<br/>  customer_data as fact join customer_address as dimension<br/>  using (custno)</div><div class="sql-docs-note"><p>' + 
        '        Performance for join queries is a crucial aspect for Impala, because complex join queries are' + 
        '        resource-intensive operations. An efficient join query produces much less network traffic and CPU overhead' + 
        '        than an inefficient one. For best results:' + 
        '      </p> <ul><li>' + 
        '          Make sure that both <span>table and column statistics</span> are' + 
        '          available for all the tables involved in a join query, and especially for the columns referenced in any' + 
        '          join conditions. Impala uses the statistics to automatically deduce an efficient join order.' + 
        '          Use <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show">SHOW TABLE STATS table_name and' + 
        '          SHOW COLUMN STATS table_name</a> to check if statistics are' + 
        '          already present. Issue the <span class="sql-docs-inline-code">COMPUTE STATS <span class="sql-docs-variable">table_name</span> </span>  for a nonpartitioned table,' + 
        '          or (in Impala 2.1.0 and higher) <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS <span class="sql-docs-variable">table_name</span> </span> ' + 
        '          for a partitioned table, to collect the initial statistics at both the table and column levels, and to keep the' + 
        '          statistics up to date after any substantial <span class="sql-docs-inline-code">INSERT</span>  or <span class="sql-docs-inline-code">LOAD DATA</span>  operations.' + 
        '        </li> <li>' + 
        '          If table or column statistics are not available, join the largest table first. You can check the' + 
        '          existence of statistics with the <span class="sql-docs-inline-code">SHOW TABLE STATS <span class="sql-docs-variable">table_name</span> </span>  and' + 
        '          <span class="sql-docs-inline-code">SHOW COLUMN STATS <span class="sql-docs-variable">table_name</span> </span>  statements.' + 
        '        </li> <li>' + 
        '          If table or column statistics are not available, join subsequent tables according to which table has the' + 
        '          most selective filter, based on overall size and <span class="sql-docs-inline-code">WHERE</span>  clauses. Joining the table with' + 
        '          the most selective filter results in the fewest number of rows being returned.' + 
        '        </li> </ul> <p>' + 
        '        For more information and examples of performance for join queries, see' + 
        '        <span>perf joins</span>.' + 
        '      </p> </div> <p>' + 
        '      To control the result set from a join query, include the names of corresponding column names in both tables' + 
        '      in an <span class="sql-docs-inline-code">ON</span>  or <span class="sql-docs-inline-code">USING</span>  clause, or by coding equality comparisons for those' + 
        '      columns in the <span class="sql-docs-inline-code">WHERE</span>  clause.' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > select c_last_name, ca_city from customer join customer_address where c_customer_sk = ca_address_sk;<br/>+-------------+-----------------+<br/>| c_last_name | ca_city         |<br/>+-------------+-----------------+<br/>| Lewis       | Fairfield       |<br/>| Moses       | Fairview        |<br/>| Hamilton    | Pleasant Valley |<br/>| White       | Oak Ridge       |<br/>| Moran       | Glendale        |<br/>...<br/>| Richards    | Lakewood         |<br/>| Day         | Lebanon          |<br/>| Painter     | Oak Hill         |<br/>| Bentley     | Greenfield       |<br/>| Jones       | Stringtown       |<br/>+-------------+------------------+<br/>Returned 50000 row(s) in 9.82s</div><p>' + 
        '      One potential downside of joins is the possibility of excess resource usage in poorly constructed queries.' + 
        '      Impala imposes restrictions on join queries to guard against such issues. To minimize the chance of runaway' + 
        '      queries on large data sets, Impala requires every join query to contain at least one equality predicate' + 
        '      between the columns of the various tables. For example, if <span class="sql-docs-inline-code">T1</span>  contains 1000 rows and' + 
        '      <span class="sql-docs-inline-code">T2</span>  contains 1,000,000 rows, a query <span class="sql-docs-inline-code">SELECT <span class="sql-docs-variable">columns</span>  FROM t1 JOIN' + 
        '      t2</span>  could return up to 1 billion rows (1000 * 1,000,000); Impala requires that the query include a' + 
        '      clause such as <span class="sql-docs-inline-code">ON t1.c1 = t2.c2</span>  or <span class="sql-docs-inline-code">WHERE t1.c1 = t2.c2</span> .' + 
        '    </p> <p>' + 
        '      Because even with equality clauses, the result set can still be large, as we saw in the previous example, you' + 
        '      might use a <span class="sql-docs-inline-code">LIMIT</span>  clause to return a subset of the results:' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > select c_last_name, ca_city from customer, customer_address where c_customer_sk = ca_address_sk limit 10;<br/>+-------------+-----------------+<br/>| c_last_name | ca_city         |<br/>+-------------+-----------------+<br/>| Lewis       | Fairfield       |<br/>| Moses       | Fairview        |<br/>| Hamilton    | Pleasant Valley |<br/>| White       | Oak Ridge       |<br/>| Moran       | Glendale        |<br/>| Sharp       | Lakeview        |<br/>| Wiles       | Farmington      |<br/>| Shipman     | Union           |<br/>| Gilbert     | New Hope        |<br/>| Brunson     | Martinsville    |<br/>+-------------+-----------------+<br/>Returned 10 row(s) in 0.63s</div><p>' + 
        '      Or you might use additional comparison operators or aggregation functions to condense a large result set into' + 
        '      a smaller set of values:' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > -- Find the names of customers who live in one particular town.<br/>[localhost:21000] > select distinct c_last_name from customer, customer_address where<br/>  c_customer_sk = ca_address_sk<br/>  and ca_city = "Green Acres";<br/>+---------------+<br/>| c_last_name   |<br/>+---------------+<br/>| Hensley       |<br/>| Pearson       |<br/>| Mayer         |<br/>| Montgomery    |<br/>| Ricks         |<br/>...<br/>| Barrett       |<br/>| Price         |<br/>| Hill          |<br/>| Hansen        |<br/>| Meeks         |<br/>+---------------+<br/>Returned 332 row(s) in 0.97s<br/><br/>[localhost:21000] > -- See how many different customers in this town have names starting with "A".<br/>[localhost:21000] > select count(distinct c_last_name) from customer, customer_address where<br/>  c_customer_sk = ca_address_sk<br/>  and ca_city = "Green Acres"<br/>  and substr(c_last_name,1,1) = "A";<br/>+-----------------------------+<br/>| count(distinct c_last_name) |<br/>+-----------------------------+<br/>| 12                          |<br/>+-----------------------------+<br/>Returned 1 row(s) in 1.00s</div><p>' + 
        '      Because a join query can involve reading large amounts of data from disk, sending large amounts of data' + 
        '      across the network, and loading large amounts of data into memory to do the comparisons and filtering, you' + 
        '      might do benchmarking, performance analysis, and query tuning to find the most efficient join queries for' + 
        '      your data set, hardware capacity, network configuration, and cluster workload.' + 
        '    </p> <p>' + 
        '      The two categories of joins in Impala are known as <b>partitioned joins</b>  and <b>broadcast joins</b> . If' + 
        '      inaccurate table or column statistics, or some quirk of the data distribution, causes Impala to choose the' + 
        '      wrong mechanism for a particular join, consider using query hints as a temporary workaround. For details, see' + 
        '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_hints.xml#hints">Optimizer Hints</a>.' + 
        '    </p> <p><b>Handling NULLs in Join Columns:</b> </p> <p>' + 
        '      By default, join key columns do not match if either one contains a <span class="sql-docs-inline-code">NULL</span>  value.' + 
        '      To treat such columns as equal if both contain <span class="sql-docs-inline-code">NULL</span> , you can use an expression' + 
        '      such as <span class="sql-docs-inline-code">A = B OR (A IS NULL AND B IS NULL)</span> .' + 
        '      In Impala 2.5 and higher, the <span class="sql-docs-inline-code"><=></span>  operator (shorthand for' + 
        '      <span class="sql-docs-inline-code">IS NOT DISTINCT FROM</span> ) performs the same comparison in a concise and efficient form.' + 
        '      The <span class="sql-docs-inline-code"><=></span>  operator is more efficient in for comparing join keys in a <span class="sql-docs-inline-code">NULL</span> -safe' + 
        '      manner, because the operator can use a hash join while the <span class="sql-docs-inline-code">OR</span>  expression cannot.' + 
        '    </p> <p id="../Impala/docs/topics/impala_joins.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
        '      The following examples refer to these simple tables containing small sets of integers:' + 
        '<div class="sql-docs-code-block">[localhost:21000] > create table t1 (x int);<br/>[localhost:21000] > insert into t1 values (1), (2), (3), (4), (5), (6);<br/><br/>[localhost:21000] > create table t2 (y int);<br/>[localhost:21000] > insert into t2 values (2), (4), (6);<br/><br/>[localhost:21000] > create table t3 (z int);<br/>[localhost:21000] > insert into t3 values (1), (3), (5);<br/></div></p> <p>' + 
        '      The following example demonstrates an anti-join, returning the values from <span class="sql-docs-inline-code">T1</span>  that do not' + 
        '      exist in <span class="sql-docs-inline-code">T2</span>  (in this case, the odd numbers 1, 3, and 5):' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > select x from t1 left anti join t2 on (t1.x = t2.y);<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 3 |<br/>| 5 |<br/>+---+<br/></div><p id="../Impala/docs/topics/impala_joins.xml_related_info"><b>Related information:</b> </p> <p>' + 
        '      See these tutorials for examples of different kinds of joins:' + 
        '    </p> <ul><li><span>tut cross join</span></li> </ul> </div> ',
      children: []
    },
    {
      id: 'topics/impala_order_by.xml',
      title: 'ORDER BY Clause',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      The familiar <span class="sql-docs-inline-code">ORDER BY</span>  clause of a <span class="sql-docs-inline-code">SELECT</span>  statement sorts the result set' + 
        '      based on the values from one or more columns.' + 
        '    </p> <p>' + 
        '      For distributed queries, this is a relatively expensive operation, because the entire result set must be' + 
        '      produced and transferred to one node before the sorting can happen. This can require more memory capacity' + 
        '      than a query without <span class="sql-docs-inline-code">ORDER BY</span> . Even if the query takes approximately the same time to finish' + 
        '      with or without the <span class="sql-docs-inline-code">ORDER BY</span>  clause, subjectively it can appear slower because no results' + 
        '      are available until all processing is finished, rather than results coming back gradually as rows matching' + 
        '      the <span class="sql-docs-inline-code">WHERE</span>  clause are found. Therefore, if you only need the first N results from the sorted' + 
        '      result set, also include the <span class="sql-docs-inline-code">LIMIT</span>  clause, which reduces network overhead and the memory' + 
        '      requirement on the coordinator node.' + 
        '    </p> <div class="sql-docs-note"><p>' + 
        '        In Impala 1.4.0 and higher, the <span class="sql-docs-inline-code">LIMIT</span>  clause is now optional (rather than required) for' + 
        '        queries that use the <span class="sql-docs-inline-code">ORDER BY</span>  clause. Impala automatically uses a temporary disk work area' + 
        '        to perform the sort if the sort operation would otherwise exceed the Impala memory limit for a particular' + 
        '        DataNode.' + 
        '      </p> </div> <p id="../Impala/docs/topics/impala_order_by.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
        '      The full syntax for the <span class="sql-docs-inline-code">ORDER BY</span>  clause is:' + 
        '    </p> <div class="sql-docs-code-block">ORDER BY <span class="sql-docs-variable">col_ref</span> [, <span class="sql-docs-variable">col_ref</span> ...] [ASC | DESC] [NULLS FIRST | NULLS LAST]<br/><br/>col_ref ::= <span class="sql-docs-variable">column_name</span> | <span class="sql-docs-variable">integer_literal</span> </div><p>' + 
        '      Although the most common usage is <span class="sql-docs-inline-code">ORDER BY <span class="sql-docs-variable">column_name</span> </span> , you can also' + 
        '      specify <span class="sql-docs-inline-code">ORDER BY 1</span>  to sort by the first column of the result set, <span class="sql-docs-inline-code">ORDER BY' + 
        '      2</span>  to sort by the second column, and so on. The number must be a numeric literal, not some other kind' + 
        '      of constant expression. (If the argument is some other expression, even a <span class="sql-docs-inline-code">STRING</span>  value, the' + 
        '      query succeeds but the order of results is undefined.)' + 
        '    </p> <p><span class="sql-docs-inline-code">ORDER BY <span class="sql-docs-variable">column_number</span> </span>  can only be used when the query explicitly lists' + 
        '      the columns in the <span class="sql-docs-inline-code">SELECT</span>  list, not with <span class="sql-docs-inline-code">SELECT *</span>  queries.' + 
        '    </p> <p><b>Ascending and descending sorts:</b> </p> <p>' + 
        '      The default sort order (the same as using the <span class="sql-docs-inline-code">ASC</span>  keyword) puts the smallest values at the' + 
        '      start of the result set, and the largest values at the end. Specifying the <span class="sql-docs-inline-code">DESC</span>  keyword' + 
        '      reverses that order.' + 
        '    </p> <p><b>Sort order for NULL values:</b> </p> <p>' + 
        '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_literals.xml#null"><h4>NULL</h4> </a> for details about how <span class="sql-docs-inline-code">NULL</span>  values are positioned' + 
        '      in the sorted result set, and how to use the <span class="sql-docs-inline-code">NULLS FIRST</span>  and <span class="sql-docs-inline-code">NULLS LAST</span> ' + 
        '      clauses. (The sort position for <span class="sql-docs-inline-code">NULL</span>  values in <span class="sql-docs-inline-code">ORDER BY ... DESC</span>  queries is' + 
        '      changed in Impala 1.2.1 and higher to be more standards-compliant, and the <span class="sql-docs-inline-code">NULLS FIRST</span>  and' + 
        '      <span class="sql-docs-inline-code">NULLS LAST</span>  keywords are new in Impala 1.2.1.)' + 
        '    </p> <p id="../Impala/docs/topics/impala_order_by.xml_order_by_limit">' + 
        '        Prior to Impala 1.4.0, Impala required any query including an' + 
        '        <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_order_by.xml#order_by">ORDER BY</a></span>  clause to also use a' + 
        '        <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_limit.xml#limit">LIMIT</a></span>  clause. In Impala 1.4.0 and' + 
        '        higher, the <span class="sql-docs-inline-code">LIMIT</span>  clause is optional for <span class="sql-docs-inline-code">ORDER BY</span>  queries. In cases where' + 
        '        sorting a huge result set requires enough memory to exceed the Impala memory limit for a particular node,' + 
        '        Impala automatically uses a temporary disk work area to perform the sort operation.' + 
        '      </p> <p id="../Impala/docs/topics/impala_order_by.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p>' + 
        '      In Impala 2.3 and higher, the complex data types <span class="sql-docs-inline-code">STRUCT</span> ,' + 
        '      <span class="sql-docs-inline-code">ARRAY</span> , and <span class="sql-docs-inline-code">MAP</span>  are available. These columns cannot' + 
        '      be referenced directly in the <span class="sql-docs-inline-code">ORDER BY</span>  clause.' + 
        '      When you query a complex type column, you use join notation to <q>unpack</q>  the elements' + 
        '      of the complex type, and within the join query you can include an <span class="sql-docs-inline-code">ORDER BY</span> ' + 
        '      clause to control the order in the result set of the scalar elements from the complex type.' + 
        '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a> for details about Impala support for complex types.' + 
        '    </p> <p>' + 
        '      The following query shows how a complex type column cannot be directly used in an <span class="sql-docs-inline-code">ORDER BY</span>  clause:' + 
        '    </p> <div class="sql-docs-code-block">CREATE TABLE games (id BIGINT, score ARRAY <BIGINT>) STORED AS PARQUET;<br/>...use LOAD DATA to load externally created Parquet files into the table...<br/>SELECT id FROM games ORDER BY score DESC;<br/>ERROR: AnalysisException: ORDER BY expression \'score\' with complex type \'ARRAY<BIGINT>\' is not supported.<br/></div><p id="../Impala/docs/topics/impala_order_by.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
        '      The following query retrieves the user ID and score, only for scores greater than one million,' + 
        '      with the highest scores for each user listed first.' + 
        '      Because the individual array elements are now represented as separate rows in the result set,' + 
        '      they can be used in the <span class="sql-docs-inline-code">ORDER BY</span>  clause, referenced using the <span class="sql-docs-inline-code">ITEM</span> ' + 
        '      pseudocolumn that represents each array element.' + 
        '    </p> <div class="sql-docs-code-block">SELECT id, item FROM games, games.score<br/>  WHERE item > 1000000<br/>ORDER BY id, item desc;<br/></div><p>' + 
        '      The following queries use similar <span class="sql-docs-inline-code">ORDER BY</span>  techniques with variations of the <span class="sql-docs-inline-code">GAMES</span> ' + 
        '      table, where the complex type is an <span class="sql-docs-inline-code">ARRAY</span>  containing <span class="sql-docs-inline-code">STRUCT</span>  or <span class="sql-docs-inline-code">MAP</span> ' + 
        '      elements to represent additional details about each game that was played.' + 
        '      For an array of structures, the fields of the structure are referenced as <span class="sql-docs-inline-code">ITEM.<span class="sql-docs-variable">field_name</span> </span> .' + 
        '      For an array of maps, the keys and values within each array element are referenced as <span class="sql-docs-inline-code">ITEM.KEY</span> ' + 
        '      and <span class="sql-docs-inline-code">ITEM.VALUE</span> .' + 
        '    </p> <div class="sql-docs-code-block">CREATE TABLE games2 (id BIGINT, play array < struct <game_name: string, score: BIGINT, high_score: boolean> >) STORED AS PARQUET<br/>...use LOAD DATA to load externally created Parquet files into the table...<br/>SELECT id, item.game_name, item.score FROM games2, games2.play<br/>  WHERE item.score > 1000000<br/>ORDER BY id, item.score DESC;<br/><br/>CREATE TABLE games3 (id BIGINT, play ARRAY < MAP <STRING, BIGINT> >) STORED AS PARQUET;<br/>...use LOAD DATA to load externally created Parquet files into the table...<br/>SELECT id, info.key AS k, info.value AS v from games3, games3.play AS plays, games3.play.item AS info<br/>  WHERE info.KEY = \'score\' AND info.VALUE > 1000000<br/>ORDER BY id, info.value desc;<br/></div><p id="../Impala/docs/topics/impala_order_by.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
        '      Although the <span class="sql-docs-inline-code">LIMIT</span>  clause is now optional on <span class="sql-docs-inline-code">ORDER BY</span>  queries, if your' + 
        '      query only needs some number of rows that you can predict in advance, use the <span class="sql-docs-inline-code">LIMIT</span>  clause' + 
        '      to reduce unnecessary processing. For example, if the query has a clause <span class="sql-docs-inline-code">LIMIT 10</span> , each data' + 
        '      node sorts its portion of the relevant result set and only returns 10 rows to the coordinator node. The' + 
        '      coordinator node picks the 10 highest or lowest row values out of this small intermediate result set.' + 
        '    </p> <p>' + 
        '      If an <span class="sql-docs-inline-code">ORDER BY</span>  clause is applied to an early phase of query processing, such as a subquery' + 
        '      or a view definition, Impala ignores the <span class="sql-docs-inline-code">ORDER BY</span>  clause. To get ordered results from a' + 
        '      subquery or view, apply an <span class="sql-docs-inline-code">ORDER BY</span>  clause to the outermost or final <span class="sql-docs-inline-code">SELECT</span> ' + 
        '      level.' + 
        '    </p> <p><span class="sql-docs-inline-code">ORDER BY</span>  is often used in combination with <span class="sql-docs-inline-code">LIMIT</span>  to perform <q>top-N</q> ' + 
        '      queries:' + 
        '    </p> <div class="sql-docs-code-block">SELECT user_id AS "Top 10 Visitors", SUM(page_views) FROM web_stats<br/>  GROUP BY page_views, user_id<br/>  ORDER BY SUM(page_views) DESC LIMIT 10;<br/></div><p><span class="sql-docs-inline-code">ORDER BY</span>  is sometimes used in combination with <span class="sql-docs-inline-code">OFFSET</span>  and' + 
        '      <span class="sql-docs-inline-code">LIMIT</span>  to paginate query results, although it is relatively inefficient to issue multiple' + 
        '      queries like this against the large tables typically used with Impala:' + 
        '    </p> <div class="sql-docs-code-block">SELECT page_title AS "Page 1 of search results", page_url FROM search_content<br/>  WHERE LOWER(page_title) LIKE \'%game%\')<br/>  ORDER BY page_title LIMIT 10 OFFSET 0;<br/>SELECT page_title AS "Page 2 of search results", page_url FROM search_content<br/>  WHERE LOWER(page_title) LIKE \'%game%\')<br/>  ORDER BY page_title LIMIT 10 OFFSET 10;<br/>SELECT page_title AS "Page 3 of search results", page_url FROM search_content<br/>  WHERE LOWER(page_title) LIKE \'%game%\')<br/>  ORDER BY page_title LIMIT 10 OFFSET 20;<br/></div><p id="../Impala/docs/topics/impala_order_by.xml_internals_blurb"><b>Internal details:</b> </p> <p>' + 
        '      Impala sorts the intermediate results of an <span class="sql-docs-inline-code">ORDER BY</span>  clause in memory whenever practical. In' + 
        '      a cluster of N DataNodes, each node sorts roughly 1/Nth of the result set, the exact proportion varying' + 
        '      depending on how the data matching the query is distributed in HDFS.' + 
        '    </p> <p>' + 
        '      If the size of the sorted intermediate result set on any DataNode would cause the query to exceed the Impala' + 
        '      memory limit, Impala sorts as much as practical in memory, then writes partially sorted data to disk. (This' + 
        '      technique is known in industry terminology as <q>external sorting</q>  and <q>spilling to disk</q> .) As each' + 
        '      8 MB batch of data is written to disk, Impala frees the corresponding memory to sort a new 8 MB batch of' + 
        '      data. When all the data has been processed, a final merge sort operation is performed to correctly order the' + 
        '      in-memory and on-disk results as the result set is transmitted back to the coordinator node. When external' + 
        '      sorting becomes necessary, Impala requires approximately 60 MB of RAM at a minimum for the buffers needed to' + 
        '      read, write, and sort the intermediate results. If more RAM is available on the DataNode, Impala will use' + 
        '      the additional RAM to minimize the amount of disk I/O for sorting.' + 
        '    </p> <p>' + 
        '      This external sort technique is used as appropriate on each DataNode (possibly including the coordinator' + 
        '      node) to sort the portion of the result set that is processed on that node. When the sorted intermediate' + 
        '      results are sent back to the coordinator node to produce the final result set, the coordinator node uses a' + 
        '      merge sort technique to produce a final sorted result set without using any extra resources on the' + 
        '      coordinator node.' + 
        '    </p> <p><b>Configuration for disk usage:</b> </p> <p id="../Impala/docs/topics/impala_order_by.xml_order_by_scratch_dir">' + 
        '        By default, intermediate files used during large sort, join, aggregation, or analytic function operations' + 
        '        are stored in the directory <span class="sql-docs-variable">/tmp/impala-scratch</span>  . These files are removed when the' + 
        '        operation finishes. (Multiple concurrent queries can perform operations that use the <q>spill to disk</q> ' + 
        '        technique, without any name conflicts for these temporary files.) You can specify a different location by' + 
        '        starting the <span class="sql-docs-inline-code">impalad</span>  daemon with the' + 
        '        <span class="sql-docs-inline-code">--scratch_dirs="<span class="sql-docs-variable">path_to_directory</span> "</span>  configuration option.' + 
        '        You can specify a single directory, or a comma-separated list of directories. The scratch directories must' + 
        '        be on the local filesystem, not in HDFS. You might specify different directory paths for different hosts,' + 
        '        depending on the capacity and speed' + 
        '        of the available storage devices. In Impala 2.3 or higher, Impala successfully starts (with a warning' + 
        '        Impala successfully starts (with a warning written to the log) if it cannot create or read and write files' + 
        '        in one of the scratch directories. If there is less than 1 GB free on the filesystem where that directory resides,' + 
        '        Impala still runs, but writes a warning message to its log.  If Impala encounters an error reading or writing' + 
        '        files in a scratch directory during a query, Impala logs the error and the query fails.' + 
        '      </p> <p id="../Impala/docs/topics/impala_order_by.xml_insert_sort_blurb"><b>Sorting considerations:</b>  Although you can specify an <span class="sql-docs-inline-code">ORDER BY</span>  clause in an' + 
        '        <span class="sql-docs-inline-code">INSERT ... SELECT</span>  statement, any <span class="sql-docs-inline-code">ORDER BY</span>  clause is ignored and the' + 
        '        results are not necessarily sorted. An <span class="sql-docs-inline-code">INSERT ... SELECT</span>  operation potentially creates' + 
        '        many different data files, prepared on different data nodes, and therefore the notion of the data being' + 
        '        stored in sorted order is impractical.' + 
        '      </p> <p id="../Impala/docs/topics/impala_order_by.xml_order_by_view_restriction">' + 
        '        An <span class="sql-docs-inline-code">ORDER BY</span>  clause without an additional <span class="sql-docs-inline-code">LIMIT</span>  clause is ignored in any' + 
        '        view definition. If you need to sort the entire result set from a view, use an <span class="sql-docs-inline-code">ORDER BY</span> ' + 
        '        clause in the <span class="sql-docs-inline-code">SELECT</span>  statement that queries the view. You can still make a simple <q>top' + 
        '        10</q>  report by combining the <span class="sql-docs-inline-code">ORDER BY</span>  and <span class="sql-docs-inline-code">LIMIT</span>  clauses in the same' + 
        '        view definition:' + 
        '<div class="sql-docs-code-block">[localhost:21000] > create table unsorted (x bigint);<br/>[localhost:21000] > insert into unsorted values (1), (9), (3), (7), (5), (8), (4), (6), (2);<br/>[localhost:21000] > create view sorted_view as select x from unsorted order by x;<br/>[localhost:21000] > select x from sorted_view; -- ORDER BY clause in view has no effect.<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 9 |<br/>| 3 |<br/>| 7 |<br/>| 5 |<br/>| 8 |<br/>| 4 |<br/>| 6 |<br/>| 2 |<br/>+---+<br/>[localhost:21000] > select x from sorted_view order by x; -- View query requires ORDER BY at outermost level.<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 2 |<br/>| 3 |<br/>| 4 |<br/>| 5 |<br/>| 6 |<br/>| 7 |<br/>| 8 |<br/>| 9 |<br/>+---+<br/>[localhost:21000] > create view top_3_view as select x from unsorted order by x limit 3;<br/>[localhost:21000] > select x from top_3_view; -- ORDER BY and LIMIT together in view definition are preserved.<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 2 |<br/>| 3 |<br/>+---+<br/></div></p> <p>' + 
        '      With the lifting of the requirement to include a <span class="sql-docs-inline-code">LIMIT</span>  clause in every <span class="sql-docs-inline-code">ORDER' + 
        '      BY</span>  query (in Impala 1.4 and higher):' + 
        '    </p> <ul><li><p>' + 
        '          Now the use of scratch disk space raises the possibility of an <q>out of disk space</q>  error on a' + 
        '          particular DataNode, as opposed to the previous possibility of an <q>out of memory</q>  error. Make sure' + 
        '          to keep at least 1 GB free on the filesystem used for temporary sorting work.' + 
        '        </p> </li> <li><p>' + 
        '          The query options' + 
        '          <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_default_order_by_limit.xml#default_order_by_limit">DEFAULT_ORDER_BY_LIMIT</a> and' + 
        '          <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_abort_on_default_limit_exceeded.xml#abort_on_default_limit_exceeded">ABORT_ON_DEFAULT_LIMIT_EXCEEDED</a>,' + 
        '          which formerly controlled the behavior of <span class="sql-docs-inline-code">ORDER BY</span>  queries with no limit specified, are' + 
        '          now ignored.' + 
        '        </p> </li> </ul> <p id="../Impala/docs/topics/impala_order_by.xml_null_sorting_change">' + 
        '        In Impala 1.2.1 and higher, all <span class="sql-docs-inline-code">NULL</span>  values come at the end of the result set for' + 
        '        <span class="sql-docs-inline-code">ORDER BY ... ASC</span>  queries, and at the beginning of the result set for <span class="sql-docs-inline-code">ORDER BY ...' + 
        '        DESC</span>  queries. In effect, <span class="sql-docs-inline-code">NULL</span>  is considered greater than all other values for' + 
        '        sorting purposes. The original Impala behavior always put <span class="sql-docs-inline-code">NULL</span>  values at the end, even for' + 
        '        <span class="sql-docs-inline-code">ORDER BY ... DESC</span>  queries. The new behavior in Impala 1.2.1 makes Impala more compatible' + 
        '        with other popular database systems. In Impala 1.2.1 and higher, you can override or specify the sorting' + 
        '        behavior for <span class="sql-docs-inline-code">NULL</span>  by adding the clause <span class="sql-docs-inline-code">NULLS FIRST</span>  or <span class="sql-docs-inline-code">NULLS' + 
        '        LAST</span>  at the end of the <span class="sql-docs-inline-code">ORDER BY</span>  clause.' + 
        '      </p> <div class="sql-docs-code-block">[localhost:21000] > create table numbers (x int);<br/>[localhost:21000] > insert into numbers values (1), (null), (2), (null), (3);<br/>[localhost:21000] > select x from numbers order by x nulls first;<br/>+------+<br/>| x    |<br/>+------+<br/>| NULL |<br/>| NULL |<br/>| 1    |<br/>| 2    |<br/>| 3    |<br/>+------+<br/>[localhost:21000] > select x from numbers order by x desc nulls first;<br/>+------+<br/>| x    |<br/>+------+<br/>| NULL |<br/>| NULL |<br/>| 3    |<br/>| 2    |<br/>| 1    |<br/>+------+<br/>[localhost:21000] > select x from numbers order by x nulls last;<br/>+------+<br/>| x    |<br/>+------+<br/>| 1    |<br/>| 2    |<br/>| 3    |<br/>| NULL |<br/>| NULL |<br/>+------+<br/>[localhost:21000] > select x from numbers order by x desc nulls last;<br/>+------+<br/>| x    |<br/>+------+<br/>| 3    |<br/>| 2    |<br/>| 1    |<br/>| NULL |<br/>| NULL |<br/>+------+<br/></div><p id="../Impala/docs/topics/impala_order_by.xml_related_info"><b>Related information:</b> </p> <p>' + 
        '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_select.xml#select">SELECT Statement</a> for further examples of queries with the <span class="sql-docs-inline-code">ORDER' + 
        '      BY</span>  clause.' + 
        '    </p> <p>' + 
        '      Analytic functions use the <span class="sql-docs-inline-code">ORDER BY</span>  clause in a different context to define the sequence in' + 
        '      which rows are analyzed. See <span>analytic functions</span> for details.' + 
        '    </p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_group_by.xml',
      title: 'GROUP BY Clause',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Specify the <span class="sql-docs-inline-code">GROUP BY</span>  clause in queries that use aggregation functions, such as' + 
        '      <span class="sql-docs-inline-code"><span>COUNT()</span></span> ,' + 
        '      <span class="sql-docs-inline-code"><span>SUM()</span></span> ,' + 
        '      <span class="sql-docs-inline-code"><span>AVG()</span></span> ,' + 
        '      <span class="sql-docs-inline-code"><span>MIN()</span></span> , and' + 
        '      <span class="sql-docs-inline-code"><span>MAX()</span></span> . Specify in the' + 
        '      <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_group_by.xml#group_by">GROUP BY</a></span>  clause the names of all the' + 
        '      columns that do not participate in the aggregation operation.' + 
        '    </p> <p id="../Impala/docs/topics/impala_group_by.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p>' + 
        '      In Impala 2.3 and higher, the complex data types <span class="sql-docs-inline-code">STRUCT</span> ,' + 
        '      <span class="sql-docs-inline-code">ARRAY</span> , and <span class="sql-docs-inline-code">MAP</span>  are available. These columns cannot' + 
        '      be referenced directly in the <span class="sql-docs-inline-code">ORDER BY</span>  clause.' + 
        '      When you query a complex type column, you use join notation to <q>unpack</q>  the elements' + 
        '      of the complex type, and within the join query you can include an <span class="sql-docs-inline-code">ORDER BY</span> ' + 
        '      clause to control the order in the result set of the scalar elements from the complex type.' + 
        '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a> for details about Impala support for complex types.' + 
        '    </p> <p id="../Impala/docs/topics/impala_group_by.xml_zero_length_strings"><b>Zero-length strings:</b>  For purposes of clauses such as <span class="sql-docs-inline-code">DISTINCT</span>  and <span class="sql-docs-inline-code">GROUP' + 
        '        BY</span> , Impala considers zero-length strings (<span class="sql-docs-inline-code">""</span> ), <span class="sql-docs-inline-code">NULL</span> , and space' + 
        '        to all be different values.' + 
        '      </p> <p id="../Impala/docs/topics/impala_group_by.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
        '      For example, the following query finds the 5 items that sold the highest total quantity (using the' + 
        '      <span class="sql-docs-inline-code">SUM()</span>  function, and also counts the number of sales transactions for those items (using the' + 
        '      <span class="sql-docs-inline-code">COUNT()</span>  function). Because the column representing the item IDs is not used in any' + 
        '      aggregation functions, we specify that column in the <span class="sql-docs-inline-code">GROUP BY</span>  clause.' + 
        '    </p> <div class="sql-docs-code-block">select<br/>  <b>ss_item_sk</b> as Item,<br/>  <b>count</b> (ss_item_sk) as Times_Purchased,<br/>  <b>sum</b> (ss_quantity) as Total_Quantity_Purchased<br/>from store_sales<br/>  <b>group by ss_item_sk</b> order by sum(ss_quantity) desc<br/>  limit 5;<br/>+-------+-----------------+--------------------------+<br/>| item  | times_purchased | total_quantity_purchased |<br/>+-------+-----------------+--------------------------+<br/>| 9325  | 372             | 19072                    |<br/>| 4279  | 357             | 18501                    |<br/>| 7507  | 371             | 18475                    |<br/>| 5953  | 369             | 18451                    |<br/>| 16753 | 375             | 18446                    |<br/>+-------+-----------------+--------------------------+</div><p>' + 
        '      The <span class="sql-docs-inline-code">HAVING</span>  clause lets you filter the results of aggregate functions, because you cannot' + 
        '      refer to those expressions in the <span class="sql-docs-inline-code">WHERE</span>  clause. For example, to find the 5 lowest-selling' + 
        '      items that were included in at least 100 sales transactions, we could use this query:' + 
        '    </p> <div class="sql-docs-code-block">select<br/>  <b>ss_item_sk</b> as Item,<br/>  <b>count</b> (ss_item_sk) as Times_Purchased,<br/>  <b>sum</b> (ss_quantity) as Total_Quantity_Purchased<br/>from store_sales<br/>  <b>group by ss_item_sk</b> <b>having times_purchased >= 100</b> order by sum(ss_quantity)<br/>  limit 5;<br/>+-------+-----------------+--------------------------+<br/>| item  | times_purchased | total_quantity_purchased |<br/>+-------+-----------------+--------------------------+<br/>| 13943 | 105             | 4087                     |<br/>| 2992  | 101             | 4176                     |<br/>| 4773  | 107             | 4204                     |<br/>| 14350 | 103             | 4260                     |<br/>| 11956 | 102             | 4275                     |<br/>+-------+-----------------+--------------------------+</div><p>' + 
        '      When performing calculations involving scientific or financial data, remember that columns with type' + 
        '      <span class="sql-docs-inline-code">FLOAT</span>  or <span class="sql-docs-inline-code">DOUBLE</span>  are stored as true floating-point numbers, which cannot' + 
        '      precisely represent every possible fractional value. Thus, if you include a <span class="sql-docs-inline-code">FLOAT</span>  or' + 
        '      <span class="sql-docs-inline-code">DOUBLE</span>  column in a <span class="sql-docs-inline-code">GROUP BY</span>  clause, the results might not precisely match' + 
        '      literal values in your query or from an original Text data file. Use rounding operations, the' + 
        '      <span class="sql-docs-inline-code">BETWEEN</span>  operator, or another arithmetic technique to match floating-point values that are' + 
        '      <q>near</q>  literal values you expect. For example, this query on the <span class="sql-docs-inline-code">ss_wholesale_cost</span> ' + 
        '      column returns cost values that are close but not identical to the original figures that were entered as' + 
        '      decimal fractions.' + 
        '    </p> <div class="sql-docs-code-block">select ss_wholesale_cost, avg(ss_quantity * ss_sales_price) as avg_revenue_per_sale<br/>  from sales<br/>  group by ss_wholesale_cost<br/>  order by avg_revenue_per_sale desc<br/>  limit 5;<br/>+-------------------+----------------------+<br/>| ss_wholesale_cost | avg_revenue_per_sale |<br/>+-------------------+----------------------+<br/>| 96.94000244140625 | 4454.351539300434    |<br/>| 95.93000030517578 | 4423.119941283189    |<br/>| 98.37999725341797 | 4332.516490316291    |<br/>| 97.97000122070312 | 4330.480601655014    |<br/>| 98.52999877929688 | 4291.316953108634    |<br/>+-------------------+----------------------+</div><p>' + 
        '      Notice how wholesale cost values originally entered as decimal fractions such as <span class="sql-docs-inline-code">96.94</span>  and' + 
        '      <span class="sql-docs-inline-code">98.38</span>  are slightly larger or smaller in the result set, due to precision limitations in the' + 
        '      hardware floating-point types. The imprecise representation of <span class="sql-docs-inline-code">FLOAT</span>  and' + 
        '      <span class="sql-docs-inline-code">DOUBLE</span>  values is why financial data processing systems often store currency using data types' + 
        '      that are less space-efficient but avoid these types of rounding errors.' + 
        '    </p> <p id="../Impala/docs/topics/impala_group_by.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_select.xml#select">SELECT Statement</a>,' + 
        '      <span>aggregate functions</span></p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_having.xml',
      title: 'HAVING Clause',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Performs a filter operation on a <span class="sql-docs-inline-code">SELECT</span>  query, by examining the results of aggregation' + 
        '      functions rather than testing each individual table row. Therefore, it is always used in conjunction with a' + 
        '      function such as <span class="sql-docs-inline-code"><span>COUNT()</span></span> ,' + 
        '      <span class="sql-docs-inline-code"><span>SUM()</span></span> ,' + 
        '      <span class="sql-docs-inline-code"><span>AVG()</span></span> ,' + 
        '      <span class="sql-docs-inline-code"><span>MIN()</span></span> , or' + 
        '      <span class="sql-docs-inline-code"><span>MAX()</span></span> , and typically with the' + 
        '      <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_group_by.xml#group_by">GROUP BY</a></span>  clause also.' + 
        '    </p> <p id="../Impala/docs/topics/impala_having.xml_restrictions_blurb"><b>Restrictions:</b> </p> <p>' + 
        '      The filter expression in the <span class="sql-docs-inline-code">HAVING</span>  clause cannot include a scalar subquery.' + 
        '    </p> <p id="../Impala/docs/topics/impala_having.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_select.xml#select">SELECT Statement</a>,' + 
        '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_group_by.xml#group_by">GROUP BY Clause</a>,' + 
        '      <span>aggregate functions</span></p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_limit.xml',
      title: 'LIMIT Clause',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      The <span class="sql-docs-inline-code">LIMIT</span>  clause in a <span class="sql-docs-inline-code">SELECT</span>  query sets a maximum number of rows for the' + 
        '      result set. Pre-selecting the maximum size of the result set helps Impala to optimize memory usage while' + 
        '      processing a distributed query.' + 
        '    </p> <p id="../Impala/docs/topics/impala_limit.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">LIMIT <span class="sql-docs-variable">constant_integer_expression</span> </div><p>' + 
        '      The argument to the <span class="sql-docs-inline-code">LIMIT</span>  clause must evaluate to a constant value. It can be a numeric' + 
        '      literal, or another kind of numeric expression involving operators, casts, and function return values. You' + 
        '      cannot refer to a column or use a subquery.' + 
        '    </p> <p id="../Impala/docs/topics/impala_limit.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
        '      This clause is useful in contexts such as:' + 
        '    </p> <ul><li>' + 
        '        To return exactly N items from a top-N query, such as the 10 highest-rated items in a shopping category or' + 
        '        the 50 hostnames that refer the most traffic to a web site.' + 
        '      </li> <li>' + 
        '        To demonstrate some sample values from a table or a particular query. (To display some arbitrary items, use' + 
        '        a query with no <span class="sql-docs-inline-code">ORDER BY</span>  clause. An <span class="sql-docs-inline-code">ORDER BY</span>  clause causes additional' + 
        '        memory and/or disk usage during the query.)' + 
        '      </li> <li>' + 
        '        To keep queries from returning huge result sets by accident if a table is larger than expected, or a' + 
        '        <span class="sql-docs-inline-code">WHERE</span>  clause matches more rows than expected.' + 
        '      </li> </ul> <p>' + 
        '      Originally, the value for the <span class="sql-docs-inline-code">LIMIT</span>  clause had to be a numeric literal. In Impala 1.2.1 and' + 
        '      higher, it can be a numeric expression.' + 
        '    </p> <p id="../Impala/docs/topics/impala_limit.xml_order_by_limit">' + 
        '        Prior to Impala 1.4.0, Impala required any query including an' + 
        '        <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_order_by.xml#order_by">ORDER BY</a></span>  clause to also use a' + 
        '        <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_limit.xml#limit">LIMIT</a></span>  clause. In Impala 1.4.0 and' + 
        '        higher, the <span class="sql-docs-inline-code">LIMIT</span>  clause is optional for <span class="sql-docs-inline-code">ORDER BY</span>  queries. In cases where' + 
        '        sorting a huge result set requires enough memory to exceed the Impala memory limit for a particular node,' + 
        '        Impala automatically uses a temporary disk work area to perform the sort operation.' + 
        '      </p> <p>' + 
        '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_order_by.xml#order_by">ORDER BY Clause</a> for details.' + 
        '    </p> <p id="../Impala/docs/topics/impala_limit.xml_limit_and_offset">' + 
        '        In Impala 1.2.1 and higher, you can combine a <span class="sql-docs-inline-code">LIMIT</span>  clause with an <span class="sql-docs-inline-code">OFFSET</span> ' + 
        '        clause to produce a small result set that is different from a top-N query, for example, to return items 11' + 
        '        through 20. This technique can be used to simulate <q>paged</q>  results. Because Impala queries typically' + 
        '        involve substantial amounts of I/O, use this technique only for compatibility in cases where you cannot' + 
        '        rewrite the application logic. For best performance and scalability, wherever practical, query as many' + 
        '        items as you expect to need, cache them on the application side, and display small groups of results to' + 
        '        users using application logic.' + 
        '      </p> <p id="../Impala/docs/topics/impala_limit.xml_restrictions_blurb"><b>Restrictions:</b> </p> <p id="../Impala/docs/topics/impala_limit.xml_subquery_no_limit">' + 
        '        Correlated subqueries used in <span class="sql-docs-inline-code">EXISTS</span>  and <span class="sql-docs-inline-code">IN</span>  operators cannot include a' + 
        '        <span class="sql-docs-inline-code">LIMIT</span>  clause.' + 
        '      </p> <p id="../Impala/docs/topics/impala_limit.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
        '      The following example shows how the <span class="sql-docs-inline-code">LIMIT</span>  clause caps the size of the result set, with the' + 
        '      limit being applied after any other clauses such as <span class="sql-docs-inline-code">WHERE</span> .' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > create database limits;<br/>[localhost:21000] > use limits;<br/>[localhost:21000] > create table numbers (x int);<br/>[localhost:21000] > insert into numbers values (1), (3), (4), (5), (2);<br/>Inserted 5 rows in 1.34s<br/>[localhost:21000] > select x from numbers limit 100;<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 3 |<br/>| 4 |<br/>| 5 |<br/>| 2 |<br/>+---+<br/>Returned 5 row(s) in 0.26s<br/>[localhost:21000] > select x from numbers limit 3;<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 3 |<br/>| 4 |<br/>+---+<br/>Returned 3 row(s) in 0.27s<br/>[localhost:21000] > select x from numbers where x > 2 limit 2;<br/>+---+<br/>| x |<br/>+---+<br/>| 3 |<br/>| 4 |<br/>+---+<br/>Returned 2 row(s) in 0.27s</div><p>' + 
        '      For top-N and bottom-N queries, you use the <span class="sql-docs-inline-code">ORDER BY</span>  and <span class="sql-docs-inline-code">LIMIT</span>  clauses' + 
        '      together:' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > select x as "Top 3" from numbers order by x desc limit 3;<br/>+-------+<br/>| top 3 |<br/>+-------+<br/>| 5     |<br/>| 4     |<br/>| 3     |<br/>+-------+<br/>[localhost:21000] > select x as "Bottom 3" from numbers order by x limit 3;<br/>+----------+<br/>| bottom 3 |<br/>+----------+<br/>| 1        |<br/>| 2        |<br/>| 3        |<br/>+----------+<br/></div><p>' + 
        '      You can use constant values besides integer literals as the <span class="sql-docs-inline-code">LIMIT</span>  argument:' + 
        '    </p> <div class="sql-docs-code-block">-- Other expressions that yield constant integer values work too.<br/>SELECT x FROM t1 LIMIT 1e6;                        -- Limit is one million.<br/>SELECT x FROM t1 LIMIT length(\'hello world\');      -- Limit is 11.<br/>SELECT x FROM t1 LIMIT 2+2;                        -- Limit is 4.<br/>SELECT x FROM t1 LIMIT cast(truncate(9.9) AS INT); -- Limit is 9.<br/></div></div> ',
      children: []
    },
    {
      id: 'topics/impala_offset.xml',
      title: 'OFFSET Clause',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      The <span class="sql-docs-inline-code">OFFSET</span>  clause in a <span class="sql-docs-inline-code">SELECT</span>  query causes the result set to start some' + 
        '      number of rows after the logical first item. The result set is numbered starting from zero, so <span class="sql-docs-inline-code">OFFSET' + 
        '      0</span>  produces the same result as leaving out the <span class="sql-docs-inline-code">OFFSET</span>  clause. Always use this clause' + 
        '      in combination with <span class="sql-docs-inline-code">ORDER BY</span>  (so that it is clear which item should be first, second, and so' + 
        '      on) and <span class="sql-docs-inline-code">LIMIT</span>  (so that the result set covers a bounded range, such as items 0-9, 100-199,' + 
        '      and so on).' + 
        '    </p> <p id="../Impala/docs/topics/impala_offset.xml_limit_and_offset">' + 
        '        In Impala 1.2.1 and higher, you can combine a <span class="sql-docs-inline-code">LIMIT</span>  clause with an <span class="sql-docs-inline-code">OFFSET</span> ' + 
        '        clause to produce a small result set that is different from a top-N query, for example, to return items 11' + 
        '        through 20. This technique can be used to simulate <q>paged</q>  results. Because Impala queries typically' + 
        '        involve substantial amounts of I/O, use this technique only for compatibility in cases where you cannot' + 
        '        rewrite the application logic. For best performance and scalability, wherever practical, query as many' + 
        '        items as you expect to need, cache them on the application side, and display small groups of results to' + 
        '        users using application logic.' + 
        '      </p> <p id="../Impala/docs/topics/impala_offset.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
        '      The following example shows how you could run a <q>paging</q>  query originally written for a traditional' + 
        '      database application. Because typical Impala queries process megabytes or gigabytes of data and read large' + 
        '      data files from disk each time, it is inefficient to run a separate query to retrieve each small group of' + 
        '      items. Use this technique only for compatibility while porting older applications, then rewrite the' + 
        '      application code to use a single query with a large result set, and display pages of results from the cached' + 
        '      result set.' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > create table numbers (x int);<br/>[localhost:21000] > insert into numbers select x from very_long_sequence;<br/>Inserted 1000000 rows in 1.34s<br/>[localhost:21000] > select x from numbers order by x limit 5 offset 0;<br/>+----+<br/>| x  |<br/>+----+<br/>| 1  |<br/>| 2  |<br/>| 3  |<br/>| 4  |<br/>| 5  |<br/>+----+<br/>[localhost:21000] > select x from numbers order by x limit 5 offset 5;<br/>+----+<br/>| x  |<br/>+----+<br/>| 6  |<br/>| 7  |<br/>| 8  |<br/>| 9  |<br/>| 10 |<br/>+----+<br/></div></div> ',
      children: []
    },
    {
      id: 'topics/impala_union.xml',
      title: 'UNION Clause',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      The <span class="sql-docs-inline-code">UNION</span>  clause lets you combine the result sets of multiple queries. By default, the' + 
        '      result sets are combined as if the <span class="sql-docs-inline-code">DISTINCT</span>  operator was applied.' + 
        '</p> <p id="../Impala/docs/topics/impala_union.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block"><span class="sql-docs-variable">query_1</span> UNION [DISTINCT | ALL] <span class="sql-docs-variable">query_2</span> </div><p id="../Impala/docs/topics/impala_union.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
        '      The <span class="sql-docs-inline-code">UNION</span>  keyword by itself is the same as <span class="sql-docs-inline-code">UNION DISTINCT</span> . Because' + 
        '      eliminating duplicates can be a memory-intensive process for a large result set, prefer <span class="sql-docs-inline-code">UNION' + 
        '      ALL</span>  where practical. (That is, when you know the different queries in the union will not produce any' + 
        '      duplicates, or where the duplicate values are acceptable.)' + 
        '    </p> <p>' + 
        '      When an <span class="sql-docs-inline-code">ORDER BY</span>  clause applies to a <span class="sql-docs-inline-code">UNION ALL</span>  or <span class="sql-docs-inline-code">UNION</span> ' + 
        '      query, in Impala 1.4 and higher, the <span class="sql-docs-inline-code">LIMIT</span>  clause is no longer required. To make the' + 
        '      <span class="sql-docs-inline-code">ORDER BY</span>  and <span class="sql-docs-inline-code">LIMIT</span>  clauses apply to the entire result set, turn the' + 
        '      <span class="sql-docs-inline-code">UNION</span>  query into a subquery, <span class="sql-docs-inline-code">SELECT</span>  from the subquery, and put the' + 
        '      <span class="sql-docs-inline-code">ORDER BY</span>  clause at the end, outside the subquery.' + 
        '    </p> <p id="../Impala/docs/topics/impala_union.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
        '      First, set up some sample data, including duplicate <span class="sql-docs-inline-code">1</span>  values:' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > create table few_ints (x int);<br/>[localhost:21000] > insert into few_ints values (1), (1), (2), (3);<br/>[localhost:21000] > set default_order_by_limit=1000;</div><p>' + 
        '      This example shows how <span class="sql-docs-inline-code">UNION ALL</span>  returns all rows from both queries, without any additional' + 
        '      filtering to eliminate duplicates. For the large result sets common with Impala queries, this is the most' + 
        '      memory-efficient technique.' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > select x from few_ints order by x;<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 1 |<br/>| 2 |<br/>| 3 |<br/>+---+<br/>Returned 4 row(s) in 0.41s<br/>[localhost:21000] > select x from few_ints union all select x from few_ints;<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 1 |<br/>| 2 |<br/>| 3 |<br/>| 1 |<br/>| 1 |<br/>| 2 |<br/>| 3 |<br/>+---+<br/>Returned 8 row(s) in 0.42s<br/>[localhost:21000] > select * from (select x from few_ints union all select x from few_ints) as t1 order by x;<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 1 |<br/>| 1 |<br/>| 1 |<br/>| 2 |<br/>| 2 |<br/>| 3 |<br/>| 3 |<br/>+---+<br/>Returned 8 row(s) in 0.53s<br/>[localhost:21000] > select x from few_ints union all select 10;<br/>+----+<br/>| x  |<br/>+----+<br/>| 10 |<br/>| 1  |<br/>| 1  |<br/>| 2  |<br/>| 3  |<br/>+----+<br/>Returned 5 row(s) in 0.38s</div><p>' + 
        '      This example shows how the <span class="sql-docs-inline-code">UNION</span>  clause without the <span class="sql-docs-inline-code">ALL</span>  keyword condenses' + 
        '      the result set to eliminate all duplicate values, making the query take more time and potentially more' + 
        '      memory. The extra processing typically makes this technique not recommended for queries that return result' + 
        '      sets with millions or billions of values.' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > select x from few_ints union select x+1 from few_ints;<br/>+---+<br/>| x |<br/>+---+<br/>| 3 |<br/>| 4 |<br/>| 1 |<br/>| 2 |<br/>+---+<br/>Returned 4 row(s) in 0.51s<br/>[localhost:21000] > select x from few_ints union select 10;<br/>+----+<br/>| x  |<br/>+----+<br/>| 2  |<br/>| 10 |<br/>| 1  |<br/>| 3  |<br/>+----+<br/>Returned 4 row(s) in 0.49s<br/>[localhost:21000] > select * from (select x from few_ints union select x from few_ints) as t1 order by x;<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 2 |<br/>| 3 |<br/>+---+<br/>Returned 3 row(s) in 0.53s</div></div> ',
      children: []
    },
    {
      id: 'topics/impala_subqueries.xml',
      title: 'Subqueries in Impala SELECT Statements',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      A <span class="sql-docs-variable">subquery</span>  is a query that is nested within another query. Subqueries let queries on one table' + 
        '      dynamically adapt based on the contents of another table. This technique provides great flexibility and' + 
        '      expressive power for SQL queries.' + 
        '    </p> <p>' + 
        '      A subquery can return a result set for use in the <span class="sql-docs-inline-code">FROM</span>  or <span class="sql-docs-inline-code">WITH</span>  clauses, or' + 
        '      with operators such as <span class="sql-docs-inline-code">IN</span>  or <span class="sql-docs-inline-code">EXISTS</span> .' + 
        '    </p> <p>' + 
        '      A <span class="sql-docs-variable">scalar subquery</span>  produces a result set with a single row containing a single column, typically' + 
        '      produced by an aggregation function such as <span class="sql-docs-inline-code">MAX()</span>  or <span class="sql-docs-inline-code">SUM()</span> . This single' + 
        '      result value can be substituted in scalar contexts such as arguments to comparison operators. If the result' + 
        '      set is empty, the value of the scalar subquery is <span class="sql-docs-inline-code">NULL</span> . For example, the following query' + 
        '      finds the maximum value of <span class="sql-docs-inline-code">T2.Y</span>  and then substitutes that value into the' + 
        '      <span class="sql-docs-inline-code">WHERE</span>  clause of the outer block that queries <span class="sql-docs-inline-code">T1</span> :' + 
        '    </p> <div class="sql-docs-code-block">SELECT x FROM t1 WHERE x > (SELECT MAX(y) FROM t2);<br/></div><p><span class="sql-docs-variable">Uncorrelated subqueries</span>  do not refer to any tables from the outer block of the query. The same' + 
        '      value or set of values produced by the subquery is used when evaluating each row from the outer query block.' + 
        '      In this example, the subquery returns an arbitrary number of values from <span class="sql-docs-inline-code">T2.Y</span> , and each' + 
        '      value of <span class="sql-docs-inline-code">T1.X</span>  is tested for membership in that same set of values:' + 
        '    </p> <div class="sql-docs-code-block">SELECT x FROM t1 WHERE x IN (SELECT y FROM t2);<br/></div><p><span class="sql-docs-variable">Correlated subqueries</span>  compare one or more values from the outer query block to values referenced' + 
        '      in the <span class="sql-docs-inline-code">WHERE</span>  clause of the subquery. Each row evaluated by the outer <span class="sql-docs-inline-code">WHERE</span> ' + 
        '      clause can be evaluated using a different set of values. These kinds of subqueries are restricted in the' + 
        '      kinds of comparisons they can do between columns of the inner and outer tables. (See the following' + 
        '      <b>Restrictions</b>  item.)' + 
        '    </p> <p>' + 
        '      For example, the following query finds all the employees with salaries that are higher than average for their' + 
        '      department. The subquery potentially computes a different <span class="sql-docs-inline-code">AVG()</span>  value for each employee.' + 
        '    </p> <div class="sql-docs-code-block">SELECT employee_name, employee_id FROM employees one WHERE<br/>  salary > (SELECT avg(salary) FROM employees two WHERE one.dept_id = two.dept_id);<br/></div><p id="../Impala/docs/topics/impala_subqueries.xml_syntax_blurb"><b>Syntax:</b> </p> <p><b>Subquery in the <span class="sql-docs-inline-code">FROM</span>  clause:</b> </p> <div class="sql-docs-code-block">SELECT <span class="sql-docs-variable">select_list</span> FROM <span class="sql-docs-variable">table_ref</span> [, <span class="sql-docs-variable">table_ref</span> ...]<br/><br/><span class="sql-docs-variable">table_ref</span> ::= <span class="sql-docs-variable">table_name</span> | (<span class="sql-docs-variable">select_statement</span> )<br/></div><p><b>Subqueries in <span class="sql-docs-inline-code">WHERE</span>  clause:</b> </p> <div class="sql-docs-code-block">WHERE <span class="sql-docs-variable">value</span> <span class="sql-docs-variable">comparison_operator</span> (<span class="sql-docs-variable">scalar_select_statement</span> )<br/>WHERE <span class="sql-docs-variable">value</span> [NOT] IN (<span class="sql-docs-variable">select_statement</span> )<br/>WHERE [NOT] EXISTS (<span class="sql-docs-variable">correlated_select_statement</span> )<br/>WHERE NOT EXISTS (<span class="sql-docs-variable">correlated_select_statement</span> )<br/></div><p><span class="sql-docs-inline-code">comparison_operator</span>  is a numeric comparison such as <span class="sql-docs-inline-code">=</span> ,' + 
        '      <span class="sql-docs-inline-code"><=</span> , <span class="sql-docs-inline-code">!=</span> , and so on, or a string comparison operator such as' + 
        '      <span class="sql-docs-inline-code">LIKE</span>  or <span class="sql-docs-inline-code">REGEXP</span> .' + 
        '    </p> <p>' + 
        '      Although you can use non-equality comparison operators such as <span class="sql-docs-inline-code"><</span>  or' + 
        '      <span class="sql-docs-inline-code">>=</span> , the subquery must include at least one equality comparison between the columns of the' + 
        '      inner and outer query blocks.' + 
        '    </p> <p>' + 
        '      All syntax is available for both correlated and uncorrelated queries, except that the <span class="sql-docs-inline-code">NOT' + 
        '      EXISTS</span>  clause cannot be used with an uncorrelated subquery.' + 
        '    </p> <p>' + 
        '      Impala subqueries can be nested arbitrarily deep.' + 
        '    </p> <p id="../Impala/docs/topics/impala_subqueries.xml_sql1999"><b>Standards compliance:</b>  Introduced in' + 
        '      <a target="_blank" href="http://en.wikipedia.org/wiki/SQL:1999">SQL:1999</a>.' + 
        '    </p> <p id="../Impala/docs/topics/impala_subqueries.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
        '      This example illustrates how subqueries can be used in the <span class="sql-docs-inline-code">FROM</span>  clause to organize the table' + 
        '      names, column names, and column values by producing intermediate result sets, especially for join queries.' + 
        '    </p> <div class="sql-docs-code-block">SELECT avg(t1.x), max(t2.y) FROM<br/>  (SELECT id, cast(a AS DECIMAL(10,5)) AS x FROM raw_data WHERE a BETWEEN 0 AND 100) AS t1<br/>  JOIN<br/>  (SELECT id, length(s) AS y FROM raw_data WHERE s LIKE \'A%\') AS t2;<br/>  USING (id);<br/></div><p>' + 
        '      These examples show how a query can test for the existence of values in a separate table using the' + 
        '      <span class="sql-docs-inline-code">EXISTS()</span>  operator with a subquery.' + 
        '</p> <p>' + 
        '      The following examples show how a value can be compared against a set of values returned by a subquery.' + 
        '    </p> <div class="sql-docs-code-block">SELECT count(x) FROM t1 WHERE EXISTS(SELECT 1 FROM t2 WHERE t1.x = t2.y * 10);<br/><br/>SELECT x FROM t1 WHERE x IN (SELECT y FROM t2 WHERE state = \'CA\');<br/></div><p>' + 
        '      The following examples demonstrate scalar subqueries. When a subquery is known to return a single value, you' + 
        '      can substitute it where you would normally put a constant value.' + 
        '    </p> <div class="sql-docs-code-block">SELECT x FROM t1 WHERE y = (SELECT max(z) FROM t2);<br/>SELECT x FROM t1 WHERE y > (SELECT count(z) FROM t2);<br/></div><p id="../Impala/docs/topics/impala_subqueries.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
        '      If the same table is referenced in both the outer and inner query blocks, construct a table alias in the' + 
        '      outer query block and use a fully qualified name to distinguish the inner and outer table references:' + 
        '    </p> <div class="sql-docs-code-block">SELECT * FROM t1 one WHERE id IN (SELECT parent FROM t1 two WHERE t1.parent = t2.id);<br/></div><p id="../Impala/docs/topics/impala_subqueries.xml_straight_join_nested_queries">' + 
        '        The <span class="sql-docs-inline-code">STRAIGHT_JOIN</span>  hint affects the join order of table references in the query' + 
        '        block containing the hint. It does not affect the join order of nested queries, such as views,' + 
        '        inline views, or <span class="sql-docs-inline-code">WHERE</span> -clause subqueries. To use this hint for performance' + 
        '        tuning of complex queries, apply the hint to all query blocks that need a fixed join order.' + 
        '      </p> <p id="../Impala/docs/topics/impala_subqueries.xml_internals_blurb"><b>Internal details:</b> </p> <p>' + 
        '      Internally, subqueries involving <span class="sql-docs-inline-code">IN</span> , <span class="sql-docs-inline-code">NOT IN</span> , <span class="sql-docs-inline-code">EXISTS</span> , or' + 
        '      <span class="sql-docs-inline-code">NOT EXISTS</span>  clauses are rewritten into join queries. Depending on the syntax, the subquery' + 
        '      might be rewritten to an outer join, semi join, cross join, or anti join.' + 
        '    </p> <p>' + 
        '      A query is processed differently depending on whether the subquery calls any aggregation functions. There are' + 
        '      correlated and uncorrelated forms, with and without calls to aggregation functions. Each of these four' + 
        '      categories is rewritten differently.' + 
        '    </p> <p id="../Impala/docs/topics/impala_subqueries.xml_column_stats_blurb"><b>Column statistics considerations:</b> </p> <p>' + 
        '      Because queries that include correlated and uncorrelated subqueries in the <span class="sql-docs-inline-code">WHERE</span>  clause are' + 
        '      written into join queries, to achieve best performance, follow the same guidelines for running the' + 
        '      <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement as you do for tables involved in regular join queries. Run the' + 
        '      <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement for each associated tables after loading or substantially changing' + 
        '      the data in that table. See <span>perf stats</span> for details.' + 
        '    </p> <p><b>Added in:</b>  Subqueries are substantially enhanced starting in Impala 2.0. Now,' + 
        '      they can be used in the <span class="sql-docs-inline-code">WHERE</span>  clause, in combination with clauses such as' + 
        '      <span class="sql-docs-inline-code">EXISTS</span>  and <span class="sql-docs-inline-code">IN</span> , rather than just in the <span class="sql-docs-inline-code">FROM</span>  clause.' + 
        '    </p> <p id="../Impala/docs/topics/impala_subqueries.xml_restrictions_blurb"><b>Restrictions:</b> </p> <p>' + 
        '      The initial Impala support for nested subqueries addresses the most common use cases. Some restrictions' + 
        '      remain:' + 
        '    </p> <ul><li><p>' + 
        '          Although you can use subqueries in a query involving <span class="sql-docs-inline-code">UNION</span>  or <span class="sql-docs-inline-code">UNION ALL</span> ' + 
        '          in Impala 2.1.0 and higher, currently you cannot construct a union of two subqueries (for example, in the' + 
        '          argument of an <span class="sql-docs-inline-code">IN</span>  or <span class="sql-docs-inline-code">EXISTS</span>  operator).' + 
        '        </p> </li> <li><p>' + 
        '          Subqueries returning scalar values cannot be used with the operators <span class="sql-docs-inline-code">ANY</span>  or' + 
        '          <span class="sql-docs-inline-code">ALL</span> . (Impala does not currently have a <span class="sql-docs-inline-code">SOME</span>  operator, but if it did,' + 
        '          the same restriction would apply.)' + 
        '        </p> </li> <li><p>' + 
        '          For the <span class="sql-docs-inline-code">EXISTS</span>  and <span class="sql-docs-inline-code">NOT EXISTS</span>  clauses, any subquery comparing values' + 
        '          from the outer query block to another table must use at least one equality comparison, not exclusively' + 
        '          other kinds of comparisons such as less than, greater than, <span class="sql-docs-inline-code">BETWEEN</span> , or' + 
        '          <span class="sql-docs-inline-code">!=</span> .' + 
        '        </p> </li> <li><p>' + 
        '          Currently, a scalar subquery cannot be used as the first or second argument to the' + 
        '          <span class="sql-docs-inline-code">BETWEEN</span>  operator.' + 
        '        </p> </li> <li><p>' + 
        '          A subquery cannot be used inside an <span class="sql-docs-inline-code">OR</span>  conjunction. Expressions inside a subquery, for' + 
        '          example in the <span class="sql-docs-inline-code">WHERE</span>  clause, can use <span class="sql-docs-inline-code">OR</span>  conjunctions; the restriction' + 
        '          only applies to parts of the query <q>above</q>  the subquery.' + 
        '        </p> </li> <li><p>' + 
        '          Scalar subqueries are only supported in numeric contexts. You cannot use a scalar subquery as an argument' + 
        '          to the <span class="sql-docs-inline-code">LIKE</span> , <span class="sql-docs-inline-code">REGEXP</span> , or <span class="sql-docs-inline-code">RLIKE</span>  operators, or compare it' + 
        '          to a value of a non-numeric type such as <span class="sql-docs-inline-code">TIMESTAMP</span>  or <span class="sql-docs-inline-code">BOOLEAN</span> .' + 
        '        </p> </li> <li><p>' + 
        '          You cannot use subqueries with the <span class="sql-docs-inline-code">CASE</span>  function to generate the comparison value, the' + 
        '          values to be compared against, or the return value.' + 
        '        </p> </li> <li><p>' + 
        '          A subquery is not allowed in the filter condition for the <span class="sql-docs-inline-code">HAVING</span>  clause. (Strictly' + 
        '          speaking, a subquery cannot appear anywhere outside the <span class="sql-docs-inline-code">WITH</span> , <span class="sql-docs-inline-code">FROM</span> , and' + 
        '          <span class="sql-docs-inline-code">WHERE</span>  clauses.)' + 
        '        </p> </li> <li><p>' + 
        '          You must use a fully qualified name' + 
        '          (<span class="sql-docs-inline-code"><span class="sql-docs-variable">table_name</span> .<span class="sql-docs-variable">column_name</span> </span>  or' + 
        '          <span class="sql-docs-inline-code"><span class="sql-docs-variable">database_name</span> .<span class="sql-docs-variable">table_name</span> .<span class="sql-docs-variable">column_name</span> </span> )' + 
        '          when referring to any column from the outer query block within a subquery.' + 
        '        </p> </li> <li><p id="../Impala/docs/topics/impala_subqueries.xml_tablesample_caveat">' + 
        '        The <span class="sql-docs-inline-code">TABLESAMPLE</span>  clause of the <span class="sql-docs-inline-code">SELECT</span> ' + 
        '        statement does not apply to a table reference derived from a view, a subquery,' + 
        '        or anything other than a real base table. This clause only works for tables' + 
        '        backed by HDFS or HDFS-like data files, therefore it does not apply to Kudu or' + 
        '        HBase tables.' + 
        '      </p> </li> </ul> <p id="../Impala/docs/topics/impala_subqueries.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p>' + 
        '      For the complex types (<span class="sql-docs-inline-code">ARRAY</span> , <span class="sql-docs-inline-code">STRUCT</span> , and <span class="sql-docs-inline-code">MAP</span> )' + 
        '      available in Impala 2.3 and higher, the join queries that <q>unpack</q>  complex type' + 
        '      columns often use correlated subqueries in the <span class="sql-docs-inline-code">FROM</span>  clause.' + 
        '      For example, if the first table in the join clause is <span class="sql-docs-inline-code">CUSTOMER</span> , the second' + 
        '      join clause might have a subquery that selects from the column <span class="sql-docs-inline-code">CUSTOMER.C_ORDERS</span> ,' + 
        '      which is an <span class="sql-docs-inline-code">ARRAY</span> . The subquery re-evaluates the <span class="sql-docs-inline-code">ARRAY</span>  elements' + 
        '      corresponding to each row from the <span class="sql-docs-inline-code">CUSTOMER</span>  table.' + 
        '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a> for details and examples of' + 
        '      using subqueries with complex types.' + 
        '    </p> <p id="../Impala/docs/topics/impala_subqueries.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_operators.xml#exists"><h4>EXISTS Operator</h4> </a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_operators.xml#in"><h4>IN Operator</h4> </a></p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_with.xml',
      title: 'WITH Clause',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      A clause that can be added before a <span class="sql-docs-inline-code">SELECT</span>  statement, to define aliases for complicated' + 
        '      expressions that are referenced multiple times within the body of the <span class="sql-docs-inline-code">SELECT</span> . Similar to' + 
        '      <span class="sql-docs-inline-code">CREATE VIEW</span> , except that the table and column names defined in the <span class="sql-docs-inline-code">WITH</span> ' + 
        '      clause do not persist after the query finishes, and do not conflict with names used in actual tables or' + 
        '      views. Also known as <q>subquery factoring</q> .' + 
        '    </p> <p>' + 
        '      You can rewrite a query using subqueries to work the same as with the <span class="sql-docs-inline-code">WITH</span>  clause. The' + 
        '      purposes of the <span class="sql-docs-inline-code">WITH</span>  clause are:' + 
        '    </p> <ul><li>' + 
        '        Convenience and ease of maintenance from less repetition with the body of the query. Typically used with' + 
        '        queries involving <span class="sql-docs-inline-code">UNION</span> , joins, or aggregation functions where the similar complicated' + 
        '        expressions are referenced multiple times.' + 
        '      </li> <li>' + 
        '        SQL code that is easier to read and understand by abstracting the most complex part of the query into a' + 
        '        separate block.' + 
        '      </li> <li>' + 
        '        Improved compatibility with SQL from other database systems that support the same clause (primarily Oracle' + 
        '        Database).' + 
        '        <div class="sql-docs-note"><p>' + 
        '            The Impala <span class="sql-docs-inline-code">WITH</span>  clause does not support recursive queries in the' + 
        '            <span class="sql-docs-inline-code">WITH</span> , which is supported in some other database systems.' + 
        '          </p> </div> </li> </ul> <p id="../Impala/docs/topics/impala_with.xml_sql1999"><b>Standards compliance:</b>  Introduced in' + 
        '      <a target="_blank" href="http://en.wikipedia.org/wiki/SQL:1999">SQL:1999</a>.' + 
        '    </p> <p id="../Impala/docs/topics/impala_with.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">-- Define 2 subqueries that can be referenced from the body of a longer query.<br/>with t1 as (select 1), t2 as (select 2) insert into tab select * from t1 union all select * from t2;<br/><br/>-- Define one subquery at the outer level, and another at the inner level as part of the<br/>-- initial stage of the UNION ALL query.<br/>with t1 as (select 1) (with t2 as (select 2) select * from t2) union all select * from t1;</div></div> ',
      children: []
    },
    {
      id: 'topics/impala_distinct.xml',
      title: 'DISTINCT Operator',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      The <span class="sql-docs-inline-code">DISTINCT</span>  operator in a <span class="sql-docs-inline-code">SELECT</span>  statement filters the result set to' + 
        '      remove duplicates:' + 
        '    </p> <div class="sql-docs-code-block">-- Returns the unique values from one column.<br/>-- NULL is included in the set of values if any rows have a NULL in this column.<br/>select distinct c_birth_country from customer;<br/>-- Returns the unique combinations of values from multiple columns.<br/>select distinct c_salutation, c_last_name from customer;</div><p>' + 
        '      You can use <span class="sql-docs-inline-code">DISTINCT</span>  in combination with an aggregation function, typically' + 
        '      <span class="sql-docs-inline-code">COUNT()</span> , to find how many different values a column contains:' + 
        '    </p> <div class="sql-docs-code-block">-- Counts the unique values from one column.<br/>-- NULL is not included as a distinct value in the count.<br/>select count(distinct c_birth_country) from customer;<br/>-- Counts the unique combinations of values from multiple columns.<br/>select count(distinct c_salutation, c_last_name) from customer;</div><p>' + 
        '      One construct that Impala SQL does <i>not</i>  support is using <span class="sql-docs-inline-code">DISTINCT</span>  in more than one' + 
        '      aggregation function in the same query. For example, you could not have a single query with both' + 
        '      <span class="sql-docs-inline-code">COUNT(DISTINCT c_first_name)</span>  and <span class="sql-docs-inline-code">COUNT(DISTINCT c_last_name)</span>  in the' + 
        '      <span class="sql-docs-inline-code">SELECT</span>  list.' + 
        '    </p> <p id="../Impala/docs/topics/impala_distinct.xml_zero_length_strings"><b>Zero-length strings:</b>  For purposes of clauses such as <span class="sql-docs-inline-code">DISTINCT</span>  and <span class="sql-docs-inline-code">GROUP' + 
        '        BY</span> , Impala considers zero-length strings (<span class="sql-docs-inline-code">""</span> ), <span class="sql-docs-inline-code">NULL</span> , and space' + 
        '        to all be different values.' + 
        '      </p> <div id="../Impala/docs/topics/impala_distinct.xml_multiple_count_distinct" class="sql-docs-note"><p>' + 
        '          By default, Impala only allows a single <span class="sql-docs-inline-code">COUNT(DISTINCT <span class="sql-docs-variable">columns</span> )</span> ' + 
        '          expression in each query.' + 
        '        </p> <p>' + 
        '          If you do not need precise accuracy, you can produce an estimate of the distinct values for a column by' + 
        '          specifying <span class="sql-docs-inline-code">NDV(<span class="sql-docs-variable">column</span> )</span> ; a query can contain multiple instances of' + 
        '          <span class="sql-docs-inline-code">NDV(<span class="sql-docs-variable">column</span> )</span> . To make Impala automatically rewrite' + 
        '          <span class="sql-docs-inline-code">COUNT(DISTINCT)</span>  expressions to <span class="sql-docs-inline-code">NDV()</span> , enable the' + 
        '          <span class="sql-docs-inline-code">APPX_COUNT_DISTINCT</span>  query option.' + 
        '        </p> <p>' + 
        '          To produce the same result as multiple <span class="sql-docs-inline-code">COUNT(DISTINCT)</span>  expressions, you can use the' + 
        '          following technique for queries involving a single table:' + 
        '        </p> <div class="sql-docs-code-block">select v1.c1 result1, v2.c1 result2 from<br/>  (select count(distinct col1) as c1 from t1) v1<br/>    cross join<br/>  (select count(distinct col2) as c1 from t1) v2;<br/></div><p>' + 
        '          Because <span class="sql-docs-inline-code">CROSS JOIN</span>  is an expensive operation, prefer to use the <span class="sql-docs-inline-code">NDV()</span> ' + 
        '          technique wherever practical.' + 
        '        </p> </div> <div class="sql-docs-note"><p>' + 
        '        In contrast with some database systems that always return <span class="sql-docs-inline-code">DISTINCT</span>  values in sorted order,' + 
        '        Impala does not do any ordering of <span class="sql-docs-inline-code">DISTINCT</span>  values. Always include an <span class="sql-docs-inline-code">ORDER' + 
        '        BY</span>  clause if you need the values in alphabetical or numeric sorted order.' + 
        '      </p> </div> </div> ',
      children: []
    },
    {
      id: 'topics/impala_hints.xml',
      title: 'Optimizer Hints',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      The Impala SQL supports query hints, for fine-tuning the inner workings of queries.' + 
        '      Specify hints as a temporary workaround for expensive queries, where missing statistics or' + 
        '      other factors cause inefficient performance.' + 
        '    </p> <p>' + 
        '      Hints are most often used for the resource-intensive Impala queries, such as:' + 
        '    </p> <ul><li>' + 
        '        Join queries involving large tables, where intermediate result sets are transmitted' + 
        '        across the network to evaluate the join conditions.' + 
        '      </li> <li>' + 
        '        Inserting into partitioned Parquet tables, where many memory buffers could be allocated' + 
        '        on each host to hold intermediate results for each partition.' + 
        '      </li> </ul> <p id="../Impala/docs/topics/impala_hints.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
        '      In Impala 2.0 and higher, you can specify the hints inside comments' + 
        '      that use either the <span class="sql-docs-inline-code">/* */</span>  or <span class="sql-docs-inline-code">--</span>  notation. Specify a' + 
        '      <span class="sql-docs-inline-code">+</span>  symbol immediately before the hint name. Recently added hints are only' + 
        '      available using the <span class="sql-docs-inline-code">/* */</span>  and <span class="sql-docs-inline-code">--</span>  notation. For clarity,' + 
        '      the <span class="sql-docs-inline-code">/* */</span>  and <span class="sql-docs-inline-code">--</span>  styles are used in the syntax and' + 
        '      examples throughout this section. With the <span class="sql-docs-inline-code">/* */</span>  or <span class="sql-docs-inline-code">--</span> ' + 
        '      notation for hints, specify a <span class="sql-docs-inline-code">+</span>  symbol immediately before the first hint' + 
        '      name. Multiple hints can be specified separated by commas, for example <span class="sql-docs-inline-code">/*' + 
        '      +clustered,shuffle */</span> </p> <div class="sql-docs-code-block">SELECT STRAIGHT_JOIN <span class="sql-docs-variable">select_list</span> FROM<br/><span class="sql-docs-variable">join_left_hand_table</span> JOIN /* +BROADCAST|SHUFFLE */<br/><span class="sql-docs-variable">join_right_hand_table</span> <span class="sql-docs-variable">remainder_of_query</span> ;<br/><br/>SELECT <span class="sql-docs-variable">select_list</span> FROM<br/><span class="sql-docs-variable">join_left_hand_table</span> JOIN -- +BROADCAST|SHUFFLE<br/><span class="sql-docs-variable">join_right_hand_table</span> <span class="sql-docs-variable">remainder_of_query</span> ;<br/><br/>INSERT <span class="sql-docs-variable">insert_clauses</span> /* +SHUFFLE|NOSHUFFLE */<br/>  SELECT <span class="sql-docs-variable">remainder_of_query</span> ;<br/><br/>INSERT <span class="sql-docs-variable">insert_clauses</span> -- +SHUFFLE|NOSHUFFLE<br/>  SELECT <span class="sql-docs-variable">remainder_of_query</span> ;<br/><br/><span class="sql-docs-inline-code">INSERT /* +SHUFFLE|NOSHUFFLE */<br/>  <span class="sql-docs-variable">insert_clauses</span> SELECT <span class="sql-docs-variable">remainder_of_query</span> ;</span> <span class="sql-docs-inline-code">INSERT -- +SHUFFLE|NOSHUFFLE<br/>  <span class="sql-docs-variable">insert_clauses</span> SELECT <span class="sql-docs-variable">remainder_of_query</span> ;</span> <span class="sql-docs-inline-code">UPSERT /* +SHUFFLE|NOSHUFFLE */<br/>  <span class="sql-docs-variable">upsert_clauses</span> SELECT <span class="sql-docs-variable">remainder_of_query</span> ;</span> <span class="sql-docs-inline-code">UPSERT -- +SHUFFLE|NOSHUFFLE<br/>  <span class="sql-docs-variable">upsert_clauses</span> SELECT <span class="sql-docs-variable">remainder_of_query</span> ;</span> <span class="sql-docs-inline-code">SELECT <span class="sql-docs-variable">select_list</span> FROM<br/><span class="sql-docs-variable">table_ref</span> /* +{SCHEDULE_CACHE_LOCAL | SCHEDULE_DISK_LOCAL | SCHEDULE_REMOTE}<br/>    [,RANDOM_REPLICA] */<br/><span class="sql-docs-variable">remainder_of_query</span> ;</span> <span class="sql-docs-inline-code">INSERT <span class="sql-docs-variable">insert_clauses</span> -- +CLUSTERED<br/>  SELECT <span class="sql-docs-variable">remainder_of_query</span> ;<br/><br/>INSERT <span class="sql-docs-variable">insert_clauses</span> /* +CLUSTERED */<br/>  SELECT <span class="sql-docs-variable">remainder_of_query</span> ;</span> <span class="sql-docs-inline-code">INSERT -- +CLUSTERED<br/>  <span class="sql-docs-variable">insert_clauses</span> SELECT <span class="sql-docs-variable">remainder_of_query</span> ;<br/><br/>INSERT /* +CLUSTERED */<br/>  <span class="sql-docs-variable">insert_clauses</span> SELECT <span class="sql-docs-variable">remainder_of_query</span> ;<br/><br/>UPSERT -- +CLUSTERED<br/>  <span class="sql-docs-variable">upsert_clauses</span> SELECT <span class="sql-docs-variable">remainder_of_query</span> ;<br/><br/>UPSERT /* +CLUSTERED */<br/>  <span class="sql-docs-variable">upsert_clauses</span> SELECT <span class="sql-docs-variable">remainder_of_query</span> ;</span> CREATE /* +SHUFFLE|NOSHUFFLE */<br/>  <span class="sql-docs-variable">table_clauses</span> AS SELECT <span class="sql-docs-variable">remainder_of_query</span> ;<br/><br/>CREATE -- +SHUFFLE|NOSHUFFLE<br/>  <span class="sql-docs-variable">table_clauses</span> AS SELECT <span class="sql-docs-variable">remainder_of_query</span> ;<br/><br/>CREATE /* +CLUSTER|NOCLUSTER */<br/>  <span class="sql-docs-variable">table_clauses</span> AS SELECT <span class="sql-docs-variable">remainder_of_query</span> ;<br/><br/>CREATE -- +CLUSTER|NOCLUSTER<br/>  <span class="sql-docs-variable">table_clauses</span> AS SELECT <span class="sql-docs-variable">remainder_of_query</span> ;<br/></div><p>' + 
        '      The square bracket style hints are supported for backward compatibility, but the syntax is' + 
        '      deprecated and will be removed in a future release. For that reason, any newly added hints' + 
        '      are not available with the square bracket syntax.' + 
        '    </p> <div class="sql-docs-code-block">SELECT STRAIGHT_JOIN <span class="sql-docs-variable">select_list</span> FROM<br/><span class="sql-docs-variable">join_left_hand_table</span> JOIN [{ /* +BROADCAST */ | /* +SHUFFLE */ }]<br/><span class="sql-docs-variable">join_right_hand_table</span> <span class="sql-docs-variable">remainder_of_query</span> ;<br/><br/>INSERT <span class="sql-docs-variable">insert_clauses</span> [{ /* +SHUFFLE */ | /* +NOSHUFFLE */ }]<br/>  [<span class="sql-docs-inline-code">/* +CLUSTERED */</span> ]<br/>  SELECT <span class="sql-docs-variable">remainder_of_query</span> ;<br/><br/><span class="sql-docs-inline-code">UPSERT [{ /* +SHUFFLE */ | /* +NOSHUFFLE */ }]<br/>  [<span class="sql-docs-inline-code">/* +CLUSTERED */</span> ]<br/>  <span class="sql-docs-variable">upsert_clauses</span> SELECT <span class="sql-docs-variable">remainder_of_query</span> ;</span> </div><p id="../Impala/docs/topics/impala_hints.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
        '      With both forms of hint syntax, include the <span class="sql-docs-inline-code">STRAIGHT_JOIN</span>  keyword' + 
        '      immediately after the <span class="sql-docs-inline-code">SELECT</span>  and any <span class="sql-docs-inline-code">DISTINCT</span>  or' + 
        '      <span class="sql-docs-inline-code">ALL</span>  keywords to prevent Impala from reordering the tables in a way that' + 
        '      makes the join-related hints ineffective.' + 
        '    </p> <p id="../Impala/docs/topics/impala_hints.xml_straight_join_nested_queries">' + 
        '        The <span class="sql-docs-inline-code">STRAIGHT_JOIN</span>  hint affects the join order of table references in the query' + 
        '        block containing the hint. It does not affect the join order of nested queries, such as views,' + 
        '        inline views, or <span class="sql-docs-inline-code">WHERE</span> -clause subqueries. To use this hint for performance' + 
        '        tuning of complex queries, apply the hint to all query blocks that need a fixed join order.' + 
        '      </p> <p>' + 
        '      To reduce the need to use hints, run the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement against' + 
        '      all tables involved in joins, or used as the source tables for <span class="sql-docs-inline-code">INSERT ...' + 
        '      SELECT</span>  operations where the destination is a partitioned Parquet table. Do this' + 
        '      operation after loading data or making substantial changes to the data within each table.' + 
        '      Having up-to-date statistics helps Impala choose more efficient query plans without the' + 
        '      need for hinting. See <span>perf stats</span> for details and' + 
        '      examples.' + 
        '    </p> <p>' + 
        '      To see which join strategy is used for a particular query, examine the' + 
        '      <span class="sql-docs-inline-code">EXPLAIN</span>  output for that query. See' + 
        '      <span>perf explain</span> for details and examples.' + 
        '    </p> <p><b>Hints for join queries:</b> </p> <p>' + 
        '      The <span class="sql-docs-inline-code">/* +BROADCAST */</span>  and <span class="sql-docs-inline-code">/* +SHUFFLE */</span>  hints control' + 
        '      the execution strategy for join queries. Specify one of the following constructs' + 
        '      immediately after the <span class="sql-docs-inline-code">JOIN</span>  keyword in a query:' + 
        '    </p> <ul><li><span class="sql-docs-inline-code">/* +SHUFFLE */</span>  makes that join operation use the <q>partitioned</q> ' + 
        '        technique, which divides up corresponding rows from both tables using a hashing' + 
        '        algorithm, sending subsets of the rows to other nodes for processing. (The keyword' + 
        '        <span class="sql-docs-inline-code">SHUFFLE</span>  is used to indicate a <q>partitioned join</q> , because that' + 
        '        type of join is not related to <q>partitioned tables</q> .) Since the alternative' + 
        '        <q>broadcast</q>  join mechanism is the default when table and index statistics are' + 
        '        unavailable, you might use this hint for queries where broadcast joins are unsuitable;' + 
        '        typically, partitioned joins are more efficient for joins between large tables of' + 
        '        similar size.' + 
        '      </li> <li><span class="sql-docs-inline-code">/* +BROADCAST */</span>  makes that join operation use the <q>broadcast</q> ' + 
        '        technique that sends the entire contents of the right-hand table to all nodes involved' + 
        '        in processing the join. This is the default mode of operation when table and index' + 
        '        statistics are unavailable, so you would typically only need it if stale metadata caused' + 
        '        Impala to mistakenly choose a partitioned join operation. Typically, broadcast joins are' + 
        '        more efficient in cases where one table is much smaller than the other. (Put the smaller' + 
        '        table on the right side of the <span class="sql-docs-inline-code">JOIN</span>  operator.)' + 
        '      </li> </ul> <p><b>Hints for INSERT ... SELECT and CREATE TABLE AS SELECT (CTAS):</b> </p> <p id="../Impala/docs/topics/impala_hints.xml_insert_hints">' + 
        '      When inserting into partitioned tables, such as using the Parquet file format, you can' + 
        '      include a hint in the <span class="sql-docs-inline-code">INSERT</span>  or <span class="sql-docs-inline-code">CREATE TABLE AS' + 
        '      SELECT(CTAS)</span>  statements to fine-tune the overall performance of the operation and' + 
        '      its resource usage.' + 
        '    </p> <p>' + 
        '      You would only use hints if an <span class="sql-docs-inline-code">INSERT</span>  or <span class="sql-docs-inline-code">CTAS</span>  into a' + 
        '      partitioned table was failing due to capacity limits, or if such an operation was' + 
        '      succeeding but with less-than-optimal performance.' + 
        '    </p> <ul><li><span class="sql-docs-inline-code">/* +SHUFFLE */</span>  and <span class="sql-docs-inline-code">/* +NOSHUFFLE */</span>  Hints' + 
        '        <ul><li><span class="sql-docs-inline-code">/* +SHUFFLE */</span>  adds an exchange node, before writing the data,' + 
        '            which re-partitions the result of the <span class="sql-docs-inline-code">SELECT</span>  based on the' + 
        '            partitioning columns of the target table. With this hint, only one node writes to a' + 
        '            partition at a time, minimizing the global number of simultaneous writes and the' + 
        '            number of memory buffers holding data for individual partitions. This also reduces' + 
        '            fragmentation, resulting in fewer files. Thus it reduces overall resource usage of' + 
        '            the <span class="sql-docs-inline-code">INSERT</span>  or <span class="sql-docs-inline-code">CTAS</span>  operation and allows some' + 
        '            operations to succeed that otherwise would fail. It does involve some data transfer' + 
        '            between the nodes so that the data files for a particular partition are all written' + 
        '            on the same node.' + 
        '            <p>' + 
        '              Use <span class="sql-docs-inline-code">/* +SHUFFLE */</span>  in cases where an <span class="sql-docs-inline-code">INSERT</span>  or' + 
        '              <span class="sql-docs-inline-code">CTAS</span>  statement fails or runs inefficiently due to all nodes' + 
        '              attempting to write data for all partitions.' + 
        '            </p> <p>' + 
        '              If the table is unpartitioned or every partitioning expression is constant, then' + 
        '              <span class="sql-docs-inline-code">/* +SHUFFLE */</span>  will cause every write to happen on the' + 
        '              coordinator node.' + 
        '            </p> </li> <li><span class="sql-docs-inline-code">/* +NOSHUFFLE */</span>  does not add exchange node before inserting to' + 
        '            partitioned tables and disables re-partitioning. So the selected execution plan' + 
        '            might be faster overall, but might also produce a larger number of small data files' + 
        '            or exceed capacity limits, causing the <span class="sql-docs-inline-code">INSERT</span>  or' + 
        '            <span class="sql-docs-inline-code">CTAS</span>  operation to fail.' + 
        '            <p>' + 
        '              Impala automatically uses the <span class="sql-docs-inline-code">/* +SHUFFLE */</span>  method if any' + 
        '              partition key column in the source table, mentioned in the <span class="sql-docs-inline-code">SELECT</span> ' + 
        '              clause, does not have column statistics. In this case, use the <span class="sql-docs-inline-code">/*' + 
        '              +NOSHUFFLE */</span>  hint if you want to override this default behavior.' + 
        '            </p> </li> <li>' + 
        '            If column statistics are available for all partition key columns in the source table' + 
        '            mentioned in the <span class="sql-docs-inline-code">INSERT ... SELECT</span>  or <span class="sql-docs-inline-code">CTAS</span>  query,' + 
        '            Impala chooses whether to use the <span class="sql-docs-inline-code">/* +SHUFFLE */</span>  or <span class="sql-docs-inline-code">/*' + 
        '            +NOSHUFFLE */</span>  technique based on the estimated number of distinct values in' + 
        '            those columns and the number of nodes involved in the operation. In this case, you' + 
        '            might need the <span class="sql-docs-inline-code">/* +SHUFFLE */</span>  or the <span class="sql-docs-inline-code">/* +NOSHUFFLE' + 
        '            */</span>  hint to override the execution plan selected by Impala.' + 
        '          </li> </ul> </li> <li><span class="sql-docs-inline-code">/* +CLUSTERED */</span>  and <span class="sql-docs-inline-code">/* +NOCLUSTERED */</span>  Hints' + 
        '        <ul><li><span class="sql-docs-inline-code">/* +CLUSTERED */</span>  sorts data by the partition columns before' + 
        '            inserting to ensure that only one partition is written at a time per node. Use this' + 
        '            hint to reduce the number of files kept open and the number of buffers kept in' + 
        '            memory simultaneously. This technique is primarily useful for inserts into Parquet' + 
        '            tables, where the large block size requires substantial memory to buffer data for' + 
        '            multiple output files at once. This hint is available in' + 
        '            Impala 2.8 or higher.' + 
        '            <p>' + 
        '              Starting in Impala 3.0, <span class="sql-docs-inline-code">/* +CLUSTERED */</span> ' + 
        '              is the default behavior for HDFS tables.' + 
        '            </p> </li> <li><span class="sql-docs-inline-code">/* +NOCLUSTERED */</span>  does not sort by primary key before insert. This' + 
        '            hint is available in Impala 2.8 or higher.' + 
        '            <p>' + 
        '              Use this hint when inserting to Kudu tables.' + 
        '            </p> <p>' + 
        '              In the versions lower than Impala 3.0, <span class="sql-docs-inline-code">/*' + 
        '              +NOCLUSTERED */</span>  is the default in HDFS tables.' + 
        '            </p> </li> </ul> </li> </ul> <p>' + 
        '      Starting from Impala 2.9, <span class="sql-docs-inline-code">INSERT</span>  or' + 
        '      <span class="sql-docs-inline-code">UPSERT</span>  operations into Kudu tables automatically have an exchange and' + 
        '      sort node added to the plan that partitions and sorts the rows according to the' + 
        '      partitioning/primary key scheme of the target table (unless the number of rows to be' + 
        '      inserted is small enough to trigger single node execution). Use the<span class="sql-docs-inline-code"> /*' + 
        '      +NOCLUSTERED */</span>  and <span class="sql-docs-inline-code">/* +NOSHUFFLE */</span>  hints together to disable' + 
        '      partitioning and sorting before the rows are sent to Kudu.' + 
        '    </p> <p><b>Hints for scheduling of HDFS blocks:</b> </p> <p>' + 
        '      The hints <span class="sql-docs-inline-code">/* +SCHEDULE_CACHE_LOCAL */</span> , <span class="sql-docs-inline-code">/* +SCHEDULE_DISK_LOCAL' + 
        '      */</span> , and <span class="sql-docs-inline-code">/* +SCHEDULE_REMOTE */</span>  have the same effect as' + 
        '      specifying the <span class="sql-docs-inline-code">REPLICA_PREFERENCE</span>  query option with the respective option' + 
        '      settings of <span class="sql-docs-inline-code">CACHE_LOCAL</span> , <span class="sql-docs-inline-code">DISK_LOCAL</span> , or' + 
        '      <span class="sql-docs-inline-code">REMOTE</span> . The hint <span class="sql-docs-inline-code">/* +RANDOM_REPLICA */</span>  is the same as' + 
        '      enabling the <span class="sql-docs-inline-code">SCHEDULE_RANDOM_REPLICA</span>  query option.' + 
        '    </p> <p>' + 
        '      You can use these hints in combination by separating them with commas, for example,' + 
        '      <span class="sql-docs-inline-code">/* +SCHEDULE_CACHE_LOCAL,RANDOM_REPLICA */</span> . See' + 
        '       and  for' + 
        '      information about how these settings influence the way Impala processes HDFS data blocks.' + 
        '    </p> <p>' + 
        '      Specifying the replica preference as a query hint always overrides the query option' + 
        '      setting. Specifying either the <span class="sql-docs-inline-code">SCHEDULE_RANDOM_REPLICA</span>  query option or' + 
        '      the corresponding <span class="sql-docs-inline-code">RANDOM_REPLICA</span>  query hint enables the random' + 
        '      tie-breaking behavior when processing data blocks during the query.' + 
        '    </p> <p><b>Suggestions versus directives:</b> </p> <p>' + 
        '      In early Impala releases, hints were always obeyed and so acted more like directives. Once' + 
        '      Impala gained join order optimizations, sometimes join queries were automatically' + 
        '      reordered in a way that made a hint irrelevant. Therefore, the hints act more like' + 
        '      suggestions in Impala 1.2.2 and higher.' + 
        '    </p> <p>' + 
        '      To force Impala to follow the hinted execution mechanism for a join query, include the' + 
        '      <span class="sql-docs-inline-code">STRAIGHT_JOIN</span>  keyword in the <span class="sql-docs-inline-code">SELECT</span>  statement. See' + 
        '      <span>straight join</span> for details. When you use this' + 
        '      technique, Impala does not reorder the joined tables at all, so you must be careful to' + 
        '      arrange the join order to put the largest table (or subquery result set) first, then the' + 
        '      smallest, second smallest, third smallest, and so on. This ordering lets Impala do the' + 
        '      most I/O-intensive parts of the query using local reads on the DataNodes, and then reduce' + 
        '      the size of the intermediate result set as much as possible as each subsequent table or' + 
        '      subquery result set is joined.' + 
        '    </p> <p id="../Impala/docs/topics/impala_hints.xml_restrictions_blurb"><b>Restrictions:</b> </p> <p>' + 
        '      Queries that include subqueries in the <span class="sql-docs-inline-code">WHERE</span>  clause can be rewritten' + 
        '      internally as join queries. Currently, you cannot apply hints to the joins produced by' + 
        '      these types of queries.' + 
        '    </p> <p>' + 
        '      Because hints can prevent queries from taking advantage of new metadata or improvements in' + 
        '      query planning, use them only when required to work around performance issues, and be' + 
        '      prepared to remove them when they are no longer required, such as after a new Impala' + 
        '      release or bug fix.' + 
        '    </p> <p>' + 
        '      In particular, the <span class="sql-docs-inline-code">/* +BROADCAST */</span>  and <span class="sql-docs-inline-code">/* +SHUFFLE */</span> ' + 
        '      hints are expected to be needed much less frequently in Impala 1.2.2 and higher, because' + 
        '      the join order optimization feature in combination with the <span class="sql-docs-inline-code">COMPUTE STATS</span> ' + 
        '      statement now automatically choose join order and join mechanism without the need to' + 
        '      rewrite the query and add hints. See <span>perf joins</span> for' + 
        '      details.' + 
        '    </p> <p id="../Impala/docs/topics/impala_hints.xml_compatibility_blurb"><b>Compatibility:</b> </p> <p>' + 
        '      The hints embedded within <span class="sql-docs-inline-code">--</span>  comments are compatible with Hive queries.' + 
        '      The hints embedded within <span class="sql-docs-inline-code">/* */</span>  comments or <span class="sql-docs-inline-code">[ ]</span>  square' + 
        '      brackets are not recognized by or not compatible with Hive. For example, Hive raises an' + 
        '      error for Impala hints within <span class="sql-docs-inline-code">/* */</span>  comments because it does not' + 
        '      recognize the Impala hint names.' + 
        '    </p> <p id="../Impala/docs/topics/impala_hints.xml_view_blurb"><b>Considerations for views:</b> </p> <p>' + 
        '      If you use a hint in the query that defines a view, the hint is preserved when you query' + 
        '      the view. Impala internally rewrites all hints in views to use the <span class="sql-docs-inline-code">--</span> ' + 
        '      comment notation, so that Hive can query such views without errors due to unrecognized' + 
        '      hint names.' + 
        '    </p> <p id="../Impala/docs/topics/impala_hints.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
        '      For example, this query joins a large customer table with a small lookup table of less' + 
        '      than 100 rows. The right-hand table can be broadcast efficiently to all nodes involved in' + 
        '      the join. Thus, you would use the <span class="sql-docs-inline-code">/* +broadcast */</span>  hint to force a' + 
        '      broadcast join strategy:' + 
        '    </p> <div class="sql-docs-code-block">select straight_join customer.address, state_lookup.state_name<br/>  from customer join <b>/* +broadcast */</b> state_lookup<br/>  on customer.state_id = state_lookup.state_id;</div><p>' + 
        '      This query joins two large tables of unpredictable size. You might benchmark the query' + 
        '      with both kinds of hints and find that it is more efficient to transmit portions of each' + 
        '      table to other nodes for processing. Thus, you would use the <span class="sql-docs-inline-code">/* +shuffle' + 
        '      */</span>  hint to force a partitioned join strategy:' + 
        '    </p> <div class="sql-docs-code-block">select straight_join weather.wind_velocity, geospatial.altitude<br/>  from weather join <b>/* +shuffle */</b> geospatial<br/>  on weather.lat = geospatial.lat and weather.long = geospatial.long;</div><p>' + 
        '      For joins involving three or more tables, the hint applies to the tables on either side of' + 
        '      that specific <span class="sql-docs-inline-code">JOIN</span>  keyword. The <span class="sql-docs-inline-code">STRAIGHT_JOIN</span>  keyword' + 
        '      ensures that joins are processed in a predictable order from left to right. For example,' + 
        '      this query joins <span class="sql-docs-inline-code">t1</span>  and <span class="sql-docs-inline-code">t2</span>  using a partitioned join,' + 
        '      then joins that result set to <span class="sql-docs-inline-code">t3</span>  using a broadcast join:' + 
        '    </p> <div class="sql-docs-code-block">select straight_join t1.name, t2.id, t3.price<br/>  from t1 join <b>/* +shuffle */</b> t2 join <b>/* +broadcast */</b> t3<br/>  on t1.id = t2.id and t2.id = t3.id;</div><p id="../Impala/docs/topics/impala_hints.xml_related_info"><b>Related information:</b> </p> <p>' + 
        '      For more background information about join queries, see' + 
        '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_joins.xml#joins">Joins in Impala SELECT Statements</a>. For performance considerations, see' + 
        '      <span>perf joins</span>.' + 
        '    </p> </div> ',
      children: []
    }  ]  },
  {
    id: 'topics/impala_set.xml',
    title: 'SET Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Specifies values for query options that control the runtime behavior of other statements within the same' + 
      '      session.' + 
      '    </p> <p>' + 
      '      In Impala 2.5 and higher, <span class="sql-docs-inline-code">SET</span>  also defines user-specified substitution variables for' + 
      '      the <span class="sql-docs-inline-code">impala-shell</span>  interpreter. This feature uses the <span class="sql-docs-inline-code">SET</span>  command' + 
      '      built into <span class="sql-docs-inline-code">impala-shell</span>  instead of the SQL <span class="sql-docs-inline-code">SET</span>  statement.' + 
      '      Therefore the substitution mechanism only works with queries processed by <span class="sql-docs-inline-code">impala-shell</span> ,' + 
      '      not with queries submitted through JDBC or ODBC.' + 
      '    </p> <div class="sql-docs-note"><p>' + 
      '        In Impala 2.11 and higher, the output of the <span class="sql-docs-inline-code">SET</span> ' + 
      '        statement changes in some important ways:' + 
      '      </p> <ul><li><p>' + 
      '            The options are divided into groups: <span class="sql-docs-inline-code">Regular Query Options</span> ,' + 
      '            <span class="sql-docs-inline-code">Advanced Query Options</span> , <span class="sql-docs-inline-code">Development Query Options</span> , and' + 
      '            <span class="sql-docs-inline-code">Deprecated Query Options</span> .' + 
      '          </p> </li> <li><p>' + 
      '            The advanced options are intended for use in specific' + 
      '            kinds of performance tuning and debugging scenarios. The development options are' + 
      '            related to internal development of Impala or features that are not yet finalized;' + 
      '            these options might be changed or removed without notice.' + 
      '            The deprecated options are related to features that are removed or changed so that' + 
      '            the options no longer have any purpose; these options might be removed in future' + 
      '            versions.' + 
      '          </p> </li> <li><p>' + 
      '            By default, only the first two groups (regular and advanced) are' + 
      '            displayed by the <span class="sql-docs-inline-code">SET</span>  command. Use the syntax <span class="sql-docs-inline-code">SET ALL</span> ' + 
      '            to see all groups of options.' + 
      '          </p> </li> <li><p><span class="sql-docs-inline-code">impala-shell</span>  options and user-specified variables are always displayed' + 
      '            at the end of the list of query options, after all appropriate option groups.' + 
      '          </p> </li> <li><p>' + 
      '            When the <span class="sql-docs-inline-code">SET</span>  command is run through the JDBC or ODBC interfaces,' + 
      '            the result set has a new third column, <span class="sql-docs-inline-code">level</span> , indicating which' + 
      '            group each option belongs to. The same distinction of <span class="sql-docs-inline-code">SET</span> ' + 
      '            returning the regular and advanced options, and <span class="sql-docs-inline-code">SET ALL</span> ' + 
      '            returning all option groups, applies to JDBC and ODBC also.' + 
      '          </p> </li> </ul> </div> <p id="../Impala/docs/topics/impala_set.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">SET [<span class="sql-docs-variable">query_option</span> =<span class="sql-docs-variable">option_value</span> ]<br/><span class="sql-docs-inline-code">SET ALL</span> </div><p><span class="sql-docs-inline-code">SET</span>  and <span class="sql-docs-inline-code">SET ALL</span>  with no arguments return a' + 
      '      result set consisting of all the applicable query options and their current values.' + 
      '    </p> <p>' + 
      '      The query option name and any string argument values are case-insensitive.' + 
      '    </p> <p>' + 
      '      Each query option has a specific allowed notation for its arguments. Boolean options can be enabled and' + 
      '      disabled by assigning values of either <span class="sql-docs-inline-code">true</span>  and <span class="sql-docs-inline-code">false</span> , or' + 
      '      <span class="sql-docs-inline-code">1</span>  and <span class="sql-docs-inline-code">0</span> . Some numeric options accept a final character signifying the unit,' + 
      '      such as <span class="sql-docs-inline-code">2g</span>  for 2 gigabytes or <span class="sql-docs-inline-code">100m</span>  for 100 megabytes. See' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_query_options.xml#query_options">Query Options for the SET Statement</a> for the details of each query option.' + 
      '    </p> <p><b>Setting query options during impala-shell invocation:</b> </p> <p>' + 
      '      In Impala 2.11 and higher, you can use one or more command-line options' + 
      '      of the form <span class="sql-docs-inline-code">--query_option=<span class="sql-docs-variable">option</span> =<span class="sql-docs-variable">value</span> </span> ' + 
      '      when running the <span class="sql-docs-inline-code">impala-shell</span>  command. The corresponding query option settings' + 
      '      take effect for that <span class="sql-docs-inline-code">impala-shell</span>  session.' + 
      '    </p> <p><b>User-specified substitution variables:</b> </p> <p>' + 
      '      In Impala 2.5 and higher, you can specify your own names and string substitution values' + 
      '      within the <span class="sql-docs-inline-code">impala-shell</span>  interpreter. Once a substitution variable is set up,' + 
      '      its value is inserted into any SQL statement in that same <span class="sql-docs-inline-code">impala-shell</span>  session' + 
      '      that contains the notation <span class="sql-docs-inline-code">${var:<span class="sql-docs-variable">varname</span> }</span> .' + 
      '      Using <span class="sql-docs-inline-code">SET</span>  in an interactive <span class="sql-docs-inline-code">impala-shell</span>  session overrides' + 
      '      any value for that same variable passed in through the <span class="sql-docs-inline-code">--var=<span class="sql-docs-variable">varname</span> =<span class="sql-docs-variable">value</span> </span> ' + 
      '      command-line option.' + 
      '    </p> <p>' + 
      '      For example, to set up some default parameters for report queries, but then override those default' + 
      '      within an <span class="sql-docs-inline-code">impala-shell</span>  session, you might issue commands and statements such as' + 
      '      the following:' + 
      '    </p> <div class="sql-docs-code-block">-- Initial setup for this example.<br/>create table staging_table (s string);<br/>insert into staging_table values (\'foo\'), (\'bar\'), (\'bletch\');<br/><br/>create table production_table (s string);<br/>insert into production_table values (\'North America\'), (\'EMEA\'), (\'Asia\');<br/>quit;<br/><br/>-- Start impala-shell with user-specified substitution variables,<br/>-- run a query, then override the variables with SET and run the query again.<br/>$ impala-shell --var=table_name=staging_table --var=cutoff=2<br/>... <span class="sql-docs-variable">banner message</span> ...<br/>[localhost:21000] > select s from ${var:table_name} order by s limit ${var:cutoff};<br/>Query: select s from staging_table order by s limit 2<br/>+--------+<br/>| s      |<br/>+--------+<br/>| bar    |<br/>| bletch |<br/>+--------+<br/>Fetched 2 row(s) in 1.06s<br/><br/>[localhost:21000] > set var:table_name=production_table;<br/>Variable TABLE_NAME set to production_table<br/>[localhost:21000] > set var:cutoff=3;<br/>Variable CUTOFF set to 3<br/><br/>[localhost:21000] > select s from ${var:table_name} order by s limit ${var:cutoff};<br/>Query: select s from production_table order by s limit 3<br/>+---------------+<br/>| s             |<br/>+---------------+<br/>| Asia          |<br/>| EMEA          |<br/>| North America |<br/>+---------------+<br/></div><p>' + 
      '      The following example shows how <span class="sql-docs-inline-code">SET ALL</span>  with no parameters displays' + 
      '      all user-specified substitution variables, and how <span class="sql-docs-inline-code">UNSET</span>  removes' + 
      '      the substitution variable entirely:' + 
      '    </p> <div class="sql-docs-code-block">[localhost:21000] > set all;<br/>Query options (defaults shown in []):<br/>ABORT_ON_ERROR: [0]<br/>COMPRESSION_CODEC: []<br/>DISABLE_CODEGEN: [0]<br/>...<br/><br/>Advanced Query Options:<br/>APPX_COUNT_DISTINCT: [0]<br/>BUFFER_POOL_LIMIT: []<br/>DEFAULT_JOIN_DISTRIBUTION_MODE: [0]<br/>...<br/><br/>Development Query Options:<br/>BATCH_SIZE: [0]<br/>DEBUG_ACTION: []<br/>DECIMAL_V2: [0]<br/>...<br/><br/>Deprecated Query Options:<br/>ABORT_ON_DEFAULT_LIMIT_EXCEEDED: [0]<br/>ALLOW_UNSUPPORTED_FORMATS: [0]<br/>DEFAULT_ORDER_BY_LIMIT: [-1]<br/>...<br/><br/>Shell Options<br/>  LIVE_PROGRESS: False<br/>  LIVE_SUMMARY: False<br/><br/>Variables:<br/>  CUTOFF: 3<br/>  TABLE_NAME: staging_table<br/><br/>[localhost:21000] > unset var:cutoff;<br/>Unsetting variable CUTOFF<br/>[localhost:21000] > select s from ${var:table_name} order by s limit ${var:cutoff};<br/>Error: Unknown variable CUTOFF<br/></div><p>' + 
      '      See <span>impala shell running commands</span> for more examples of using the' + 
      '      <span class="sql-docs-inline-code">--var</span> , <span class="sql-docs-inline-code">SET</span> , and <span class="sql-docs-inline-code">${var:<span class="sql-docs-variable">varname</span> }</span> ' + 
      '      substitution technique in <span class="sql-docs-inline-code">impala-shell</span> .' + 
      '    </p> <p id="../Impala/docs/topics/impala_set.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p><span class="sql-docs-inline-code">MEM_LIMIT</span>  is probably the most commonly used query option. You can specify a high value to' + 
      '      allow a resource-intensive query to complete. For testing how queries would work on memory-constrained' + 
      '      systems, you might specify an artificially low value.' + 
      '    </p> <p id="../Impala/docs/topics/impala_set.xml_complex_types_blurb"><b>Complex type considerations:</b> </p> <p id="../Impala/docs/topics/impala_set.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      The following example sets some numeric and some Boolean query options to control usage of memory, disk' + 
      '      space, and timeout periods, then runs a query whose success could depend on the options in effect:' + 
      '    </p> <div class="sql-docs-code-block">set mem_limit=64g;<br/>set DISABLE_UNSAFE_SPILLS=true;<br/>set parquet_file_size=400m;<br/>set RESERVATION_REQUEST_TIMEOUT=900000;<br/>insert overwrite parquet_table select c1, c2, count(c3) from text_table group by c1, c2, c3;<br/></div><p id="../Impala/docs/topics/impala_set.xml_added_in_20"><b>Added in:</b> Impala 2.0.0</p> <p><span class="sql-docs-inline-code">SET</span>  has always been available as an <span class="sql-docs-inline-code">impala-shell</span>  command. Promoting it to' + 
      '      a SQL statement lets you use this feature in client applications through the JDBC and ODBC APIs.' + 
      '    </p> <p id="../Impala/docs/topics/impala_set.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_set.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> <p id="../Impala/docs/topics/impala_set.xml_related_info"><b>Related information:</b> </p> <p>' + 
      '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_query_options.xml#query_options">Query Options for the SET Statement</a> for the query options you can adjust using this' + 
      '      statement.' + 
      '    </p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_query_options.xml',
    title: 'Query Options for the SET Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      You can specify the following options using the <span class="sql-docs-inline-code">SET</span>  statement, and those settings affect all' + 
      '      queries issued from that session.' + 
      '    </p> <p>' + 
      '      Some query options are useful in day-to-day operations for improving usability, performance, or flexibility.' + 
      '    </p> <p>' + 
      '      Other query options control special-purpose aspects of Impala operation and are intended primarily for' + 
      '      advanced debugging or troubleshooting.' + 
      '    </p> <p>' + 
      '      Options with Boolean parameters can be set to 1 or <span class="sql-docs-inline-code">true</span>  to enable, or 0 or <span class="sql-docs-inline-code">false</span> ' + 
      '      to turn off.' + 
      '    </p> <div class="sql-docs-note"><p>' + 
      '        In Impala 2.0 and later, you can set query options directly through the JDBC and ODBC interfaces by using the' + 
      '        <span class="sql-docs-inline-code">SET</span>  statement. Formerly, <span class="sql-docs-inline-code">SET</span>  was only available as a command within the' + 
      '        <span class="sql-docs-inline-code">impala-shell</span>  interpreter.' + 
      '      </p> <p>' + 
      '        In Impala 2.11 and later, you can set query options for an <span class="sql-docs-inline-code">impala-shell</span>  session' + 
      '        by specifying one or more command-line arguments of the form' + 
      '        <span class="sql-docs-inline-code">--query_option=<span class="sql-docs-variable">option</span> =<span class="sql-docs-variable">value</span> </span> .' + 
      '        See  for details.' + 
      '      </p> </div> <p id="../Impala/docs/topics/impala_query_options.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_set.xml#set">SET Statement</a></p> </div> ',
    children: [
    {
      id: 'topics/impala_abort_on_default_limit_exceeded.xml',
      title: 'ABORT_ON_DEFAULT_LIMIT_EXCEEDED Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p id="../Impala/docs/topics/impala_abort_on_default_limit_exceeded.xml_obwl_query_options">' + 
        '        Now that the <span class="sql-docs-inline-code">ORDER BY</span>  clause no longer requires an accompanying <span class="sql-docs-inline-code">LIMIT</span> ' + 
        '        clause in Impala 1.4.0 and higher, this query option is deprecated and has no effect.' + 
        '      </p> <p id="../Impala/docs/topics/impala_abort_on_default_limit_exceeded.xml_type_boolean"><b>Type:</b>  Boolean; recognized values are 1 and 0, or <span class="sql-docs-inline-code">true</span>  and <span class="sql-docs-inline-code">false</span> ;' + 
        '        any other value interpreted as <span class="sql-docs-inline-code">false</span> </p> <p id="../Impala/docs/topics/impala_abort_on_default_limit_exceeded.xml_default_false_0"><b>Default:</b> <span class="sql-docs-inline-code">false</span>  (shown as 0 in output of <span class="sql-docs-inline-code">SET</span>  statement)' + 
        '      </p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_abort_on_error.xml',
      title: 'ABORT_ON_ERROR Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      When this option is enabled, Impala cancels a query immediately when any of the nodes encounters an error,' + 
        '      rather than continuing and possibly returning incomplete results. This option is disabled by default, to help' + 
        '      gather maximum diagnostic information when an error occurs, for example, whether the same problem occurred on' + 
        '      all nodes or only a single node. Currently, the errors that Impala can skip over involve data corruption,' + 
        '      such as a column that contains a string value when expected to contain an integer value.' + 
        '    </p> <p>' + 
        '      To control how much logging Impala does for non-fatal errors when <span class="sql-docs-inline-code">ABORT_ON_ERROR</span>  is turned' + 
        '      off, use the <span class="sql-docs-inline-code">MAX_ERRORS</span>  option.' + 
        '    </p> <p id="../Impala/docs/topics/impala_abort_on_error.xml_type_boolean"><b>Type:</b>  Boolean; recognized values are 1 and 0, or <span class="sql-docs-inline-code">true</span>  and <span class="sql-docs-inline-code">false</span> ;' + 
        '        any other value interpreted as <span class="sql-docs-inline-code">false</span> </p> <p id="../Impala/docs/topics/impala_abort_on_error.xml_default_false_0"><b>Default:</b> <span class="sql-docs-inline-code">false</span>  (shown as 0 in output of <span class="sql-docs-inline-code">SET</span>  statement)' + 
        '      </p> <p id="../Impala/docs/topics/impala_abort_on_error.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_max_errors.xml#max_errors">MAX_ERRORS Query Option</a>,' + 
        '      <span>logging</span></p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_allow_unsupported_formats.xml',
      title: 'ALLOW_UNSUPPORTED_FORMATS Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      An obsolete query option from early work on support for file formats. Do not use. Might be removed in the' + 
        '      future.' + 
        '    </p> <p id="../Impala/docs/topics/impala_allow_unsupported_formats.xml_type_boolean"><b>Type:</b>  Boolean; recognized values are 1 and 0, or <span class="sql-docs-inline-code">true</span>  and <span class="sql-docs-inline-code">false</span> ;' + 
        '        any other value interpreted as <span class="sql-docs-inline-code">false</span> </p> <p id="../Impala/docs/topics/impala_allow_unsupported_formats.xml_default_false_0"><b>Default:</b> <span class="sql-docs-inline-code">false</span>  (shown as 0 in output of <span class="sql-docs-inline-code">SET</span>  statement)' + 
        '      </p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_appx_count_distinct.xml',
      title: 'APPX_COUNT_DISTINCT Query Option (Impala 2.0 or higher only)',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Allows multiple <span class="sql-docs-inline-code">COUNT(DISTINCT)</span>  operations within a single query, by internally rewriting' + 
        '      each <span class="sql-docs-inline-code">COUNT(DISTINCT)</span>  to use the <span class="sql-docs-inline-code">NDV()</span>  function. The resulting count is' + 
        '      approximate rather than precise.' + 
        '    </p> <p id="../Impala/docs/topics/impala_appx_count_distinct.xml_type_boolean"><b>Type:</b>  Boolean; recognized values are 1 and 0, or <span class="sql-docs-inline-code">true</span>  and <span class="sql-docs-inline-code">false</span> ;' + 
        '        any other value interpreted as <span class="sql-docs-inline-code">false</span> </p> <p id="../Impala/docs/topics/impala_appx_count_distinct.xml_default_false_0"><b>Default:</b> <span class="sql-docs-inline-code">false</span>  (shown as 0 in output of <span class="sql-docs-inline-code">SET</span>  statement)' + 
        '      </p> <p id="../Impala/docs/topics/impala_appx_count_distinct.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
        '      The following examples show how the <span class="sql-docs-inline-code">APPX_COUNT_DISTINCT</span>  lets you work around the restriction' + 
        '      where a query can only evaluate <span class="sql-docs-inline-code">COUNT(DISTINCT <span class="sql-docs-variable">col_name</span> )</span>  for a single' + 
        '      column. By default, you can count the distinct values of one column or another, but not both in a single' + 
        '      query:' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > select count(distinct x) from int_t;<br/>+-------------------+<br/>| count(distinct x) |<br/>+-------------------+<br/>| 10                |<br/>+-------------------+<br/>[localhost:21000] > select count(distinct property) from int_t;<br/>+--------------------------+<br/>| count(distinct property) |<br/>+--------------------------+<br/>| 7                        |<br/>+--------------------------+<br/>[localhost:21000] > select count(distinct x), count(distinct property) from int_t;<br/>ERROR: AnalysisException: all DISTINCT aggregate functions need to have the same set of parameters<br/>as count(DISTINCT x); deviating function: count(DISTINCT property)<br/></div><p>' + 
        '      When you enable the <span class="sql-docs-inline-code">APPX_COUNT_DISTINCT</span>  query option, now the query with multiple' + 
        '      <span class="sql-docs-inline-code">COUNT(DISTINCT)</span>  works. The reason this behavior requires a query option is that each' + 
        '      <span class="sql-docs-inline-code">COUNT(DISTINCT)</span>  is rewritten internally to use the <span class="sql-docs-inline-code">NDV()</span>  function instead,' + 
        '      which provides an approximate result rather than a precise count.' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > set APPX_COUNT_DISTINCT=true;<br/>[localhost:21000] > select count(distinct x), count(distinct property) from int_t;<br/>+-------------------+--------------------------+<br/>| count(distinct x) | count(distinct property) |<br/>+-------------------+--------------------------+<br/>| 10                | 7                        |<br/>+-------------------+--------------------------+<br/></div><p id="../Impala/docs/topics/impala_appx_count_distinct.xml_related_info"><b>Related information:</b> </p> <p><span>count</span>,' + 
        '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_distinct.xml#distinct">DISTINCT Operator</a>,' + 
        '      <span>ndv</span></p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_batch_size.xml',
      title: 'BATCH_SIZE Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Number of rows evaluated at a time by SQL operators. Unspecified or a size of 0 uses a predefined default' + 
        '      size. Using a large number improves responsiveness, especially for scan operations, at the cost of a higher memory footprint.' + 
        '    </p> <p>' + 
        '      This option is primarily for testing during Impala development, or for use under the direction of the appropriate support channel.' + 
        '    </p> <p><b>Type:</b>  numeric' + 
        '    </p> <p><b>Default:</b>  0 (meaning the predefined default of 1024)' + 
        '    </p> <p><b>Range:</b>  0-65536. The value of 0 still has the special meaning of <q>use the default</q> ,' + 
        '      so the effective range is 1-65536. The maximum applies in Impala 2.11 and higher.' + 
        '    </p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_compression_codec.xml',
      title: 'COMPRESSION_CODEC Query Option (Impala 2.0 or higher only)',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      When Impala writes Parquet data files using the <span class="sql-docs-inline-code">INSERT</span>  statement, the underlying compression' + 
        '      is controlled by the <span class="sql-docs-inline-code">COMPRESSION_CODEC</span>  query option.' + 
        '    </p> <div class="sql-docs-note">' + 
        '      Prior to Impala 2.0, this option was named <span class="sql-docs-inline-code">PARQUET_COMPRESSION_CODEC</span> . In Impala 2.0 and' + 
        '      later, the <span class="sql-docs-inline-code">PARQUET_COMPRESSION_CODEC</span>  name is not recognized. Use the more general name' + 
        '      <span class="sql-docs-inline-code">COMPRESSION_CODEC</span>  for new code.' + 
        '    </div> <p id="../Impala/docs/topics/impala_compression_codec.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">SET COMPRESSION_CODEC=<span class="sql-docs-variable">codec_name</span> ;</div><p>' + 
        '      The allowed values for this query option are <span class="sql-docs-inline-code">SNAPPY</span>  (the default), <span class="sql-docs-inline-code">GZIP</span> ,' + 
        '      and <span class="sql-docs-inline-code">NONE</span> .' + 
        '    </p> <div class="sql-docs-note">' + 
        '      A Parquet file created with <span class="sql-docs-inline-code">COMPRESSION_CODEC=NONE</span>  is still typically smaller than the' + 
        '      original data, due to encoding schemes such as run-length encoding and dictionary encoding that are applied' + 
        '      separately from compression.' + 
        '    </div> <p>' + 
        '      The option value is not case-sensitive.' + 
        '    </p> <p>' + 
        '      If the option is set to an unrecognized value, all kinds of queries will fail due to the invalid option' + 
        '      setting, not just queries involving Parquet tables. (The value <span class="sql-docs-inline-code">BZIP2</span>  is also recognized, but' + 
        '      is not compatible with Parquet tables.)' + 
        '    </p> <p><b>Type:</b> <span class="sql-docs-inline-code">STRING</span> </p> <p><b>Default:</b> <span class="sql-docs-inline-code">SNAPPY</span> </p> <p id="../Impala/docs/topics/impala_compression_codec.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block">set compression_codec=gzip;<br/>insert into parquet_table_highly_compressed select * from t1;<br/><br/>set compression_codec=snappy;<br/>insert into parquet_table_compression_plus_fast_queries select * from t1;<br/><br/>set compression_codec=none;<br/>insert into parquet_table_no_compression select * from t1;<br/><br/>set compression_codec=foo;<br/>select * from t1 limit 5;<br/>ERROR: Invalid compression codec: foo<br/></div><p id="../Impala/docs/topics/impala_compression_codec.xml_related_info"><b>Related information:</b> </p> <p>' + 
        '      For information about how compressing Parquet data files affects query performance, see' + 
        '      <span>parquet compression</span>.' + 
        '    </p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_debug_action.xml',
      title: 'DEBUG_ACTION Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Introduces artificial problem conditions within queries. For internal debugging and troubleshooting.' + 
        '    </p> <p><b>Type:</b> <span class="sql-docs-inline-code">STRING</span> </p> <p><b>Default:</b>  empty string' + 
        '    </p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_default_order_by_limit.xml',
      title: 'DEFAULT_ORDER_BY_LIMIT Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p id="../Impala/docs/topics/impala_default_order_by_limit.xml_obwl_query_options">' + 
        '        Now that the <span class="sql-docs-inline-code">ORDER BY</span>  clause no longer requires an accompanying <span class="sql-docs-inline-code">LIMIT</span> ' + 
        '        clause in Impala 1.4.0 and higher, this query option is deprecated and has no effect.' + 
        '      </p> <p>' + 
        '      Prior to Impala 1.4.0, Impala queries that use the <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_order_by.xml#order_by">ORDER' + 
        '      BY</a></span>  clause must also include a' + 
        '      <span class="sql-docs-inline-code"><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_limit.xml#limit">LIMIT</a></span>  clause, to avoid accidentally producing' + 
        '      huge result sets that must be sorted. Sorting a huge result set is a memory-intensive operation. In Impala' + 
        '      1.4.0 and higher, Impala uses a temporary disk work area to perform the sort if that operation would' + 
        '      otherwise exceed the Impala memory limit on a particular host.' + 
        '    </p> <p><b>Type: numeric</b> </p> <p><b>Default:</b>  -1 (no default limit)' + 
        '    </p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_disable_codegen.xml',
      title: 'DISABLE_CODEGEN Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      This is a debug option, intended for diagnosing and working around issues that cause crashes. If a query' + 
        '      fails with an <q>illegal instruction</q>  or other hardware-specific message, try setting' + 
        '      <span class="sql-docs-inline-code">DISABLE_CODEGEN=true</span>  and running the query again. If the query succeeds only when the' + 
        '      <span class="sql-docs-inline-code">DISABLE_CODEGEN</span>  option is turned on, submit the problem to the appropriate support channel and include that' + 
        '      detail in the problem report. Do not otherwise run with this setting turned on, because it results in lower' + 
        '      overall performance.' + 
        '    </p> <p>' + 
        '      Because the code generation phase adds a small amount of overhead for each query, you might turn on the' + 
        '      <span class="sql-docs-inline-code">DISABLE_CODEGEN</span>  option to achieve maximum throughput when running many short-lived queries' + 
        '      against small tables.' + 
        '    </p> <p id="../Impala/docs/topics/impala_disable_codegen.xml_type_boolean"><b>Type:</b>  Boolean; recognized values are 1 and 0, or <span class="sql-docs-inline-code">true</span>  and <span class="sql-docs-inline-code">false</span> ;' + 
        '        any other value interpreted as <span class="sql-docs-inline-code">false</span> </p> <p id="../Impala/docs/topics/impala_disable_codegen.xml_default_false_0"><b>Default:</b> <span class="sql-docs-inline-code">false</span>  (shown as 0 in output of <span class="sql-docs-inline-code">SET</span>  statement)' + 
        '      </p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_disable_unsafe_spills.xml',
      title: 'DISABLE_UNSAFE_SPILLS Query Option (Impala 2.0 or higher only)',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Enable this option if you prefer to have queries fail when they exceed the Impala memory limit, rather than' + 
        '      write temporary data to disk.' + 
        '    </p> <p>' + 
        '      Queries that <q>spill</q>  to disk typically complete successfully, when in earlier Impala releases they would have failed.' + 
        '      However, queries with exorbitant memory requirements due to missing statistics or inefficient join clauses could' + 
        '      become so slow as a result that you would rather have them cancelled automatically and reduce the memory' + 
        '      usage through standard Impala tuning techniques.' + 
        '    </p> <p>' + 
        '      This option prevents only <q>unsafe</q>  spill operations, meaning that one or more tables are missing' + 
        '      statistics or the query does not include a hint to set the most efficient mechanism for a join or' + 
        '      <span class="sql-docs-inline-code">INSERT ... SELECT</span>  into a partitioned table. These are the tables most likely to result in' + 
        '      suboptimal execution plans that could cause unnecessary spilling. Therefore, leaving this option enabled is a' + 
        '      good way to find tables on which to run the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement.' + 
        '    </p> <p>' + 
        '      See <span>spill to disk</span> for information about the <q>spill to disk</q> ' + 
        '      feature for queries processing large result sets with joins, <span class="sql-docs-inline-code">ORDER BY</span> , <span class="sql-docs-inline-code">GROUP' + 
        '      BY</span> , <span class="sql-docs-inline-code">DISTINCT</span> , aggregation functions, or analytic functions.' + 
        '    </p> <p id="../Impala/docs/topics/impala_disable_unsafe_spills.xml_type_boolean"><b>Type:</b>  Boolean; recognized values are 1 and 0, or <span class="sql-docs-inline-code">true</span>  and <span class="sql-docs-inline-code">false</span> ;' + 
        '        any other value interpreted as <span class="sql-docs-inline-code">false</span> </p> <p id="../Impala/docs/topics/impala_disable_unsafe_spills.xml_default_false_0"><b>Default:</b> <span class="sql-docs-inline-code">false</span>  (shown as 0 in output of <span class="sql-docs-inline-code">SET</span>  statement)' + 
        '      </p> <p id="../Impala/docs/topics/impala_disable_unsafe_spills.xml_added_in_20"><b>Added in:</b> Impala 2.0.0</p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_exec_single_node_rows_threshold.xml',
      title: 'EXEC_SINGLE_NODE_ROWS_THRESHOLD Query Option (Impala 2.1 or higher only)',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      This setting controls the cutoff point (in terms of number of rows scanned) below which Impala treats a query' + 
        '      as a <q>small</q>  query, turning off optimizations such as parallel execution and native code generation. The' + 
        '      overhead for these optimizations is applicable for queries involving substantial amounts of data, but it' + 
        '      makes sense to skip them for queries involving tiny amounts of data. Reducing the overhead for small queries' + 
        '      allows Impala to complete them more quickly, keeping YARN resources, admission control slots, and so on' + 
        '      available for data-intensive queries.' + 
        '    </p> <p id="../Impala/docs/topics/impala_exec_single_node_rows_threshold.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">SET EXEC_SINGLE_NODE_ROWS_THRESHOLD=<span class="sql-docs-variable">number_of_rows</span> </div><p><b>Type:</b>  numeric' + 
        '    </p> <p><b>Default:</b>  100' + 
        '    </p> <p><b>Usage notes:</b>  Typically, you increase the default value to make this optimization apply to more queries.' + 
        '      If incorrect or corrupted table and column statistics cause Impala to apply this optimization' + 
        '      incorrectly to queries that actually involve substantial work, you might see the queries being slower as a' + 
        '      result of remote reads. In that case, recompute statistics with the <span class="sql-docs-inline-code">COMPUTE STATS</span> ' + 
        '      or <span class="sql-docs-inline-code">COMPUTE INCREMENTAL STATS</span>  statement. If there is a problem collecting accurate' + 
        '      statistics, you can turn this feature off by setting the value to -1.' + 
        '    </p> <p id="../Impala/docs/topics/impala_exec_single_node_rows_threshold.xml_internals_blurb"><b>Internal details:</b> </p> <p>' + 
        '      This setting applies to query fragments where the amount of data to scan can be accurately determined, either' + 
        '      through table and column statistics, or by the presence of a <span class="sql-docs-inline-code">LIMIT</span>  clause. If Impala cannot' + 
        '      accurately estimate the size of the input data, this setting does not apply.' + 
        '    </p> <p>' + 
        '      In Impala 2.3 and higher, where Impala supports the complex data types <span class="sql-docs-inline-code">STRUCT</span> ,' + 
        '      <span class="sql-docs-inline-code">ARRAY</span> , and <span class="sql-docs-inline-code">MAP</span> , if a query refers to any column of those types,' + 
        '      the small-query optimization is turned off for that query regardless of the' + 
        '      <span class="sql-docs-inline-code">EXEC_SINGLE_NODE_ROWS_THRESHOLD</span>  setting.' + 
        '    </p> <p>' + 
        '      For a query that is determined to be <q>small</q> , all work is performed on the coordinator node. This might' + 
        '      result in some I/O being performed by remote reads. The savings from not distributing the query work and not' + 
        '      generating native code are expected to outweigh any overhead from the remote reads.' + 
        '    </p> <p id="../Impala/docs/topics/impala_exec_single_node_rows_threshold.xml_added_in_210"><b>Added in:</b> Impala 2.10</p> <p id="../Impala/docs/topics/impala_exec_single_node_rows_threshold.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
        '      A common use case is to query just a few rows from a table to inspect typical data values. In this example,' + 
        '      Impala does not parallelize the query or perform native code generation because the result set is guaranteed' + 
        '      to be smaller than the threshold value from this query option:' + 
        '    </p> <div class="sql-docs-code-block">SET EXEC_SINGLE_NODE_ROWS_THRESHOLD=500;<br/>SELECT * FROM enormous_table LIMIT 300;<br/></div></div> ',
      children: []
    },
    {
      id: 'topics/impala_explain_level.xml',
      title: 'EXPLAIN_LEVEL Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Controls the amount of detail provided in the output of the <span class="sql-docs-inline-code">EXPLAIN</span>  statement. The basic' + 
        '      output can help you identify high-level performance issues such as scanning a higher volume of data or more' + 
        '      partitions than you expect. The higher levels of detail show how intermediate results flow between nodes and' + 
        '      how different SQL operations such as <span class="sql-docs-inline-code">ORDER BY</span> , <span class="sql-docs-inline-code">GROUP BY</span> , joins, and' + 
        '      <span class="sql-docs-inline-code">WHERE</span>  clauses are implemented within a distributed query.' + 
        '    </p> <p><b>Type:</b> <span class="sql-docs-inline-code">STRING</span>  or <span class="sql-docs-inline-code">INT</span> </p> <p><b>Default:</b> <span class="sql-docs-inline-code">1</span> </p> <p><b>Arguments:</b> </p> <p>' + 
        '      The allowed range of numeric values for this option is 0 to 3:' + 
        '    </p> <ul><li><span class="sql-docs-inline-code">0</span>  or <span class="sql-docs-inline-code">MINIMAL</span> : A barebones list, one line per operation. Primarily useful' + 
        '        for checking the join order in very long queries where the regular <span class="sql-docs-inline-code">EXPLAIN</span>  output is too' + 
        '        long to read easily.' + 
        '      </li> <li><span class="sql-docs-inline-code">1</span>  or <span class="sql-docs-inline-code">STANDARD</span> : The default level of detail, showing the logical way that' + 
        '        work is split up for the distributed query.' + 
        '      </li> <li><span class="sql-docs-inline-code">2</span>  or <span class="sql-docs-inline-code">EXTENDED</span> : Includes additional detail about how the query planner' + 
        '        uses statistics in its decision-making process, to understand how a query could be tuned by gathering' + 
        '        statistics, using query hints, adding or removing predicates, and so on.' + 
        '      </li> <li><span class="sql-docs-inline-code">3</span>  or <span class="sql-docs-inline-code">VERBOSE</span> : The maximum level of detail, showing how work is split up' + 
        '        within each node into <q>query fragments</q>  that are connected in a pipeline. This extra detail is' + 
        '        primarily useful for low-level performance testing and tuning within Impala itself, rather than for' + 
        '        rewriting the SQL code at the user level.' + 
        '      </li> </ul> <div class="sql-docs-note">' + 
        '      Prior to Impala 1.3, the allowed argument range for <span class="sql-docs-inline-code">EXPLAIN_LEVEL</span>  was 0 to 1: level 0 had' + 
        '      the mnemonic <span class="sql-docs-inline-code">NORMAL</span> , and level 1 was <span class="sql-docs-inline-code">VERBOSE</span> . In Impala 1.3 and higher,' + 
        '      <span class="sql-docs-inline-code">NORMAL</span>  is not a valid mnemonic value, and <span class="sql-docs-inline-code">VERBOSE</span>  still applies to the' + 
        '      highest level of detail but now corresponds to level 3. You might need to adjust the values if you have any' + 
        '      older <span class="sql-docs-inline-code">impala-shell</span>  script files that set the <span class="sql-docs-inline-code">EXPLAIN_LEVEL</span>  query option.' + 
        '    </div> <p>' + 
        '      Changing the value of this option controls the amount of detail in the output of the <span class="sql-docs-inline-code">EXPLAIN</span> ' + 
        '      statement. The extended information from level 2 or 3 is especially useful during performance tuning, when' + 
        '      you need to confirm whether the work for the query is distributed the way you expect, particularly for the' + 
        '      most resource-intensive operations such as join queries against large tables, queries against tables with' + 
        '      large numbers of partitions, and insert operations for Parquet tables. The extended information also helps to' + 
        '      check estimated resource usage when you use the admission control or resource management features explained' + 
        '      in <span>resource management</span>. See' + 
        '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_explain.xml#explain">EXPLAIN Statement</a> for the syntax of the <span class="sql-docs-inline-code">EXPLAIN</span>  statement, and' + 
        '      <span>perf explain</span> for details about how to use the extended information.' + 
        '    </p> <p id="../Impala/docs/topics/impala_explain_level.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
        '      As always, read the <span class="sql-docs-inline-code">EXPLAIN</span>  output from bottom to top. The lowest lines represent the' + 
        '      initial work of the query (scanning data files), the lines in the middle represent calculations done on each' + 
        '      node and how intermediate results are transmitted from one node to another, and the topmost lines represent' + 
        '      the final results being sent back to the coordinator node.' + 
        '    </p> <p>' + 
        '      The numbers in the left column are generated internally during the initial planning phase and do not' + 
        '      represent the actual order of operations, so it is not significant if they appear out of order in the' + 
        '      <span class="sql-docs-inline-code">EXPLAIN</span>  output.' + 
        '    </p> <p>' + 
        '      At all <span class="sql-docs-inline-code">EXPLAIN</span>  levels, the plan contains a warning if any tables in the query are missing' + 
        '      statistics. Use the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement to gather statistics for each table and suppress' + 
        '      this warning. See <span>perf stats</span> for details about how the statistics help' + 
        '      query performance.' + 
        '    </p> <p>' + 
        '      The <span class="sql-docs-inline-code">PROFILE</span>  command in <span class="sql-docs-inline-code">impala-shell</span>  always starts with an explain plan' + 
        '      showing full detail, the same as with <span class="sql-docs-inline-code">EXPLAIN_LEVEL=3</span> . <span class="sql-docs-inline-code">After the explain' + 
        '      plan comes the executive summary, the same output as produced by the <span class="sql-docs-inline-code">SUMMARY</span>  command in' + 
        '      <span class="sql-docs-inline-code">impala-shell</span> .</span> </p> <p id="../Impala/docs/topics/impala_explain_level.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
        '      These examples use a trivial, empty table to illustrate how the essential aspects of query planning are shown' + 
        '      in <span class="sql-docs-inline-code">EXPLAIN</span>  output:' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > create table t1 (x int, s string);<br/>[localhost:21000] > set explain_level=1;<br/>[localhost:21000] > explain select count(*) from t1;<br/>+------------------------------------------------------------------------+<br/>| Explain String                                                         |<br/>+------------------------------------------------------------------------+<br/>| Estimated Per-Host Requirements: Memory=10.00MB VCores=1               |<br/>| WARNING: The following tables are missing relevant table and/or column |<br/>|   statistics.                                                          |<br/>| explain_plan.t1                                                        |<br/>|                                                                        |<br/>| 03:AGGREGATE [MERGE FINALIZE]                                          |<br/>| |  output: sum(count(*))                                               |<br/>| |                                                                      |<br/>| 02:EXCHANGE [PARTITION=UNPARTITIONED]                                  |<br/>| |                                                                      |<br/>| 01:AGGREGATE                                                           |<br/>| |  output: count(*)                                                    |<br/>| |                                                                      |<br/>| 00:SCAN HDFS [explain_plan.t1]                                         |<br/>|    partitions=1/1 size=0B                                              |<br/>+------------------------------------------------------------------------+<br/>[localhost:21000] > explain select * from t1;<br/>+------------------------------------------------------------------------+<br/>| Explain String                                                         |<br/>+------------------------------------------------------------------------+<br/>| Estimated Per-Host Requirements: Memory=-9223372036854775808B VCores=0 |<br/>| WARNING: The following tables are missing relevant table and/or column |<br/>|   statistics.                                                          |<br/>| explain_plan.t1                                                        |<br/>|                                                                        |<br/>| 01:EXCHANGE [PARTITION=UNPARTITIONED]                                  |<br/>| |                                                                      |<br/>| 00:SCAN HDFS [explain_plan.t1]                                         |<br/>|    partitions=1/1 size=0B                                              |<br/>+------------------------------------------------------------------------+<br/>[localhost:21000] > set explain_level=2;<br/>[localhost:21000] > explain select * from t1;<br/>+------------------------------------------------------------------------+<br/>| Explain String                                                         |<br/>+------------------------------------------------------------------------+<br/>| Estimated Per-Host Requirements: Memory=-9223372036854775808B VCores=0 |<br/>| WARNING: The following tables are missing relevant table and/or column |<br/>|   statistics.                                                          |<br/>| explain_plan.t1                                                        |<br/>|                                                                        |<br/>| 01:EXCHANGE [PARTITION=UNPARTITIONED]                                  |<br/>| |  hosts=0 per-host-mem=unavailable                                    |<br/>| |  tuple-ids=0 row-size=19B cardinality=unavailable                    |<br/>| |                                                                      |<br/>| 00:SCAN HDFS [explain_plan.t1, PARTITION=RANDOM]                       |<br/>|    partitions=1/1 size=0B                                              |<br/>|    table stats: unavailable                                            |<br/>|    column stats: unavailable                                           |<br/>|    hosts=0 per-host-mem=0B                                             |<br/>|    tuple-ids=0 row-size=19B cardinality=unavailable                    |<br/>+------------------------------------------------------------------------+<br/>[localhost:21000] > set explain_level=3;<br/>[localhost:21000] > explain select * from t1;<br/>+------------------------------------------------------------------------+<br/>| Explain String                                                         |<br/>+------------------------------------------------------------------------+<br/>| Estimated Per-Host Requirements: Memory=-9223372036854775808B VCores=0 |<br/><b>| WARNING: The following tables are missing relevant table and/or column |</b> <b>|   statistics.                                                          |</b> <b>| explain_plan.t1                                                        |</b> |                                                                        |<br/>| F01:PLAN FRAGMENT [PARTITION=UNPARTITIONED]                            |<br/>|   01:EXCHANGE [PARTITION=UNPARTITIONED]                                |<br/>|      hosts=0 per-host-mem=unavailable                                  |<br/>|      tuple-ids=0 row-size=19B cardinality=unavailable                  |<br/>|                                                                        |<br/>| F00:PLAN FRAGMENT [PARTITION=RANDOM]                                   |<br/>|   DATASTREAM SINK [FRAGMENT=F01, EXCHANGE=01, PARTITION=UNPARTITIONED] |<br/>|   00:SCAN HDFS [explain_plan.t1, PARTITION=RANDOM]                     |<br/>|      partitions=1/1 size=0B                                            |<br/><b>|      table stats: unavailable                                          |</b> <b>|      column stats: unavailable                                         |</b> |      hosts=0 per-host-mem=0B                                           |<br/>|      tuple-ids=0 row-size=19B cardinality=unavailable                  |<br/>+------------------------------------------------------------------------+<br/></div><p>' + 
        '      As the warning message demonstrates, most of the information needed for Impala to do efficient query' + 
        '      planning, and for you to understand the performance characteristics of the query, requires running the' + 
        '      <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement for the table:' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > compute stats t1;<br/>+-----------------------------------------+<br/>| summary                                 |<br/>+-----------------------------------------+<br/>| Updated 1 partition(s) and 2 column(s). |<br/>+-----------------------------------------+<br/>[localhost:21000] > explain select * from t1;<br/>+------------------------------------------------------------------------+<br/>| Explain String                                                         |<br/>+------------------------------------------------------------------------+<br/>| Estimated Per-Host Requirements: Memory=-9223372036854775808B VCores=0 |<br/>|                                                                        |<br/>| F01:PLAN FRAGMENT [PARTITION=UNPARTITIONED]                            |<br/>|   01:EXCHANGE [PARTITION=UNPARTITIONED]                                |<br/>|      hosts=0 per-host-mem=unavailable                                  |<br/>|      tuple-ids=0 row-size=20B cardinality=0                            |<br/>|                                                                        |<br/>| F00:PLAN FRAGMENT [PARTITION=RANDOM]                                   |<br/>|   DATASTREAM SINK [FRAGMENT=F01, EXCHANGE=01, PARTITION=UNPARTITIONED] |<br/>|   00:SCAN HDFS [explain_plan.t1, PARTITION=RANDOM]                     |<br/>|      partitions=1/1 size=0B                                            |<br/><b>|      table stats: 0 rows total                                         |</b> <b>|      column stats: all                                                 |</b> |      hosts=0 per-host-mem=0B                                           |<br/>|      tuple-ids=0 row-size=20B cardinality=0                            |<br/>+------------------------------------------------------------------------+<br/></div><p>' + 
        '      Joins and other complicated, multi-part queries are the ones where you most commonly need to examine the' + 
        '      <span class="sql-docs-inline-code">EXPLAIN</span>  output and customize the amount of detail in the output. This example shows the' + 
        '      default <span class="sql-docs-inline-code">EXPLAIN</span>  output for a three-way join query, then the equivalent output with a' + 
        '      <span class="sql-docs-inline-code">[SHUFFLE]</span>  hint to change the join mechanism between the first two tables from a broadcast' + 
        '      join to a shuffle join.' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > set explain_level=1;<br/>[localhost:21000] > explain select one.*, two.*, three.* from t1 one, t1 two, t1 three where one.x = two.x and two.x = three.x;<br/>+---------------------------------------------------------+<br/>| Explain String                                          |<br/>+---------------------------------------------------------+<br/>| Estimated Per-Host Requirements: Memory=4.00GB VCores=3 |<br/>|                                                         |<br/>| 07:EXCHANGE [PARTITION=UNPARTITIONED]                   |<br/>| |                                                       |<br/><b>| 04:HASH JOIN [INNER JOIN, BROADCAST]                    |</b> | |  hash predicates: two.x = three.x                     |<br/>| |                                                       |<br/><b>| |--06:EXCHANGE [BROADCAST]                              |</b> | |  |                                                    |<br/>| |  02:SCAN HDFS [explain_plan.t1 three]                 |<br/>| |     partitions=1/1 size=0B                            |<br/>| |                                                       |<br/><b>| 03:HASH JOIN [INNER JOIN, BROADCAST]                    |</b> | |  hash predicates: one.x = two.x                       |<br/>| |                                                       |<br/><b>| |--05:EXCHANGE [BROADCAST]                              |</b> | |  |                                                    |<br/>| |  01:SCAN HDFS [explain_plan.t1 two]                   |<br/>| |     partitions=1/1 size=0B                            |<br/>| |                                                       |<br/>| 00:SCAN HDFS [explain_plan.t1 one]                      |<br/>|    partitions=1/1 size=0B                               |<br/>+---------------------------------------------------------+<br/>[localhost:21000] > explain select one.*, two.*, three.*<br/>                  > from t1 one join [shuffle] t1 two join t1 three<br/>                  > where one.x = two.x and two.x = three.x;<br/>+---------------------------------------------------------+<br/>| Explain String                                          |<br/>+---------------------------------------------------------+<br/>| Estimated Per-Host Requirements: Memory=4.00GB VCores=3 |<br/>|                                                         |<br/>| 08:EXCHANGE [PARTITION=UNPARTITIONED]                   |<br/>| |                                                       |<br/><b>| 04:HASH JOIN [INNER JOIN, BROADCAST]                    |</b> | |  hash predicates: two.x = three.x                     |<br/>| |                                                       |<br/><b>| |--07:EXCHANGE [BROADCAST]                              |</b> | |  |                                                    |<br/>| |  02:SCAN HDFS [explain_plan.t1 three]                 |<br/>| |     partitions=1/1 size=0B                            |<br/>| |                                                       |<br/><b>| 03:HASH JOIN [INNER JOIN, PARTITIONED]                  |</b> | |  hash predicates: one.x = two.x                       |<br/>| |                                                       |<br/><b>| |--06:EXCHANGE [PARTITION=HASH(two.x)]                  |</b> | |  |                                                    |<br/>| |  01:SCAN HDFS [explain_plan.t1 two]                   |<br/>| |     partitions=1/1 size=0B                            |<br/>| |                                                       |<br/><b>| 05:EXCHANGE [PARTITION=HASH(one.x)]                     |</b> | |                                                       |<br/>| 00:SCAN HDFS [explain_plan.t1 one]                      |<br/>|    partitions=1/1 size=0B                               |<br/>+---------------------------------------------------------+<br/></div><p>' + 
        '      For a join involving many different tables, the default <span class="sql-docs-inline-code">EXPLAIN</span>  output might stretch over' + 
        '      several pages, and the only details you care about might be the join order and the mechanism (broadcast or' + 
        '      shuffle) for joining each pair of tables. In that case, you might set <span class="sql-docs-inline-code">EXPLAIN_LEVEL</span>  to its' + 
        '      lowest value of 0, to focus on just the join order and join mechanism for each stage. The following example' + 
        '      shows how the rows from the first and second joined tables are hashed and divided among the nodes of the' + 
        '      cluster for further filtering; then the entire contents of the third table are broadcast to all nodes for the' + 
        '      final stage of join processing.' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > set explain_level=0;<br/>[localhost:21000] > explain select one.*, two.*, three.*<br/>                  > from t1 one join [shuffle] t1 two join t1 three<br/>                  > where one.x = two.x and two.x = three.x;<br/>+---------------------------------------------------------+<br/>| Explain String                                          |<br/>+---------------------------------------------------------+<br/>| Estimated Per-Host Requirements: Memory=4.00GB VCores=3 |<br/>|                                                         |<br/>| 08:EXCHANGE [PARTITION=UNPARTITIONED]                   |<br/><b>| 04:HASH JOIN [INNER JOIN, BROADCAST]                    |</b> <b>| |--07:EXCHANGE [BROADCAST]                              |</b> | |  02:SCAN HDFS [explain_plan.t1 three]                 |<br/><b>| 03:HASH JOIN [INNER JOIN, PARTITIONED]                  |</b> <b>| |--06:EXCHANGE [PARTITION=HASH(two.x)]                  |</b> | |  01:SCAN HDFS [explain_plan.t1 two]                   |<br/><b>| 05:EXCHANGE [PARTITION=HASH(one.x)]                     |</b> | 00:SCAN HDFS [explain_plan.t1 one]                      |<br/>+---------------------------------------------------------+<br/></div></div> ',
      children: []
    },
    {
      id: 'topics/impala_hbase_cache_blocks.xml',
      title: 'HBASE_CACHE_BLOCKS Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Setting this option is equivalent to calling the' + 
        '        <span class="sql-docs-inline-code">setCacheBlocks</span>  method of the class <a target="_blank" href="http://hbase.apache.org/apidocs/org/apache/hadoop/hbase/client/Scan.html">org.apache.hadoop.hbase.client.Scan</a>, in an HBase Java' + 
        '      application. Helps to control the memory pressure on the HBase' + 
        '      RegionServer, in conjunction with the <span class="sql-docs-inline-code">HBASE_CACHING</span>  query' + 
        '      option. </p> <p id="../Impala/docs/topics/impala_hbase_cache_blocks.xml_type_boolean"><b>Type:</b>  Boolean; recognized values are 1 and 0, or <span class="sql-docs-inline-code">true</span>  and <span class="sql-docs-inline-code">false</span> ;' + 
        '        any other value interpreted as <span class="sql-docs-inline-code">false</span> </p> <p id="../Impala/docs/topics/impala_hbase_cache_blocks.xml_default_false_0"><b>Default:</b> <span class="sql-docs-inline-code">false</span>  (shown as 0 in output of <span class="sql-docs-inline-code">SET</span>  statement)' + 
        '      </p> <p id="../Impala/docs/topics/impala_hbase_cache_blocks.xml_related_info"><b>Related information:</b> </p> <p><span>impala hbase</span>,' + 
        '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_hbase_caching.xml#hbase_caching">HBASE_CACHING Query Option</a></p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_hbase_caching.xml',
      title: 'HBASE_CACHING Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Setting this option is equivalent to calling the' + 
        '        <span class="sql-docs-inline-code">setCaching</span>  method of the class <a target="_blank" href="http://hbase.apache.org/apidocs/org/apache/hadoop/hbase/client/Scan.html">org.apache.hadoop.hbase.client.Scan</a>, in an HBase Java' + 
        '      application. Helps to control the memory pressure on the HBase' + 
        '      RegionServer, in conjunction with the <span class="sql-docs-inline-code">HBASE_CACHE_BLOCKS</span> ' + 
        '      query option. </p> <p><b>Type:</b> <span class="sql-docs-inline-code">BOOLEAN</span> </p> <p><b>Default:</b>  0' + 
        '    </p> <p id="../Impala/docs/topics/impala_hbase_caching.xml_related_info"><b>Related information:</b> </p> <p><span>impala hbase</span>,' + 
        '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_hbase_cache_blocks.xml#hbase_cache_blocks">HBASE_CACHE_BLOCKS Query Option</a></p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_live_progress.xml',
      title: 'LIVE_PROGRESS Query Option (Impala 2.3 or higher only)',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      For queries submitted through the <span class="sql-docs-inline-code">impala-shell</span>  command,' + 
        '      displays an interactive progress bar showing roughly what percentage of' + 
        '      processing has been completed. When the query finishes, the progress bar is erased' + 
        '      from the <span class="sql-docs-inline-code">impala-shell</span>  console output.' + 
        '    </p> <p></p> <p id="../Impala/docs/topics/impala_live_progress.xml_type_boolean"><b>Type:</b>  Boolean; recognized values are 1 and 0, or <span class="sql-docs-inline-code">true</span>  and <span class="sql-docs-inline-code">false</span> ;' + 
        '        any other value interpreted as <span class="sql-docs-inline-code">false</span> </p> <p id="../Impala/docs/topics/impala_live_progress.xml_default_false_0"><b>Default:</b> <span class="sql-docs-inline-code">false</span>  (shown as 0 in output of <span class="sql-docs-inline-code">SET</span>  statement)' + 
        '      </p> <p id="../Impala/docs/topics/impala_live_progress.xml_command_line_blurb"><b>Command-line equivalent:</b> </p> <p>' + 
        '      You can enable this query option within <span class="sql-docs-inline-code">impala-shell</span> ' + 
        '      by starting the shell with the <span class="sql-docs-inline-code">--live_progress</span> ' + 
        '      command-line option.' + 
        '      You can still turn this setting off and on again within the shell through the' + 
        '      <span class="sql-docs-inline-code">SET</span>  command.' + 
        '    </p> <p id="../Impala/docs/topics/impala_live_progress.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p id="../Impala/docs/topics/impala_live_progress.xml_live_reporting_details">' + 
        '        The output from this query option is printed to standard error. The output is only displayed in interactive mode,' + 
        '        that is, not when the <span class="sql-docs-inline-code">-q</span>  or <span class="sql-docs-inline-code">-f</span>  options are used.' + 
        '      </p> <p>' + 
        '      For a more detailed way of tracking the progress of an interactive query through' + 
        '      all phases of processing, see <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_live_summary.xml#live_summary">LIVE_SUMMARY Query Option (Impala 2.3 or higher only)</a>.' + 
        '    </p> <p id="../Impala/docs/topics/impala_live_progress.xml_restrictions_blurb"><b>Restrictions:</b> </p> <p>' + 
        '      Because the percentage complete figure is calculated using the number of' + 
        '      issued and completed <q>scan ranges</q> , which occur while reading the table' + 
        '      data, the progress bar might reach 100% before the query is entirely finished.' + 
        '      For example, the query might do work to perform aggregations after all the' + 
        '      table data has been read. If many of your queries fall into this category,' + 
        '      consider using the <span class="sql-docs-inline-code">LIVE_SUMMARY</span>  option instead for' + 
        '      more granular progress reporting.' + 
        '    </p> <p id="../Impala/docs/topics/impala_live_progress.xml_impala_shell_progress_reports_compute_stats_caveat">' + 
        '        The <span class="sql-docs-inline-code">LIVE_PROGRESS</span>  and <span class="sql-docs-inline-code">LIVE_SUMMARY</span>  query options' + 
        '        currently do not produce any output during <span class="sql-docs-inline-code">COMPUTE STATS</span>  operations.' + 
        '      </p> <p id="../Impala/docs/topics/impala_live_progress.xml_impala_shell_progress_reports_shell_only_caveat">' + 
        '        Because the <span class="sql-docs-inline-code">LIVE_PROGRESS</span>  and <span class="sql-docs-inline-code">LIVE_SUMMARY</span>  query options' + 
        '        are available only within the <span class="sql-docs-inline-code">impala-shell</span>  interpreter:' + 
        '        <ul><li><p>' + 
        '              You cannot change these query options through the SQL <span class="sql-docs-inline-code">SET</span> ' + 
        '              statement using the JDBC or ODBC interfaces. The <span class="sql-docs-inline-code">SET</span> ' + 
        '              command in <span class="sql-docs-inline-code">impala-shell</span>  recognizes these names as' + 
        '              shell-only options.' + 
        '            </p> </li> <li><p>' + 
        '              Be careful when using <span class="sql-docs-inline-code">impala-shell</span>  on a pre-Impala 2.3' + 
        '              system to connect to a system running Impala 2.3 or higher.' + 
        '              The older <span class="sql-docs-inline-code">impala-shell</span>  does not recognize these' + 
        '              query option names. Upgrade <span class="sql-docs-inline-code">impala-shell</span>  on the' + 
        '              systems where you intend to use these query options.' + 
        '            </p> </li> <li><p>' + 
        '              Likewise, the <span class="sql-docs-inline-code">impala-shell</span>  command relies on' + 
        '              some information only available in Impala 2.3 and higher' + 
        '              to prepare live progress reports and query summaries. The' + 
        '              <span class="sql-docs-inline-code">LIVE_PROGRESS</span>  and <span class="sql-docs-inline-code">LIVE_SUMMARY</span> ' + 
        '              query options have no effect when <span class="sql-docs-inline-code">impala-shell</span>  connects' + 
        '              to a cluster running an older version of Impala.' + 
        '            </p> </li> </ul> </p> <p id="../Impala/docs/topics/impala_live_progress.xml_added_in_230"><b>Added in:</b> Impala 2.3.0</p> <p id="../Impala/docs/topics/impala_live_progress.xml_example_blurb"><b>Examples:</b> </p> <div class="sql-docs-code-block"></div><p id="../Impala/docs/topics/impala_live_progress.xml_live_progress_live_summary_asciinema">' + 
        '        To see how the <span class="sql-docs-inline-code">LIVE_PROGRESS</span>  and <span class="sql-docs-inline-code">LIVE_SUMMARY</span>  query options' + 
        '        work in real time, see <a target="_blank" href="https://asciinema.org/a/1rv7qippo0fe7h5k1b6k4nexk">this animated demo</a>.' + 
        '      </p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_live_summary.xml',
      title: 'LIVE_SUMMARY Query Option (Impala 2.3 or higher only)',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      For queries submitted through the <span class="sql-docs-inline-code">impala-shell</span>  command,' + 
        '      displays the same output as the <span class="sql-docs-inline-code">SUMMARY</span>  command,' + 
        '      with the measurements updated in real time as the query progresses.' + 
        '      When the query finishes, the final <span class="sql-docs-inline-code">SUMMARY</span>  output remains' + 
        '      visible in the <span class="sql-docs-inline-code">impala-shell</span>  console output.' + 
        '    </p> <p></p> <p id="../Impala/docs/topics/impala_live_summary.xml_type_boolean"><b>Type:</b>  Boolean; recognized values are 1 and 0, or <span class="sql-docs-inline-code">true</span>  and <span class="sql-docs-inline-code">false</span> ;' + 
        '        any other value interpreted as <span class="sql-docs-inline-code">false</span> </p> <p id="../Impala/docs/topics/impala_live_summary.xml_default_false_0"><b>Default:</b> <span class="sql-docs-inline-code">false</span>  (shown as 0 in output of <span class="sql-docs-inline-code">SET</span>  statement)' + 
        '      </p> <p id="../Impala/docs/topics/impala_live_summary.xml_command_line_blurb"><b>Command-line equivalent:</b> </p> <p>' + 
        '      You can enable this query option within <span class="sql-docs-inline-code">impala-shell</span> ' + 
        '      by starting the shell with the <span class="sql-docs-inline-code">--live_summary</span> ' + 
        '      command-line option.' + 
        '      You can still turn this setting off and on again within the shell through the' + 
        '      <span class="sql-docs-inline-code">SET</span>  command.' + 
        '    </p> <p id="../Impala/docs/topics/impala_live_summary.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
        '      The live summary output can be useful for evaluating long-running queries,' + 
        '      to evaluate which phase of execution takes up the most time, or if some hosts' + 
        '      take much longer than others for certain operations, dragging overall performance down.' + 
        '      By making the information available in real time, this feature lets you decide what' + 
        '      action to take even before you cancel a query that is taking much longer than normal.' + 
        '    </p> <p>' + 
        '      For example, you might see the HDFS scan phase taking a long time, and therefore revisit' + 
        '      performance-related aspects of your schema design such as constructing a partitioned table,' + 
        '      switching to the Parquet file format, running the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement' + 
        '      for the table, and so on.' + 
        '      Or you might see a wide variation between the average and maximum times for all hosts to' + 
        '      perform some phase of the query, and therefore investigate if one particular host' + 
        '      needed more memory or was experiencing a network problem.' + 
        '    </p> <p id="../Impala/docs/topics/impala_live_summary.xml_live_reporting_details">' + 
        '        The output from this query option is printed to standard error. The output is only displayed in interactive mode,' + 
        '        that is, not when the <span class="sql-docs-inline-code">-q</span>  or <span class="sql-docs-inline-code">-f</span>  options are used.' + 
        '      </p> <p>' + 
        '      For a simple and concise way of tracking the progress of an interactive query, see' + 
        '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_live_progress.xml#live_progress">LIVE_PROGRESS Query Option (Impala 2.3 or higher only)</a>.' + 
        '    </p> <p id="../Impala/docs/topics/impala_live_summary.xml_restrictions_blurb"><b>Restrictions:</b> </p> <p id="../Impala/docs/topics/impala_live_summary.xml_impala_shell_progress_reports_compute_stats_caveat">' + 
        '        The <span class="sql-docs-inline-code">LIVE_PROGRESS</span>  and <span class="sql-docs-inline-code">LIVE_SUMMARY</span>  query options' + 
        '        currently do not produce any output during <span class="sql-docs-inline-code">COMPUTE STATS</span>  operations.' + 
        '      </p> <p id="../Impala/docs/topics/impala_live_summary.xml_impala_shell_progress_reports_shell_only_caveat">' + 
        '        Because the <span class="sql-docs-inline-code">LIVE_PROGRESS</span>  and <span class="sql-docs-inline-code">LIVE_SUMMARY</span>  query options' + 
        '        are available only within the <span class="sql-docs-inline-code">impala-shell</span>  interpreter:' + 
        '        <ul><li><p>' + 
        '              You cannot change these query options through the SQL <span class="sql-docs-inline-code">SET</span> ' + 
        '              statement using the JDBC or ODBC interfaces. The <span class="sql-docs-inline-code">SET</span> ' + 
        '              command in <span class="sql-docs-inline-code">impala-shell</span>  recognizes these names as' + 
        '              shell-only options.' + 
        '            </p> </li> <li><p>' + 
        '              Be careful when using <span class="sql-docs-inline-code">impala-shell</span>  on a pre-Impala 2.3' + 
        '              system to connect to a system running Impala 2.3 or higher.' + 
        '              The older <span class="sql-docs-inline-code">impala-shell</span>  does not recognize these' + 
        '              query option names. Upgrade <span class="sql-docs-inline-code">impala-shell</span>  on the' + 
        '              systems where you intend to use these query options.' + 
        '            </p> </li> <li><p>' + 
        '              Likewise, the <span class="sql-docs-inline-code">impala-shell</span>  command relies on' + 
        '              some information only available in Impala 2.3 and higher' + 
        '              to prepare live progress reports and query summaries. The' + 
        '              <span class="sql-docs-inline-code">LIVE_PROGRESS</span>  and <span class="sql-docs-inline-code">LIVE_SUMMARY</span> ' + 
        '              query options have no effect when <span class="sql-docs-inline-code">impala-shell</span>  connects' + 
        '              to a cluster running an older version of Impala.' + 
        '            </p> </li> </ul> </p> <p id="../Impala/docs/topics/impala_live_summary.xml_added_in_230"><b>Added in:</b> Impala 2.3.0</p> <p id="../Impala/docs/topics/impala_live_summary.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
        '      The following example shows a series of <span class="sql-docs-inline-code">LIVE_SUMMARY</span>  reports that' + 
        '      are displayed during the course of a query, showing how the numbers increase to' + 
        '      show the progress of different phases of the distributed query. When you do the same' + 
        '      in <span class="sql-docs-inline-code">impala-shell</span> , only a single report is displayed at any one time,' + 
        '      with each update overwriting the previous numbers.' + 
        '    </p> <div class="sql-docs-code-block"></div><div class="sql-docs-code-block"></div><p id="../Impala/docs/topics/impala_live_summary.xml_live_progress_live_summary_asciinema">' + 
        '        To see how the <span class="sql-docs-inline-code">LIVE_PROGRESS</span>  and <span class="sql-docs-inline-code">LIVE_SUMMARY</span>  query options' + 
        '        work in real time, see <a target="_blank" href="https://asciinema.org/a/1rv7qippo0fe7h5k1b6k4nexk">this animated demo</a>.' + 
        '      </p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_max_errors.xml',
      title: 'MAX_ERRORS Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Maximum number of non-fatal errors for any particular query that are recorded in the Impala log file. For' + 
        '      example, if a billion-row table had a non-fatal data error in every row, you could diagnose the problem' + 
        '      without all billion errors being logged. Unspecified or 0 indicates the built-in default value of 1000.' + 
        '    </p> <p>' + 
        '      This option only controls how many errors are reported. To specify whether Impala continues or halts when it' + 
        '      encounters such errors, use the <span class="sql-docs-inline-code">ABORT_ON_ERROR</span>  option.' + 
        '    </p> <p><b>Type:</b>  numeric' + 
        '    </p> <p><b>Default:</b>  0 (meaning 1000 errors)' + 
        '    </p> <p id="../Impala/docs/topics/impala_max_errors.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_abort_on_error.xml#abort_on_error">ABORT_ON_ERROR Query Option</a>,' + 
        '      <span>logging</span></p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_max_io_buffers.xml',
      title: 'MAX_IO_BUFFERS Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Deprecated query option. Currently has no effect.' + 
        '    </p> <p><b>Type:</b>  numeric' + 
        '    </p> <p><b>Default:</b>  0' + 
        '    </p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_max_scan_range_length.xml',
      title: 'MAX_SCAN_RANGE_LENGTH Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Maximum length of the scan range. Interacts with the number of HDFS blocks in the table to determine how many' + 
        '      CPU cores across the cluster are involved with the processing for a query. (Each core processes one scan' + 
        '      range.)' + 
        '    </p> <p>' + 
        '      Lowering the value can sometimes increase parallelism if you have unused CPU capacity, but a too-small value' + 
        '      can limit query performance because each scan range involves extra overhead.' + 
        '    </p> <p>' + 
        '      Only applicable to HDFS tables. Has no effect on Parquet tables. Unspecified or 0 indicates backend default,' + 
        '      which is the same as the HDFS block size for each table.' + 
        '    </p> <p>' + 
        '      Although the scan range can be arbitrarily long, Impala internally uses an 8 MB read buffer so that it can' + 
        '      query tables with huge block sizes without allocating equivalent blocks of memory.' + 
        '    </p> <p><b>Type:</b>  numeric' + 
        '    </p> <p>' + 
        '      In Impala 2.7 and higher, the argument value can include unit specifiers,' + 
        '      such as <span class="sql-docs-inline-code">100m</span>  or <span class="sql-docs-inline-code">100mb</span> . In previous versions,' + 
        '      Impala interpreted such formatted values as 0, leading to query failures.' + 
        '    </p> <p><b>Default:</b>  0' + 
        '    </p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_mem_limit.xml',
      title: 'MEM_LIMIT Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      The MEM_LIMIT query option defines the maximum amount of memory a query' + 
        '      can allocate on each node. The total memory that can be used by a query is' + 
        '      the <span class="sql-docs-inline-code">MEM_LIMIT</span>  times the number of nodes.' + 
        '    </p> <p>' + 
        '      There are two levels of memory limit for Impala.' + 
        '      The <span class="sql-docs-inline-code">-mem_limit</span>  startup option sets an overall limit for the <span class="sql-docs-inline-code">impalad</span>  process' + 
        '      (which handles multiple queries concurrently).' + 
        '      That limit is typically expressed in terms of a percentage of the RAM available on the host, such as <span class="sql-docs-inline-code">-mem_limit=70%</span> .' + 
        '      The <span class="sql-docs-inline-code">MEM_LIMIT</span>  query option, which you set through <span class="sql-docs-inline-code">impala-shell</span> ' + 
        '      or the <span class="sql-docs-inline-code">SET</span>  statement in a JDBC or ODBC application, applies to each individual query.' + 
        '      The <span class="sql-docs-inline-code">MEM_LIMIT</span>  query option is usually expressed as a fixed size such as <span class="sql-docs-inline-code">10gb</span> ,' + 
        '      and must always be less than the <span class="sql-docs-inline-code">impalad</span>  memory limit.' + 
        '    </p> <p>' + 
        '      If query processing exceeds the specified memory limit on any node, either the per-query limit or the' + 
        '      <span class="sql-docs-inline-code">impalad</span>  limit, Impala cancels the query automatically.' + 
        '      Memory limits are checked periodically during query processing, so the actual memory in use' + 
        '      might briefly exceed the limit without the query being cancelled.' + 
        '    </p> <p><b>Type:</b>  numeric' + 
        '    </p> <p><b>Units:</b>  A numeric argument represents memory size in bytes; you can also use a suffix of <span class="sql-docs-inline-code">m</span>  or <span class="sql-docs-inline-code">mb</span> ' + 
        '      for megabytes, or more commonly <span class="sql-docs-inline-code">g</span>  or <span class="sql-docs-inline-code">gb</span>  for gigabytes. If you specify a value with unrecognized' + 
        '      formats, subsequent queries fail with an error.' + 
        '    </p> <p><b>Default:</b>  0 (unlimited)' + 
        '    </p> <p id="../Impala/docs/topics/impala_mem_limit.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
        '      The <span class="sql-docs-inline-code">MEM_LIMIT</span>  setting is primarily useful in a high-concurrency setting,' + 
        '      or on a cluster with a workload shared between Impala and other data processing components.' + 
        '      You can prevent any query from accidentally using much more memory than expected,' + 
        '      which could negatively impact other Impala queries.' + 
        '    </p> <p>' + 
        '      Use the output of the <span class="sql-docs-inline-code">SUMMARY</span>  command in <span class="sql-docs-inline-code">impala-shell</span> ' + 
        '      to get a report of memory used for each phase of your most heavyweight queries on each node,' + 
        '      and then set a <span class="sql-docs-inline-code">MEM_LIMIT</span>  somewhat higher than that.' + 
        '      See <span>perf summary</span> for usage information about' + 
        '      the <span class="sql-docs-inline-code">SUMMARY</span>  command.' + 
        '    </p> <p id="../Impala/docs/topics/impala_mem_limit.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
        '      The following examples show how to set the <span class="sql-docs-inline-code">MEM_LIMIT</span>  query option' + 
        '      using a fixed number of bytes, or suffixes representing gigabytes or megabytes.' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > set mem_limit=3000000000;<br/>MEM_LIMIT set to 3000000000<br/>[localhost:21000] > select 5;<br/>Query: select 5<br/>+---+<br/>| 5 |<br/>+---+<br/>| 5 |<br/>+---+<br/><br/>[localhost:21000] > set mem_limit=3g;<br/>MEM_LIMIT set to 3g<br/>[localhost:21000] > select 5;<br/>Query: select 5<br/>+---+<br/>| 5 |<br/>+---+<br/>| 5 |<br/>+---+<br/><br/>[localhost:21000] > set mem_limit=3gb;<br/>MEM_LIMIT set to 3gb<br/>[localhost:21000] > select 5;<br/>+---+<br/>| 5 |<br/>+---+<br/>| 5 |<br/>+---+<br/><br/>[localhost:21000] > set mem_limit=3m;<br/>MEM_LIMIT set to 3m<br/>[localhost:21000] > select 5;<br/>+---+<br/>| 5 |<br/>+---+<br/>| 5 |<br/>+---+<br/>[localhost:21000] > set mem_limit=3mb;<br/>MEM_LIMIT set to 3mb<br/>[localhost:21000] > select 5;<br/>+---+<br/>| 5 |<br/>+---+<br/></div><p>' + 
        '      The following examples show how unrecognized <span class="sql-docs-inline-code">MEM_LIMIT</span> ' + 
        '      values lead to errors for subsequent queries.' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > set mem_limit=3tb;<br/>MEM_LIMIT set to 3tb<br/>[localhost:21000] > select 5;<br/>ERROR: Failed to parse query memory limit from \'3tb\'.<br/><br/>[localhost:21000] > set mem_limit=xyz;<br/>MEM_LIMIT set to xyz<br/>[localhost:21000] > select 5;<br/>Query: select 5<br/>ERROR: Failed to parse query memory limit from \'xyz\'.<br/></div><p>' + 
        '      The following examples shows the automatic query cancellation' + 
        '      when the <span class="sql-docs-inline-code">MEM_LIMIT</span>  value is exceeded' + 
        '      on any host involved in the Impala query. First it runs a' + 
        '      successful query and checks the largest amount of memory' + 
        '      used on any node for any stage of the query.' + 
        '      Then it sets an artificially low <span class="sql-docs-inline-code">MEM_LIMIT</span> ' + 
        '      setting so that the same query cannot run.' + 
        '    </p> <div class="sql-docs-code-block">[localhost:21000] > select count(*) from customer;<br/>Query: select count(*) from customer<br/>+----------+<br/>| count(*) |<br/>+----------+<br/>| 150000   |<br/>+----------+<br/><br/>[localhost:21000] > select count(distinct c_name) from customer;<br/>Query: select count(distinct c_name) from customer<br/>+------------------------+<br/>| count(distinct c_name) |<br/>+------------------------+<br/>| 150000                 |<br/>+------------------------+<br/><br/>[localhost:21000] > summary;<br/>+--------------+--------+----------+----------+---------+------------+----------+---------------+---------------+<br/>| Operator     | #Hosts | Avg Time | Max Time | #Rows   | Est. #Rows | Peak Mem | Est. Peak Mem | Detail        |<br/>+--------------+--------+----------+----------+---------+------------+----------+---------------+---------------+<br/>| 06:AGGREGATE | 1      | 230.00ms | 230.00ms | 1       | 1          | 16.00 KB | -1 B          | FINALIZE      |<br/>| 05:EXCHANGE  | 1      | 43.44us  | 43.44us  | 1       | 1          | 0 B      | -1 B          | UNPARTITIONED |<br/>| 02:AGGREGATE | 1      | 227.14ms | 227.14ms | 1       | 1          | 12.00 KB | 10.00 MB      |               |<br/>| 04:AGGREGATE | 1      | 126.27ms | 126.27ms | 150.00K | 150.00K    | 15.17 MB | 10.00 MB      |               |<br/>| 03:EXCHANGE  | 1      | 44.07ms  | 44.07ms  | 150.00K | 150.00K    | 0 B      | 0 B           | HASH(c_name)  |<br/><b>| 01:AGGREGATE | 1      | 361.94ms | 361.94ms | 150.00K | 150.00K    | 23.04 MB | 10.00 MB      |               |</b> | 00:SCAN HDFS | 1      | 43.64ms  | 43.64ms  | 150.00K | 150.00K    | 24.19 MB | 64.00 MB      | tpch.customer |<br/>+--------------+--------+----------+----------+---------+------------+----------+---------------+---------------+<br/><br/>[localhost:21000] > set mem_limit=15mb;<br/>MEM_LIMIT set to 15mb<br/>[localhost:21000] > select count(distinct c_name) from customer;<br/>Query: select count(distinct c_name) from customer<br/>ERROR:<br/>Memory limit exceeded<br/>Query did not have enough memory to get the minimum required buffers in the block manager.<br/></div></div> ',
      children: []
    },
    {
      id: 'topics/impala_num_nodes.xml',
      title: 'NUM_NODES Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Limit the number of nodes that process a query, typically during debugging.' + 
        '    </p> <p><b>Type:</b>  numeric' + 
        '    </p> <p><b>Allowed values:</b>  Only accepts the values 0' + 
        '      (meaning all nodes) or 1 (meaning all work is done on the coordinator node).' + 
        '</p> <p><b>Default:</b>  0' + 
        '    </p> <p id="../Impala/docs/topics/impala_num_nodes.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
        '       If you are diagnosing a problem that you suspect is due to a timing issue due to' + 
        '       distributed query processing, you can set <span class="sql-docs-inline-code">NUM_NODES=1</span>  to verify' + 
        '       if the problem still occurs when all the work is done on a single node.' + 
        '     </p> <p id="../Impala/docs/topics/impala_num_nodes.xml_num_nodes_tip">' + 
        '        You might set the <span class="sql-docs-inline-code">NUM_NODES</span>  option to 1 briefly, during <span class="sql-docs-inline-code">INSERT</span>  or' + 
        '        <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  statements. Normally, those statements produce one or more data' + 
        '        files per data node. If the write operation involves small amounts of data, a Parquet table, and/or a' + 
        '        partitioned table, the default behavior could produce many small files when intuitively you might expect' + 
        '        only a single output file. <span class="sql-docs-inline-code">SET NUM_NODES=1</span>  turns off the <q>distributed</q>  aspect of the' + 
        '        write operation, making it more likely to produce only one or a few data files.' + 
        '      </p> <div class="sql-docs-note"><p>' + 
        '      Because this option results in increased resource utilization on a single host,' + 
        '      it could cause problems due to contention with other Impala statements or' + 
        '      high resource usage. Symptoms could include queries running slowly, exceeding the memory limit,' + 
        '      or appearing to hang. Use it only in a single-user development/test environment;' + 
        '      <b>do not</b>  use it in a production environment or in a cluster with a high-concurrency' + 
        '      or high-volume or performance-critical workload.' + 
        '    </p> </div> </div> ',
      children: []
    },
    {
      id: 'topics/impala_num_scanner_threads.xml',
      title: 'NUM_SCANNER_THREADS Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Maximum number of scanner threads (on each node) used for each query. By default, Impala uses as many cores' + 
        '      as are available (one thread per core). You might lower this value if queries are using excessive resources' + 
        '      on a busy cluster. Impala imposes a maximum value automatically, so a high value has no practical effect.' + 
        '    </p> <p><b>Type:</b>  numeric' + 
        '    </p> <p><b>Default:</b>  0' + 
        '    </p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_parquet_compression_codec.xml',
      title: 'PARQUET_COMPRESSION_CODEC Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Deprecated. Use <span class="sql-docs-inline-code">COMPRESSION_CODEC</span>  in Impala 2.0 and later. See' + 
        '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_compression_codec.xml#compression_codec">COMPRESSION_CODEC Query Option (Impala 2.0 or higher only)</a> for details.' + 
        '    </p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_parquet_file_size.xml',
      title: 'PARQUET_FILE_SIZE Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Specifies the maximum size of each Parquet data file produced by Impala <span class="sql-docs-inline-code">INSERT</span>  statements.' + 
        '    </p> <p id="../Impala/docs/topics/impala_parquet_file_size.xml_syntax_blurb"><b>Syntax:</b> </p> <p>' + 
        '      Specify the size in bytes, or with a trailing <span class="sql-docs-inline-code">m</span>  or <span class="sql-docs-inline-code">g</span>  character to indicate' + 
        '      megabytes or gigabytes. For example:' + 
        '    </p> <div class="sql-docs-code-block">-- 128 megabytes.<br/>set PARQUET_FILE_SIZE=134217728<br/>INSERT OVERWRITE parquet_table SELECT * FROM text_table;<br/><br/>-- 512 megabytes.<br/>set PARQUET_FILE_SIZE=512m;<br/>INSERT OVERWRITE parquet_table SELECT * FROM text_table;<br/><br/>-- 1 gigabyte.<br/>set PARQUET_FILE_SIZE=1g;<br/>INSERT OVERWRITE parquet_table SELECT * FROM text_table;<br/></div><p id="../Impala/docs/topics/impala_parquet_file_size.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
        '      With tables that are small or finely partitioned, the default Parquet block size (formerly 1 GB, now 256 MB' + 
        '      in Impala 2.0 and later) could be much larger than needed for each data file. For <span class="sql-docs-inline-code">INSERT</span> ' + 
        '      operations into such tables, you can increase parallelism by specifying a smaller' + 
        '      <span class="sql-docs-inline-code">PARQUET_FILE_SIZE</span>  value, resulting in more HDFS blocks that can be processed by different' + 
        '      nodes.' + 
        '</p> <p><b>Type:</b>  numeric, with optional unit specifier' + 
        '    </p> <div class="sql-docs-note"><p>' + 
        '      Currently, the maximum value for this setting is 1 gigabyte (<span class="sql-docs-inline-code">1g</span> ).' + 
        '      Setting a value higher than 1 gigabyte could result in errors during' + 
        '      an <span class="sql-docs-inline-code">INSERT</span>  operation.' + 
        '    </p> </div> <p><b>Default:</b>  0 (produces files with a target size of 256 MB; files might be larger for very wide tables)' + 
        '    </p> <p id="../Impala/docs/topics/impala_parquet_file_size.xml_adls_block_splitting">' + 
        '        Because ADLS does not expose the block sizes of data files the way HDFS does,' + 
        '        any Impala <span class="sql-docs-inline-code">INSERT</span>  or <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  statements' + 
        '        use the <span class="sql-docs-inline-code">PARQUET_FILE_SIZE</span>  query option setting to define the size of' + 
        '        Parquet data files. (Using a large block size is more important for Parquet tables than' + 
        '        for tables that use other file formats.)' + 
        '      </p> <p id="../Impala/docs/topics/impala_parquet_file_size.xml_isilon_blurb"><b>Isilon considerations:</b> </p> <p id="../Impala/docs/topics/impala_parquet_file_size.xml_isilon_block_size_caveat">' + 
        '        Because the EMC Isilon storage devices use a global value for the block size' + 
        '        rather than a configurable value for each file, the <span class="sql-docs-inline-code">PARQUET_FILE_SIZE</span> ' + 
        '        query option has no effect when Impala inserts data into a table or partition' + 
        '        residing on Isilon storage. Use the <span class="sql-docs-inline-code">isi</span>  command to set the' + 
        '        default block size globally on the Isilon device. For example, to set the' + 
        '        Isilon default block size to 256 MB, the recommended size for Parquet' + 
        '        data files for Impala, issue the following command:' + 
        '<div class="sql-docs-code-block">isi hdfs settings modify --default-block-size=256MB</div></p> <p id="../Impala/docs/topics/impala_parquet_file_size.xml_related_info"><b>Related information:</b> </p> <p>' + 
        '      For information about the Parquet file format, and how the number and size of data files affects query' + 
        '      performance, see <span>parquet</span>.' + 
        '    </p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_query_timeout_s.xml',
      title: 'QUERY_TIMEOUT_S Query Option (Impala 2.0 or higher only)',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Sets the idle query timeout value for the session, in seconds. Queries that sit idle for longer than the' + 
        '      timeout value are automatically cancelled. If the system administrator specified the' + 
        '      <span class="sql-docs-inline-code">--idle_query_timeout</span>  startup option, <span class="sql-docs-inline-code">QUERY_TIMEOUT_S</span>  must be smaller than' + 
        '      or equal to the <span class="sql-docs-inline-code">--idle_query_timeout</span>  value.' + 
        '    </p> <div id="../Impala/docs/topics/impala_query_timeout_s.xml_timeout_clock_blurb" class="sql-docs-note"><p>' + 
        '          The timeout clock for queries and sessions only starts ticking when the query or session is idle.' + 
        '          For queries, this means the query has results ready but is waiting for a client to fetch the data. A' + 
        '          query can run for an arbitrary time without triggering a timeout, because the query is computing results' + 
        '          rather than sitting idle waiting for the results to be fetched. The timeout period is intended to prevent' + 
        '          unclosed queries from consuming resources and taking up slots in the admission count of running queries,' + 
        '          potentially preventing other queries from starting.' + 
        '        </p> <p>' + 
        '          For sessions, this means that no query has been submitted for some period of time.' + 
        '        </p> </div> <p id="../Impala/docs/topics/impala_query_timeout_s.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">SET QUERY_TIMEOUT_S=<span class="sql-docs-variable">seconds</span> ;</div><p><b>Type:</b>  numeric' + 
        '    </p> <p><b>Default:</b>  0 (no timeout if <span class="sql-docs-inline-code">--idle_query_timeout</span>  not in effect; otherwise, use' + 
        '      <span class="sql-docs-inline-code">--idle_query_timeout</span>  value)' + 
        '    </p> <p id="../Impala/docs/topics/impala_query_timeout_s.xml_added_in_20"><b>Added in:</b> Impala 2.0.0</p> <p id="../Impala/docs/topics/impala_query_timeout_s.xml_related_info"><b>Related information:</b> </p> <p><span>timeouts</span></p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_request_pool.xml',
      title: 'REQUEST_POOL Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      The pool or queue name that queries should be submitted to. Only applies when you enable the Impala admission control feature.' + 
        '      Specifies the name of the pool used by requests from Impala to the resource manager.' + 
        '    </p> <p><b>Type:</b> <span class="sql-docs-inline-code">STRING</span> </p> <p><b>Default:</b>  empty (use the user-to-pool mapping defined by an <span class="sql-docs-inline-code">impalad</span>  startup option' + 
        '      in the Impala configuration file)' + 
        '    </p> <p id="../Impala/docs/topics/impala_request_pool.xml_related_info"><b>Related information:</b> </p> <p><span>impala admission</span></p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_reservation_request_timeout.xml',
      title: 'RESERVATION_REQUEST_TIMEOUT Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><div id="../Impala/docs/topics/impala_reservation_request_timeout.xml_llama_query_options_obsolete" class="sql-docs-note"><p>' + 
        '          This query option no longer has any effect.' + 
        '          The use of the Llama component for integrated resource management within YARN is no' + 
        '          longer supported with Impala 2.3 and higher, and the Llama' + 
        '          support code is removed entirely in Impala 2.8 and higher.' + 
        '        </p> </div> </div> ',
      children: []
    },
    {
      id: 'topics/impala_support_start_over.xml',
      title: 'SUPPORT_START_OVER Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      Leave this setting at its default value.' + 
        '      It is a read-only setting, tested by some client applications such as Hue.' + 
        '    </p> <p>' + 
        '      If you accidentally change it through <span class="sql-docs-inline-code">impala-shell</span> ,' + 
        '      subsequent queries encounter errors until you undo the change' + 
        '      by issuing <span class="sql-docs-inline-code">UNSET support_start_over</span> .' + 
        '    </p> <p id="../Impala/docs/topics/impala_support_start_over.xml_type_boolean"><b>Type:</b>  Boolean; recognized values are 1 and 0, or <span class="sql-docs-inline-code">true</span>  and <span class="sql-docs-inline-code">false</span> ;' + 
        '        any other value interpreted as <span class="sql-docs-inline-code">false</span> </p> <p id="../Impala/docs/topics/impala_support_start_over.xml_default_false"><b>Default:</b> <span class="sql-docs-inline-code">false</span> </p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_sync_ddl.xml',
      title: 'SYNC_DDL Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><p>' + 
        '      When enabled, causes any DDL operation such as <span class="sql-docs-inline-code">CREATE TABLE</span>  or <span class="sql-docs-inline-code">ALTER TABLE</span> ' + 
        '      to return only when the changes have been propagated to all other Impala nodes in the cluster by the Impala' + 
        '      catalog service. That way, if you issue a subsequent <span class="sql-docs-inline-code">CONNECT</span>  statement in' + 
        '      <span class="sql-docs-inline-code">impala-shell</span>  to connect to a different node in the cluster, you can be sure that other' + 
        '      node will already recognize any added or changed tables. (The catalog service automatically broadcasts the' + 
        '      DDL changes to all nodes automatically, but without this option there could be a period of inconsistency if' + 
        '      you quickly switched to another node, such as by issuing a subsequent query through a load-balancing proxy.)' + 
        '    </p> <p>' + 
        '      Although <span class="sql-docs-inline-code">INSERT</span>  is classified as a DML statement, when the <span class="sql-docs-inline-code">SYNC_DDL</span>  option' + 
        '      is enabled, <span class="sql-docs-inline-code">INSERT</span>  statements also delay their completion until all the underlying data and' + 
        '      metadata changes are propagated to all Impala nodes. Internally, Impala inserts have similarities with DDL' + 
        '      statements in traditional database systems, because they create metadata needed to track HDFS block locations' + 
        '      for new files and they potentially add new partitions to partitioned tables.' + 
        '    </p> <div class="sql-docs-note">' + 
        '      Because this option can introduce a delay after each write operation, if you are running a sequence of' + 
        '      <span class="sql-docs-inline-code">CREATE DATABASE</span> , <span class="sql-docs-inline-code">CREATE TABLE</span> , <span class="sql-docs-inline-code">ALTER TABLE</span> ,' + 
        '      <span class="sql-docs-inline-code">INSERT</span> , and similar statements within a setup script, to minimize the overall delay you can' + 
        '      enable the <span class="sql-docs-inline-code">SYNC_DDL</span>  query option only near the end, before the final DDL statement.' + 
        '    </div> <p id="../Impala/docs/topics/impala_sync_ddl.xml_type_boolean"><b>Type:</b>  Boolean; recognized values are 1 and 0, or <span class="sql-docs-inline-code">true</span>  and <span class="sql-docs-inline-code">false</span> ;' + 
        '        any other value interpreted as <span class="sql-docs-inline-code">false</span> </p> <p id="../Impala/docs/topics/impala_sync_ddl.xml_default_false_0"><b>Default:</b> <span class="sql-docs-inline-code">false</span>  (shown as 0 in output of <span class="sql-docs-inline-code">SET</span>  statement)' + 
        '      </p> <p id="../Impala/docs/topics/impala_sync_ddl.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_ddl.xml#ddl">DDL Statements</a></p> </div> ',
      children: []
    },
    {
      id: 'topics/impala_v_cpu_cores.xml',
      title: 'V_CPU_CORES Query Option',
      weight: 1,
      bodyMatch: ko.observable(),
      open: ko.observable(false),
      titleMatch: ko.observable(),
      body: '<div><div id="../Impala/docs/topics/impala_v_cpu_cores.xml_llama_query_options_obsolete" class="sql-docs-note"><p>' + 
        '          This query option no longer has any effect.' + 
        '          The use of the Llama component for integrated resource management within YARN is no' + 
        '          longer supported with Impala 2.3 and higher, and the Llama' + 
        '          support code is removed entirely in Impala 2.8 and higher.' + 
        '        </p> </div> </div> ',
      children: []
    }  ]  },
  {
    id: 'topics/impala_show.xml',
    title: 'SHOW Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      The <span class="sql-docs-inline-code">SHOW</span>  statement is a flexible way to get information about different types of Impala' + 
      '      objects.' + 
      '    </p> <p id="../Impala/docs/topics/impala_show.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">SHOW DATABASES [[LIKE] \'<span class="sql-docs-variable">pattern</span> \']<br/>SHOW SCHEMAS [[LIKE] \'<span class="sql-docs-variable">pattern</span> \'] - an alias for SHOW DATABASES<br/>SHOW TABLES [IN <span class="sql-docs-variable">database_name</span> ] [[LIKE] \'<span class="sql-docs-variable">pattern</span> \']<br/><span class="sql-docs-inline-code">SHOW [AGGREGATE | ANALYTIC] FUNCTIONS [IN <span class="sql-docs-variable">database_name</span> ] [[LIKE] \'<span class="sql-docs-variable">pattern</span> \']</span> <span class="sql-docs-inline-code">SHOW CREATE TABLE [<span class="sql-docs-variable">database_name</span> ].<span class="sql-docs-variable">table_name</span> </span> <span class="sql-docs-inline-code">SHOW CREATE VIEW [<span class="sql-docs-variable">database_name</span> ].<span class="sql-docs-variable">view_name</span> </span> <span class="sql-docs-inline-code">SHOW TABLE STATS [<span class="sql-docs-variable">database_name</span> .]<span class="sql-docs-variable">table_name</span> </span> <span class="sql-docs-inline-code">SHOW COLUMN STATS [<span class="sql-docs-variable">database_name</span> .]<span class="sql-docs-variable">table_name</span> </span> <span class="sql-docs-inline-code">SHOW PARTITIONS [<span class="sql-docs-variable">database_name</span> .]<span class="sql-docs-variable">table_name</span> </span> <span class="sql-docs-inline-code">SHOW <span class="sql-docs-inline-code">[RANGE]</span> PARTITIONS [<span class="sql-docs-variable">database_name</span> .]<span class="sql-docs-variable">table_name</span> </span> SHOW FILES IN [<span class="sql-docs-variable">database_name</span> .]<span class="sql-docs-variable">table_name</span> <span class="sql-docs-inline-code">[PARTITION (<span class="sql-docs-variable">key_col_expression</span> [, <span class="sql-docs-variable">key_col_expression</span> ]</span> ]<br/><br/><span class="sql-docs-inline-code">SHOW ROLES<br/>SHOW CURRENT ROLES<br/>SHOW ROLE GRANT GROUP <span class="sql-docs-variable">group_name</span> SHOW GRANT ROLE <span class="sql-docs-variable">role_name</span> </span> </div><p>' + 
      '      Issue a <span class="sql-docs-inline-code">SHOW <span class="sql-docs-variable">object_type</span> </span>  statement to see the appropriate objects in the' + 
      '      current database, or <span class="sql-docs-inline-code">SHOW <span class="sql-docs-variable">object_type</span>  IN <span class="sql-docs-variable">database_name</span> </span> ' + 
      '      to see objects in a specific database.' + 
      '    </p> <p>' + 
      '      The optional <span class="sql-docs-variable">pattern</span>  argument is a quoted string literal, using Unix-style' + 
      '      <span class="sql-docs-inline-code">*</span>  wildcards and allowing <span class="sql-docs-inline-code">|</span>  for alternation. The preceding' + 
      '      <span class="sql-docs-inline-code">LIKE</span>  keyword is also optional. All object names are stored in lowercase, so use all' + 
      '      lowercase letters in the pattern string. For example:' + 
      '    </p> <div class="sql-docs-code-block">show databases \'a*\';<br/>show databases like \'a*\';<br/>show tables in some_db like \'*fact*\';<br/>use some_db;<br/>show tables \'*dim*|*fact*\';</div><p id="../Impala/docs/topics/impala_show.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> </div> <div id="../Impala/docs/topics/impala_show.xml_show_files"><h4>SHOW FILES Statement</h4> <div><p>' + 
      '        The <span class="sql-docs-inline-code">SHOW FILES</span>  statement displays the files that constitute a specified table,' + 
      '        or a partition within a partitioned table. This syntax is available in Impala 2.2 and higher' + 
      '        only. The output includes the names of the files, the size of each file, and the applicable partition' + 
      '        for a partitioned table. The size includes a suffix of <span class="sql-docs-inline-code">B</span>  for bytes,' + 
      '        <span class="sql-docs-inline-code">MB</span>  for megabytes, and <span class="sql-docs-inline-code">GB</span>  for gigabytes.' + 
      '      </p> <p>' + 
      '        In Impala 2.8 and higher, you can use general' + 
      '        expressions with operators such as <span class="sql-docs-inline-code"><</span> , <span class="sql-docs-inline-code">IN</span> ,' + 
      '        <span class="sql-docs-inline-code">LIKE</span> , and <span class="sql-docs-inline-code">BETWEEN</span>  in the <span class="sql-docs-inline-code">PARTITION</span> ' + 
      '        clause, instead of only equality operators. For example:' + 
      '<div class="sql-docs-code-block"></div></p> <div class="sql-docs-note">' + 
      '        This statement applies to tables and partitions stored on HDFS, or in the Amazon Simple Storage System (S3).' + 
      '        It does not apply to views.' + 
      '        It does not apply to tables mapped onto HBase <span class="sql-docs-inline-code">or Kudu</span> ,' + 
      '        because those data management systems do not use the same file-based storage layout.' + 
      '      </div> <p id="../Impala/docs/topics/impala_show.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '        You can use this statement to verify the results of your ETL process: that is, that' + 
      '        the expected files are present, with the expected sizes. You can examine the file information' + 
      '        to detect conditions such as empty files, missing files, or inefficient layouts due to' + 
      '        a large number of small files. When you use <span class="sql-docs-inline-code">INSERT</span>  statements to copy' + 
      '        from one table to another, you can see how the file layout changes due to file format' + 
      '        conversions, compaction of small input files into large data blocks, and' + 
      '        multiple output files from parallel queries and partitioned inserts.' + 
      '      </p> <p>' + 
      '        The output from this statement does not include files that Impala considers to be hidden' + 
      '        or invisible, such as those whose names start with a dot or an underscore, or that' + 
      '        end with the suffixes <span class="sql-docs-inline-code">.copying</span>  or <span class="sql-docs-inline-code">.tmp</span> .' + 
      '      </p> <p>' + 
      '        The information for partitioned tables complements the output of the <span class="sql-docs-inline-code">SHOW PARTITIONS</span> ' + 
      '        statement, which summarizes information about each partition. <span class="sql-docs-inline-code">SHOW PARTITIONS</span> ' + 
      '        produces some output for each partition, while <span class="sql-docs-inline-code">SHOW FILES</span>  does not' + 
      '        produce any output for empty partitions because they do not include any data files.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '        The user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '        typically the <span class="sql-docs-inline-code">impala</span>  user, must have read' + 
      '        permission for all the table files, read and execute permission for all the directories that make up the table,' + 
      '        and execute permission for the database directory and all its parent directories.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '        The following example shows a <span class="sql-docs-inline-code">SHOW FILES</span>  statement' + 
      '        for an unpartitioned table using text format:' + 
      '      </p> <div class="sql-docs-code-block">[localhost:21000] > create table unpart_text (x bigint, s string);<br/>[localhost:21000] > insert into unpart_text (x, s) select id, name<br/>                  > from oreilly.sample_data limit 20e6;<br/>[localhost:21000] > show files in unpart_text;<br/>+------------------------------------------------------------------------------+----------+-----------+<br/>| path                                                                         | size     | partition |<br/>+------------------------------------------------------------------------------+----------+-----------+<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/unpart_text/35665776ef85cfaf_1012432410_data.0. | 448.31MB |           |<br/>+------------------------------------------------------------------------------+----------+-----------+<br/>[localhost:21000] > insert into unpart_text (x, s) select id, name from oreilly.sample_data limit 100e6;<br/>[localhost:21000] > show files in unpart_text;<br/>+--------------------------------------------------------------------------------------+----------+-----------+<br/>| path                                                                                 | size     | partition |<br/>+--------------------------------------------------------------------------------------+----------+-----------+<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/unpart_text/35665776ef85cfaf_1012432410_data.0. | 448.31MB |           |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/unpart_text/ac3dba252a8952b8_1663177415_data.0. | 2.19GB   |           |<br/>+--------------------------------------------------------------------------------------+----------+-----------+<br/></div><p>' + 
      '        This example illustrates how, after issuing some <span class="sql-docs-inline-code">INSERT ... VALUES</span>  statements,' + 
      '        the table now contains some tiny files of just a few bytes. Such small files could cause inefficient processing of' + 
      '        parallel queries that are expecting multi-megabyte input files. The example shows how you might compact the small files by doing' + 
      '        an <span class="sql-docs-inline-code">INSERT ... SELECT</span>  into a different table, possibly converting the data to Parquet in the process:' + 
      '      </p> <div class="sql-docs-code-block">[localhost:21000] > insert into unpart_text values (10,\'hello\'), (20, \'world\');<br/>[localhost:21000] > insert into unpart_text values (-1,\'foo\'), (-1000, \'bar\');<br/>[localhost:21000] > show files in unpart_text;<br/>+--------------------------------------------------------------------------------------+----------+<br/>| path                                                                                 | size     |<br/>+--------------------------------------------------------------------------------------+----------+<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/unpart_text/4f11b8bdf8b6aa92_238145083_data.0.  | 18B<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/unpart_text/35665776ef85cfaf_1012432410_data.0. | 448.31MB<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/unpart_text/ac3dba252a8952b8_1663177415_data.0. | 2.19GB<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/unpart_text/cfb8252452445682_1868457216_data.0. | 17B<br/>+--------------------------------------------------------------------------------------+----------+<br/>[localhost:21000] > create table unpart_parq stored as parquet as select * from unpart_text;<br/>+---------------------------+<br/>| summary                   |<br/>+---------------------------+<br/>| Inserted 120000002 row(s) |<br/>+---------------------------+<br/>[localhost:21000] > show files in unpart_parq;<br/>+------------------------------------------------------------------------------------------+----------+<br/>| path                                                                                     | size     |<br/>+------------------------------------------------------------------------------------------+----------+<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/unpart_parq/60798d96ba630184_549959007_data.0.parq  | 255.36MB |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/unpart_parq/60798d96ba630184_549959007_data.1.parq  | 178.52MB |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/unpart_parq/60798d96ba630185_549959007_data.0.parq  | 255.37MB |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/unpart_parq/60798d96ba630185_549959007_data.1.parq  | 57.71MB  |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/unpart_parq/60798d96ba630186_2141167244_data.0.parq | 255.40MB |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/unpart_parq/60798d96ba630186_2141167244_data.1.parq | 175.52MB |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/unpart_parq/60798d96ba630187_1006832086_data.0.parq | 255.40MB |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/unpart_parq/60798d96ba630187_1006832086_data.1.parq | 214.61MB |<br/>+------------------------------------------------------------------------------------------+----------+<br/></div><p>' + 
      '        The following example shows a <span class="sql-docs-inline-code">SHOW FILES</span>  statement for a partitioned text table' + 
      '        with data in two different partitions, and two empty partitions.' + 
      '        The partitions with no data are not represented in the <span class="sql-docs-inline-code">SHOW FILES</span>  output.' + 
      '      </p> <div class="sql-docs-code-block">[localhost:21000] > create table part_text (x bigint, y int, s string)<br/>                                        > partitioned by (year bigint, month bigint, day bigint);<br/>[localhost:21000] > insert overwrite part_text (x, y, s) partition (year=2014,month=1,day=1)<br/>                  > select id, val, name from oreilly.normalized_parquet<br/>where id between 1 and 1000000;<br/>[localhost:21000] > insert overwrite part_text (x, y, s) partition (year=2014,month=1,day=2)<br/>                  > select id, val, name from oreilly.normalized_parquet<br/>                  > where id between 1000001 and 2000000;<br/>[localhost:21000] > alter table part_text add partition (year=2014,month=1,day=3);<br/>[localhost:21000] > alter table part_text add partition (year=2014,month=1,day=4);<br/>[localhost:21000] > show partitions part_text;<br/>+-------+-------+-----+-------+--------+---------+--------------+-------------------+--------+-------------------+<br/>| year  | month | day | #Rows | #Files | Size    | Bytes Cached | Cache Replication | Format | Incremental stats |<br/>+-------+-------+-----+-------+--------+---------+--------------+-------------------+--------+-------------------+<br/>| 2014  | 1     | 1   | -1    | 4      | 25.16MB | NOT CACHED   | NOT CACHED        | TEXT   | false             |<br/>| 2014  | 1     | 2   | -1    | 4      | 26.22MB | NOT CACHED   | NOT CACHED        | TEXT   | false             |<br/>| 2014  | 1     | 3   | -1    | 0      | 0B      | NOT CACHED   | NOT CACHED        | TEXT   | false             |<br/>| 2014  | 1     | 4   | -1    | 0      | 0B      | NOT CACHED   | NOT CACHED        | TEXT   | false             |<br/>| Total |       |     | -1    | 8      | 51.38MB | 0B           |                   |        |                   |<br/>+-------+-------+-----+-------+--------+---------+--------------+-------------------+--------+-------------------+<br/>[localhost:21000] > show files in part_text;<br/>+---------------------------------------------------------------------------------------------------------+--------+-------------------------+<br/>| path                                                                                                    | size   | partition               |<br/>+---------------------------------------------------------------------------------------------------------+--------+-------------------------+<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/part_text/year=2014/month=1/day=1/80732d9dc80689f_1418645991_data.0.  | 5.77MB | year=2014/month=1/day=1 |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/part_text/year=2014/month=1/day=1/80732d9dc8068a0_1418645991_data.0.  | 6.25MB | year=2014/month=1/day=1 |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/part_text/year=2014/month=1/day=1/80732d9dc8068a1_147082319_data.0.   | 7.16MB | year=2014/month=1/day=1 |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/part_text/year=2014/month=1/day=1/80732d9dc8068a2_2111411753_data.0.  | 5.98MB | year=2014/month=1/day=1 |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/part_text/year=2014/month=1/day=2/21a828cf494b5bbb_501271652_data.0.  | 6.42MB | year=2014/month=1/day=2 |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/part_text/year=2014/month=1/day=2/21a828cf494b5bbc_501271652_data.0.  | 6.62MB | year=2014/month=1/day=2 |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/part_text/year=2014/month=1/day=2/21a828cf494b5bbd_1393490200_data.0. | 6.98MB | year=2014/month=1/day=2 |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/part_text/year=2014/month=1/day=2/21a828cf494b5bbe_1393490200_data.0. | 6.20MB | year=2014/month=1/day=2 |<br/>+---------------------------------------------------------------------------------------------------------+--------+-------------------------+<br/></div><p>' + 
      '        The following example shows a <span class="sql-docs-inline-code">SHOW FILES</span>  statement for a partitioned Parquet table.' + 
      '        The number and sizes of files are different from the equivalent partitioned text table' + 
      '        used in the previous example, because <span class="sql-docs-inline-code">INSERT</span>  operations for Parquet tables' + 
      '        are parallelized differently than for text tables. (Also, the amount of data is so small' + 
      '        that it can be written to Parquet without involving all the hosts in this 4-node cluster.)' + 
      '      </p> <div class="sql-docs-code-block">[localhost:21000] > create table part_parq (x bigint, y int, s string) partitioned by (year bigint, month bigint, day bigint) stored as parquet;<br/>[localhost:21000] > insert into part_parq partition (year,month,day) select x, y, s, year, month, day from partitioned_text;<br/>[localhost:21000] > show partitions part_parq;<br/>+-------+-------+-----+-------+--------+---------+--------------+-------------------+---------+-------------------+<br/>| year  | month | day | #Rows | #Files | Size    | Bytes Cached | Cache Replication | Format  | Incremental stats |<br/>+-------+-------+-----+-------+--------+---------+--------------+-------------------+---------+-------------------+<br/>| 2014  | 1     | 1   | -1    | 3      | 17.89MB | NOT CACHED   | NOT CACHED        | PARQUET | false             |<br/>| 2014  | 1     | 2   | -1    | 3      | 17.89MB | NOT CACHED   | NOT CACHED        | PARQUET | false             |<br/>| Total |       |     | -1    | 6      | 35.79MB | 0B           |                   |         |                   |<br/>+-------+-------+-----+-------+--------+---------+--------------+-------------------+---------+-------------------+<br/>[localhost:21000] > show files in part_parq;<br/>+-----------------------------------------------------------------------------------------------+--------+-------------------------+<br/>| path                                                                                          | size   | partition               |<br/>+-----------------------------------------------------------------------------------------------+--------+-------------------------+<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/part_parq/year=2014/month=1/day=1/1134113650_data.0.parq | 4.49MB | year=2014/month=1/day=1 |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/part_parq/year=2014/month=1/day=1/617567880_data.0.parq  | 5.14MB | year=2014/month=1/day=1 |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/part_parq/year=2014/month=1/day=1/2099499416_data.0.parq | 8.27MB | year=2014/month=1/day=1 |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/part_parq/year=2014/month=1/day=2/945567189_data.0.parq  | 8.80MB | year=2014/month=1/day=2 |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/part_parq/year=2014/month=1/day=2/2145850112_data.0.parq | 4.80MB | year=2014/month=1/day=2 |<br/>| hdfs://<span class="sql-docs-variable">impala_data_dir</span> /show_files.db/part_parq/year=2014/month=1/day=2/665613448_data.0.parq  | 4.29MB | year=2014/month=1/day=2 |<br/>+-----------------------------------------------------------------------------------------------+--------+-------------------------+<br/></div><p>' + 
      '  The following example shows output from the <span class="sql-docs-inline-code">SHOW FILES</span>  statement' + 
      '  for a table where the data files are stored in Amazon S3:' + 
      '</p> <div class="sql-docs-code-block">[localhost:21000] > show files in s3_testing.sample_data_s3;<br/>+-----------------------------------------------------------------------+---------+<br/>| path                                                                  | size    |<br/>+-----------------------------------------------------------------------+---------+<br/>| s3a://impala-demo/sample_data/e065453cba1988a6_1733868553_data.0.parq | 24.84MB |<br/>+-----------------------------------------------------------------------+---------+<br/></div></div> </div> <div id="../Impala/docs/topics/impala_show.xml_show_roles"><h4>SHOW ROLES Statement</h4> <div><p>' + 
      '        The <span class="sql-docs-inline-code">SHOW ROLES</span>  statement displays roles. This syntax is available in Impala 2.0 and later' + 
      '        only, when you are using the Sentry authorization framework along with the Sentry service, as described in' + 
      '        <span>sentry service</span>. It does not apply when you use the Sentry framework' + 
      '        with privileges defined in a policy file.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_security_blurb"><b>Security considerations:</b> </p> <p id="../Impala/docs/topics/impala_show.xml_show_security">' + 
      '        When authorization is enabled, the output of the <span class="sql-docs-inline-code">SHOW</span>  statement is limited to those' + 
      '        objects for which you have some privilege. There might be other database, tables, and so on, but their' + 
      '        names are concealed. If you believe an object exists but you cannot see it in the <span class="sql-docs-inline-code">SHOW</span> ' + 
      '        output, check with the system administrator if you need to be granted a new privilege for that object. See' + 
      '        <span>authorization</span> for how to set up authorization and add' + 
      '        privileges for specific kinds of objects.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '        Depending on the roles set up within your organization by the <span class="sql-docs-inline-code">CREATE ROLE</span>  statement, the' + 
      '        output might look something like this:' + 
      '      </p> <div class="sql-docs-code-block">show roles;<br/>+-----------+<br/>| role_name |<br/>+-----------+<br/>| analyst   |<br/>| role1     |<br/>| sales     |<br/>| superuser |<br/>| test_role |<br/>+-----------+<br/></div><p id="../Impala/docs/topics/impala_show.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_related_info"><b>Related information:</b> </p> <p><span>authorization</span></p> </div> </div> <div id="../Impala/docs/topics/impala_show.xml_show_current_role"><h4>SHOW CURRENT ROLE</h4> <div><p>' + 
      '        The <span class="sql-docs-inline-code">SHOW CURRENT ROLE</span>  statement displays roles assigned to the current user. This syntax' + 
      '        is available in Impala 2.0 and later only, when you are using the Sentry authorization framework along with' + 
      '        the Sentry service, as described in <span>sentry service</span>. It does not' + 
      '        apply when you use the Sentry framework with privileges defined in a policy file.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_security_blurb"><b>Security considerations:</b> </p> <p id="../Impala/docs/topics/impala_show.xml_show_security">' + 
      '        When authorization is enabled, the output of the <span class="sql-docs-inline-code">SHOW</span>  statement is limited to those' + 
      '        objects for which you have some privilege. There might be other database, tables, and so on, but their' + 
      '        names are concealed. If you believe an object exists but you cannot see it in the <span class="sql-docs-inline-code">SHOW</span> ' + 
      '        output, check with the system administrator if you need to be granted a new privilege for that object. See' + 
      '        <span>authorization</span> for how to set up authorization and add' + 
      '        privileges for specific kinds of objects.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '        Depending on the roles set up within your organization by the <span class="sql-docs-inline-code">CREATE ROLE</span>  statement, the' + 
      '        output might look something like this:' + 
      '      </p> <div class="sql-docs-code-block">show current roles;<br/>+-----------+<br/>| role_name |<br/>+-----------+<br/>| role1     |<br/>| superuser |<br/>+-----------+<br/></div><p id="../Impala/docs/topics/impala_show.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_related_info"><b>Related information:</b> </p> <p><span>authorization</span></p> </div> </div> <div id="../Impala/docs/topics/impala_show.xml_show_role_grant"><h4>SHOW ROLE GRANT Statement</h4> <div><p>' + 
      '        The <span class="sql-docs-inline-code">SHOW ROLE GRANT</span>  statement lists all the roles assigned to the specified group. This' + 
      '        statement is only allowed for Sentry administrative users and others users that are part of the specified' + 
      '        group. This syntax is available in Impala 2.0 and later only, when you are using the Sentry authorization' + 
      '        framework along with the Sentry service, as described in' + 
      '        <span>sentry service</span>. It does not apply when you use the Sentry framework' + 
      '        with privileges defined in a policy file.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_security_blurb"><b>Security considerations:</b> </p> <p id="../Impala/docs/topics/impala_show.xml_show_security">' + 
      '        When authorization is enabled, the output of the <span class="sql-docs-inline-code">SHOW</span>  statement is limited to those' + 
      '        objects for which you have some privilege. There might be other database, tables, and so on, but their' + 
      '        names are concealed. If you believe an object exists but you cannot see it in the <span class="sql-docs-inline-code">SHOW</span> ' + 
      '        output, check with the system administrator if you need to be granted a new privilege for that object. See' + 
      '        <span>authorization</span> for how to set up authorization and add' + 
      '        privileges for specific kinds of objects.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_related_info"><b>Related information:</b> </p> <p><span>authorization</span></p> </div> </div> <div id="../Impala/docs/topics/impala_show.xml_show_grant_role"><h4>SHOW GRANT ROLE Statement</h4> <div><p>' + 
      '        The <span class="sql-docs-inline-code">SHOW GRANT ROLE</span>  statement list all the grants for the given role name. This statement' + 
      '        is only allowed for Sentry administrative users and other users that have been granted the specified role.' + 
      '        This syntax is available in Impala 2.0 and later only, when you are using the Sentry authorization framework' + 
      '        along with the Sentry service, as described in <span>sentry service</span>. It' + 
      '        does not apply when you use the Sentry framework with privileges defined in a policy file.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_security_blurb"><b>Security considerations:</b> </p> <p id="../Impala/docs/topics/impala_show.xml_show_security">' + 
      '        When authorization is enabled, the output of the <span class="sql-docs-inline-code">SHOW</span>  statement is limited to those' + 
      '        objects for which you have some privilege. There might be other database, tables, and so on, but their' + 
      '        names are concealed. If you believe an object exists but you cannot see it in the <span class="sql-docs-inline-code">SHOW</span> ' + 
      '        output, check with the system administrator if you need to be granted a new privilege for that object. See' + 
      '        <span>authorization</span> for how to set up authorization and add' + 
      '        privileges for specific kinds of objects.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_related_info"><b>Related information:</b> </p> <p><span>authorization</span></p> </div> </div> <div id="../Impala/docs/topics/impala_show.xml_show_databases"><h4>SHOW DATABASES</h4> <div><p>' + 
      '        The <span class="sql-docs-inline-code">SHOW DATABASES</span>  statement is often the first one you issue when connecting to an' + 
      '        instance for the first time. You typically issue <span class="sql-docs-inline-code">SHOW DATABASES</span>  to see the names you can' + 
      '        specify in a <span class="sql-docs-inline-code">USE <span class="sql-docs-variable">db_name</span> </span>  statement, then after switching to a database' + 
      '        you issue <span class="sql-docs-inline-code">SHOW TABLES</span>  to see the names you can specify in <span class="sql-docs-inline-code">SELECT</span>  and' + 
      '        <span class="sql-docs-inline-code">INSERT</span>  statements.' + 
      '      </p> <p>' + 
      '        In Impala 2.5 and higher, the output includes a second column showing any associated comment' + 
      '        for each database.' + 
      '      </p> <p>' + 
      '        The output of <span class="sql-docs-inline-code">SHOW DATABASES</span>  includes the special <span class="sql-docs-inline-code">_impala_builtins</span> ' + 
      '        database, which lets you view definitions of built-in functions, as described under <span class="sql-docs-inline-code">SHOW' + 
      '        FUNCTIONS</span> .' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_security_blurb"><b>Security considerations:</b> </p> <p id="../Impala/docs/topics/impala_show.xml_show_security">' + 
      '        When authorization is enabled, the output of the <span class="sql-docs-inline-code">SHOW</span>  statement is limited to those' + 
      '        objects for which you have some privilege. There might be other database, tables, and so on, but their' + 
      '        names are concealed. If you believe an object exists but you cannot see it in the <span class="sql-docs-inline-code">SHOW</span> ' + 
      '        output, check with the system administrator if you need to be granted a new privilege for that object. See' + 
      '        <span>authorization</span> for how to set up authorization and add' + 
      '        privileges for specific kinds of objects.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '        This example shows how you might locate a particular table on an unfamiliar system. The' + 
      '        <span class="sql-docs-inline-code">DEFAULT</span>  database is the one you initially connect to; a database with that name is present' + 
      '        on every system. You can issue <span class="sql-docs-inline-code">SHOW TABLES IN <span class="sql-docs-variable">db_name</span> </span>  without going' + 
      '        into a database, or <span class="sql-docs-inline-code">SHOW TABLES</span>  once you are inside a particular database.' + 
      '      </p> <div class="sql-docs-code-block">[localhost:21000] > show databases;<br/>+------------------+----------------------------------------------+<br/>| name             | comment                                      |<br/>+------------------+----------------------------------------------+<br/>| _impala_builtins | System database for Impala builtin functions |<br/>| default          | Default Hive database                        |<br/>| file_formats     |                                              |<br/>+------------------+----------------------------------------------+<br/>Returned 3 row(s) in 0.02s<br/>[localhost:21000] > show tables in file_formats;<br/>+--------------------+<br/>| name               |<br/>+--------------------+<br/>| parquet_table      |<br/>| rcfile_table       |<br/>| sequencefile_table |<br/>| textfile_table     |<br/>+--------------------+<br/>Returned 4 row(s) in 0.01s<br/>[localhost:21000] > use file_formats;<br/>[localhost:21000] > show tables like \'*parq*\';<br/>+--------------------+<br/>| name               |<br/>+--------------------+<br/>| parquet_table      |<br/>+--------------------+<br/>Returned 1 row(s) in 0.01s</div><p id="../Impala/docs/topics/impala_show.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_databases.xml#databases">Overview of Impala Databases</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_database.xml#create_database">CREATE DATABASE Statement</a>,' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_database.xml#drop_database">DROP DATABASE Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_use.xml#use">USE Statement</a><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_tables"><h4>SHOW TABLES Statement</h4> </a>,' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_functions"><h4>SHOW FUNCTIONS Statement</h4> </a></p> </div> </div> <div id="../Impala/docs/topics/impala_show.xml_show_tables"><h4>SHOW TABLES Statement</h4> <div><p>' + 
      '        Displays the names of tables. By default, lists tables in the current database, or with the' + 
      '        <span class="sql-docs-inline-code">IN</span>  clause, in a specified database. By default, lists all tables, or with the' + 
      '        <span class="sql-docs-inline-code">LIKE</span>  clause, only those whose name match a pattern with <span class="sql-docs-inline-code">*</span>  wildcards.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_security_blurb"><b>Security considerations:</b> </p> <p id="../Impala/docs/topics/impala_show.xml_show_security">' + 
      '        When authorization is enabled, the output of the <span class="sql-docs-inline-code">SHOW</span>  statement is limited to those' + 
      '        objects for which you have some privilege. There might be other database, tables, and so on, but their' + 
      '        names are concealed. If you believe an object exists but you cannot see it in the <span class="sql-docs-inline-code">SHOW</span> ' + 
      '        output, check with the system administrator if you need to be granted a new privilege for that object. See' + 
      '        <span>authorization</span> for how to set up authorization and add' + 
      '        privileges for specific kinds of objects.' + 
      '      </p> <p>' + 
      '        The user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '        typically the <span class="sql-docs-inline-code">impala</span>  user, must have read and execute' + 
      '        permissions for all directories that are part of the table.' + 
      '        (A table could span multiple different HDFS directories if it is partitioned.' + 
      '        The directories could be widely scattered because a partition can reside' + 
      '        in an arbitrary HDFS directory based on its <span class="sql-docs-inline-code">LOCATION</span>  attribute.)' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '        The following examples demonstrate the <span class="sql-docs-inline-code">SHOW TABLES</span>  statement.' + 
      '        If the database contains no tables, the result set is empty.' + 
      '        If the database does contain tables, <span class="sql-docs-inline-code">SHOW TABLES IN <span class="sql-docs-variable">db_name</span> </span> ' + 
      '        lists all the table names. <span class="sql-docs-inline-code">SHOW TABLES</span>  with no qualifiers lists' + 
      '        all the table names in the current database.' + 
      '      </p> <div class="sql-docs-code-block">create database empty_db;<br/>show tables in empty_db;<br/>Fetched 0 row(s) in 0.11s<br/><br/>create database full_db;<br/>create table full_db.t1 (x int);<br/>create table full_db.t2 like full_db.t1;<br/><br/>show tables in full_db;<br/>+------+<br/>| name |<br/>+------+<br/>| t1   |<br/>| t2   |<br/>+------+<br/><br/>use full_db;<br/>show tables;<br/>+------+<br/>| name |<br/>+------+<br/>| t1   |<br/>| t2   |<br/>+------+<br/></div><p>' + 
      '        This example demonstrates how <span class="sql-docs-inline-code">SHOW TABLES LIKE \'<span class="sql-docs-variable">wildcard_pattern</span> \'</span> ' + 
      '        lists table names that match a pattern, or multiple alternative patterns.' + 
      '        The ability to do wildcard matches for table names makes it helpful to establish naming conventions for tables to' + 
      '        conveniently locate a group of related tables.' + 
      '      </p> <div class="sql-docs-code-block">create table fact_tbl (x int);<br/>create table dim_tbl_1 (s string);<br/>create table dim_tbl_2 (s string);<br/><br/>/* Asterisk is the wildcard character. Only 2 out of the 3 just-created tables are returned. */<br/>show tables like \'dim*\';<br/>+-----------+<br/>| name      |<br/>+-----------+<br/>| dim_tbl_1 |<br/>| dim_tbl_2 |<br/>+-----------+<br/><br/>/* We are already in the FULL_DB database, but just to be sure we can specify the database name also. */<br/>show tables in full_db like \'dim*\';<br/>+-----------+<br/>| name      |<br/>+-----------+<br/>| dim_tbl_1 |<br/>| dim_tbl_2 |<br/>+-----------+<br/><br/>/* The pipe character separates multiple wildcard patterns. */<br/>show tables like \'*dim*|t*\';<br/>+-----------+<br/>| name      |<br/>+-----------+<br/>| dim_tbl_1 |<br/>| dim_tbl_2 |<br/>| t1        |<br/>| t2        |<br/>+-----------+<br/></div><p id="../Impala/docs/topics/impala_show.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#tables">Overview of Impala Tables</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_table.xml#create_table">CREATE TABLE Statement</a>,' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_alter_table.xml#alter_table">ALTER TABLE Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_table.xml#drop_table">DROP TABLE Statement</a>,' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_describe.xml#describe">DESCRIBE Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_create_table"><h4>SHOW CREATE TABLE Statement</h4> </a>,' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_table_stats"><h4>SHOW TABLE STATS Statement</h4> </a>,' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_databases"><h4>SHOW DATABASES</h4> </a>,' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_functions"><h4>SHOW FUNCTIONS Statement</h4> </a></p> </div> </div> <div id="../Impala/docs/topics/impala_show.xml_show_create_table"><h4>SHOW CREATE TABLE Statement</h4> <div><p>' + 
      '        As a schema changes over time, you might run a <span class="sql-docs-inline-code">CREATE TABLE</span>  statement followed by several' + 
      '        <span class="sql-docs-inline-code">ALTER TABLE</span>  statements. To capture the cumulative effect of all those statements,' + 
      '        <span class="sql-docs-inline-code">SHOW CREATE TABLE</span>  displays a <span class="sql-docs-inline-code">CREATE TABLE</span>  statement that would reproduce' + 
      '        the current structure of a table. You can use this output in scripts that set up or clone a group of' + 
      '        tables, rather than trying to reproduce the original sequence of <span class="sql-docs-inline-code">CREATE TABLE</span>  and' + 
      '        <span class="sql-docs-inline-code">ALTER TABLE</span>  statements. When creating variations on the original table, or cloning the' + 
      '        original table on a different system, you might need to edit the <span class="sql-docs-inline-code">SHOW CREATE TABLE</span>  output' + 
      '        to change things such as the database name, <span class="sql-docs-inline-code">LOCATION</span>  field, and so on that might be' + 
      '        different on the destination system.' + 
      '      </p> <p>' + 
      '        If you specify a view name in the <span class="sql-docs-inline-code">SHOW CREATE TABLE</span> ,' + 
      '        it returns a <span class="sql-docs-inline-code">CREATE VIEW</span>  statement with column names' + 
      '        and the original SQL statement to reproduce the view. You need the' + 
      '          <span class="sql-docs-inline-code">VIEW_METADATA</span>  privilege on the view and' + 
      '          <span class="sql-docs-inline-code">SELECT</span>  privilege on all underlying views and tables to' + 
      '        successfully run the <span class="sql-docs-inline-code">SHOW CREATE VIEW</span>  statement for a' + 
      '        view. The <span class="sql-docs-inline-code">SHOW CREATE VIEW</span>  is available as an alias for' + 
      '          <span class="sql-docs-inline-code">SHOW CREATE TABLE</span> .' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_security_blurb"><b>Security considerations:</b> </p> <p id="../Impala/docs/topics/impala_show.xml_show_security">' + 
      '        When authorization is enabled, the output of the <span class="sql-docs-inline-code">SHOW</span>  statement is limited to those' + 
      '        objects for which you have some privilege. There might be other database, tables, and so on, but their' + 
      '        names are concealed. If you believe an object exists but you cannot see it in the <span class="sql-docs-inline-code">SHOW</span> ' + 
      '        output, check with the system administrator if you need to be granted a new privilege for that object. See' + 
      '        <span>authorization</span> for how to set up authorization and add' + 
      '        privileges for specific kinds of objects.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> <p>' + 
      '        For Kudu tables:' + 
      '      </p> <ul><li><p>' + 
      '            The column specifications include attributes such as <span class="sql-docs-inline-code">NULL</span> ,' + 
      '            <span class="sql-docs-inline-code">NOT NULL</span> , <span class="sql-docs-inline-code">ENCODING</span> , and <span class="sql-docs-inline-code">COMPRESSION</span> .' + 
      '            If you do not specify those attributes in the original <span class="sql-docs-inline-code">CREATE TABLE</span>  statement,' + 
      '            the <span class="sql-docs-inline-code">SHOW CREATE TABLE</span>  output displays the defaults that were used.' + 
      '          </p> </li> <li><p>' + 
      '            The specifications of any <span class="sql-docs-inline-code">RANGE</span>  clauses are not displayed in full.' + 
      '            To see the definition of the range clauses for a Kudu table, use the <span class="sql-docs-inline-code">SHOW RANGE PARTITIONS</span>  statement.' + 
      '          </p> </li> <li><p>' + 
      '            The <span class="sql-docs-inline-code">TBLPROPERTIES</span>  output reflects the Kudu master address' + 
      '            and the internal Kudu name associated with the Impala table.' + 
      '          </p> </li> </ul> <div class="sql-docs-code-block">show CREATE TABLE numeric_grades_default_letter;<br/>+------------------------------------------------------------------------------------------------+<br/>| result                                                                                         |<br/>+------------------------------------------------------------------------------------------------+<br/>| CREATE TABLE user.numeric_grades_default_letter (                                              |<br/>|   score TINYINT NOT NULL ENCODING AUTO_ENCODING COMPRESSION DEFAULT_COMPRESSION,               |<br/>|   letter_grade STRING NULL ENCODING AUTO_ENCODING COMPRESSION DEFAULT_COMPRESSION DEFAULT \'-\', |<br/>|   student STRING NULL ENCODING AUTO_ENCODING COMPRESSION DEFAULT_COMPRESSION,                  |<br/>|   PRIMARY KEY (score)                                                                          |<br/>| )                                                                                              |<br/>| PARTITION BY <b>RANGE (score) (...)</b> |<br/>| STORED AS KUDU                                                                                 |<br/>| TBLPROPERTIES (\'kudu.master_addresses\'=\'vd0342.example.com:7051\',                              |<br/>|   \'kudu.table_name\'=\'impala::USER.numeric_grades_default_letter\')                              |<br/>+------------------------------------------------------------------------------------------------+<br/><br/>show range partitions numeric_grades_default_letter;<br/>+--------------------+<br/>| RANGE (score)      |<br/>+--------------------+<br/>| 0 <= VALUES < 50   |<br/>| 50 <= VALUES < 65  |<br/>| 65 <= VALUES < 80  |<br/>| 80 <= VALUES < 100 |<br/>+--------------------+<br/></div><p id="../Impala/docs/topics/impala_show.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '        The following example shows how various clauses from the <span class="sql-docs-inline-code">CREATE TABLE</span>  statement are' + 
      '        represented in the output of <span class="sql-docs-inline-code">SHOW CREATE TABLE</span> .' + 
      '      </p> <div class="sql-docs-code-block">create table show_create_table_demo (id int comment "Unique ID", y double, s string)<br/>  partitioned by (year smallint)<br/>  stored as parquet;<br/><br/>show create table show_create_table_demo;<br/>+----------------------------------------------------------------------------------------+<br/>| result                                                                                 |<br/>+----------------------------------------------------------------------------------------+<br/>| CREATE TABLE scratch.show_create_table_demo (                                          |<br/>|   id INT COMMENT \'Unique ID\',                                                          |<br/>|   y DOUBLE,                                                                            |<br/>|   s STRING                                                                             |<br/>| )                                                                                      |<br/>| PARTITIONED BY (                                                                       |<br/>|   year SMALLINT                                                                        |<br/>| )                                                                                      |<br/>| STORED AS PARQUET                                                                      |<br/>| LOCATION \'hdfs://127.0.0.1:8020/user/hive/warehouse/scratch.db/show_create_table_demo\' |<br/>| TBLPROPERTIES (\'transient_lastDdlTime\'=\'1418152582\')                                   |<br/>+----------------------------------------------------------------------------------------+<br/></div><p>' + 
      '        The following example shows how, after a sequence of <span class="sql-docs-inline-code">ALTER TABLE</span>  statements, the output' + 
      '        from <span class="sql-docs-inline-code">SHOW CREATE TABLE</span>  represents the current state of the table. This output could be' + 
      '        used to create a matching table rather than executing the original <span class="sql-docs-inline-code">CREATE TABLE</span>  and' + 
      '        sequence of <span class="sql-docs-inline-code">ALTER TABLE</span>  statements.' + 
      '      </p> <div class="sql-docs-code-block">alter table show_create_table_demo drop column s;<br/>alter table show_create_table_demo set fileformat textfile;<br/><br/>show create table show_create_table_demo;<br/>+----------------------------------------------------------------------------------------+<br/>| result                                                                                 |<br/>+----------------------------------------------------------------------------------------+<br/>| CREATE TABLE scratch.show_create_table_demo (                                          |<br/>|   id INT COMMENT \'Unique ID\',                                                          |<br/>|   y DOUBLE                                                                             |<br/>| )                                                                                      |<br/>| PARTITIONED BY (                                                                       |<br/>|   year SMALLINT                                                                        |<br/>| )                                                                                      |<br/>| STORED AS TEXTFILE                                                                     |<br/>| LOCATION \'hdfs://127.0.0.1:8020/user/hive/warehouse/demo.db/show_create_table_demo\'    |<br/>| TBLPROPERTIES (\'transient_lastDdlTime\'=\'1418152638\')                                   |<br/>+----------------------------------------------------------------------------------------+<br/></div><p id="../Impala/docs/topics/impala_show.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_table.xml#create_table">CREATE TABLE Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_describe.xml#describe">DESCRIBE Statement</a>,' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_tables"><h4>SHOW TABLES Statement</h4> </a></p> </div> </div> <div id="../Impala/docs/topics/impala_show.xml_show_create_view"><h4>SHOW CREATE VIEW Statement</h4> <div><p> The <span class="sql-docs-inline-code">SHOW CREATE VIEW</span> , it returns a <span class="sql-docs-inline-code">CREATE' + 
      '          VIEW</span>  statement with column names and the original SQL' + 
      '        statement to reproduce the view. You need the' + 
      '          <span class="sql-docs-inline-code">VIEW_METADATA</span>  privilege on the view and' + 
      '          <span class="sql-docs-inline-code">SELECT</span>  privilege on all underlying views and tables to' + 
      '        successfully run the <span class="sql-docs-inline-code">SHOW CREATE VIEW</span>  statement for a' + 
      '        view. </p> <p>' + 
      '        The <span class="sql-docs-inline-code">SHOW CREATE VIEW</span>  is an alias for <span class="sql-docs-inline-code">SHOW' + 
      '          CREATE TABLE</span> .' + 
      '      </p> </div> </div> <div id="../Impala/docs/topics/impala_show.xml_show_table_stats"><h4>SHOW TABLE STATS Statement</h4> <div><p>' + 
      '        The <span class="sql-docs-inline-code">SHOW TABLE STATS</span>  and <span class="sql-docs-inline-code">SHOW COLUMN STATS</span>  variants are important for' + 
      '        tuning performance and diagnosing performance issues, especially with the largest tables and the most' + 
      '        complex join queries.' + 
      '      </p> <p>' + 
      '        Any values that are not available (because the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement has not been run' + 
      '        yet) are displayed as <span class="sql-docs-inline-code">-1</span> .' + 
      '      </p> <p><span class="sql-docs-inline-code">SHOW TABLE STATS</span>  provides some general information about the table, such as the number of' + 
      '        files, overall size of the data, whether some or all of the data is in the HDFS cache, and the file format,' + 
      '        that is useful whether or not you have run the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement. A' + 
      '        <span class="sql-docs-inline-code">-1</span>  in the <span class="sql-docs-inline-code">#Rows</span>  output column indicates that the <span class="sql-docs-inline-code">COMPUTE' + 
      '        STATS</span>  statement has never been run for this table. If the table is partitioned, <span class="sql-docs-inline-code">SHOW TABLE' + 
      '        STATS</span>  provides this information for each partition. (It produces the same output as the' + 
      '        <span class="sql-docs-inline-code">SHOW PARTITIONS</span>  statement in this case.)' + 
      '      </p> <p>' + 
      '        The output of <span class="sql-docs-inline-code">SHOW COLUMN STATS</span>  is primarily only useful after the <span class="sql-docs-inline-code">COMPUTE' + 
      '        STATS</span>  statement has been run on the table. A <span class="sql-docs-inline-code">-1</span>  in the <span class="sql-docs-inline-code">#Distinct' + 
      '        Values</span>  output column indicates that the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement has never been' + 
      '        run for this table. Currently, Impala always leaves the <span class="sql-docs-inline-code">#Nulls</span>  column as' + 
      '        <span class="sql-docs-inline-code">-1</span> , even after <span class="sql-docs-inline-code">COMPUTE STATS</span>  has been run.' + 
      '      </p> <p>' + 
      '        These <span class="sql-docs-inline-code">SHOW</span>  statements work on actual tables only, not on views.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_security_blurb"><b>Security considerations:</b> </p> <p id="../Impala/docs/topics/impala_show.xml_show_security">' + 
      '        When authorization is enabled, the output of the <span class="sql-docs-inline-code">SHOW</span>  statement is limited to those' + 
      '        objects for which you have some privilege. There might be other database, tables, and so on, but their' + 
      '        names are concealed. If you believe an object exists but you cannot see it in the <span class="sql-docs-inline-code">SHOW</span> ' + 
      '        output, check with the system administrator if you need to be granted a new privilege for that object. See' + 
      '        <span>authorization</span> for how to set up authorization and add' + 
      '        privileges for specific kinds of objects.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p>' + 
      '        Because Kudu tables do not have characteristics derived from HDFS, such' + 
      '        as number of files, file format, and HDFS cache status, the output of' + 
      '        <span class="sql-docs-inline-code">SHOW TABLE STATS</span>  reflects different characteristics' + 
      '        that apply to Kudu tables. If the Kudu table is created with the' + 
      '        clause <span class="sql-docs-inline-code">PARTITIONS 20</span> , then the result set of' + 
      '        <span class="sql-docs-inline-code">SHOW TABLE STATS</span>  consists of 20 rows, each representing' + 
      '        one of the numbered partitions. For example:' + 
      '      </p> <div class="sql-docs-code-block">show table stats kudu_table;<br/>+--------+-----------+----------+-----------------------+------------+<br/>| # Rows | Start Key | Stop Key | Leader Replica        | # Replicas |<br/>+--------+-----------+----------+-----------------------+------------+<br/>| -1     |           | 00000001 | host.example.com:7050 | 3          |<br/>| -1     | 00000001  | 00000002 | host.example.com:7050 | 3          |<br/>| -1     | 00000002  | 00000003 | host.example.com:7050 | 3          |<br/>| -1     | 00000003  | 00000004 | host.example.com:7050 | 3          |<br/>| -1     | 00000004  | 00000005 | host.example.com:7050 | 3          |<br/>...<br/></div><p>' + 
      '        Impala does not compute the number of rows for each partition for' + 
      '        Kudu tables. Therefore, you do not need to re-run <span class="sql-docs-inline-code">COMPUTE STATS</span> ' + 
      '        when you see -1 in the <span class="sql-docs-inline-code"># Rows</span>  column of the output from' + 
      '        <span class="sql-docs-inline-code">SHOW TABLE STATS</span> . That column always shows -1 for' + 
      '        all Kudu tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '        The following examples show how the <span class="sql-docs-inline-code">SHOW TABLE STATS</span>  statement displays physical' + 
      '        information about a table and the associated data files:' + 
      '      </p> <div class="sql-docs-code-block">show table stats store_sales;<br/>+-------+--------+----------+--------------+--------+-------------------+<br/>| #Rows | #Files | Size     | Bytes Cached | Format | Incremental stats |<br/>+-------+--------+----------+--------------+--------+-------------------+<br/>| -1    | 1      | 370.45MB | NOT CACHED   | TEXT   | false             |<br/>+-------+--------+----------+--------------+--------+-------------------+<br/><br/>show table stats customer;<br/>+-------+--------+---------+--------------+--------+-------------------+<br/>| #Rows | #Files | Size    | Bytes Cached | Format | Incremental stats |<br/>+-------+--------+---------+--------------+--------+-------------------+<br/>| -1    | 1      | 12.60MB | NOT CACHED   | TEXT   | false             |<br/>+-------+--------+---------+--------------+--------+-------------------+<br/></div><p>' + 
      '        The following example shows how, after a <span class="sql-docs-inline-code">COMPUTE STATS</span>  or <span class="sql-docs-inline-code">COMPUTE INCREMENTAL' + 
      '        STATS</span>  statement, the <span class="sql-docs-inline-code">#Rows</span>  field is now filled in. Because the' + 
      '        <span class="sql-docs-inline-code">STORE_SALES</span>  table in this example is not partitioned, the <span class="sql-docs-inline-code">COMPUTE INCREMENTAL' + 
      '        STATS</span>  statement produces regular stats rather than incremental stats, therefore the' + 
      '        <span class="sql-docs-inline-code">Incremental stats</span>  field remains <span class="sql-docs-inline-code">false</span> .' + 
      '      </p> <div class="sql-docs-code-block">compute stats customer;<br/>+------------------------------------------+<br/>| summary                                  |<br/>+------------------------------------------+<br/>| Updated 1 partition(s) and 18 column(s). |<br/>+------------------------------------------+<br/><br/>show table stats customer;<br/>+--------+--------+---------+--------------+--------+-------------------+<br/>| #Rows  | #Files | Size    | Bytes Cached | Format | Incremental stats |<br/>+--------+--------+---------+--------------+--------+-------------------+<br/>| 100000 | 1      | 12.60MB | NOT CACHED   | TEXT   | false             |<br/>+--------+--------+---------+--------------+--------+-------------------+<br/><br/>compute incremental stats store_sales;<br/>+------------------------------------------+<br/>| summary                                  |<br/>+------------------------------------------+<br/>| Updated 1 partition(s) and 23 column(s). |<br/>+------------------------------------------+<br/><br/>show table stats store_sales;<br/>+---------+--------+----------+--------------+--------+-------------------+<br/>| #Rows   | #Files | Size     | Bytes Cached | Format | Incremental stats |<br/>+---------+--------+----------+--------------+--------+-------------------+<br/>| 2880404 | 1      | 370.45MB | NOT CACHED   | TEXT   | false             |<br/>+---------+--------+----------+--------------+--------+-------------------+<br/></div><p id="../Impala/docs/topics/impala_show.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '        The user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '        typically the <span class="sql-docs-inline-code">impala</span>  user, must have read and execute' + 
      '        permissions for all directories that are part of the table.' + 
      '        (A table could span multiple different HDFS directories if it is partitioned.' + 
      '        The directories could be widely scattered because a partition can reside' + 
      '        in an arbitrary HDFS directory based on its <span class="sql-docs-inline-code">LOCATION</span>  attribute.)' + 
      '        The Impala user must also have execute' + 
      '        permission for the database directory, and any parent directories of the database directory in HDFS.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_compute_stats.xml#compute_stats">COMPUTE STATS Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_column_stats"><h4>SHOW COLUMN STATS Statement</h4> </a></p> <p>' + 
      '        See <span>perf stats</span> for usage information and examples.' + 
      '      </p> </div> </div> <div id="../Impala/docs/topics/impala_show.xml_show_column_stats"><h4>SHOW COLUMN STATS Statement</h4> <div><p>' + 
      '        The <span class="sql-docs-inline-code">SHOW TABLE STATS</span>  and <span class="sql-docs-inline-code">SHOW COLUMN STATS</span>  variants are important for' + 
      '        tuning performance and diagnosing performance issues, especially with the largest tables and the most' + 
      '        complex join queries.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_security_blurb"><b>Security considerations:</b> </p> <p id="../Impala/docs/topics/impala_show.xml_show_security">' + 
      '        When authorization is enabled, the output of the <span class="sql-docs-inline-code">SHOW</span>  statement is limited to those' + 
      '        objects for which you have some privilege. There might be other database, tables, and so on, but their' + 
      '        names are concealed. If you believe an object exists but you cannot see it in the <span class="sql-docs-inline-code">SHOW</span> ' + 
      '        output, check with the system administrator if you need to be granted a new privilege for that object. See' + 
      '        <span>authorization</span> for how to set up authorization and add' + 
      '        privileges for specific kinds of objects.' + 
      '      </p> <p>' + 
      '        The output for <span class="sql-docs-inline-code">SHOW COLUMN STATS</span>  includes' + 
      '        the relevant information for Kudu tables.' + 
      '        The information for column statistics that originates in the' + 
      '        underlying Kudu storage layer is also represented in the' + 
      '        metastore database that Impala uses.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '        The following examples show the output of the <span class="sql-docs-inline-code">SHOW COLUMN STATS</span>  statement for some tables,' + 
      '        before the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement is run. Impala deduces some information, such as' + 
      '        maximum and average size for fixed-length columns, and leaves and unknown values as <span class="sql-docs-inline-code">-1</span> .' + 
      '      </p> <div class="sql-docs-code-block">show column stats customer;<br/>+------------------------+--------+------------------+--------+----------+----------+<br/>| Column                 | Type   | #Distinct Values | #Nulls | Max Size | Avg Size |<br/>+------------------------+--------+------------------+--------+----------+----------+<br/>| c_customer_sk          | INT    | -1               | -1     | 4        | 4        |<br/>| c_customer_id          | STRING | -1               | -1     | -1       | -1       |<br/>| c_current_cdemo_sk     | INT    | -1               | -1     | 4        | 4        |<br/>| c_current_hdemo_sk     | INT    | -1               | -1     | 4        | 4        |<br/>| c_current_addr_sk      | INT    | -1               | -1     | 4        | 4        |<br/>| c_first_shipto_date_sk | INT    | -1               | -1     | 4        | 4        |<br/>| c_first_sales_date_sk  | INT    | -1               | -1     | 4        | 4        |<br/>| c_salutation           | STRING | -1               | -1     | -1       | -1       |<br/>| c_first_name           | STRING | -1               | -1     | -1       | -1       |<br/>| c_last_name            | STRING | -1               | -1     | -1       | -1       |<br/>| c_preferred_cust_flag  | STRING | -1               | -1     | -1       | -1       |<br/>| c_birth_day            | INT    | -1               | -1     | 4        | 4        |<br/>| c_birth_month          | INT    | -1               | -1     | 4        | 4        |<br/>| c_birth_year           | INT    | -1               | -1     | 4        | 4        |<br/>| c_birth_country        | STRING | -1               | -1     | -1       | -1       |<br/>| c_login                | STRING | -1               | -1     | -1       | -1       |<br/>| c_email_address        | STRING | -1               | -1     | -1       | -1       |<br/>| c_last_review_date     | STRING | -1               | -1     | -1       | -1       |<br/>+------------------------+--------+------------------+--------+----------+----------+<br/><br/>show column stats store_sales;<br/>+-----------------------+-------+------------------+--------+----------+----------+<br/>| Column                | Type  | #Distinct Values | #Nulls | Max Size | Avg Size |<br/>+-----------------------+-------+------------------+--------+----------+----------+<br/>| ss_sold_date_sk       | INT   | -1               | -1     | 4        | 4        |<br/>| ss_sold_time_sk       | INT   | -1               | -1     | 4        | 4        |<br/>| ss_item_sk            | INT   | -1               | -1     | 4        | 4        |<br/>| ss_customer_sk        | INT   | -1               | -1     | 4        | 4        |<br/>| ss_cdemo_sk           | INT   | -1               | -1     | 4        | 4        |<br/>| ss_hdemo_sk           | INT   | -1               | -1     | 4        | 4        |<br/>| ss_addr_sk            | INT   | -1               | -1     | 4        | 4        |<br/>| ss_store_sk           | INT   | -1               | -1     | 4        | 4        |<br/>| ss_promo_sk           | INT   | -1               | -1     | 4        | 4        |<br/>| ss_ticket_number      | INT   | -1               | -1     | 4        | 4        |<br/>| ss_quantity           | INT   | -1               | -1     | 4        | 4        |<br/>| ss_wholesale_cost     | FLOAT | -1               | -1     | 4        | 4        |<br/>| ss_list_price         | FLOAT | -1               | -1     | 4        | 4        |<br/>| ss_sales_price        | FLOAT | -1               | -1     | 4        | 4        |<br/>| ss_ext_discount_amt   | FLOAT | -1               | -1     | 4        | 4        |<br/>| ss_ext_sales_price    | FLOAT | -1               | -1     | 4        | 4        |<br/>| ss_ext_wholesale_cost | FLOAT | -1               | -1     | 4        | 4        |<br/>| ss_ext_list_price     | FLOAT | -1               | -1     | 4        | 4        |<br/>| ss_ext_tax            | FLOAT | -1               | -1     | 4        | 4        |<br/>| ss_coupon_amt         | FLOAT | -1               | -1     | 4        | 4        |<br/>| ss_net_paid           | FLOAT | -1               | -1     | 4        | 4        |<br/>| ss_net_paid_inc_tax   | FLOAT | -1               | -1     | 4        | 4        |<br/>| ss_net_profit         | FLOAT | -1               | -1     | 4        | 4        |<br/>+-----------------------+-------+------------------+--------+----------+----------+<br/></div><p>' + 
      '        The following examples show the output of the <span class="sql-docs-inline-code">SHOW COLUMN STATS</span>  statement for some tables,' + 
      '        after the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement is run. Now most of the <span class="sql-docs-inline-code">-1</span>  values are' + 
      '        changed to reflect the actual table data. The <span class="sql-docs-inline-code">#Nulls</span>  column remains <span class="sql-docs-inline-code">-1</span> ' + 
      '        because Impala does not use the number of <span class="sql-docs-inline-code">NULL</span>  values to influence query planning.' + 
      '      </p> <div class="sql-docs-code-block">compute stats customer;<br/>+------------------------------------------+<br/>| summary                                  |<br/>+------------------------------------------+<br/>| Updated 1 partition(s) and 18 column(s). |<br/>+------------------------------------------+<br/><br/>compute stats store_sales;<br/>+------------------------------------------+<br/>| summary                                  |<br/>+------------------------------------------+<br/>| Updated 1 partition(s) and 23 column(s). |<br/>+------------------------------------------+<br/><br/>show column stats customer;<br/>+------------------------+--------+------------------+--------+----------+--------+<br/>| Column                 | Type   | #Distinct Values | #Nulls | Max Size | Avg Size<br/>+------------------------+--------+------------------+--------+----------+--------+<br/>| c_customer_sk          | INT    | 139017           | -1     | 4        | 4      |<br/>| c_customer_id          | STRING | 111904           | -1     | 16       | 16     |<br/>| c_current_cdemo_sk     | INT    | 95837            | -1     | 4        | 4      |<br/>| c_current_hdemo_sk     | INT    | 8097             | -1     | 4        | 4      |<br/>| c_current_addr_sk      | INT    | 57334            | -1     | 4        | 4      |<br/>| c_first_shipto_date_sk | INT    | 4374             | -1     | 4        | 4      |<br/>| c_first_sales_date_sk  | INT    | 4409             | -1     | 4        | 4      |<br/>| c_salutation           | STRING | 7                | -1     | 4        | 3.1308 |<br/>| c_first_name           | STRING | 3887             | -1     | 11       | 5.6356 |<br/>| c_last_name            | STRING | 4739             | -1     | 13       | 5.9106 |<br/>| c_preferred_cust_flag  | STRING | 3                | -1     | 1        | 0.9656 |<br/>| c_birth_day            | INT    | 31               | -1     | 4        | 4      |<br/>| c_birth_month          | INT    | 12               | -1     | 4        | 4      |<br/>| c_birth_year           | INT    | 71               | -1     | 4        | 4      |<br/>| c_birth_country        | STRING | 205              | -1     | 20       | 8.4001 |<br/>| c_login                | STRING | 1                | -1     | 0        | 0      |<br/>| c_email_address        | STRING | 94492            | -1     | 46       | 26.485 |<br/>| c_last_review_date     | STRING | 349              | -1     | 7        | 6.7561 |<br/>+------------------------+--------+------------------+--------+----------+--------+<br/><br/>show column stats store_sales;<br/>+-----------------------+-------+------------------+--------+----------+----------+<br/>| Column                | Type  | #Distinct Values | #Nulls | Max Size | Avg Size |<br/>+-----------------------+-------+------------------+--------+----------+----------+<br/>| ss_sold_date_sk       | INT   | 4395             | -1     | 4        | 4        |<br/>| ss_sold_time_sk       | INT   | 63617            | -1     | 4        | 4        |<br/>| ss_item_sk            | INT   | 19463            | -1     | 4        | 4        |<br/>| ss_customer_sk        | INT   | 122720           | -1     | 4        | 4        |<br/>| ss_cdemo_sk           | INT   | 242982           | -1     | 4        | 4        |<br/>| ss_hdemo_sk           | INT   | 8097             | -1     | 4        | 4        |<br/>| ss_addr_sk            | INT   | 70770            | -1     | 4        | 4        |<br/>| ss_store_sk           | INT   | 6                | -1     | 4        | 4        |<br/>| ss_promo_sk           | INT   | 355              | -1     | 4        | 4        |<br/>| ss_ticket_number      | INT   | 304098           | -1     | 4        | 4        |<br/>| ss_quantity           | INT   | 105              | -1     | 4        | 4        |<br/>| ss_wholesale_cost     | FLOAT | 9600             | -1     | 4        | 4        |<br/>| ss_list_price         | FLOAT | 22191            | -1     | 4        | 4        |<br/>| ss_sales_price        | FLOAT | 20693            | -1     | 4        | 4        |<br/>| ss_ext_discount_amt   | FLOAT | 228141           | -1     | 4        | 4        |<br/>| ss_ext_sales_price    | FLOAT | 433550           | -1     | 4        | 4        |<br/>| ss_ext_wholesale_cost | FLOAT | 406291           | -1     | 4        | 4        |<br/>| ss_ext_list_price     | FLOAT | 574871           | -1     | 4        | 4        |<br/>| ss_ext_tax            | FLOAT | 91806            | -1     | 4        | 4        |<br/>| ss_coupon_amt         | FLOAT | 228141           | -1     | 4        | 4        |<br/>| ss_net_paid           | FLOAT | 493107           | -1     | 4        | 4        |<br/>| ss_net_paid_inc_tax   | FLOAT | 653523           | -1     | 4        | 4        |<br/>| ss_net_profit         | FLOAT | 611934           | -1     | 4        | 4        |<br/>+-----------------------+-------+------------------+--------+----------+----------+<br/></div><p id="../Impala/docs/topics/impala_show.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '        The user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '        typically the <span class="sql-docs-inline-code">impala</span>  user, must have read and execute' + 
      '        permissions for all directories that are part of the table.' + 
      '        (A table could span multiple different HDFS directories if it is partitioned.' + 
      '        The directories could be widely scattered because a partition can reside' + 
      '        in an arbitrary HDFS directory based on its <span class="sql-docs-inline-code">LOCATION</span>  attribute.)' + 
      '        The Impala user must also have execute' + 
      '        permission for the database directory, and any parent directories of the database directory in HDFS.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_compute_stats.xml#compute_stats">COMPUTE STATS Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_table_stats"><h4>SHOW TABLE STATS Statement</h4> </a></p> <p>' + 
      '        See <span>perf stats</span> for usage information and examples.' + 
      '      </p> </div> </div> <div id="../Impala/docs/topics/impala_show.xml_show_partitions"><h4>SHOW PARTITIONS Statement</h4> <div><p><span class="sql-docs-inline-code">SHOW PARTITIONS</span>  displays information about each partition for a partitioned table. (The' + 
      '        output is the same as the <span class="sql-docs-inline-code">SHOW TABLE STATS</span>  statement, but <span class="sql-docs-inline-code">SHOW PARTITIONS</span> ' + 
      '        only works on a partitioned table.) Because it displays table statistics for all partitions, the output is' + 
      '        more informative if you have run the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement after creating all the' + 
      '        partitions. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_compute_stats.xml#compute_stats">COMPUTE STATS Statement</a> for details. For example, on a' + 
      '        <span class="sql-docs-inline-code">CENSUS</span>  table partitioned on the <span class="sql-docs-inline-code">YEAR</span>  column:' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_security_blurb"><b>Security considerations:</b> </p> <p id="../Impala/docs/topics/impala_show.xml_show_security">' + 
      '        When authorization is enabled, the output of the <span class="sql-docs-inline-code">SHOW</span>  statement is limited to those' + 
      '        objects for which you have some privilege. There might be other database, tables, and so on, but their' + 
      '        names are concealed. If you believe an object exists but you cannot see it in the <span class="sql-docs-inline-code">SHOW</span> ' + 
      '        output, check with the system administrator if you need to be granted a new privilege for that object. See' + 
      '        <span>authorization</span> for how to set up authorization and add' + 
      '        privileges for specific kinds of objects.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p>' + 
      '        The optional <span class="sql-docs-inline-code">RANGE</span>  clause only applies to Kudu tables. It displays only the partitions' + 
      '        defined by the <span class="sql-docs-inline-code">RANGE</span>  clause of <span class="sql-docs-inline-code">CREATE TABLE</span>  or <span class="sql-docs-inline-code">ALTER TABLE</span> .' + 
      '      </p> <p>' + 
      '        Although you can specify <span class="sql-docs-inline-code"><</span>  or' + 
      '        <span class="sql-docs-inline-code"><=</span>  comparison operators when defining' + 
      '        range partitions for Kudu tables, Kudu rewrites them if necessary' + 
      '        to represent each range as' + 
      '        <span class="sql-docs-inline-code"><span class="sql-docs-variable">low_bound</span>  <= VALUES < <span class="sql-docs-variable">high_bound</span> </span> .' + 
      '        This rewriting might involve incrementing one of the boundary values' + 
      '        or appending a <span class="sql-docs-inline-code">\\0</span>  for string values, so that the' + 
      '        partition covers the same range as originally specified.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '        The following example shows the output for a Parquet, text, or other' + 
      '        HDFS-backed table partitioned on the <span class="sql-docs-inline-code">YEAR</span>  column:' + 
      '      </p> <div class="sql-docs-code-block">[localhost:21000] > show partitions census;<br/>+-------+-------+--------+------+---------+<br/>| year  | #Rows | #Files | Size | Format  |<br/>+-------+-------+--------+------+---------+<br/>| 2000  | -1    | 0      | 0B   | TEXT    |<br/>| 2004  | -1    | 0      | 0B   | TEXT    |<br/>| 2008  | -1    | 0      | 0B   | TEXT    |<br/>| 2010  | -1    | 0      | 0B   | TEXT    |<br/>| 2011  | 4     | 1      | 22B  | TEXT    |<br/>| 2012  | 4     | 1      | 22B  | TEXT    |<br/>| 2013  | 1     | 1      | 231B | PARQUET |<br/>| Total | 9     | 3      | 275B |         |<br/>+-------+-------+--------+------+---------+<br/></div><p>' + 
      '        The following example shows the output for a Kudu table' + 
      '        using the hash partitioning mechanism. The number of' + 
      '        rows in the result set corresponds to the values used' + 
      '        in the <span class="sql-docs-inline-code">PARTITIONS <span class="sql-docs-variable">N</span> </span> ' + 
      '        clause of <span class="sql-docs-inline-code">CREATE TABLE</span> .' + 
      '      </p> <div class="sql-docs-code-block"></div><p>' + 
      '        The following example shows the output for a Kudu table' + 
      '        using the range partitioning mechanism:' + 
      '      </p> <div class="sql-docs-code-block"></div><p id="../Impala/docs/topics/impala_show.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '        The user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '        typically the <span class="sql-docs-inline-code">impala</span>  user, must have read and execute' + 
      '        permissions for all directories that are part of the table.' + 
      '        (A table could span multiple different HDFS directories if it is partitioned.' + 
      '        The directories could be widely scattered because a partition can reside' + 
      '        in an arbitrary HDFS directory based on its <span class="sql-docs-inline-code">LOCATION</span>  attribute.)' + 
      '        The Impala user must also have execute' + 
      '        permission for the database directory, and any parent directories of the database directory in HDFS.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_related_info"><b>Related information:</b> </p> <p>' + 
      '        See <span>perf stats</span> for usage information and examples.' + 
      '      </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_table_stats"><h4>SHOW TABLE STATS Statement</h4> </a>, <span>partitioning</span></p> </div> </div> <div id="../Impala/docs/topics/impala_show.xml_show_functions"><h4>SHOW FUNCTIONS Statement</h4> <div><p>' + 
      '        By default, <span class="sql-docs-inline-code">SHOW FUNCTIONS</span>  displays user-defined functions (UDFs) and <span class="sql-docs-inline-code">SHOW' + 
      '        AGGREGATE FUNCTIONS</span>  displays user-defined aggregate functions (UDAFs) associated with a particular' + 
      '        database. The output from <span class="sql-docs-inline-code">SHOW FUNCTIONS</span>  includes the argument signature of each function.' + 
      '        You specify this argument signature as part of the <span class="sql-docs-inline-code">DROP FUNCTION</span>  statement. You might have' + 
      '        several UDFs with the same name, each accepting different argument data types.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '        In Impala 2.5 and higher, the <span class="sql-docs-inline-code">SHOW FUNCTIONS</span>  output includes' + 
      '        a new column, labelled <span class="sql-docs-inline-code">is persistent</span> . This property is <span class="sql-docs-inline-code">true</span>  for' + 
      '        Impala built-in functions, C++ UDFs, and Java UDFs created using the new <span class="sql-docs-inline-code">CREATE FUNCTION</span> ' + 
      '        syntax with no signature. It is <span class="sql-docs-inline-code">false</span>  for Java UDFs created using the old' + 
      '        <span class="sql-docs-inline-code">CREATE FUNCTION</span>  syntax that includes the types for the arguments and return value.' + 
      '        Any functions with <span class="sql-docs-inline-code">false</span>  shown for this property must be created again by the' + 
      '        <span class="sql-docs-inline-code">CREATE FUNCTION</span>  statement each time the Impala catalog server is restarted.' + 
      '        See <span class="sql-docs-inline-code">CREATE FUNCTION</span>  for information on switching to the new syntax, so that' + 
      '        Java UDFs are preserved across restarts. Java UDFs that are persisted this way are also easier' + 
      '        to share across Impala and Hive.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_security_blurb"><b>Security considerations:</b> </p> <p id="../Impala/docs/topics/impala_show.xml_show_security">' + 
      '        When authorization is enabled, the output of the <span class="sql-docs-inline-code">SHOW</span>  statement is limited to those' + 
      '        objects for which you have some privilege. There might be other database, tables, and so on, but their' + 
      '        names are concealed. If you believe an object exists but you cannot see it in the <span class="sql-docs-inline-code">SHOW</span> ' + 
      '        output, check with the system administrator if you need to be granted a new privilege for that object. See' + 
      '        <span>authorization</span> for how to set up authorization and add' + 
      '        privileges for specific kinds of objects.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> <p id="../Impala/docs/topics/impala_show.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '        To display Impala built-in functions, specify the special database name <span class="sql-docs-inline-code">_impala_builtins</span> :' + 
      '      </p> <div class="sql-docs-code-block">show functions in _impala_builtins;<br/>+--------------+-------------------------------------------------+-------------+---------------+<br/>| return type  | signature                                       | binary type | is persistent |<br/>+--------------+-------------------------------------------------+-------------+---------------+<br/>| BIGINT       | abs(BIGINT)                                     | BUILTIN     | true          |<br/>| DECIMAL(*,*) | abs(DECIMAL(*,*))                               | BUILTIN     | true          |<br/>| DOUBLE       | abs(DOUBLE)                                     | BUILTIN     | true          |<br/>| FLOAT        | abs(FLOAT)                                      | BUILTIN     | true          |<br/>+----------------+----------------------------------------+<br/>...<br/><br/>show functions in _impala_builtins like \'*week*\';<br/>+-------------+------------------------------+-------------+---------------+<br/>| return type | signature                    | binary type | is persistent |<br/>+-------------+------------------------------+-------------+---------------+<br/>| INT         | dayofweek(TIMESTAMP)         | BUILTIN     | true          |<br/>| INT         | weekofyear(TIMESTAMP)        | BUILTIN     | true          |<br/>| TIMESTAMP   | weeks_add(TIMESTAMP, BIGINT) | BUILTIN     | true          |<br/>| TIMESTAMP   | weeks_add(TIMESTAMP, INT)    | BUILTIN     | true          |<br/>| TIMESTAMP   | weeks_sub(TIMESTAMP, BIGINT) | BUILTIN     | true          |<br/>| TIMESTAMP   | weeks_sub(TIMESTAMP, INT)    | BUILTIN     | true          |<br/>+-------------+------------------------------+-------------+---------------+<br/></div><p id="../Impala/docs/topics/impala_show.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_functions_overview.xml#functions">Overview of Impala Functions</a>, <span>builtins</span>,' + 
      '        <span>udfs</span>,' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_databases"><h4>SHOW DATABASES</h4> </a>,' + 
      '        <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_tables"><h4>SHOW TABLES Statement</h4> </a></p> </div> </div> ',
    children: []
  },
  {
    id: 'topics/impala_truncate_table.xml',
    title: 'TRUNCATE TABLE Statement (Impala 2.3 or higher only)',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Removes the data from an Impala table while leaving the table itself.' + 
      '    </p> <p id="../Impala/docs/topics/impala_truncate_table.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">TRUNCATE TABLE <span class="sql-docs-inline-code">[IF EXISTS]</span> [<span class="sql-docs-variable">db_name</span> .]<span class="sql-docs-variable">table_name</span> </div><p id="../Impala/docs/topics/impala_truncate_table.xml_ddl_blurb"><b>Statement type:</b>  DDL' + 
      '      </p> <p id="../Impala/docs/topics/impala_truncate_table.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      Often used to empty tables that are used during ETL cycles, after the data has been copied to another' + 
      '      table for the next stage of processing. This statement is a low-overhead alternative to dropping and' + 
      '      recreating the table, or using <span class="sql-docs-inline-code">INSERT OVERWRITE</span>  to replace the data during the' + 
      '      next ETL cycle.' + 
      '    </p> <p>' + 
      '      This statement removes all the data and associated data files in the table. It can remove data files from internal tables,' + 
      '      external tables, partitioned tables, and tables mapped to HBase or the Amazon Simple Storage Service (S3).' + 
      '      The data removal applies to the entire table, including all partitions of a partitioned table.' + 
      '    </p> <p>' + 
      '      Any statistics produced by the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement are reset when the data is removed.' + 
      '    </p> <p>' + 
      '      Make sure that you are in the correct database before truncating a table, either by issuing a' + 
      '      <span class="sql-docs-inline-code">USE</span>  statement first or by using a fully qualified name' + 
      '      <span class="sql-docs-inline-code"><span class="sql-docs-variable">db_name</span> .<span class="sql-docs-variable">table_name</span> </span> .' + 
      '    </p> <p>' + 
      '      The optional <span class="sql-docs-inline-code">IF EXISTS</span>  clause makes the statement succeed whether or not the table exists.' + 
      '      If the table does exist, it is truncated; if it does not exist, the statement has no effect. This capability is' + 
      '      useful in standardized setup scripts that are might be run both before and after some of the tables exist.' + 
      '      This clause is available in Impala 2.5 and higher.' + 
      '    </p> <p>' + 
      '      Any HDFS data files removed by this statement go into the HDFS trashcan, from which you can recover them' + 
      '      within a defined time interval if this operation turns out to be a mistake.' + 
      '    </p> <p id="../Impala/docs/topics/impala_truncate_table.xml_disk_space_blurb">' + 
      '        For other tips about managing and reclaiming Impala disk space, see' + 
      '        <span>disk space</span>.' + 
      '      </p> <p id="../Impala/docs/topics/impala_truncate_table.xml_s3_blurb"><b>Amazon S3 considerations:</b> </p> <p>' + 
      '      Although Impala cannot write new data to a table stored in the Amazon' + 
      '      S3 filesystem, the <span class="sql-docs-inline-code">TRUNCATE TABLE</span>  statement can remove data files from S3.' + 
      '      See <span>s3</span> for details about working with S3 tables.' + 
      '    </p> <p id="../Impala/docs/topics/impala_truncate_table.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_truncate_table.xml_permissions_blurb"><b>HDFS permissions:</b> </p> <p>' + 
      '      The user ID that the <span class="sql-docs-inline-code">impalad</span>  daemon runs under,' + 
      '      typically the <span class="sql-docs-inline-code">impala</span>  user, must have write' + 
      '      permission for all the files and directories that make up the table.' + 
      '    </p> <p id="../Impala/docs/topics/impala_truncate_table.xml_kudu_blurb"><b>Kudu considerations:</b> </p> <p id="../Impala/docs/topics/impala_truncate_table.xml_kudu_no_truncate_table">' + 
      '        Currently, the <span class="sql-docs-inline-code">TRUNCATE TABLE</span>  statement cannot be used with Kudu tables.' + 
      '      </p> <p id="../Impala/docs/topics/impala_truncate_table.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      The following example shows a table containing some data and with table and column statistics.' + 
      '      After the <span class="sql-docs-inline-code">TRUNCATE TABLE</span>  statement, the data is removed and the statistics' + 
      '      are reset.' + 
      '    </p> <div class="sql-docs-code-block">CREATE TABLE truncate_demo (x INT);<br/>INSERT INTO truncate_demo VALUES (1), (2), (4), (8);<br/>SELECT COUNT(*) FROM truncate_demo;<br/>+----------+<br/>| count(*) |<br/>+----------+<br/>| 4        |<br/>+----------+<br/>COMPUTE STATS truncate_demo;<br/>+-----------------------------------------+<br/>| summary                                 |<br/>+-----------------------------------------+<br/>| Updated 1 partition(s) and 1 column(s). |<br/>+-----------------------------------------+<br/>SHOW TABLE STATS truncate_demo;<br/>+-------+--------+------+--------------+-------------------+--------+-------------------+<br/>| #Rows | #Files | Size | Bytes Cached | Cache Replication | Format | Incremental stats |<br/>+-------+--------+------+--------------+-------------------+--------+-------------------+<br/>| 4     | 1      | 8B   | NOT CACHED   | NOT CACHED        | TEXT   | false             |<br/>+-------+--------+------+--------------+-------------------+--------+-------------------+<br/>SHOW COLUMN STATS truncate_demo;<br/>+--------+------+------------------+--------+----------+----------+<br/>| Column | Type | #Distinct Values | #Nulls | Max Size | Avg Size |<br/>+--------+------+------------------+--------+----------+----------+<br/>| x      | INT  | 4                | -1     | 4        | 4        |<br/>+--------+------+------------------+--------+----------+----------+<br/><br/>-- After this statement, the data and the table/column stats will be gone.<br/>TRUNCATE TABLE truncate_demo;<br/><br/>SELECT COUNT(*) FROM truncate_demo;<br/>+----------+<br/>| count(*) |<br/>+----------+<br/>| 0        |<br/>+----------+<br/>SHOW TABLE STATS truncate_demo;<br/>+-------+--------+------+--------------+-------------------+--------+-------------------+<br/>| #Rows | #Files | Size | Bytes Cached | Cache Replication | Format | Incremental stats |<br/>+-------+--------+------+--------------+-------------------+--------+-------------------+<br/>| -1    | 0      | 0B   | NOT CACHED   | NOT CACHED        | TEXT   | false             |<br/>+-------+--------+------+--------------+-------------------+--------+-------------------+<br/>SHOW COLUMN STATS truncate_demo;<br/>+--------+------+------------------+--------+----------+----------+<br/>| Column | Type | #Distinct Values | #Nulls | Max Size | Avg Size |<br/>+--------+------+------------------+--------+----------+----------+<br/>| x      | INT  | -1               | -1     | 4        | 4        |<br/>+--------+------+------------------+--------+----------+----------+<br/></div><p>' + 
      '      The following example shows how the <span class="sql-docs-inline-code">IF EXISTS</span>  clause allows the <span class="sql-docs-inline-code">TRUNCATE TABLE</span> ' + 
      '      statement to be run without error whether or not the table exists:' + 
      '    </p> <div class="sql-docs-code-block">CREATE TABLE staging_table1 (x INT, s STRING);<br/>Fetched 0 row(s) in 0.33s<br/><br/>SHOW TABLES LIKE \'staging*\';<br/>+----------------+<br/>| name           |<br/>+----------------+<br/>| staging_table1 |<br/>+----------------+<br/>Fetched 1 row(s) in 0.25s<br/><br/>-- Our ETL process involves removing all data from several staging tables<br/>-- even though some might be already dropped, or not created yet.<br/><br/>TRUNCATE TABLE IF EXISTS staging_table1;<br/>Fetched 0 row(s) in 5.04s<br/><br/>TRUNCATE TABLE IF EXISTS staging_table2;<br/>Fetched 0 row(s) in 0.25s<br/><br/>TRUNCATE TABLE IF EXISTS staging_table3;<br/>Fetched 0 row(s) in 0.25s<br/></div><p id="../Impala/docs/topics/impala_truncate_table.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#tables">Overview of Impala Tables</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_alter_table.xml#alter_table">ALTER TABLE Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_table.xml#create_table">CREATE TABLE Statement</a>,' + 
      '      <span>partitioning</span>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#internal_tables"><h4>Internal Tables</h4> </a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#external_tables"><h4>External Tables</h4> </a></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_update.xml',
    title: 'UPDATE Statement (Impala 2.8 or higher only)',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Updates an arbitrary number of rows in a Kudu table.' + 
      '      This statement only works for Impala tables that use the Kudu storage engine.' + 
      '    </p> <p id="../Impala/docs/topics/impala_update.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">UPDATE [<span class="sql-docs-variable">database_name</span> .]<span class="sql-docs-variable">table_name</span> SET <span class="sql-docs-variable">col</span> = <span class="sql-docs-variable">val</span> [, <span class="sql-docs-variable">col</span> = <span class="sql-docs-variable">val</span> ... ]<br/>  [ FROM <span class="sql-docs-variable">joined_table_refs</span> ]<br/>  [ WHERE <span class="sql-docs-variable">where_conditions</span> ]<br/></div><p id="../Impala/docs/topics/impala_update.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      None of the columns that make up the primary key can be updated by the' + 
      '      <span class="sql-docs-inline-code">SET</span>  clause.' + 
      '    </p> <p>' + 
      '      The conditions in the <span class="sql-docs-inline-code">WHERE</span>  clause are the same ones allowed' + 
      '      for the <span class="sql-docs-inline-code">SELECT</span>  statement. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_select.xml#select">SELECT Statement</a>' + 
      '      for details.' + 
      '    </p> <p>' + 
      '      If the <span class="sql-docs-inline-code">WHERE</span>  clause is omitted, all rows in the table are updated.' + 
      '    </p> <p>' + 
      '      The conditions in the <span class="sql-docs-inline-code">WHERE</span>  clause can refer to' + 
      '      any combination of primary key columns or other columns. Referring to' + 
      '      primary key columns in the <span class="sql-docs-inline-code">WHERE</span>  clause is more efficient' + 
      '      than referring to non-primary key columns.' + 
      '    </p> <p>' + 
      '      Because Kudu currently does not enforce strong consistency during concurrent DML operations,' + 
      '      be aware that the results after this statement finishes might be different than you' + 
      '      intuitively expect:' + 
      '    </p> <ul><li><p>' + 
      '          If some rows cannot be updated because their' + 
      '          some primary key columns are not found, due to their being deleted' + 
      '          by a concurrent <span class="sql-docs-inline-code">DELETE</span>  operation,' + 
      '          the statement succeeds but returns a warning.' + 
      '        </p> </li> <li><p>' + 
      '          An <span class="sql-docs-inline-code">UPDATE</span>  statement might also overlap with' + 
      '          <span class="sql-docs-inline-code">INSERT</span> , <span class="sql-docs-inline-code">UPDATE</span> ,' + 
      '          or <span class="sql-docs-inline-code">UPSERT</span>  statements running concurrently on the same table.' + 
      '          After the statement finishes, there might be more or fewer matching rows than expected' + 
      '          in the table because it is undefined whether the <span class="sql-docs-inline-code">UPDATE</span>  applies to rows' + 
      '          that are inserted or updated while the <span class="sql-docs-inline-code">UPDATE</span>  is in progress.' + 
      '        </p> </li> </ul> <p>' + 
      '      The number of affected rows is reported in an <span class="sql-docs-inline-code">impala-shell</span>  message' + 
      '      and in the query profile.' + 
      '    </p> <p>' + 
      '      The optional <span class="sql-docs-inline-code">FROM</span>  clause lets you restrict the' + 
      '      updates to only the rows in the specified table that are part' + 
      '      of the result set for a join query. The join clauses can include' + 
      '      non-Kudu tables, but the table from which the rows are deleted' + 
      '      must be a Kudu table.' + 
      '    </p> <p id="../Impala/docs/topics/impala_update.xml_dml_blurb_kudu"><b>Statement type:</b>  DML' + 
      '      </p> <div id="../Impala/docs/topics/impala_update.xml_compute_stats_next" class="sql-docs-note">' + 
      '        After adding or replacing data in a table used in performance-critical queries, issue a <span class="sql-docs-inline-code">COMPUTE' + 
      '        STATS</span>  statement to make sure all statistics are up-to-date. Consider updating statistics for a' + 
      '        table after any <span class="sql-docs-inline-code">INSERT</span> , <span class="sql-docs-inline-code">LOAD DATA</span> , or <span class="sql-docs-inline-code">CREATE TABLE AS' + 
      '        SELECT</span>  statement in Impala, or after loading data through Hive and doing a <span class="sql-docs-inline-code">REFRESH' + 
      '        <span class="sql-docs-variable">table_name</span> </span>  in Impala. This technique is especially important for tables that' + 
      '        are very large, used in join queries, or both.' + 
      '      </div> <p id="../Impala/docs/topics/impala_update.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      The following examples show how to perform a simple update' + 
      '      on a table, with or without a <span class="sql-docs-inline-code">WHERE</span>  clause:' + 
      '    </p> <div class="sql-docs-code-block">-- Set all rows to the same value for column c3.<br/>-- In this case, c1 and c2 are primary key columns<br/>-- and so cannot be updated.<br/>UPDATE kudu_table SET c3 = \'not applicable\';<br/><br/>-- Update only the rows that match the condition.<br/>UPDATE kudu_table SET c3 = NULL WHERE c1 > 100 AND c3 IS NULL;<br/><br/>-- Does not update any rows, because the WHERE condition is always false.<br/>UPDATE kudu_table SET c3 = \'impossible\' WHERE 1 = 0;<br/><br/>-- Change the values of multiple columns in a single UPDATE statement.<br/>UPDATE kudu_table SET c3 = upper(c3), c4 = FALSE, c5 = 0 WHERE c6 = TRUE;<br/></div><p>' + 
      '      The following examples show how to perform an update using the' + 
      '      <span class="sql-docs-inline-code">FROM</span>  keyword with a join clause:' + 
      '    </p> <div class="sql-docs-code-block">-- Uppercase a column value, only for rows that have<br/>-- an ID that matches the value from another table.<br/>UPDATE kudu_table SET c3 = upper(c3)<br/>  FROM kudu_table JOIN non_kudu_table<br/>  ON kudu_table.id = non_kudu_table.id;<br/><br/>-- Same effect as previous statement.<br/>-- Assign table aliases in FROM clause, then refer to<br/>-- short names elsewhere in the statement.<br/>UPDATE t1 SET c3 = upper(c3)<br/>  FROM kudu_table t1 JOIN non_kudu_table t2<br/>  ON t1.id = t2.id;<br/><br/>-- Same effect as previous statements, but more efficient.<br/>-- Use WHERE clause to skip updating values that are<br/>-- already uppercase.<br/>UPDATE t1 SET c3 = upper(c3)<br/>  FROM kudu_table t1 JOIN non_kudu_table t2<br/>  ON t1.id = t2.id<br/>  WHERE c3 != upper(c3);<br/></div><p id="../Impala/docs/topics/impala_update.xml_related_info"><b>Related information:</b> </p> <p><span>impala kudu</span>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_insert.xml#insert">INSERT Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_delete.xml#delete">DELETE Statement (Impala 2.8 or higher only)</a>, <span>upsert</span></p> </div> ',
    children: []
  },
  {
    id: 'topics/impala_use.xml',
    title: 'USE Statement',
    weight: 1,
    bodyMatch: ko.observable(),
    open: ko.observable(false),
    titleMatch: ko.observable(),
    body: '<div><p>' + 
      '      Switches the current session to a specified database. The <span class="sql-docs-variable">current database</span>  is where any' + 
      '      <span class="sql-docs-inline-code">CREATE TABLE</span> , <span class="sql-docs-inline-code">INSERT</span> , <span class="sql-docs-inline-code">SELECT</span> , or other statements act when' + 
      '      you specify a table or other object name, without prefixing it with a database name. The new current database' + 
      '      applies for the duration of the session or unti another <span class="sql-docs-inline-code">USE</span>  statement is executed.' + 
      '    </p> <p id="../Impala/docs/topics/impala_use.xml_syntax_blurb"><b>Syntax:</b> </p> <div class="sql-docs-code-block">USE <span class="sql-docs-variable">db_name</span> </div><p>' + 
      '      By default, when you connect to an Impala instance, you begin in a database named <span class="sql-docs-inline-code">default</span> .' + 
      '    </p> <p id="../Impala/docs/topics/impala_use.xml_usage_notes_blurb"><b>Usage notes:</b> </p> <p>' + 
      '      Switching the default database is convenient in the following situations:' + 
      '    </p> <ul><li>' + 
      '        To avoid qualifying each reference to a table with the database name. For example, <span class="sql-docs-inline-code">SELECT * FROM t1' + 
      '        JOIN t2</span>  rather than <span class="sql-docs-inline-code">SELECT * FROM db.t1 JOIN db.t2</span> .' + 
      '      </li> <li>' + 
      '        To do a sequence of operations all within the same database, such as creating a table, inserting data, and' + 
      '        querying the table.' + 
      '      </li> </ul> <p>' + 
      '      To start the <span class="sql-docs-inline-code">impala-shell</span>  interpreter and automatically issue a <span class="sql-docs-inline-code">USE</span> ' + 
      '      statement for a particular database, specify the option <span class="sql-docs-inline-code">-d <span class="sql-docs-variable">db_name</span> </span>  for' + 
      '      the <span class="sql-docs-inline-code">impala-shell</span>  command. The <span class="sql-docs-inline-code">-d</span>  option is useful to run SQL scripts,' + 
      '      such as setup or test scripts, against multiple databases without hardcoding a <span class="sql-docs-inline-code">USE</span>  statement' + 
      '      into the SQL source.' + 
      '    </p> <p id="../Impala/docs/topics/impala_use.xml_example_blurb"><b>Examples:</b> </p> <p>' + 
      '      See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_database.xml#create_database">CREATE DATABASE Statement</a> for examples covering <span class="sql-docs-inline-code">CREATE' + 
      '      DATABASE</span> , <span class="sql-docs-inline-code">USE</span> , and <span class="sql-docs-inline-code">DROP DATABASE</span> .' + 
      '    </p> <p id="../Impala/docs/topics/impala_use.xml_cancel_blurb_no"><b>Cancellation:</b>  Cannot be cancelled.' + 
      '      </p> <p id="../Impala/docs/topics/impala_use.xml_permissions_blurb_no"><b>HDFS permissions:</b>  This statement does not touch any HDFS files or directories,' + 
      '        therefore no HDFS permissions are required.' + 
      '      </p> <p id="../Impala/docs/topics/impala_use.xml_related_info"><b>Related information:</b> </p> <p><a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_database.xml#create_database">CREATE DATABASE Statement</a>,' + 
      '      <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_drop_database.xml#drop_database">DROP DATABASE Statement</a>, <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_show.xml#show_databases"><h4>SHOW DATABASES</h4> </a></p> </div> ',
    children: []
  }]},
{
  id: 'topics/impala_langref_unsupported.xml',
  title: 'SQL Differences Between Impala and Hive',
  weight: 1,
  bodyMatch: ko.observable(),
  open: ko.observable(false),
  titleMatch: ko.observable(),
  body: '<div><p>' + 
    '      Impala\'s SQL syntax follows the SQL-92 standard, and includes many industry extensions in areas such as' + 
    '      built-in functions. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_porting.xml#porting">Porting SQL from Other Database Systems to Impala</a> for a general discussion of adapting SQL' + 
    '      code from a variety of database systems to Impala.' + 
    '    </p> <p>' + 
    '      Because Impala and Hive share the same metastore database and their tables are often used interchangeably,' + 
    '      the following section covers differences between Impala and Hive in detail.' + 
    '    </p> </div> <div id="../Impala/docs/topics/impala_langref_unsupported.xml_langref_hiveql_unsupported"><h4>HiveQL Features not Available in Impala</h4> <div><p>' + 
    '        The current release of Impala does not support the following SQL features that you might be familiar with' + 
    '        from HiveQL:' + 
    '      </p> <ul><li>' + 
    '          Extensibility mechanisms such as <span class="sql-docs-inline-code">TRANSFORM</span> , custom file formats, or custom SerDes.' + 
    '        </li> <li>' + 
    '          The <span class="sql-docs-inline-code">DATE</span>  data type.' + 
    '        </li> <li>' + 
    '          XML and JSON functions.' + 
    '        </li> <li>' + 
    '          Certain aggregate functions from HiveQL: <span class="sql-docs-inline-code">covar_pop</span> , <span class="sql-docs-inline-code">covar_samp</span> ,' + 
    '          <span class="sql-docs-inline-code">corr</span> , <span class="sql-docs-inline-code">percentile</span> , <span class="sql-docs-inline-code">percentile_approx</span> ,' + 
    '          <span class="sql-docs-inline-code">histogram_numeric</span> , <span class="sql-docs-inline-code">collect_set</span> ; Impala supports the set of aggregate' + 
    '          functions listed in <span>aggregate functions</span> and analytic' + 
    '          functions listed in <span>analytic functions</span>.' + 
    '        </li> <li>' + 
    '          Sampling.' + 
    '        </li> <li>' + 
    '          Lateral views. In Impala 2.3 and higher, Impala supports queries on complex types' + 
    '          (<span class="sql-docs-inline-code">STRUCT</span> , <span class="sql-docs-inline-code">ARRAY</span> , or <span class="sql-docs-inline-code">MAP</span> ), using join notation' + 
    '          rather than the <span class="sql-docs-inline-code">EXPLODE()</span>  keyword.' + 
    '          See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_complex_types.xml#complex_types">Complex Types (Impala 2.3 or higher only)</a> for details about Impala support for complex types.' + 
    '        </li> <li>' + 
    '          Multiple <span class="sql-docs-inline-code">DISTINCT</span>  clauses per query, although Impala includes some workarounds for this' + 
    '          limitation.' + 
    '          <div id="../Impala/docs/topics/impala_langref_unsupported.xml_multiple_count_distinct" class="sql-docs-note"><p>' + 
    '          By default, Impala only allows a single <span class="sql-docs-inline-code">COUNT(DISTINCT <span class="sql-docs-variable">columns</span> )</span> ' + 
    '          expression in each query.' + 
    '        </p> <p>' + 
    '          If you do not need precise accuracy, you can produce an estimate of the distinct values for a column by' + 
    '          specifying <span class="sql-docs-inline-code">NDV(<span class="sql-docs-variable">column</span> )</span> ; a query can contain multiple instances of' + 
    '          <span class="sql-docs-inline-code">NDV(<span class="sql-docs-variable">column</span> )</span> . To make Impala automatically rewrite' + 
    '          <span class="sql-docs-inline-code">COUNT(DISTINCT)</span>  expressions to <span class="sql-docs-inline-code">NDV()</span> , enable the' + 
    '          <span class="sql-docs-inline-code">APPX_COUNT_DISTINCT</span>  query option.' + 
    '        </p> <p>' + 
    '          To produce the same result as multiple <span class="sql-docs-inline-code">COUNT(DISTINCT)</span>  expressions, you can use the' + 
    '          following technique for queries involving a single table:' + 
    '        </p> <div class="sql-docs-code-block">select v1.c1 result1, v2.c1 result2 from<br/>  (select count(distinct col1) as c1 from t1) v1<br/>    cross join<br/>  (select count(distinct col2) as c1 from t1) v2;<br/></div><p>' + 
    '          Because <span class="sql-docs-inline-code">CROSS JOIN</span>  is an expensive operation, prefer to use the <span class="sql-docs-inline-code">NDV()</span> ' + 
    '          technique wherever practical.' + 
    '        </p> </div> </li> </ul> <p>' + 
    '        User-defined functions (UDFs) are supported starting in Impala 1.2. See <span>udfs</span>' + 
    '        for full details on Impala UDFs.' + 
    '        <ul><li><p>' + 
    '              Impala supports high-performance UDFs written in C++, as well as reusing some Java-based Hive UDFs.' + 
    '            </p> </li> <li><p>' + 
    '              Impala supports scalar UDFs and user-defined aggregate functions (UDAFs). Impala does not currently' + 
    '              support user-defined table generating functions (UDTFs).' + 
    '            </p> </li> <li><p>' + 
    '              Only Impala-supported column types are supported in Java-based UDFs.' + 
    '            </p> </li> <li><p id="../Impala/docs/topics/impala_langref_unsupported.xml_current_user_caveat">' + 
    '        The Hive <span class="sql-docs-inline-code">current_user()</span>  function cannot be' + 
    '        called from a Java UDF through Impala.' + 
    '      </p> </li> </ul> </p> <p>' + 
    '        Impala does not currently support these HiveQL statements:' + 
    '      </p> <ul><li><span class="sql-docs-inline-code">ANALYZE TABLE</span>  (the Impala equivalent is <span class="sql-docs-inline-code">COMPUTE STATS</span> )' + 
    '        </li> <li><span class="sql-docs-inline-code">DESCRIBE COLUMN</span> </li> <li><span class="sql-docs-inline-code">DESCRIBE DATABASE</span> </li> <li><span class="sql-docs-inline-code">EXPORT TABLE</span> </li> <li><span class="sql-docs-inline-code">IMPORT TABLE</span> </li> <li><span class="sql-docs-inline-code">SHOW TABLE EXTENDED</span> </li> <li><span class="sql-docs-inline-code">SHOW TBLPROPERTIES</span> </li> <li><span class="sql-docs-inline-code">SHOW INDEXES</span> </li> <li><span class="sql-docs-inline-code">SHOW COLUMNS</span> </li> <li><span class="sql-docs-inline-code">INSERT OVERWRITE DIRECTORY</span> ; use <span class="sql-docs-inline-code">INSERT OVERWRITE <span class="sql-docs-variable">table_name</span> </span> ' + 
    '          or <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  to materialize query results into the HDFS directory associated' + 
    '          with an Impala table.' + 
    '        </li> </ul> <p>' + 
    '        Impala respects the <span class="sql-docs-inline-code">serialization.null.format</span>  table' + 
    '        property only for TEXT tables and ignores the property for Parquet and' + 
    '        other formats. Hive respects the <span class="sql-docs-inline-code">serialization.null.format</span> ' + 
    '        property for Parquet and other formats and converts matching values' + 
    '        to NULL during the scan. See  for' + 
    '        using the table property in Impala.' + 
    '      </p> </div> </div> <div id="../Impala/docs/topics/impala_langref_unsupported.xml_langref_hiveql_semantics"><h4>Semantic Differences Between Impala and HiveQL Features</h4> <div><p>' + 
    '        This section covers instances where Impala and Hive have similar functionality, sometimes including the' + 
    '        same syntax, but there are differences in the runtime semantics of those features.' + 
    '      </p> <p><b>Security:</b> </p> <p>' + 
    '        Impala utilizes the  authorization framework, which provides fine-grained role-based access control' + 
    '        to protect data against unauthorized access or tampering.' + 
    '      </p> <p>' + 
    '        The Hive component now includes Sentry-enabled <span class="sql-docs-inline-code">GRANT</span> ,' + 
    '        <span class="sql-docs-inline-code">REVOKE</span> , and <span class="sql-docs-inline-code">CREATE/DROP ROLE</span>  statements. Earlier Hive releases had a' + 
    '        privilege system with <span class="sql-docs-inline-code">GRANT</span>  and <span class="sql-docs-inline-code">REVOKE</span>  statements that were primarily' + 
    '        intended to prevent accidental deletion of data, rather than a security mechanism to protect against' + 
    '        malicious users.' + 
    '      </p> <p>' + 
    '        Impala can make use of privileges set up through Hive <span class="sql-docs-inline-code">GRANT</span>  and <span class="sql-docs-inline-code">REVOKE</span>  statements.' + 
    '        Impala has its own <span class="sql-docs-inline-code">GRANT</span>  and <span class="sql-docs-inline-code">REVOKE</span>  statements in Impala 2.0 and higher.' + 
    '        See <span>authorization</span> for the details of authorization in Impala, including' + 
    '        how to switch from the original policy file-based privilege model to the Sentry service using privileges' + 
    '        stored in the metastore database.' + 
    '      </p> <p><b>SQL statements and clauses:</b> </p> <p>' + 
    '        The semantics of Impala SQL statements varies from HiveQL in some cases where they use similar SQL' + 
    '        statement and clause names:' + 
    '      </p> <ul><li>' + 
    '          Impala uses different syntax and names for query hints, <span class="sql-docs-inline-code">[SHUFFLE]</span>  and' + 
    '          <span class="sql-docs-inline-code">[NOSHUFFLE]</span>  rather than <span class="sql-docs-inline-code">MapJoin</span>  or <span class="sql-docs-inline-code">StreamJoin</span> . See' + 
    '          <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_joins.xml#joins">Joins in Impala SELECT Statements</a> for the Impala details.' + 
    '        </li> <li>' + 
    '          Impala does not expose MapReduce specific features of <span class="sql-docs-inline-code">SORT BY</span> , <span class="sql-docs-inline-code">DISTRIBUTE' + 
    '          BY</span> , or <span class="sql-docs-inline-code">CLUSTER BY</span> .' + 
    '        </li> <li>' + 
    '          Impala does not require queries to include a <span class="sql-docs-inline-code">FROM</span>  clause.' + 
    '        </li> </ul> <p><b>Data types:</b> </p> <ul><li>' + 
    '          Impala supports a limited set of implicit casts. This can help avoid undesired results from unexpected' + 
    '          casting behavior.' + 
    '          <ul><li>' + 
    '              Impala does not implicitly cast between string and numeric or Boolean types. Always use' + 
    '              <span class="sql-docs-inline-code">CAST()</span>  for these conversions.' + 
    '            </li> <li>' + 
    '              Impala does perform implicit casts among the numeric types, when going from a smaller or less precise' + 
    '              type to a larger or more precise one. For example, Impala will implicitly convert a' + 
    '              <span class="sql-docs-inline-code">SMALLINT</span>  to a <span class="sql-docs-inline-code">BIGINT</span>  or <span class="sql-docs-inline-code">FLOAT</span> , but to convert from' + 
    '              <span class="sql-docs-inline-code">DOUBLE</span>  to <span class="sql-docs-inline-code">FLOAT</span>  or <span class="sql-docs-inline-code">INT</span>  to <span class="sql-docs-inline-code">TINYINT</span> ' + 
    '              requires a call to <span class="sql-docs-inline-code">CAST()</span>  in the query.' + 
    '            </li> <li>' + 
    '              Impala does perform implicit casts from string to timestamp. Impala has a restricted set of literal' + 
    '              formats for the <span class="sql-docs-inline-code">TIMESTAMP</span>  data type and the <span class="sql-docs-inline-code">from_unixtime()</span>  format' + 
    '              string; see <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_timestamp.xml#timestamp">TIMESTAMP Data Type</a> for details.' + 
    '            </li> </ul> <p>' + 
    '            See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_datatypes.xml#datatypes">Data Types</a> for full details on implicit and explicit casting for' + 
    '            all types, and <span>conversion functions</span> for details about' + 
    '            the <span class="sql-docs-inline-code">CAST()</span>  function.' + 
    '          </p> </li> <li>' + 
    '          Impala does not store or interpret timestamps using the local timezone, to avoid undesired results from' + 
    '          unexpected time zone issues. Timestamps are stored and interpreted relative to UTC. This difference can' + 
    '          produce different results for some calls to similarly named date/time functions between Impala and Hive.' + 
    '          See <span>datetime functions</span> for details about the Impala' + 
    '          functions. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_timestamp.xml#timestamp">TIMESTAMP Data Type</a> for a discussion of how Impala handles' + 
    '          time zones, and configuration options you can use to make Impala match the Hive behavior more closely' + 
    '          when dealing with Parquet-encoded <span class="sql-docs-inline-code">TIMESTAMP</span>  data or when converting between' + 
    '          the local time zone and UTC.' + 
    '        </li> <li>' + 
    '          The Impala <span class="sql-docs-inline-code">TIMESTAMP</span>  type can represent dates ranging from 1400-01-01 to 9999-12-31.' + 
    '          This is different from the Hive date range, which is 0000-01-01 to 9999-12-31.' + 
    '        </li> <li><p id="../Impala/docs/topics/impala_langref_unsupported.xml_int_overflow_behavior">' + 
    '        Impala does not return column overflows as <span class="sql-docs-inline-code">NULL</span> , so that customers can distinguish' + 
    '        between <span class="sql-docs-inline-code">NULL</span>  data and overflow conditions similar to how they do so with traditional' + 
    '        database systems. Impala returns the largest or smallest value in the range for the type. For example,' + 
    '        valid values for a <span class="sql-docs-inline-code">tinyint</span>  range from -128 to 127. In Impala, a <span class="sql-docs-inline-code">tinyint</span> ' + 
    '        with a value of -200 returns -128 rather than <span class="sql-docs-inline-code">NULL</span> . A <span class="sql-docs-inline-code">tinyint</span>  with a' + 
    '        value of 200 returns 127.' + 
    '      </p> </li> </ul> <p><b>Miscellaneous features:</b> </p> <ul><li>' + 
    '          Impala does not provide virtual columns.' + 
    '        </li> <li>' + 
    '          Impala does not expose locking.' + 
    '        </li> <li>' + 
    '          Impala does not expose some configuration properties.' + 
    '        </li> </ul> </div> </div> ',
  children: []
},
{
  id: 'topics/impala_porting.xml',
  title: 'Porting SQL from Other Database Systems to Impala',
  weight: 1,
  bodyMatch: ko.observable(),
  open: ko.observable(false),
  titleMatch: ko.observable(),
  body: '<div><p>' + 
    '      Although Impala uses standard SQL for queries, you might need to modify SQL source when bringing applications' + 
    '      to Impala, due to variations in data types, built-in functions, vendor language extensions, and' + 
    '      Hadoop-specific syntax. Even when SQL is working correctly, you might make further minor modifications for' + 
    '      best performance.' + 
    '    </p> </div> <div id="../Impala/docs/topics/impala_porting.xml_porting_ddl_dml"><h4>Porting DDL and DML Statements</h4> <div><p>' + 
    '        When adapting SQL code from a traditional database system to Impala, expect to find a number of differences' + 
    '        in the DDL statements that you use to set up the schema. Clauses related to physical layout of files,' + 
    '        tablespaces, and indexes have no equivalent in Impala. You might restructure your schema considerably to' + 
    '        account for the Impala partitioning scheme and Hadoop file formats.' + 
    '      </p> <p>' + 
    '        Expect SQL queries to have a much higher degree of compatibility. With modest rewriting to address vendor' + 
    '        extensions and features not yet supported in Impala, you might be able to run identical or almost-identical' + 
    '        query text on both systems.' + 
    '      </p> <p>' + 
    '        Therefore, consider separating out the DDL into a separate Impala-specific setup script. Focus your reuse' + 
    '        and ongoing tuning efforts on the code for SQL queries.' + 
    '      </p> </div> </div> <div id="../Impala/docs/topics/impala_porting.xml_porting_data_types"><h4>Porting Data Types from Other Database Systems</h4> <div><ul><li><p>' + 
    '            Change any <span class="sql-docs-inline-code">VARCHAR</span> , <span class="sql-docs-inline-code">VARCHAR2</span> , and <span class="sql-docs-inline-code">CHAR</span>  columns to' + 
    '            <span class="sql-docs-inline-code">STRING</span> . Remove any length constraints from the column declarations; for example,' + 
    '            change <span class="sql-docs-inline-code">VARCHAR(32)</span>  or <span class="sql-docs-inline-code">CHAR(1)</span>  to <span class="sql-docs-inline-code">STRING</span> . Impala is' + 
    '            very flexible about the length of string values; it does not impose any length constraints' + 
    '            or do any special processing (such as blank-padding) for <span class="sql-docs-inline-code">STRING</span>  columns.' + 
    '            (In Impala 2.0 and higher, there are data types <span class="sql-docs-inline-code">VARCHAR</span>  and <span class="sql-docs-inline-code">CHAR</span> ,' + 
    '            with length constraints for both types and blank-padding for <span class="sql-docs-inline-code">CHAR</span> .' + 
    '            However, for performance reasons, it is still preferable to use <span class="sql-docs-inline-code">STRING</span> ' + 
    '            columns where practical.)' + 
    '          </p> </li> <li><p>' + 
    '            For national language character types such as <span class="sql-docs-inline-code">NCHAR</span> , <span class="sql-docs-inline-code">NVARCHAR</span> , or' + 
    '            <span class="sql-docs-inline-code">NCLOB</span> , be aware that while Impala can store and query UTF-8 character data, currently' + 
    '            some string manipulation operations only work correctly with ASCII data. See' + 
    '            <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_string.xml#string">STRING Data Type</a> for details.' + 
    '          </p> </li> <li><p>' + 
    '            Change any <span class="sql-docs-inline-code">DATE</span> , <span class="sql-docs-inline-code">DATETIME</span> , or <span class="sql-docs-inline-code">TIME</span>  columns to' + 
    '            <span class="sql-docs-inline-code">TIMESTAMP</span> . Remove any precision constraints. Remove any timezone clauses, and make' + 
    '            sure your application logic or ETL process accounts for the fact that Impala expects all' + 
    '            <span class="sql-docs-inline-code">TIMESTAMP</span>  values to be in' + 
    '            <a target="_blank" href="http://en.wikipedia.org/wiki/Coordinated_Universal_Time">Coordinated' + 
    '            Universal Time (UTC)</a>. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_timestamp.xml#timestamp">TIMESTAMP Data Type</a> for information about' + 
    '            the <span class="sql-docs-inline-code">TIMESTAMP</span>  data type, and' + 
    '            <span>datetime functions</span> for conversion functions for different' + 
    '            date and time formats.' + 
    '          </p> <p>' + 
    '            You might also need to adapt date- and time-related literal values and format strings to use the' + 
    '            supported Impala date and time formats. If you have date and time literals with different separators or' + 
    '            different numbers of <span class="sql-docs-inline-code">YY</span> , <span class="sql-docs-inline-code">MM</span> , and so on placeholders than Impala' + 
    '            expects, consider using calls to <span class="sql-docs-inline-code">regexp_replace()</span>  to transform those values to the' + 
    '            Impala-compatible format. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_timestamp.xml#timestamp">TIMESTAMP Data Type</a> for information about the' + 
    '            allowed formats for date and time literals, and' + 
    '            <span>string functions</span> for string conversion functions such as' + 
    '            <span class="sql-docs-inline-code">regexp_replace()</span> .' + 
    '          </p> <p>' + 
    '            Instead of <span class="sql-docs-inline-code">SYSDATE</span> , call the function <span class="sql-docs-inline-code">NOW()</span> .' + 
    '          </p> <p>' + 
    '            Instead of adding or subtracting directly from a date value to produce a value <span class="sql-docs-variable">N</span> ' + 
    '            days in the past or future, use an <span class="sql-docs-inline-code">INTERVAL</span>  expression, for example <span class="sql-docs-inline-code">NOW() +' + 
    '            INTERVAL 30 DAYS</span> .' + 
    '          </p> </li> <li><p>' + 
    '            Although Impala supports <span class="sql-docs-inline-code">INTERVAL</span>  expressions for datetime arithmetic, as shown in' + 
    '            <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_timestamp.xml#timestamp">TIMESTAMP Data Type</a>, <span class="sql-docs-inline-code">INTERVAL</span>  is not available as a column' + 
    '            data type in Impala. For any <span class="sql-docs-inline-code">INTERVAL</span>  values stored in tables, convert them to numeric' + 
    '            values that you can add or subtract using the functions in' + 
    '            <span>datetime functions</span>. For example, if you had a table' + 
    '            <span class="sql-docs-inline-code">DEADLINES</span>  with an <span class="sql-docs-inline-code">INT</span>  column <span class="sql-docs-inline-code">TIME_PERIOD</span> , you could' + 
    '            construct dates N days in the future like so:' + 
    '          </p> <div class="sql-docs-code-block">SELECT NOW() + INTERVAL time_period DAYS from deadlines;</div></li> <li><p>' + 
    '            For <span class="sql-docs-inline-code">YEAR</span>  columns, change to the smallest Impala integer type that has sufficient' + 
    '            range. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_datatypes.xml#datatypes">Data Types</a> for details about ranges, casting, and so on' + 
    '            for the various numeric data types.' + 
    '          </p> </li> <li><p>' + 
    '            Change any <span class="sql-docs-inline-code">DECIMAL</span>  and <span class="sql-docs-inline-code">NUMBER</span>  types. If fixed-point precision is not' + 
    '            required, you can use <span class="sql-docs-inline-code">FLOAT</span>  or <span class="sql-docs-inline-code">DOUBLE</span>  on the Impala side depending on' + 
    '            the range of values. For applications that require precise decimal values, such as financial data, you' + 
    '            might need to make more extensive changes to table structure and application logic, such as using' + 
    '            separate integer columns for dollars and cents, or encoding numbers as string values and writing UDFs' + 
    '            to manipulate them. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_datatypes.xml#datatypes">Data Types</a> for details about ranges,' + 
    '            casting, and so on for the various numeric data types.' + 
    '          </p> </li> <li><p><span class="sql-docs-inline-code">FLOAT</span> , <span class="sql-docs-inline-code">DOUBLE</span> , and <span class="sql-docs-inline-code">REAL</span>  types are supported in' + 
    '            Impala. Remove any precision and scale specifications. (In Impala, <span class="sql-docs-inline-code">REAL</span>  is just an' + 
    '            alias for <span class="sql-docs-inline-code">DOUBLE</span> ; columns declared as <span class="sql-docs-inline-code">REAL</span>  are turned into' + 
    '            <span class="sql-docs-inline-code">DOUBLE</span>  behind the scenes.) See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_datatypes.xml#datatypes">Data Types</a> for' + 
    '            details about ranges, casting, and so on for the various numeric data types.' + 
    '          </p> </li> <li><p>' + 
    '            Most integer types from other systems have equivalents in Impala, perhaps under different names such as' + 
    '            <span class="sql-docs-inline-code">BIGINT</span>  instead of <span class="sql-docs-inline-code">INT8</span> . For any that are unavailable, for example' + 
    '            <span class="sql-docs-inline-code">MEDIUMINT</span> , switch to the smallest Impala integer type that has sufficient range.' + 
    '            Remove any precision specifications. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_datatypes.xml#datatypes">Data Types</a> for details' + 
    '            about ranges, casting, and so on for the various numeric data types.' + 
    '          </p> </li> <li><p>' + 
    '            Remove any <span class="sql-docs-inline-code">UNSIGNED</span>  constraints. All Impala numeric types are signed. See' + 
    '            <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_datatypes.xml#datatypes">Data Types</a> for details about ranges, casting, and so on for the' + 
    '            various numeric data types.' + 
    '          </p> </li> <li><p>' + 
    '            For any types holding bitwise values, use an integer type with enough range to hold all the relevant' + 
    '            bits within a positive integer. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_datatypes.xml#datatypes">Data Types</a> for details about' + 
    '            ranges, casting, and so on for the various numeric data types.' + 
    '          </p> <p>' + 
    '            For example, <span class="sql-docs-inline-code">TINYINT</span>  has a maximum positive value of 127, not 256, so to manipulate' + 
    '            8-bit bitfields as positive numbers switch to the next largest type <span class="sql-docs-inline-code">SMALLINT</span> .' + 
    '          </p> <div class="sql-docs-code-block">[localhost:21000] > select cast(127*2 as tinyint);<br/>+--------------------------+<br/>| cast(127 * 2 as tinyint) |<br/>+--------------------------+<br/>| -2                       |<br/>+--------------------------+<br/>[localhost:21000] > select cast(128 as tinyint);<br/>+----------------------+<br/>| cast(128 as tinyint) |<br/>+----------------------+<br/>| -128                 |<br/>+----------------------+<br/>[localhost:21000] > select cast(127*2 as smallint);<br/>+---------------------------+<br/>| cast(127 * 2 as smallint) |<br/>+---------------------------+<br/>| 254                       |<br/>+---------------------------+</div><p>' + 
    '            Impala does not support notation such as <span class="sql-docs-inline-code">b\'0101\'</span>  for bit literals.' + 
    '          </p> </li> <li><p>' + 
    '            For BLOB values, use <span class="sql-docs-inline-code">STRING</span>  to represent <span class="sql-docs-inline-code">CLOB</span>  or' + 
    '            <span class="sql-docs-inline-code">TEXT</span>  types (character based large objects) up to 32 KB in size. Binary large objects' + 
    '            such as <span class="sql-docs-inline-code">BLOB</span> , <span class="sql-docs-inline-code">RAW</span> <span class="sql-docs-inline-code">BINARY</span> , and' + 
    '            <span class="sql-docs-inline-code">VARBINARY</span>  do not currently have an equivalent in Impala.' + 
    '          </p> </li> <li><p>' + 
    '            For Boolean-like types such as <span class="sql-docs-inline-code">BOOL</span> , use the Impala <span class="sql-docs-inline-code">BOOLEAN</span>  type.' + 
    '          </p> </li> <li><p>' + 
    '            Because Impala currently does not support composite or nested types, any spatial data types in other' + 
    '            database systems do not have direct equivalents in Impala. You could represent spatial values in string' + 
    '            format and write UDFs to process them. See <span>udfs</span> for details. Where' + 
    '            practical, separate spatial types into separate tables so that Impala can still work with the' + 
    '            non-spatial data.' + 
    '          </p> </li> <li><p>' + 
    '            Take out any <span class="sql-docs-inline-code">DEFAULT</span>  clauses. Impala can use data files produced from many different' + 
    '            sources, such as Pig, Hive, or MapReduce jobs. The fast import mechanisms of <span class="sql-docs-inline-code">LOAD DATA</span> ' + 
    '            and external tables mean that Impala is flexible about the format of data files, and Impala does not' + 
    '            necessarily validate or cleanse data before querying it. When copying data through Impala' + 
    '            <span class="sql-docs-inline-code">INSERT</span>  statements, you can use conditional functions such as <span class="sql-docs-inline-code">CASE</span>  or' + 
    '            <span class="sql-docs-inline-code">NVL</span>  to substitute some other value for <span class="sql-docs-inline-code">NULL</span>  fields; see' + 
    '            <span>conditional functions</span> for details.' + 
    '          </p> </li> <li><p>' + 
    '            Take out any constraints from your <span class="sql-docs-inline-code">CREATE TABLE</span>  and <span class="sql-docs-inline-code">ALTER TABLE</span> ' + 
    '            statements, for example <span class="sql-docs-inline-code">PRIMARY KEY</span> , <span class="sql-docs-inline-code">FOREIGN KEY</span> ,' + 
    '            <span class="sql-docs-inline-code">UNIQUE</span> , <span class="sql-docs-inline-code">NOT NULL</span> , <span class="sql-docs-inline-code">UNSIGNED</span> , or' + 
    '            <span class="sql-docs-inline-code">CHECK</span>  constraints. Impala can use data files produced from many different sources,' + 
    '            such as Pig, Hive, or MapReduce jobs. Therefore, Impala expects initial data validation to happen' + 
    '            earlier during the ETL or ELT cycle. After data is loaded into Impala tables, you can perform queries' + 
    '            to test for <span class="sql-docs-inline-code">NULL</span>  values. When copying data through Impala <span class="sql-docs-inline-code">INSERT</span> ' + 
    '            statements, you can use conditional functions such as <span class="sql-docs-inline-code">CASE</span>  or <span class="sql-docs-inline-code">NVL</span>  to' + 
    '            substitute some other value for <span class="sql-docs-inline-code">NULL</span>  fields; see' + 
    '            <span>conditional functions</span> for details.' + 
    '          </p> <p>' + 
    '            Do as much verification as practical before loading data into Impala. After data is loaded into Impala,' + 
    '            you can do further verification using SQL queries to check if values have expected ranges, if values' + 
    '            are <span class="sql-docs-inline-code">NULL</span>  or not, and so on. If there is a problem with the data, you will need to' + 
    '            re-run earlier stages of the ETL process, or do an <span class="sql-docs-inline-code">INSERT ... SELECT</span>  statement in' + 
    '            Impala to copy the faulty data to a new table and transform or filter out the bad values.' + 
    '          </p> </li> <li><p>' + 
    '            Take out any <span class="sql-docs-inline-code">CREATE INDEX</span> , <span class="sql-docs-inline-code">DROP INDEX</span> , and <span class="sql-docs-inline-code">ALTER' + 
    '            INDEX</span>  statements, and equivalent <span class="sql-docs-inline-code">ALTER TABLE</span>  statements. Remove any' + 
    '            <span class="sql-docs-inline-code">INDEX</span> , <span class="sql-docs-inline-code">KEY</span> , or <span class="sql-docs-inline-code">PRIMARY KEY</span>  clauses from' + 
    '            <span class="sql-docs-inline-code">CREATE TABLE</span>  and <span class="sql-docs-inline-code">ALTER TABLE</span>  statements. Impala is optimized for bulk' + 
    '            read operations for data warehouse-style queries, and therefore does not support indexes for its' + 
    '            tables.' + 
    '          </p> </li> <li><p>' + 
    '            Calls to built-in functions with out-of-range or otherwise incorrect arguments, return' + 
    '            <span class="sql-docs-inline-code">NULL</span>  in Impala as opposed to raising exceptions. (This rule applies even when the' + 
    '            <span class="sql-docs-inline-code">ABORT_ON_ERROR=true</span>  query option is in effect.) Run small-scale queries using' + 
    '            representative data to doublecheck that calls to built-in functions are returning expected values' + 
    '            rather than <span class="sql-docs-inline-code">NULL</span> . For example, unsupported <span class="sql-docs-inline-code">CAST</span>  operations do not' + 
    '            raise an error in Impala:' + 
    '          </p> <div class="sql-docs-code-block">select cast(\'foo\' as int);<br/>+--------------------+<br/>| cast(\'foo\' as int) |<br/>+--------------------+<br/>| NULL               |<br/>+--------------------+</div></li> <li><p>' + 
    '            For any other type not supported in Impala, you could represent their values in string format and write' + 
    '            UDFs to process them. See <span>udfs</span> for details.' + 
    '          </p> </li> <li><p>' + 
    '            To detect the presence of unsupported or unconvertable data types in data files, do initial testing' + 
    '            with the <span class="sql-docs-inline-code">ABORT_ON_ERROR=true</span>  query option in effect. This option causes queries to' + 
    '            fail immediately if they encounter disallowed type conversions. See' + 
    '            <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_abort_on_error.xml#abort_on_error">ABORT_ON_ERROR Query Option</a> for details. For example:' + 
    '          </p> <div class="sql-docs-code-block">set abort_on_error=true;<br/>select count(*) from (select * from t1);<br/>-- The above query will fail if the data files for T1 contain any<br/>-- values that can\'t be converted to the expected Impala data types.<br/>-- For example, if T1.C1 is defined as INT but the column contains<br/>-- floating-point values like 1.1, the query will return an error.</div></li> </ul> </div> </div> <div id="../Impala/docs/topics/impala_porting.xml_porting_statements"><h4>SQL Statements to Remove or Adapt</h4> <div><p>' + 
    '        Some SQL statements or clauses that you might be familiar with are not currently supported in Impala:' + 
    '      </p> <ul><li><p>' + 
    '            Impala has no <span class="sql-docs-inline-code">DELETE</span>  statement. Impala is intended for data warehouse-style operations' + 
    '            where you do bulk moves and transforms of large quantities of data. Instead of using' + 
    '            <span class="sql-docs-inline-code">DELETE</span> , use <span class="sql-docs-inline-code">INSERT OVERWRITE</span>  to entirely replace the contents of a' + 
    '            table or partition, or use <span class="sql-docs-inline-code">INSERT ... SELECT</span>  to copy a subset of data (everything but' + 
    '            the rows you intended to delete) from one table to another. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_dml.xml#dml">DML Statements</a> for' + 
    '            an overview of Impala DML statements.' + 
    '          </p> </li> <li><p>' + 
    '            Impala has no <span class="sql-docs-inline-code">UPDATE</span>  statement. Impala is intended for data warehouse-style operations' + 
    '            where you do bulk moves and transforms of large quantities of data. Instead of using' + 
    '            <span class="sql-docs-inline-code">UPDATE</span> , do all necessary transformations early in the ETL process, such as in the job' + 
    '            that generates the original data, or when copying from one table to another to convert to a particular' + 
    '            file format or partitioning scheme. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_dml.xml#dml">DML Statements</a> for an overview of Impala DML' + 
    '            statements.' + 
    '          </p> </li> <li><p>' + 
    '            Impala has no transactional statements, such as <span class="sql-docs-inline-code">COMMIT</span>  or <span class="sql-docs-inline-code">ROLLBACK</span> .' + 
    '            Impala effectively works like the <span class="sql-docs-inline-code">AUTOCOMMIT</span>  mode in some database systems, where' + 
    '            changes take effect as soon as they are made.' + 
    '          </p> </li> <li><p>' + 
    '            If your database, table, column, or other names conflict with Impala reserved words, use different' + 
    '            names or quote the names with backticks. See <span>reserved words</span>' + 
    '            for the current list of Impala reserved words.' + 
    '          </p> <p>' + 
    '            Conversely, if you use a keyword that Impala does not recognize, it might be interpreted as a table or' + 
    '            column alias. For example, in <span class="sql-docs-inline-code">SELECT * FROM t1 NATURAL JOIN t2</span> , Impala does not' + 
    '            recognize the <span class="sql-docs-inline-code">NATURAL</span>  keyword and interprets it as an alias for the table' + 
    '            <span class="sql-docs-inline-code">t1</span> . If you experience any unexpected behavior with queries, check the list of reserved' + 
    '            words to make sure all keywords in join and <span class="sql-docs-inline-code">WHERE</span>  clauses are recognized.' + 
    '          </p> </li> <li><p>' + 
    '            Impala supports subqueries only in the <span class="sql-docs-inline-code">FROM</span>  clause of a query, not within the' + 
    '            <span class="sql-docs-inline-code">WHERE</span>  clauses. Therefore, you cannot use clauses such as <span class="sql-docs-inline-code">WHERE' + 
    '            <span class="sql-docs-variable">column</span>  IN (<span class="sql-docs-variable">subquery</span> )</span> . Also, Impala does not allow' + 
    '            <span class="sql-docs-inline-code">EXISTS</span>  or <span class="sql-docs-inline-code">NOT EXISTS</span>  clauses (although <span class="sql-docs-inline-code">EXISTS</span>  is a' + 
    '            reserved keyword).' + 
    '          </p> </li> <li><p>' + 
    '            Impala supports <span class="sql-docs-inline-code">UNION</span>  and <span class="sql-docs-inline-code">UNION ALL</span>  set operators, but not' + 
    '            <span class="sql-docs-inline-code">INTERSECT</span> . <span id="../Impala/docs/topics/impala_porting.xml_union_all_vs_union" class="sql-docs-inline-code">Prefer <span class="sql-docs-inline-code">UNION ALL</span>  over <span class="sql-docs-inline-code">UNION</span>  when you know the' + 
    '        data sets are disjoint or duplicate values are not a problem; <span class="sql-docs-inline-code">UNION ALL</span>  is more efficient' + 
    '        because it avoids materializing and sorting the entire result set to eliminate duplicate values.</span> </p> </li> <li><p>' + 
    '            Within queries, Impala requires query aliases for any subqueries:' + 
    '          </p> <div class="sql-docs-code-block">-- Without the alias \'contents_of_t1\' at the end, query gives syntax error.<br/>select count(*) from (select * from t1) contents_of_t1;</div></li> <li><p>' + 
    '            When an alias is declared for an expression in a query, that alias cannot be referenced again within' + 
    '            the same query block:' + 
    '          </p> <div class="sql-docs-code-block">-- Can\'t reference AVERAGE twice in the SELECT list where it\'s defined.<br/>select avg(x) as average, average+1 from t1 group by x;<br/>ERROR: AnalysisException: couldn\'t resolve column reference: \'average\'<br/><br/>-- Although it can be referenced again later in the same query.<br/>select avg(x) as average from t1 group by x having average > 3;</div><p>' + 
    '            For Impala, either repeat the expression again, or abstract the expression into a <span class="sql-docs-inline-code">WITH</span> ' + 
    '            clause, creating named columns that can be referenced multiple times anywhere in the base query:' + 
    '          </p> <div class="sql-docs-code-block">-- The following 2 query forms are equivalent.<br/>select avg(x) as average, avg(x)+1 from t1 group by x;<br/>with avg_t as (select avg(x) average from t1 group by x) select average, average+1 from avg_t;</div></li> <li><p>' + 
    '            Impala does not support certain rarely used join types that are less appropriate for high-volume tables' + 
    '            used for data warehousing. In some cases, Impala supports join types but requires explicit syntax to' + 
    '            ensure you do not do inefficient joins of huge tables by accident. For example, Impala does not support' + 
    '            natural joins or anti-joins, and requires the <span class="sql-docs-inline-code">CROSS JOIN</span>  operator for Cartesian' + 
    '            products. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_joins.xml#joins">Joins in Impala SELECT Statements</a> for details on the syntax for Impala join clauses.' + 
    '          </p> </li> <li><p>' + 
    '            Impala has a limited choice of partitioning types. Partitions are defined based on each distinct' + 
    '            combination of values for one or more partition key columns. Impala does not redistribute or check data' + 
    '            to create evenly distributed partitions; you must choose partition key columns based on your knowledge' + 
    '            of the data volume and distribution. Adapt any tables that use range, list, hash, or key partitioning' + 
    '            to use the Impala partition syntax for <span class="sql-docs-inline-code">CREATE TABLE</span>  and <span class="sql-docs-inline-code">ALTER TABLE</span> ' + 
    '            statements. Impala partitioning is similar to range partitioning where every range has exactly one' + 
    '            value, or key partitioning where the hash function produces a separate bucket for every combination of' + 
    '            key values. See <span>partitioning</span> for usage details, and' + 
    '            <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_create_table.xml#create_table">CREATE TABLE Statement</a> and' + 
    '            <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_alter_table.xml#alter_table">ALTER TABLE Statement</a> for syntax.' + 
    '          </p> <div class="sql-docs-note">' + 
    '            Because the number of separate partitions is potentially higher than in other database systems, keep a' + 
    '            close eye on the number of partitions and the volume of data in each one; scale back the number of' + 
    '            partition key columns if you end up with too many partitions with a small volume of data in each one.' + 
    '            Remember, to distribute work for a query across a cluster, you need at least one HDFS block per node.' + 
    '            HDFS blocks are typically multiple megabytes, <span class="sql-docs-inline-code">especially</span>  for Parquet' + 
    '            files. Therefore, if each partition holds only a few megabytes of data, you are unlikely to see much' + 
    '            parallelism in the query because such a small amount of data is typically processed by a single node.' + 
    '          </div> </li> <li><p>' + 
    '            For <q>top-N</q>  queries, Impala uses the <span class="sql-docs-inline-code">LIMIT</span>  clause rather than comparing against a' + 
    '            pseudocolumn named <span class="sql-docs-inline-code">ROWNUM</span>  or <span class="sql-docs-inline-code">ROW_NUM</span> . See' + 
    '            <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_limit.xml#limit">LIMIT Clause</a> for details.' + 
    '          </p> </li> </ul> </div> </div> <div id="../Impala/docs/topics/impala_porting.xml_porting_antipatterns"><h4>SQL Constructs to Doublecheck</h4> <div><p>' + 
    '        Some SQL constructs that are supported have behavior or defaults more oriented towards convenience than' + 
    '        optimal performance. Also, sometimes machine-generated SQL, perhaps issued through JDBC or ODBC' + 
    '        applications, might have inefficiencies or exceed internal Impala limits. As you port SQL code, be alert' + 
    '        and change these things where appropriate:' + 
    '      </p> <ul><li><p>' + 
    '            A <span class="sql-docs-inline-code">CREATE TABLE</span>  statement with no <span class="sql-docs-inline-code">STORED AS</span>  clause creates data files' + 
    '            in plain text format, which is convenient for data interchange but not a good choice for high-volume' + 
    '            data with high-performance queries. See <span>file formats</span> for why and' + 
    '            how to use specific file formats for compact data and high-performance queries. Especially see' + 
    '            <span>parquet</span>, for details about the file format most heavily optimized for' + 
    '            large-scale data warehouse queries.' + 
    '          </p> </li> <li><p>' + 
    '            A <span class="sql-docs-inline-code">CREATE TABLE</span>  statement with no <span class="sql-docs-inline-code">PARTITIONED BY</span>  clause stores all the' + 
    '            data files in the same physical location, which can lead to scalability problems when the data volume' + 
    '            becomes large.' + 
    '          </p> <p>' + 
    '            On the other hand, adapting tables that were already partitioned in a different database system could' + 
    '            produce an Impala table with a high number of partitions and not enough data in each one, leading to' + 
    '            underutilization of Impala\'s parallel query features.' + 
    '          </p> <p>' + 
    '            See <span>partitioning</span> for details about setting up partitioning and' + 
    '            tuning the performance of queries on partitioned tables.' + 
    '          </p> </li> <li><p>' + 
    '            The <span class="sql-docs-inline-code">INSERT ... VALUES</span>  syntax is suitable for setting up toy tables with a few rows for' + 
    '            functional testing, but because each such statement creates a separate tiny file in HDFS, it is not a' + 
    '            scalable technique for loading megabytes or gigabytes (let alone petabytes) of data. Consider revising' + 
    '            your data load process to produce raw data files outside of Impala, then setting up Impala external' + 
    '            tables or using the <span class="sql-docs-inline-code">LOAD DATA</span>  statement to use those data files instantly in Impala' + 
    '            tables, with no conversion or indexing stage. See <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_tables.xml#external_tables"><h4>External Tables</h4> </a> and' + 
    '            <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_load_data.xml#load_data">LOAD DATA Statement</a> for details about the Impala techniques for working with' + 
    '            data files produced outside of Impala; see <span>tutorial etl</span> for examples' + 
    '            of ETL workflow for Impala.' + 
    '          </p> </li> <li><p>' + 
    '            If your ETL process is not optimized for Hadoop, you might end up with highly fragmented small data' + 
    '            files, or a single giant data file that cannot take advantage of distributed parallel queries or' + 
    '            partitioning. In this case, use an <span class="sql-docs-inline-code">INSERT ... SELECT</span>  statement to copy the data into a' + 
    '            new table and reorganize into a more efficient layout in the same operation. See' + 
    '            <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_insert.xml#insert">INSERT Statement</a> for details about the <span class="sql-docs-inline-code">INSERT</span>  statement.' + 
    '          </p> <p>' + 
    '            You can do <span class="sql-docs-inline-code">INSERT ... SELECT</span>  into a table with a more efficient file format (see' + 
    '            <span>file formats</span>) or from an unpartitioned table into a partitioned' + 
    '            one (see <span>partitioning</span>).' + 
    '          </p> </li> <li><p>' + 
    '            The number of expressions allowed in an Impala query might be smaller than for some other database' + 
    '            systems, causing failures for very complicated queries (typically produced by automated SQL' + 
    '            generators). Where practical, keep the number of expressions in the <span class="sql-docs-inline-code">WHERE</span>  clauses to' + 
    '            approximately 2000 or fewer. As a workaround, set the query option' + 
    '            <span class="sql-docs-inline-code">DISABLE_CODEGEN=true</span>  if queries fail for this reason. See' + 
    '            <a href="javascript: void(0);" class="lang-ref-link" data-target="topics/impala_disable_codegen.xml#disable_codegen">DISABLE_CODEGEN Query Option</a> for details.' + 
    '          </p> </li> <li><p>' + 
    '            If practical, rewrite <span class="sql-docs-inline-code">UNION</span>  queries to use the <span class="sql-docs-inline-code">UNION ALL</span>  operator' + 
    '            instead. <span id="../Impala/docs/topics/impala_porting.xml_union_all_vs_union" class="sql-docs-inline-code">Prefer <span class="sql-docs-inline-code">UNION ALL</span>  over <span class="sql-docs-inline-code">UNION</span>  when you know the' + 
    '        data sets are disjoint or duplicate values are not a problem; <span class="sql-docs-inline-code">UNION ALL</span>  is more efficient' + 
    '        because it avoids materializing and sorting the entire result set to eliminate duplicate values.</span> </p> </li> </ul> </div> </div> <div id="../Impala/docs/topics/impala_porting.xml_porting_next"><h4>Next Porting Steps after Verifying Syntax and Semantics</h4> <div><p>' + 
    '        Throughout this section, some of the decisions you make during the porting process also have a substantial' + 
    '        impact on performance. After your SQL code is ported and working correctly, doublecheck the' + 
    '        performance-related aspects of your schema design, physical layout, and queries to make sure that the' + 
    '        ported application is taking full advantage of Impala\'s parallelism, performance-related SQL features, and' + 
    '        integration with Hadoop components.' + 
    '      </p> <ul><li>' + 
    '          Have you run the <span class="sql-docs-inline-code">COMPUTE STATS</span>  statement on each table involved in join queries? Have' + 
    '          you also run <span class="sql-docs-inline-code">COMPUTE STATS</span>  for each table used as the source table in an <span class="sql-docs-inline-code">INSERT' + 
    '          ... SELECT</span>  or <span class="sql-docs-inline-code">CREATE TABLE AS SELECT</span>  statement?' + 
    '        </li> <li>' + 
    '          Are you using the most efficient file format for your data volumes, table structure, and query' + 
    '          characteristics?' + 
    '        </li> <li>' + 
    '          Are you using partitioning effectively? That is, have you partitioned on columns that are often used for' + 
    '          filtering in <span class="sql-docs-inline-code">WHERE</span>  clauses? Have you partitioned at the right granularity so that there' + 
    '          is enough data in each partition to parallelize the work for each query?' + 
    '        </li> <li>' + 
    '          Does your ETL process produce a relatively small number of multi-megabyte data files (good) rather than a' + 
    '          huge number of small files (bad)?' + 
    '        </li> </ul> <p>' + 
    '        See <span>performance</span> for details about the whole performance tuning' + 
    '        process.' + 
    '      </p> </div> </div> ',
  children: []
}
];